<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>余一叶知秋尽</title>
  
  
  <link href="https://pengline.github.io/atom.xml" rel="self"/>
  
  <link href="https://pengline.github.io/"/>
  <updated>2025-10-03T08:33:54.597Z</updated>
  <id>https://pengline.github.io/</id>
  
  <author>
    <name>余一叶知秋尽</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>分布式锁的应用场景和多种实现方案</title>
    <link href="https://pengline.github.io/2025/10/02/012c8567dfc94aec8d01c55acdf98396/"/>
    <id>https://pengline.github.io/2025/10/02/012c8567dfc94aec8d01c55acdf98396/</id>
    <published>2025-10-01T16:00:00.000Z</published>
    <updated>2025-10-03T08:33:54.597Z</updated>
    
    <content type="html"><![CDATA[<p>分布式锁是分布式系统中用于协调多个节点对共享资源进行互斥访问的关键机制。</p><p>核心目标：<strong>在任意时刻，只有一个节点能操作某项共享资源</strong>，从而避免数据不一致、重复处理、资源竞争等问题。</p><p>以下是分布式锁的典型使用场景：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>防止重复提交 / 幂等性控制</strong>：防止用户多次点击“支付”按钮，或网络重试（防止请求重复）</p></li><li class="lvl-2"><p><strong>秒杀 / 抢购系统</strong>：高并发下抢购限量商品（防止出现商品<strong>超卖</strong>问题）</p></li><li class="lvl-2"><p><strong>定时任务防重</strong>：多个服务实例部署了相同的定时任务（防止任务被多个节点同时执行，导致数据重复处理或资源浪费）</p></li><li class="lvl-2"><p><strong>分布式 ID 生成</strong>：Snowflake 算法中，机器 ID 需全局唯一（防止多节点启动时可能分配到相同机器 ID）</p></li><li class="lvl-2"><p><strong>缓存更新</strong>：缓存失效瞬间，大量请求穿透到数据库（预防数据库压力骤增，甚至宕机）</p></li><li class="lvl-2"><p><strong>状态机流转控制</strong>：订单状态从“待支付” → “已支付” → “已发货”，需严格顺序（并发请求可能导致状态错乱，如重复发货）</p></li><li class="lvl-2"><p><strong>分布式配置变更协调</strong>：多个服务实例需同时应用新配置（如灰度发布），实例间配置不一致导致业务异常</p></li><li class="lvl-2"><p><strong>文件/资源互斥写入</strong>：多个节点需写入同一个共享文件（如日志聚合、报表生成），导致文件内容错乱或覆盖</p></li></ul></blockquote><p><strong>为了确保分布式锁可用，至少要确保锁实现同时满足以下四个条件</strong>：</p><blockquote><ol><li class="lvl-3"><p><strong>互斥性</strong>。在任意时刻，只有一个客户端能持有锁。</p></li><li class="lvl-3"><p><strong>不发生死锁</strong>。即使有客户端在持有锁的期间崩溃而没有主动解锁，也能保证后续其他客户端能加锁。</p></li><li class="lvl-3"><p><strong>容错性</strong>。只要大部分的Redis节点正常运行，客户端就可以加锁和解锁。</p></li><li class="lvl-3"><p><strong>隔离性</strong>。加锁和解锁必须是同一个客户端，客户端自己不能把别人加的锁给解了。</p></li></ol></blockquote><p><strong>常见的实现方案有以下几种</strong>：</p><blockquote><ol><li class="lvl-3"><p><strong>基于数据库（MySQL）实现</strong>：利用数据库的唯一约束（如唯一索引）或行锁（如 <code>SELECT ... FOR UPDATE</code>）实现互斥。</p></li><li class="lvl-3"><p><strong>基于 Redis 实现</strong>：利用 Redis 的原子操作（如 <code>SET key value NX EX</code>）实现锁。</p></li><li class="lvl-3"><p><strong>基于 ZooKeeper 实现</strong>：利用 ZooKeeper 的临时顺序节点（ephemeral sequential node）和 watch 机制。</p></li><li class="lvl-3"><p><strong>基于 Etcd 实现</strong>：类似 ZooKeeper，利用 Etcd 的 Lease（租约）和 Watch 机制。</p></li><li class="lvl-3"><p><strong>其他方案</strong>：</p><ul class="lvl-3"><li class="lvl-5"><strong>Consul</strong>：基于 Raft 协议，提供 KV 存储和 Session 机制实现分布式锁。</li><li class="lvl-5"><strong>自研方案</strong>：结合多种存储（如 Redis + MySQL 双写校验），但复杂度高。</li></ul></li></ol></blockquote><table><thead><tr><th>方案</th><th>一致性</th><th>性能</th><th>可靠性</th><th>自动过期</th><th>适用场景</th></tr></thead><tbody><tr><td><strong>数据库</strong></td><td>弱</td><td>低</td><td>依赖 DB</td><td>需手动</td><td>低并发、简单场景</td></tr><tr><td><strong>Redis</strong></td><td>最终</td><td><strong>高</strong></td><td>单点风险</td><td><strong>支持</strong></td><td>高并发、性能敏感场景</td></tr><tr><td><strong>ZooKeeper</strong></td><td><strong>强</strong></td><td>中</td><td><strong>高</strong></td><td><strong>支持</strong></td><td>强一致性要求场景</td></tr><tr><td><strong>Etcd</strong></td><td><strong>强</strong></td><td>中</td><td><strong>高</strong></td><td><strong>支持</strong></td><td>云原生、K8s 生态</td></tr></tbody></table><h2 id="基于数据库实现">基于数据库实现</h2><p>利用数据库的唯一约束（如唯一索引）或行锁（如 <code>SELECT ... FOR UPDATE</code>）实现互斥。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>唯一索引法</strong>：尝试插入一条带唯一键的记录，插入成功即获得锁，失败则表示锁已被占用。</p></li><li class="lvl-2"><p><strong>乐观锁</strong>：通过版本号（version）控制并发更新。</p></li><li class="lvl-2"><p><strong>悲观锁</strong>：使用 <code>SELECT ... FOR UPDATE</code> 获取行级排他锁。</p></li></ul></blockquote><p><strong>优点</strong>：简单易懂，无需引入额外组件。</p><p><strong>缺点</strong>：</p><ul class="lvl-0"><li class="lvl-2"><p>性能较差（尤其高并发下数据库压力大）；</p></li><li class="lvl-2"><p>依赖数据库可靠性；</p></li><li class="lvl-2"><p>不支持自动过期（需额外处理死锁）；</p></li></ul><p><strong>实现案例</strong>：</p><p>通过数据库的排他锁来实现分布式锁。 基于MySQL的InnoDB引擎，可以使用以下方法来实现加锁操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 阻塞锁？ for update语句会在执行成功后立即返回，在执行失败时一直处于阻塞状态，直到成功。</span></span><br><span class="line"><span class="comment">// 锁定之后服务宕机，无法释放？使用这种方式，服务宕机之后数据库会自己把锁释放掉。</span></span><br><span class="line"><span class="comment">// 排他锁长时间不提交，就会占用数据库连接。一旦类似的连接变得多了，就可能把数据库连接池撑爆</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lock</span><span class="params">()</span>&#123;</span><br><span class="line">    connection.setAutoCommit(<span class="literal">false</span>)</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            result = select * from methodLock where method_name=xxx <span class="keyword">for</span> update;</span><br><span class="line">            <span class="keyword">if</span>(result==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解锁</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span>&#123;</span><br><span class="line">    connection.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在查询语句后面增加<code>for update (nowait)</code>，数据库会在查询过程中给数据库表增加排他锁（ InnoDB引擎在加锁的时候，只有通过唯一索引进行检索的时候才会使用行级锁，否则会使用表级锁）。当某条记录被加上排他锁之后，其他线程无法再该行记录上增加排他锁。</p><blockquote><p><strong>共享锁</strong>：由读表操作加的锁，加锁后其他用户只能获取该表或行的共享锁，不能获取排它锁，也就是说只能读不能写</p><p><strong>排它锁</strong>：由写表操作加的锁，加锁后其他用户不能获取该表或行的任何锁，典型是mysql事务中</p></blockquote><h2 id="基于-Redis-实现">基于 Redis 实现</h2><p>利用 Redis 的原子操作（如 <code>SET key value NX EX</code>）实现锁。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET lock_key unique_value NX EX <span class="number">30</span></span><br></pre></td></tr></table></figure><blockquote><ul class="lvl-1"><li class="lvl-2"><p><code>NX</code>：仅当 key 不存在时设置（保证原子性）；</p></li><li class="lvl-2"><p><code>EX 30</code>：设置过期时间（防止死锁）；</p></li><li class="lvl-2"><p><code>unique_value</code>：用于解锁时校验（避免误删他人锁）。</p></li></ul></blockquote><p><strong>优点</strong>：</p><ul class="lvl-0"><li class="lvl-2"><p>高性能、低延迟；</p></li><li class="lvl-2"><p>支持自动过期；</p></li><li class="lvl-2"><p>社区方案成熟（如 Redisson）。</p></li></ul><p><strong>缺点</strong>：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>单点故障</strong>：主从架构下主节点宕机可能导致锁丢失（需用 Redlock 算法缓解）；</p></li><li class="lvl-2"><p>网络分区时可能违反互斥性（CAP 理论限制）。</p></li></ul><h3 id="简单实现">简单实现</h3><p>加锁的过程很简单，就是通过SET指令来设置值，成功则返回；否则就循环等待，在timeout时间内仍未获取到锁，则获取失败</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisLock</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">lock_key</span> <span class="operator">=</span> <span class="string">&quot;redis_lock&quot;</span>; <span class="comment">//锁键</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">long</span> <span class="variable">internalLockLeaseTime</span> <span class="operator">=</span> <span class="number">30000</span>;<span class="comment">//锁过期时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="variable">timeout</span> <span class="operator">=</span> <span class="number">999999</span>; <span class="comment">//获取锁的超时时间</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//SET命令的参数 </span></span><br><span class="line">    <span class="type">SetParams</span> <span class="variable">params</span> <span class="operator">=</span> SetParams.setParams().nx().px(internalLockLeaseTime);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JedisPool jedisPool;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加锁</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lock</span><span class="params">(String id)</span>&#123;</span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> jedisPool.getResource();</span><br><span class="line">        <span class="type">Long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">                <span class="comment">//SET命令返回OK ，则证明获取锁成功</span></span><br><span class="line">                <span class="comment">// NX，意思是SET IF NOT EXIST，即当key不存在时，我们进行set操作；若key已经存在，则不做任何操作；</span></span><br><span class="line">                <span class="comment">// PX，意思是我们要给这个key加一个过期的设置</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">lock</span> <span class="operator">=</span> jedis.set(lock_key, id, <span class="string">&quot;NX&quot;</span>, <span class="string">&quot;PX&quot;</span>, internalLockLeaseTime);</span><br><span class="line">                <span class="keyword">if</span>(<span class="string">&quot;OK&quot;</span>.equals(lock))&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//否则循环等待，在timeout时间内仍未获取到锁，则获取失败</span></span><br><span class="line">                <span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> System.currentTimeMillis() - start;</span><br><span class="line">                <span class="keyword">if</span> (l&gt;=timeout) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            jedis.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解锁</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">unlock</span><span class="params">(String id)</span>&#123;</span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> jedisPool.getResource();</span><br><span class="line">        <span class="type">String</span> <span class="variable">script</span> <span class="operator">=</span></span><br><span class="line">            <span class="string">&quot;if redis.call(&#x27;get&#x27;,KEYS[1]) == ARGV[1] then&quot;</span> +</span><br><span class="line">            <span class="string">&quot;   return redis.call(&#x27;del&#x27;,KEYS[1]) &quot;</span> +</span><br><span class="line">            <span class="string">&quot;else&quot;</span> +</span><br><span class="line">            <span class="string">&quot;   return 0 &quot;</span> +</span><br><span class="line">            <span class="string">&quot;end&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> jedis.eval(script, Collections.singletonList(lock_key), </span><br><span class="line">                                       Collections.singletonList(id));</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(result.toString()))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            jedis.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">clientcount</span> <span class="operator">=</span><span class="number">1000</span>;</span><br><span class="line">    <span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(clientcount);</span><br><span class="line"></span><br><span class="line">    <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(clientcount);</span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;clientcount;i++)&#123;</span><br><span class="line">        executorService.execute(() -&gt; &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//通过Snowflake算法获取唯一的ID字符串</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> IdUtil.getId();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                redisLock.lock(id);</span><br><span class="line">                count++;</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                redisLock.unlock(id);</span><br><span class="line">            &#125;</span><br><span class="line">            countDownLatch.countDown();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    countDownLatch.await();</span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    logger.info(<span class="string">&quot;执行线程数:&#123;&#125;,总耗时:&#123;&#125;,count数为:&#123;&#125;&quot;</span>,clientcount,end-start,count);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存在的问题：</p><ul class="lvl-0"><li class="lvl-2"><p>​    <mark>锁不具有可重入性</mark>。</p></li><li class="lvl-2"><p>​    业务未处理而主动释放锁，此时锁已到期。</p></li></ul><p><strong>获取锁-错误案例1</strong>:  过期时间设置分两步，不具有原子性，易发生死锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Long</span> <span class="variable">result</span> <span class="operator">=</span> jedis.setnx(lockKey, requestId);</span><br><span class="line"><span class="keyword">if</span> (result == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 若在这里程序突然崩溃，则无法设置过期时间，将发生死锁，锁永远不会过期</span></span><br><span class="line">    jedis.expire(lockKey, expireTime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>获取锁-错误案例2</strong>：过期时间分步判断且各客户端时间必须强一致，不具有原子性，在时间判断过程中到期，则可能被其他客户端加锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">wrongGetLock2</span><span class="params">(Jedis jedis, String lockKey, <span class="type">int</span> expireTime)</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">expires</span> <span class="operator">=</span> System.currentTimeMillis() + expireTime;</span><br><span class="line">    <span class="type">String</span> <span class="variable">expiresStr</span> <span class="operator">=</span> String.valueOf(expires);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果当前锁不存在，返回加锁成功</span></span><br><span class="line">    <span class="keyword">if</span> (jedis.setnx(lockKey, expiresStr) == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果锁存在，获取锁的过期时间</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">currentValueStr</span> <span class="operator">=</span> jedis.get(lockKey);</span><br><span class="line">    <span class="keyword">if</span> (currentValueStr != <span class="literal">null</span> &amp;&amp; Long.parseLong(currentValueStr) &lt; System.currentTimeMillis()) &#123;</span><br><span class="line">        <span class="comment">// 锁已过期，获取上一个锁的过期时间，并设置现在锁的过期时间</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">oldValueStr</span> <span class="operator">=</span> jedis.getSet(lockKey, expiresStr);</span><br><span class="line">        <span class="keyword">if</span> (oldValueStr != <span class="literal">null</span> &amp;&amp; oldValueStr.equals(currentValueStr)) &#123;</span><br><span class="line">            <span class="comment">// 考虑多线程并发的情况，只有一个线程的设置值和当前值相同，它才有权利加锁</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">// 其他情况，一律返回加锁失败</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Redisson-实现">Redisson 实现</h3><p>当已经被加锁，存在该key且未过期时，其他线程将 while (true) {} 一直尝试获取锁，而不是队列等待</p><p><strong>实现原理</strong></p><img src="/imgs/v2-6a83e9a88942a6ec850a403640e46339_r.jpg" alt="img" style="zoom:67%;" /><p><strong>加锁机制</strong></p><p>如果该客户端面对的是一个Redis Cluster集群，它首先会根据hash节点选择一台机器，再发送一段lua脚本到redis，</p><p>保存Hash 数据结构：myLock:{threadId:1}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;T&gt; RFuture&lt;T&gt; <span class="title function_">tryLockInnerAsync</span><span class="params">(<span class="type">long</span> waitTime, <span class="type">long</span> leaseTime, TimeUnit unit, <span class="type">long</span> threadId, RedisStrictCommand&lt;T&gt; command)</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> evalWriteAsync(getRawName(), LongCodec.INSTANCE, command,</span><br><span class="line">             <span class="string">&quot;if (redis.call(&#x27;exists&#x27;, KEYS[1]) == 0) then &quot;</span> +</span><br><span class="line">                 <span class="string">&quot;redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[2], 1); &quot;</span> +</span><br><span class="line">                 <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +</span><br><span class="line">                 <span class="string">&quot;return nil; &quot;</span> +</span><br><span class="line">             <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">             <span class="string">&quot;if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[2]) == 1) then &quot;</span> + <span class="comment">// 可重入加锁判断</span></span><br><span class="line">                 <span class="string">&quot;redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[2], 1); &quot;</span> +    <span class="comment">//     累加1</span></span><br><span class="line">                 <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +</span><br><span class="line">                 <span class="string">&quot;return nil; &quot;</span> +</span><br><span class="line">             <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                 <span class="string">&quot;return redis.call(&#x27;pttl&#x27;, KEYS[1]);&quot;</span>, <span class="comment">// 返回剩余时间</span></span><br><span class="line">         Collections.singletonList(getRawName()), unit.toMillis(leaseTime), getLockName(threadId));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>锁互斥机制</strong></p><p>根据LUA脚本尝试加锁，若不成功，不断尝试，直到信号量释放获取到锁或被中断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">(<span class="type">long</span> leaseTime, TimeUnit unit, <span class="type">boolean</span> interruptibly)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">     <span class="type">long</span> <span class="variable">threadId</span> <span class="operator">=</span> Thread.currentThread().getId();</span><br><span class="line">     <span class="type">Long</span> <span class="variable">ttl</span> <span class="operator">=</span> tryAcquire(-<span class="number">1</span>, leaseTime, unit, threadId);</span><br><span class="line">     <span class="comment">// lock acquired</span></span><br><span class="line">     <span class="keyword">if</span> (ttl == <span class="literal">null</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     RFuture&lt;RedissonLockEntry&gt; future = subscribe(threadId);</span><br><span class="line">     <span class="keyword">if</span> (interruptibly) &#123;</span><br><span class="line">         commandExecutor.syncSubscriptionInterrupted(future);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         commandExecutor.syncSubscription(future);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">// 不断尝试获取锁</span></span><br><span class="line">         <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">             ttl = tryAcquire(-<span class="number">1</span>, leaseTime, unit, threadId);</span><br><span class="line">             <span class="comment">// lock acquired</span></span><br><span class="line">             <span class="keyword">if</span> (ttl == <span class="literal">null</span>) &#123;</span><br><span class="line">                 <span class="keyword">break</span>;</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">             <span class="comment">// 锁的剩余时间</span></span><br><span class="line">             <span class="keyword">if</span> (ttl &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                 <span class="keyword">try</span> &#123;</span><br><span class="line">                     <span class="comment">// 如果在给定的等待时间内变为可用并且当前线程未被中断，则从此信号量获取许可。</span></span><br><span class="line">             <span class="comment">// 如果没有可用的许可，则当前线程将出于线程调度目的而被禁用并处于休眠状态，直到发生以下三种情况之一：</span></span><br><span class="line">                <span class="comment">// 1.其他线程调用该信号量的release方法，当前线程接下来将被分配一个许可； </span></span><br><span class="line">                <span class="comment">// 2.其他线程中断当前线程； 3. 指定的等待时间已过。</span></span><br><span class="line">                     future.getNow().getLatch().tryAcquire(ttl, TimeUnit.MILLISECONDS);</span><br><span class="line">                 &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                     <span class="keyword">if</span> (interruptibly) &#123;</span><br><span class="line">                         <span class="keyword">throw</span> e;</span><br><span class="line">                     &#125;</span><br><span class="line">                     future.getNow().getLatch().tryAcquire(ttl, TimeUnit.MILLISECONDS);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                 <span class="keyword">if</span> (interruptibly) &#123;</span><br><span class="line">                     <span class="comment">// 从这个信号量中获取一个许可，阻塞直到一个信号量可用，或者线程被中断。</span></span><br><span class="line">                        <span class="comment">//获得许可证（如果有）并立即返回，将可用许可证的数量减少一个。</span></span><br><span class="line">                     future.getNow().getLatch().acquire();</span><br><span class="line">                 &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">//从此信号量获取许可，阻塞直到一个可用。获得许可证（如果有）并立即返回，将可用许可证的数量减少一个。</span></span><br><span class="line"><span class="comment">//如果没有可用的许可，则当前线程将出于线程调度目的而被禁用并处于休眠状态，直到某个其他线程调用此信号量的release方法。</span></span><br><span class="line">                     future.getNow().getLatch().acquireUninterruptibly();</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">         unsubscribe(future, threadId);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>释放锁</strong>（LUA脚本）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> RFuture&lt;Boolean&gt; <span class="title function_">unlockInnerAsync</span><span class="params">(<span class="type">long</span> threadId)</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> evalWriteAsync(getRawName(), LongCodec.INSTANCE, RedisCommands.EVAL_BOOLEAN,</span><br><span class="line">         <span class="string">&quot;if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[3]) == 0) then &quot;</span> +</span><br><span class="line">                 <span class="string">&quot;return nil;&quot;</span> +</span><br><span class="line">          <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                 <span class="string">&quot;local counter = redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[3], -1); &quot;</span> +</span><br><span class="line">           <span class="string">&quot;if (counter &gt; 0) then &quot;</span> + <span class="comment">// 判断可重入次数（加锁次数）</span></span><br><span class="line">                 <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[2]); &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;return 0; &quot;</span> +</span><br><span class="line">            <span class="string">&quot;else &quot;</span> +</span><br><span class="line">                 <span class="string">&quot;redis.call(&#x27;del&#x27;, KEYS[1]); &quot;</span> + <span class="comment">//删除key</span></span><br><span class="line">                 <span class="string">&quot;redis.call(&#x27;publish&#x27;, KEYS[2], ARGV[1]); &quot;</span> +</span><br><span class="line">                 <span class="string">&quot;return 1; &quot;</span> +</span><br><span class="line">             <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                 <span class="string">&quot;return nil;&quot;</span>,</span><br><span class="line">         Arrays.asList(getRawName(), getChannelName()), LockPubSub.UNLOCK_MESSAGE, internalLockLeaseTime, getLockName(threadId));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>自动延期机制</strong></p><p>客户端A加锁的锁key默认生存时间只有30秒，如果超过了30秒，客户端A还想一直持有这把锁，怎么办</p><blockquote><p>只要客户端A一旦加锁成功，就会启动一个watch dog看门狗，<strong>它是一个后台线程，会每隔10秒检查一下</strong>，如果客户端A还持有锁key，那么就会不断的延长锁key的生存时间</p></blockquote><p><strong>存在的问题</strong></p><p>master-slave主从异步复制导致redis分布式锁的缺陷，原锁丢失/多个客户端加锁。</p><p><strong>在master实例宕机的时候，可能导致多个客户端同时完成加锁</strong>。</p><blockquote><p>为了Redis的高可用，一般都会给Redis的节点挂一个slave,然后采用哨兵模式进行主备切换。但由于Redis的主从复制（replication）是异步的，这可能会出现在数据同步过程中，<strong>master宕机，slave来不及同步数据就被选为master，从而数据丢失</strong>。</p></blockquote><blockquote><p>这就会导致客户端B来尝试加锁的时候，在新的master上完成了加锁，而客户端以为自己成功加了锁，就会导致多个客户端对一个分布式锁完成了加锁。这时就会导致各种脏数据的产生。</p></blockquote><h3 id="Redis集群锁（Redlock算法）">Redis集群锁（<strong>Redlock算法</strong>）</h3><p>在Redis的分布式环境中，我们假设有N个Redis master。这些节点<strong>完全互相独立，不存在主从复制或者其他集群协调机制</strong>。</p><p>我们确保将在N个实例上使用与在Redis单实例下相同方法获取和释放锁。现在我们假设有5个Redis master节点，同时我们需要在5台服务器上面运行这些Redis实例，这样保证他们不会同时都宕掉。</p><img src="/imgs/542a2850c57abe8f8b7d5d04a658e7ac.png" alt="img" style="zoom:67%;" /><p>为了取到锁，客户端应该执行以下操作:</p><blockquote><ol><li class="lvl-3"><p>获取当前Unix时间，以毫秒为单位。</p></li><li class="lvl-3"><p>依次尝试从N个实例，使用相同的key和随机值获取锁。在步骤2，当向Redis设置锁时,客户端应该设置一个网络连接和响应超时时间，这个超时时间应该小于锁的失效时间。例如你的锁自动失效时间为10秒，则超时时间应该在5-50毫秒之间。这样可以避免服务器端Redis已经挂掉的情况下，客户端还在死死地等待响应结果。如果服务器端没有在规定时间内响应，客户端应该尽快尝试另外一个Redis实例。</p></li><li class="lvl-3"><p>客户端使用当前时间减去开始获取锁时间（步骤1记录的时间）就得到获取锁使用的时间。当且仅当从大多数（这里是3个节点）的Redis节点都取到锁，并且使用的时间小于锁失效时间时，锁才算获取成功。</p></li><li class="lvl-3"><p>如果取到了锁，key的真正有效时间等于有效时间减去获取锁所使用的时间（步骤3计算的结果）。</p></li><li class="lvl-3"><p>如果因为某些原因，获取锁失败（<em>没有</em>在至少N/2+1个Redis实例取到锁或者取锁时间已经超过了有效时间），客户端应该在所有的Redis实例上进行解锁（即便某些Redis实例根本就没有加锁成功）。</p></li></ol></blockquote><h3 id="看门狗（延长锁时效）">看门狗（延长锁时效）</h3><p>假设锁超时时间是 30 秒，此时程序需要每隔一段时间去扫描一下该锁是否还存在，扫描时间需要小于超时时间，通常可以设置为超时时间的 1/3，在这里也就是 10 秒扫描一次。如果锁还存在，则重置其超时时间恢复到 30 秒。</p><p>通过这种方案，只要业务还没有处理完成，锁就会一直有效；而当业务一旦处理完成，程序也会马上删除该锁。</p><blockquote><p>1.watchDog 只有在未显示指定加锁时间时才会生效。（这点很重要）</p><p>2.lockWatchdogTimeout 设定的时间不要太小 ，比如我之前设置的是 100毫秒，由于网络直接导致加锁完后，watchdog去延期时，这个key在redis中已经被删除了。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;T&gt; RFuture&lt;Long&gt; <span class="title function_">tryAcquireAsync</span><span class="params">(<span class="type">long</span> waitTime, <span class="type">long</span> leaseTime</span></span><br><span class="line"><span class="params">                                          , TimeUnit unit, <span class="type">long</span> threadId)</span> &#123;</span><br><span class="line">    <span class="comment">//如果指定了加锁时间，会直接去加锁</span></span><br><span class="line">    <span class="keyword">if</span> (leaseTime != -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> tryLockInnerAsync(waitTime, leaseTime, unit, </span><br><span class="line">                                 threadId, RedisCommands.EVAL_LONG);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//没有指定加锁时间 会先进行加锁，并且默认时间就是 LockWatchdogTimeout的时间</span></span><br><span class="line">    <span class="comment">//这个是异步操作 返回RFuture 类似netty中的future</span></span><br><span class="line">    RFuture&lt;Long&gt; ttlRemainingFuture = tryLockInnerAsync(waitTime, </span><br><span class="line">            commandExecutor.getConnectionManager().getCfg().getLockWatchdogTimeout(),</span><br><span class="line">                      TimeUnit.MILLISECONDS, threadId, RedisCommands.EVAL_LONG);</span><br><span class="line">    <span class="comment">//这里也是类似netty Future 的addListener，在future内容执行完成后执行</span></span><br><span class="line">    ttlRemainingFuture.onComplete((ttlRemaining, e) -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ttlRemaining == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//这里是定时执行 当前锁自动延期的动作</span></span><br><span class="line">            scheduleExpirationRenewal(threadId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> ttlRemainingFuture;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>lua脚本判断 锁是否在，如果存在就进行 pexpire 延期。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> RFuture&lt;Boolean&gt; <span class="title function_">renewExpirationAsync</span><span class="params">(<span class="type">long</span> threadId)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> evalWriteAsync(getName(), LongCodec.INSTANCE, RedisCommands.EVAL_BOOLEAN,</span><br><span class="line">                          <span class="string">&quot;if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[2]) == 1) then &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;return 1; &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;return 0;&quot;</span>,</span><br><span class="line">                          Collections.singletonList(getName()),</span><br><span class="line">                          internalLockLeaseTime, getLockName(threadId));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基于-ZooKeeper-实现">基于 ZooKeeper 实现</h2><p>Zookeeper 的分布式实现依赖以下关键特性：</p><blockquote><p><strong>1. 临时节点和顺序节点：</strong> 临时节点在客户端会话结束时自动删除，顺序节点则会根据创建顺序生成唯一编号。这些特性被用于实现分布式锁和任务队列。</p><p><strong>2. Watcher 机制：</strong> 客户端可以对节点的变化（如创建、删除、数据变更）设置监听器。当节点状态发生变化时，Zookeeper 会通知相关客户端，从而实现事件驱动的分布式协调。</p></blockquote><p><strong>实现步骤</strong>：</p><ol><li class="lvl-3"><p>所有客户端在 <code>/locks</code> 路径下创建临时顺序节点（如 <code>/locks/lock_0000000001</code>）；</p></li><li class="lvl-3"><p>客户端检查自己创建的节点是否为序号最小的节点：</p><ul class="lvl-2"><li class="lvl-5">是 → 获得锁；</li><li class="lvl-5">否 → 监听前一个序号的节点（watch），等待其释放（节点删除）后重试。</li></ul></li></ol><p><strong>优点</strong>：</p><ul class="lvl-0"><li class="lvl-2"><p>强一致性（ZAB 协议保证）；</p></li><li class="lvl-2"><p>临时节点自动释放（客户端宕机时锁自动释放）；</p></li><li class="lvl-2"><p>无单点问题（ZooKeeper 集群高可用）。</p></li></ul><p><strong>缺点</strong>：</p><ul class="lvl-0"><li class="lvl-2"><p>性能低于 Redis（写操作需多数派确认）；</p></li><li class="lvl-2"><p>运维复杂度高；</p></li><li class="lvl-2"><p>网络抖动可能导致频繁重连。</p></li></ul><p><strong>实现案例</strong>：</p><p>Zookeeper 的分布式锁通过以下步骤实现：</p><ol><li class="lvl-3"><p><strong>创建节点：</strong> 客户端在指定路径下创建临时顺序节点。如果节点是路径下最小的节点，则获取锁；否则，监听前一个节点的删除事件。</p></li><li class="lvl-3"><p><strong>监听机制：</strong> 未获取锁的客户端会阻塞并监听前一个节点的变化。当前一个节点被删除时，触发监听器，重新尝试获取锁。</p></li><li class="lvl-3"><p><strong>释放锁：</strong> 获取锁的客户端完成任务后，删除自身节点，通知下一个等待的客户端。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">zkLock</span><span class="params">()</span> &#123;</span><br><span class="line">   currentNode = zk.create(<span class="string">&quot;/locks/seq-&quot;</span>, <span class="literal">null</span>, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);</span><br><span class="line">   List&lt;String&gt; childrenNodes = zk.getChildren(<span class="string">&quot;/locks&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">   Collections.sort(childrenNodes);</span><br><span class="line">   <span class="type">String</span> <span class="variable">thisNode</span> <span class="operator">=</span> currentNode.substring(<span class="string">&quot;/locks/&quot;</span>.length());</span><br><span class="line">   <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> childrenNodes.indexOf(thisNode);</span><br><span class="line">   <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span>; <span class="comment">// 当前节点是最小节点，获取锁</span></span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       waitPath = <span class="string">&quot;/locks/&quot;</span> + childrenNodes.get(index - <span class="number">1</span>);</span><br><span class="line">       zk.getData(waitPath, <span class="literal">true</span>, <span class="keyword">new</span> <span class="title class_">Stat</span>());</span><br><span class="line">       waitDownLatch.await(); <span class="comment">// 等待前一个节点释放锁</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用 Curator 框架</strong>：Curator 是对 Zookeeper 的封装，提供了更高效的分布式锁实现。通过 <em>InterProcessMutex</em> 类，可以轻松实现分布式锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InterProcessLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InterProcessMutex</span>(curatorFramework, <span class="string">&quot;/locks&quot;</span>);</span><br><span class="line">lock.acquire(); <span class="comment">// 获取锁</span></span><br><span class="line"><span class="comment">// 执行业务逻辑</span></span><br><span class="line">lock.release(); <span class="comment">// 释放锁</span></span><br></pre></td></tr></table></figure><h2 id="基于-Etcd-实现">基于 Etcd 实现</h2><p>类似 ZooKeeper，利用 Etcd 的 Lease（租约）和 Watch 机制。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>通过 <code>Put</code> 操作尝试创建带租约的 key；</p></li><li class="lvl-2"><p>若 key 不存在则创建成功（获得锁），否则监听 key 的删除事件；</p></li><li class="lvl-2"><p>租约到期自动删除 key（防止死锁）。</p></li></ul></blockquote><p>实现原理</p><blockquote><ol><li class="lvl-3"><p><strong>租约机制</strong>：etcd 使用租约（Lease）为键值对设置 TTL（生存时间）。当租约到期时，键值对会自动删除，从而释放锁。</p></li><li class="lvl-3"><p><strong>事务机制</strong>：通过事务操作确保只有一个客户端能够成功创建特定的键（即加锁）。</p></li><li class="lvl-3"><p><strong>公平性</strong>：etcd 基于键的创建版本号（Revision）实现公平性，确保按顺序获取锁。</p></li></ol></blockquote><p><strong>优点</strong>：</p><ul class="lvl-0"><li class="lvl-2"><p>高可用、强一致性（Raft 协议）；</p></li><li class="lvl-2"><p>支持 TTL 自动过期；</p></li><li class="lvl-2"><p>云原生生态友好（Kubernetes 底层依赖）。</p></li></ul><p><strong>缺点</strong>：</p><ul class="lvl-0"><li class="lvl-2"><p>性能略低于 Redis；</p></li><li class="lvl-2"><p>学习成本较高。</p></li></ul><h3 id="自定义实现">自定义实现</h3><p>加锁逻辑（支持阻塞等待），<strong>不保证公平性</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="type">long</span> <span class="variable">timeoutMs</span> <span class="operator">=</span> unit.toMillis(timeout);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (System.currentTimeMillis() - start &lt; timeoutMs) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 创建租约</span></span><br><span class="line">            <span class="type">LeaseGrantResponse</span> <span class="variable">leaseGrant</span> <span class="operator">=</span> leaseClient.grant(leaseTTL).get();</span><br><span class="line">            <span class="built_in">this</span>.leaseId = leaseGrant.getID();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 尝试获取锁（put 操作）</span></span><br><span class="line">            <span class="type">PutResponse</span> <span class="variable">putResponse</span> <span class="operator">=</span> kvClient.put(</span><br><span class="line">                ByteSequence.from(lockKey, StandardCharsets.UTF_8),</span><br><span class="line">                ByteSequence.from(<span class="string">&quot;locked&quot;</span>, StandardCharsets.UTF_8),</span><br><span class="line">                PutOption.newBuilder().withLeaseId(leaseId).build()</span><br><span class="line">            ).get();</span><br><span class="line"></span><br><span class="line">            <span class="built_in">this</span>.revision = putResponse.getHeader().getRevision();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 检查是否是最小 revision（即是否获得锁）</span></span><br><span class="line">            <span class="comment">// 实际上，etcd 锁的标准做法是：尝试 put 后，检查是否有比自己 revision 更小的 key</span></span><br><span class="line">            <span class="comment">// 但更高效的方式是：直接尝试 put，然后通过 range 查询判断自己是否最小</span></span><br><span class="line">            <span class="comment">// 简化版：我们假设只要 put 成功且没有更小的 revision，就获得锁</span></span><br><span class="line">            <span class="comment">// 但标准做法应使用 etcd 的锁 API（见下文推荐）</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 简化实现：直接认为 put 成功即获得锁（仅适用于单客户端竞争）</span></span><br><span class="line">            <span class="comment">// 严格公平锁需检查 revision 队列（见下方“完整公平锁”说明）</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            <span class="comment">// 租约或 put 失败，清理并重试</span></span><br><span class="line">            <span class="keyword">if</span> (leaseId != -<span class="number">1</span>) &#123;</span><br><span class="line">                leaseClient.revoke(leaseId);</span><br><span class="line">                leaseId = -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>); <span class="comment">// 短暂等待后重试</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="jetcd-实现">jetcd 实现</h3><p>使用 jetcd 内置的 <code>Lock</code> 客户端。jetcd 提供了封装好的分布式锁 API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">Client</span> <span class="variable">client</span> <span class="operator">=</span> Client.builder()</span><br><span class="line">        .endpoints(<span class="string">&quot;http://127.0.0.1:2379&quot;</span>)</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">    <span class="type">Lock</span> <span class="variable">lockClient</span> <span class="operator">=</span> client.getLockClient();</span><br><span class="line">    <span class="type">ByteSequence</span> <span class="variable">lockName</span> <span class="operator">=</span> ByteSequence.from(<span class="string">&quot;/my-lock&quot;</span>, StandardCharsets.UTF_8);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取锁（阻塞直到获得）</span></span><br><span class="line">    <span class="type">LockResponse</span> <span class="variable">lockResponse</span> <span class="operator">=</span> lockClient.lock(lockName).get(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">    System.out.println(<span class="string">&quot;Got lock, lease ID: &quot;</span> + lockResponse.getLease());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 执行业务逻辑</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Working...&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 释放锁</span></span><br><span class="line">        lockClient.unlock(lockResponse.getKey()).get();</span><br><span class="line">        System.out.println(<span class="string">&quot;Lock released.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    client.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项">注意事项</h3><ol><li class="lvl-3"><p><strong>租约续期</strong>：<br>jetcd 的 <code>Lock</code> 客户端<strong>不会自动续租</strong>！若业务执行时间 &gt; leaseTTL，锁会自动释放。<br><strong>解决方案</strong>：</p><ul class="lvl-2"><li class="lvl-5">设置足够长的 TTL；</li><li class="lvl-5">或启动后台线程定期 <code>leaseClient.keepAlive(leaseId)</code>（需自行管理）。</li></ul></li><li class="lvl-3"><p><strong>异常处理</strong>：网络中断、etcd 宕机时，锁可能提前释放，需业务层保证幂等性。</p></li><li class="lvl-3"><p><strong>锁命名</strong>：建议使用 <code>/locks/service_name/resource_id</code> 格式避免冲突。</p></li><li class="lvl-3"><p><strong>性能</strong>：<br>etcd 锁的吞吐量低于 Redis，适用于<strong>强一致性、低频竞争</strong>场景。</p></li></ol>]]></content>
    
    
    <summary type="html">分布式锁有多种应用场景，本文介绍多种常用的实现方案，详细说明了其实现原理和各自特点。</summary>
    
    
    
    <category term="Java" scheme="https://pengline.github.io/categories/Java/"/>
    
    <category term="分布式" scheme="https://pengline.github.io/categories/Java/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
    <category term="分布式锁" scheme="https://pengline.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    
    <category term="看门狗" scheme="https://pengline.github.io/tags/%E7%9C%8B%E9%97%A8%E7%8B%97/"/>
    
    <category term="Redisson" scheme="https://pengline.github.io/tags/Redisson/"/>
    
    <category term="Etcd分布式锁" scheme="https://pengline.github.io/tags/Etcd%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    
    <category term="ZooKeeper分布式锁" scheme="https://pengline.github.io/tags/ZooKeeper%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>Java 多线程之交替执行的实现方案</title>
    <link href="https://pengline.github.io/2025/09/30/5667928f59754e0e87f521c9c6c351c6/"/>
    <id>https://pengline.github.io/2025/09/30/5667928f59754e0e87f521c9c6c351c6/</id>
    <published>2025-09-29T16:00:00.000Z</published>
    <updated>2025-10-03T08:36:15.997Z</updated>
    
    <content type="html"><![CDATA[<p>两个线程交替打印1-100，列举以下几种方法：</p><blockquote><ol><li class="lvl-3"><strong>synchronized+object</strong>：<code>wait()</code>等待，<code>notify()</code> 唤醒</li><li class="lvl-3"><strong>Lock-condition</strong>（条件变量）：<code>c1.signalAll()</code> 唤醒，<code>c2.await()</code> 等待</li><li class="lvl-3"><strong>volatile</strong> 修饰的变量，通过值控制（可以是boolean，或者是数字类型）</li><li class="lvl-3"><strong>Semaphore</strong>（信号量），<code>acquire()</code>获取许可，<code>release()</code>释放许可;</li><li class="lvl-3"><strong>CyclicBarrier</strong>（循环栅栏），<code>await() </code>使等待</li><li class="lvl-3"><strong>AtomicBoolean</strong>，基于cas机制实现线程交替打印</li><li class="lvl-3"><strong>LockSupport</strong>：<code>park()</code>阻塞当前线程、<code>unpark(Thread t) </code>释放t线程，设置锁标志位</li></ol></blockquote><h2 id="Object（等待-唤醒）">Object（等待+唤醒）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt; 多线程交替打印</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 通过Object的 wait() 和 notify() 方法，需要借助锁实现，如 synchronized</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> He.hp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> haeng2030@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2024/11/21 21:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WaitNotifyStagger</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">printf</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (o1) &#123;</span><br><span class="line">                o1.notify();</span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-&quot;</span> + (++num));</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    o1.wait(<span class="number">2000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">while</span> (num &lt; <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">WaitNotifyStagger</span> <span class="variable">threadPrint</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WaitNotifyStagger</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(threadPrint::printf, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(threadPrint::printf, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Condition（条件变量）">Condition（条件变量）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadStaggerByCondition</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(Condition curr, Condition next)</span> &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.lockInterruptibly();</span><br><span class="line">                next.signal();</span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-&quot;</span> + (++num));</span><br><span class="line"></span><br><span class="line">                curr.await(<span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (num &lt; <span class="number">90</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ThreadStaggerByCondition</span> <span class="variable">threadPrint2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadStaggerByCondition</span>();</span><br><span class="line">        <span class="type">Condition</span> <span class="variable">condition1</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">        <span class="type">Condition</span> <span class="variable">condition2</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">        <span class="type">Condition</span> <span class="variable">condition3</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"></span><br><span class="line">        threadPool.submit(() -&gt; threadPrint2.print(condition1, condition2));</span><br><span class="line">        threadPool.submit(() -&gt; threadPrint2.print(condition2, condition3));</span><br><span class="line">        threadPool.submit(() -&gt; threadPrint2.print(condition3, condition1));</span><br><span class="line"></span><br><span class="line">        threadPool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Semaphore（信号量）">Semaphore（信号量）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadStaggerBySemaphore</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">maxNum</span> <span class="operator">=</span> <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(Semaphore curr, Semaphore next)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (num &lt; maxNum) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                curr.acquire();</span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-&quot;</span> + (num++));</span><br><span class="line"></span><br><span class="line">                next.release();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Semaphore</span> <span class="variable">semaphore1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Semaphore</span> <span class="variable">semaphore2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ThreadStaggerBySemaphore</span> <span class="variable">stagger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadStaggerBySemaphore</span>();</span><br><span class="line">        threadPool.submit(() -&gt; stagger.print(semaphore1, semaphore2));</span><br><span class="line">        threadPool.submit(() -&gt; stagger.print(semaphore2, semaphore1));</span><br><span class="line"></span><br><span class="line">        threadPool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CyclicBarrier（循环栅栏）">CyclicBarrier（循环栅栏）</h2><p>主要用于让一组线程互相等待，直到所有线程都达到了一个公共屏障点（Barrier Point），然后这些线程才继续执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadStaggerByCyclicBarrier</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">maxNum</span> <span class="operator">=</span> <span class="number">40</span>;</span><br><span class="line">    <span class="comment">// 屏障的限制个数为2，传入一个参数n，那么需要有n个线程都执行await方法，才会进入下一轮</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">CyclicBarrier</span> <span class="variable">cyclicBarrier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-&quot;</span> + (++num));</span><br><span class="line">                &#125;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 进入阻塞，直到线程B也执行await方法</span></span><br><span class="line">                    cyclicBarrier.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">while</span> (num &lt; maxNum);</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-&quot;</span> + (++num));</span><br><span class="line">                &#125;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    cyclicBarrier.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">while</span> (num &lt; maxNum);</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Queue（阻塞队列）">Queue（阻塞队列）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadStaggerByQueue</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">maxNum</span> <span class="operator">=</span> <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(BlockingQueue&lt;Integer&gt; curr, BlockingQueue&lt;Integer&gt; next)</span> &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                curr.take();</span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-&quot;</span> + (++num));</span><br><span class="line"></span><br><span class="line">                next.add(<span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (num &lt; maxNum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">final</span> BlockingQueue&lt;Integer&gt; q1 = <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Integer&gt;() &#123;&#123;</span><br><span class="line">            add(<span class="number">0</span>); <span class="comment">// 加个值</span></span><br><span class="line">        &#125;&#125;;</span><br><span class="line">        <span class="keyword">final</span> BlockingQueue&lt;Integer&gt; q2 = <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">ThreadStaggerByQueue</span> <span class="variable">threadPrint2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadStaggerByQueue</span>();</span><br><span class="line">        threadPool.submit(() -&gt; threadPrint2.print(q1, q2));</span><br><span class="line">        threadPool.submit(() -&gt; threadPrint2.print(q2, q1));</span><br><span class="line"></span><br><span class="line">        threadPool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="volatile-变量">volatile 变量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt; 多线程交替打印</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; volatile 修饰的变量，可以换成数字类型，支持更多线程。 boolean只能两个线程</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> He.hp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> haeng2030@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2024/11/21 22:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VolatileStagger</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-&quot;</span> + (++num));</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">while</span> (num &lt; <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (; num &lt; <span class="number">100</span>; ) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-&quot;</span> + (++num));</span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AtomicBoolean（CAS）">AtomicBoolean（CAS）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt; 多线程交替打印</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 基于cas的原子类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> He.hp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> haeng2030@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2024/11/21 22:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AtomicStagger</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">AtomicBoolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicBoolean</span>(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (flag.get()) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-&quot;</span> + (++num));</span><br><span class="line">                    flag.set(<span class="literal">false</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">while</span> (num &lt; <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (; num &lt; <span class="number">100</span>; ) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!flag.get()) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-&quot;</span> + (++num));</span><br><span class="line">                    flag.set(<span class="literal">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LockSupport（阻塞-释放）">LockSupport（阻塞/释放）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;多线程交替打印</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; LockSupport.park() 和 LockSupport.unpark(t2)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> He.hp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> haeng2030@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2024/11/21 23:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LockSupportStagger</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        t1 = <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="comment">// 获取不到就会阻塞在这里</span></span><br><span class="line">                LockSupport.park();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-&quot;</span> + (++num));</span><br><span class="line">                <span class="comment">// 这个参数不写1也没事，因为我们tryRelease没用到</span></span><br><span class="line">                LockSupport.unpark(t2);</span><br><span class="line">            &#125; <span class="keyword">while</span> (num &lt; <span class="number">100</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>);</span><br><span class="line">        t2 = <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                LockSupport.park();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-&quot;</span> + (++num));</span><br><span class="line">                LockSupport.unpark(t1);</span><br><span class="line">            &#125; <span class="keyword">while</span> (num &lt; <span class="number">100</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        LockSupport.unpark(t1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">在多线程环境，如何保证各个线程交替执行？ 本文介绍了几种经典常用的解决方案，其方法都是灵活多变。</summary>
    
    
    
    <category term="Java" scheme="https://pengline.github.io/categories/Java/"/>
    
    <category term="多线程" scheme="https://pengline.github.io/categories/Java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
    <category term="Java多线程" scheme="https://pengline.github.io/tags/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    <category term="Condition" scheme="https://pengline.github.io/tags/Condition/"/>
    
    <category term="AtomicBoolean" scheme="https://pengline.github.io/tags/AtomicBoolean/"/>
    
    <category term="CyclicBarrier" scheme="https://pengline.github.io/tags/CyclicBarrier/"/>
    
    <category term="Semaphore" scheme="https://pengline.github.io/tags/Semaphore/"/>
    
    <category term="LockSupport" scheme="https://pengline.github.io/tags/LockSupport/"/>
    
  </entry>
  
  <entry>
    <title>Java 多线程之有序执行的实现方案</title>
    <link href="https://pengline.github.io/2025/09/28/f09e383fabf7484584ede610c1453cd2/"/>
    <id>https://pengline.github.io/2025/09/28/f09e383fabf7484584ede610c1453cd2/</id>
    <published>2025-09-27T16:00:00.000Z</published>
    <updated>2025-10-03T08:35:49.715Z</updated>
    
    <content type="html"><![CDATA[<p>线程在启动以后，并不是第一时间就会立马执行。而是要等待CPU的一个资源调度，而CPU调度的顺序是通过复杂算法计算得到的。</p><p>等启动的线程得到CPU指令后，才和主线程做一个切换，执行run方法。这就造成了每次我们执行的结果都是随机的。</p><p>可以通过一些方式控制线程执行的顺序：</p><h2 id="join-（优先执行）">join()（优先执行）</h2><p>调用线程需等待该<code>join()</code>线程执行完成后，才能继续用下其他线程。</p><blockquote><p>底层通过<code>wait</code>和<code>notify</code>实现，保证线程执行顺序</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadOrderByJoin</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;1产品经理规划新需求&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;2开发人员开发新需求功能&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Thread</span> <span class="variable">thread3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;3测试人员测试新功能&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread1.join(); <span class="comment">// 等待当前线程执行完毕再往下执行</span></span><br><span class="line">        thread2.start();</span><br><span class="line">        thread2.join(); <span class="comment">// 等待当前线程执行完毕再往下执行</span></span><br><span class="line">        thread3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Object（等待-唤醒）">Object（等待+唤醒）</h2><p>Object的方法，是让当前线程进入等待状态，释放它所持有的锁。“直到其他线程调用此对象的 notify() 方法或 notifyAll() 方法”，当前线程被唤醒(进入“就绪状态”)。</p><blockquote><p>所有的实例都有一个等待队列，它在实例的wait方法执行后停止操作的线程的队列。</p><p>执行wait方法后，线程便会暂停操作，进入等待队列</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadOrderByObject</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">demo1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">demo2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (demo1) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;1产品经理规划新需求&quot;</span>);</span><br><span class="line">                demo1.notify();       <span class="comment">//放开 1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (demo1) &#123;</span><br><span class="line">                    demo1.wait();        <span class="comment">// 暂停1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;2开发人员开发新需求功能&quot;</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (demo2) &#123;</span><br><span class="line">                demo2.notify();        <span class="comment">//放开 2</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Thread</span> <span class="variable">thread3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (demo2) &#123;</span><br><span class="line">                    demo2.wait();     <span class="comment">// 暂停2</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;3测试人员测试新功能&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 先启动最后等待的线程，依次向上（wait() 在 notify() 前面执行，否则一直阻塞等待，除非wait(1000)）</span></span><br><span class="line">        thread3.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">        thread1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ExecutorService（单线程池）">ExecutorService（单线程池）</h2><p>利用并发包里<code>newSingleThreadExecutor</code>产生一个单线程的线程池，而这个线程池的底层原理就是一个先进先出（FIFO）的队列。</p><blockquote><p>代码中executor.submit依次添加了123线程，按照FIFO的特性，执行顺序也就是123的执行结果，从而保证了执行顺序。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ExecutorService 的源码原理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Runnable command)</span> &#123; </span><br><span class="line">    <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> ctl.get();</span><br><span class="line">    <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</span><br><span class="line">        <span class="keyword">if</span> (addWorker(command, <span class="literal">true</span>))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        c = ctl.get();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">recheck</span> <span class="operator">=</span> ctl.get();</span><br><span class="line">        <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</span><br><span class="line">            reject(command);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)</span><br><span class="line">            addWorker(<span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="literal">false</span>))</span><br><span class="line">        reject(command);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">static</span> <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line"><span class="comment">// 通过ExecutorService 线程池启动线程，保证顺序执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        executorService.submit(thread2);</span><br><span class="line">        executorService.submit(thread1);</span><br><span class="line">        executorService.submit(thread3);</span><br><span class="line"></span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Condition（条件变量）">Condition（条件变量）</h2><p>通常与锁关联。需要在多个Contidion中共享一个锁时，可以传递一个Lock/RLock实例给构造方法，否则它将自己生成一个RLock实例。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>**await()**方法类似于Object类中的<code>wait()</code>方法。</p></li><li class="lvl-2"><p>**await(long time,TimeUnit unit)**方法类似于Object类中的<code>wait(long time)</code>方法。</p></li><li class="lvl-2"><p>**signal()**方法类似于Object类中的<code>notify()</code>方法。</p></li><li class="lvl-2"><p>**signalAll()**方法类似于Object类中的<code>notifyAll()</code>方法。</p></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadOrderByCondition</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Condition</span> <span class="variable">condition1</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Condition</span> <span class="variable">condition2</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">threadFlag</span> <span class="operator">=</span> <span class="number">1</span>;<span class="comment">//当前正在执行线程的标记,相当于状态标记</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;1产品经理规划新需求&quot;</span>);</span><br><span class="line">                condition1.signal();</span><br><span class="line">                threadFlag = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (threadFlag != <span class="number">1</span>)</span><br><span class="line">                    condition1.await();</span><br><span class="line">                System.out.println(<span class="string">&quot;2开发人员开发新需求功能&quot;</span>);</span><br><span class="line">                threadFlag = <span class="number">2</span>;</span><br><span class="line">                condition2.signal();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (threadFlag != <span class="number">2</span>)</span><br><span class="line">                    condition2.await();</span><br><span class="line">                System.out.println(<span class="string">&quot;3测试人员测试新功能&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CountDownLatch（计数）">CountDownLatch（计数）</h2><p>位于java.util.concurrent包下，利用它可以实现类似计数器的功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadOrderByCountDownLatch</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于判断线程一是否执行，倒计时设置为1，执行后减1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">CountDownLatch</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">CountDownLatch</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;1产品经理规划新需求&quot;</span>);        </span><br><span class="line">            c1.countDown();</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;            <span class="comment">//等待c1倒计时，计时为0则往下运行</span></span><br><span class="line">                c1.await();</span><br><span class="line">                System.out.println(<span class="string">&quot;2开发人员开发新需求功能&quot;</span>);         </span><br><span class="line">                c2.countDown();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;            <span class="comment">//等待c2倒计时，计时为0则往下运行</span></span><br><span class="line">                c2.await();</span><br><span class="line">                System.out.println(<span class="string">&quot;3测试人员测试新功能&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CyclicBarrier（回环栅栏）">CyclicBarrier（回环栅栏）</h2><p>通过它可以实现让一组线程等待至某个状态之后再全部同时执行。</p><blockquote><p>当所有等待线程都被释放以后，CyclicBarrier可以被重用。当调用await()方法之后，线程就处于barrier了。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadOrderByCyclicBarrier</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">CyclicBarrier</span> <span class="variable">barrier1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">static</span> <span class="type">CyclicBarrier</span> <span class="variable">barrier2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;1产品经理规划新需求&quot;</span>);            <span class="comment">//放开栅栏1</span></span><br><span class="line">                barrier1.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;            <span class="comment">//放开栅栏1</span></span><br><span class="line">                barrier1.await();</span><br><span class="line">                System.out.println(<span class="string">&quot;2开发人员开发新需求功能&quot;</span>);            <span class="comment">//放开栅栏2</span></span><br><span class="line">                barrier2.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;            <span class="comment">//放开栅栏2</span></span><br><span class="line">                barrier2.await();</span><br><span class="line">                System.out.println(<span class="string">&quot;3测试人员测试新功能&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Semaphore（信号量）">Semaphore（信号量）</h2><p>是一个计数信号量，包含一组许可证。每个<code>acquire()</code>都会阻塞，直到获取一个可用的许可证，每个<code>release()</code>都会释放持有许可证的线程，并且归还一个可用的许可证。</p><blockquote><p><strong>acquire()</strong>:当前线程尝去阻塞的获取1个许可证，获取了1个可用的许可证，则会停止等待，继续执行。</p><p><strong>release()</strong>:当前线程释放1个可用的许可证。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadOrderBySemaphore</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Semaphore</span> <span class="variable">semaphore1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Semaphore</span> <span class="variable">semaphore2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;1产品经理规划新需求&quot;</span>);</span><br><span class="line">            semaphore1.release();</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                semaphore1.acquire();</span><br><span class="line">                System.out.println(<span class="string">&quot;2开发人员开发新需求功能&quot;</span>);</span><br><span class="line">                semaphore2.release();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                semaphore2.acquire();</span><br><span class="line">                System.out.println(<span class="string">&quot;3测试人员测试新功能&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>其他例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123; <span class="comment">//生产者、消费者问题</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">clerk</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">clerk</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">productT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Producer</span>(c));<span class="comment">//生产者线程</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">consumerT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Consumer</span>(c));<span class="comment">//消费者线程</span></span><br><span class="line">        productT.start();</span><br><span class="line">        consumerT.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">clerk</span> &#123; <span class="comment">//店员</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">product</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//默认 0 个产品</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">addproduct</span><span class="params">()</span> &#123; <span class="comment">//生产出的产品，交给店员</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.product &gt;= <span class="number">20</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait(); <span class="comment">//产品过多，稍后再生产</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            product++;</span><br><span class="line">            System.out.println(<span class="string">&quot;生产者生产第&quot;</span> + product + <span class="string">&quot;个产品。&quot;</span>);</span><br><span class="line">            notifyAll(); <span class="comment">//通知等待区的消费者可取产品</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">getproduct</span><span class="params">()</span> &#123; <span class="comment">//消费者从店员处取产品</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.product &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait(); <span class="comment">//缺货，稍后再取</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;消费者取走了第：&quot;</span> + product + <span class="string">&quot;产品。&quot;</span>);</span><br><span class="line">            product--;</span><br><span class="line">            notifyAll(); <span class="comment">//通知等待取得生产者可以继续生产</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Producer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123; <span class="comment">//生产者线程</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> clerk c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Producer</span><span class="params">(clerk c)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.c = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产者开始生产产品。&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep((<span class="type">int</span>) (Math.random() * <span class="number">10</span>) * <span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            c.addproduct(); <span class="comment">//生产</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123; <span class="comment">//消费者线程</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> clerk c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Consumer</span><span class="params">(clerk c)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.c = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者开始取走产品。&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep((<span class="type">int</span>) (Math.random() * <span class="number">10</span>) * <span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            c.getproduct(); <span class="comment">//取产品</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">在多线程环境，如何保证各个线程有序执行？ 本文介绍了几种经典常用的解决方案，其方法都是灵活多变。</summary>
    
    
    
    <category term="Java" scheme="https://pengline.github.io/categories/Java/"/>
    
    <category term="多线程" scheme="https://pengline.github.io/categories/Java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
    <category term="Java多线程" scheme="https://pengline.github.io/tags/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    <category term="Condition" scheme="https://pengline.github.io/tags/Condition/"/>
    
    <category term="CyclicBarrier" scheme="https://pengline.github.io/tags/CyclicBarrier/"/>
    
    <category term="Semaphore" scheme="https://pengline.github.io/tags/Semaphore/"/>
    
    <category term="ExecutorService" scheme="https://pengline.github.io/tags/ExecutorService/"/>
    
    <category term="CountDownLatch" scheme="https://pengline.github.io/tags/CountDownLatch/"/>
    
    <category term="join" scheme="https://pengline.github.io/tags/join/"/>
    
  </entry>
  
  <entry>
    <title>Python 的弱引用和回调函数</title>
    <link href="https://pengline.github.io/2025/09/22/8aa0908410da49a88994c7b3b08f7f67/"/>
    <id>https://pengline.github.io/2025/09/22/8aa0908410da49a88994c7b3b08f7f67/</id>
    <published>2025-09-22T02:29:46.032Z</published>
    <updated>2025-09-22T07:23:04.570Z</updated>
    
    <content type="html"><![CDATA[<h2 id="回调函数">回调函数</h2><p><strong>回调函数（Callback Function）</strong> 是一种编程模式，指的是将一个函数作为参数传递给另一个函数，并在特定时机（如事件触发、异步操作完成、条件满足等）被调用执行。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>实现<strong>异步操作</strong>（如网络请求、文件读写完成后的处理）</p></li><li class="lvl-2"><p>实现<strong>事件驱动</strong>（如 GUI 中按钮点击、定时器触发）</p></li><li class="lvl-2"><p>提高代码<strong>灵活性和复用性</strong>（不同场景传入不同回调函数）</p></li></ul></blockquote><p><strong>优点</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>灵活性高</strong>：行为可动态配置</p></li><li class="lvl-2"><p><strong>解耦</strong>：调用者和被调用者无需直接依赖</p></li><li class="lvl-2"><p><strong>适合事件/异步模型</strong></p></li></ul></blockquote><p><strong>缺点</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>回调地狱（Callback Hell）</strong>：多层嵌套回调导致代码难以阅读和维护</p></li><li class="lvl-2"><p><strong>错误处理复杂</strong>：异常传播困难</p></li><li class="lvl-2"><p><strong>调试困难</strong>：调用栈不直观</p></li></ul></blockquote><h3 id="实现方式">实现方式</h3><ul class="lvl-0"><li class="lvl-2"><p><strong>基础回调</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需要回调的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Hello, <span class="subst">&#123;name&#125;</span>!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数，将回调函数作为参数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_user</span>(<span class="params">name, callback</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Processing user...&quot;</span>)</span><br><span class="line">    callback(name)  <span class="comment"># 回调！</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用主函数</span></span><br><span class="line">process_user(<span class="string">&quot;Alice&quot;</span>, greet)</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># Processing user...</span></span><br><span class="line"><span class="comment"># Hello, Alice!</span></span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>带返回值的回调</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用回调函数计算</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">apply_operation</span>(<span class="params">numbers, operation</span>):</span><br><span class="line">    <span class="keyword">return</span> [operation(num) <span class="keyword">for</span> num <span class="keyword">in</span> numbers]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">result = apply_operation([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], square)</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># [1, 4, 9, 16]</span></span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>匿名函数（lambda）的回调</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">result = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x ** <span class="number">2</span>, numbers))</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># [1, 4, 9, 16, 25]</span></span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>事件驱动回调</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Button</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.click_callbacks = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_click</span>(<span class="params">self, callback</span>):</span><br><span class="line">        <span class="variable language_">self</span>.click_callbacks.append(callback)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">click</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Button clicked!&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> callback <span class="keyword">in</span> <span class="variable language_">self</span>.click_callbacks:</span><br><span class="line">            callback()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">say_hello</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello from callback!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">log_click</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Button was clicked at some time.&quot;</span>)</span><br><span class="line"></span><br><span class="line">btn = Button()</span><br><span class="line">btn.on_click(say_hello)</span><br><span class="line">btn.on_click(log_click)</span><br><span class="line"></span><br><span class="line">btn.click()</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># Button clicked!</span></span><br><span class="line"><span class="comment"># Hello from callback!</span></span><br><span class="line"><span class="comment"># Button was clicked at some time.</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="异步回调">异步回调</h3><ul class="lvl-0"><li class="lvl-2"><p>使用 threading 的异步回调</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">async_task</span>(<span class="params">callback</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">worker</span>():</span><br><span class="line">        time.sleep(<span class="number">2</span>)  <span class="comment"># 模拟耗时操作</span></span><br><span class="line">        result = <span class="string">&quot;Task completed!&quot;</span></span><br><span class="line">        callback(result)</span><br><span class="line"><span class="comment"># 异步执行</span></span><br><span class="line">    thread = threading.Thread(target=worker)</span><br><span class="line">    thread.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回调函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_result</span>(<span class="params">result</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Received result: <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Starting async task...&quot;</span>)</span><br><span class="line">async_task(handle_result)</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>回调 + 参数绑定（functools）</p><p>回调函数需要额外参数，但调用方只允许传入无参函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">notify_user</span>(<span class="params">user_id, message</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;User <span class="subst">&#123;user_id&#125;</span>: <span class="subst">&#123;message&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定部分参数</span></span><br><span class="line">callback = partial(notify_user, <span class="number">123</span>, <span class="string">&quot;Your task is done!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟触发</span></span><br><span class="line">callback()  <span class="comment"># 输出: User 123: Your task is done!</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="弱引用">弱引用</h2><p><strong>弱引用（Weak Reference）</strong> 是一种特殊的引用方式，它<strong>不会增加对象的引用计数</strong>，因此不会阻止对象被垃圾回收机制回收。</p><blockquote><p>Python 使用<strong>引用计数</strong>作为主要的垃圾回收机制。当一个对象的引用计数变为 0 时，它就会被自动回收。</p><p>但在某些场景下，我们希望“观察”或“缓存”一个对象，但又<strong>不希望因为我们的引用而阻止它被回收</strong> —— 这就是弱引用的用武之地。</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p><strong>强引用（Strong Reference）</strong>：普通的变量赋值、容器存储等，会增加引用计数。</p></li><li class="lvl-2"><p><strong>弱引用（Weak Reference）</strong>：不会增加引用计数，对象可被正常回收。</p></li><li class="lvl-2"><p>弱引用指向的对象一旦被回收，弱引用会自动失效（变成 <code>None</code> 或抛出异常）。</p></li></ul><p>不是所有对象都支持弱引用！<strong>只有支持弱引用协议的对象才可以</strong>。</p><p>支持弱引用的对象：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>用户自定义类的实例（默认支持）</p></li><li class="lvl-2"><p>部分内置类型（如 <code>list</code>, <code>dict</code> 在某些 Python 版本中支持，但不推荐依赖）</p></li></ul></blockquote><p>不支持弱引用的对象：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><code>int</code>, <code>str</code>, <code>tuple</code>, <code>float</code> 等<strong>不可变内置类型</strong>（出于性能和实现原因）</p></li><li class="lvl-2"><p>部分 C 扩展对象</p></li></ul></blockquote><h3 id="使用-weakref">使用 weakref</h3><p>Python 提供了标准库 <code>weakref</code> 来创建和管理弱引用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> weakref</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span> 被销毁了&quot;</span>)</span><br><span class="line"></span><br><span class="line">obj = MyClass(<span class="string">&quot;TestObject&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;引用计数:&quot;</span>, sys.getrefcount(obj) - <span class="number">1</span>)  <span class="comment"># 减1是因为getrefcount本身也引用了一次</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建弱引用</span></span><br><span class="line">weak_obj = weakref.ref(obj)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;弱引用指向的对象:&quot;</span>, weak_obj())  <span class="comment"># &lt;__main__.MyClass object at 0x...&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;是否存活:&quot;</span>, weak_obj() <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>)  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除强引用</span></span><br><span class="line"><span class="keyword">del</span> obj</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;弱引用指向的对象:&quot;</span>, weak_obj())  <span class="comment"># None</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;是否存活:&quot;</span>, weak_obj() <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>)  <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h3 id="带回调的弱引用">带回调的弱引用</h3><p>可以在对象被回收时触发一个回调函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> weakref</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">callback</span>(<span class="params">ref</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;对象已被回收，弱引用失效！&quot;</span>)</span><br><span class="line"></span><br><span class="line">obj = MyClass(<span class="string">&quot;CallbackObject&quot;</span>)</span><br><span class="line">weak_obj = weakref.ref(obj, callback)  <span class="comment"># 注册回调</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> obj  <span class="comment"># 触发回收和回调</span></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># CallbackObject 被销毁了</span></span><br><span class="line"><span class="comment"># 对象已被回收，弱引用失效！</span></span><br></pre></td></tr></table></figure><h3 id="弱引用字典">弱引用字典</h3><ul class="lvl-0"><li class="lvl-3"><p><code>WeakKeyDictionary</code>：键是弱引用（键可被回收）</p></li></ul>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> weakref</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Key</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;Key(<span class="subst">&#123;self.name&#125;</span>)&quot;</span></span><br><span class="line"></span><br><span class="line">key1 = Key(<span class="string">&quot;A&quot;</span>)</span><br><span class="line">key2 = Key(<span class="string">&quot;B&quot;</span>)</span><br><span class="line"></span><br><span class="line">weak_dict = weakref.WeakKeyDictionary()</span><br><span class="line">weak_dict[key1] = <span class="string">&quot;value1&quot;</span></span><br><span class="line">weak_dict[key2] = <span class="string">&quot;value2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;当前字典:&quot;</span>, <span class="built_in">dict</span>(weak_dict))  <span class="comment"># &#123;Key(A): &#x27;value1&#x27;, Key(B): &#x27;value2&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> key1</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;删除 key1 后:&quot;</span>, <span class="built_in">dict</span>(weak_dict))  <span class="comment"># &#123;Key(B): &#x27;value2&#x27;&#125;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>WeakValueDictionary</code>：值是弱引用（值可被回收）</p><p>键或值必须是<strong>可哈希对象</strong>（通常是自定义类实例），不能是 <code>list</code>, <code>dict</code> 等不可哈希类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">weak_val_dict = weakref.WeakValueDictionary()</span><br><span class="line">obj1 = MyClass(<span class="string">&quot;Obj1&quot;</span>)</span><br><span class="line">obj2 = MyClass(<span class="string">&quot;Obj2&quot;</span>)</span><br><span class="line"></span><br><span class="line">weak_val_dict[<span class="string">&quot;a&quot;</span>] = obj1</span><br><span class="line">weak_val_dict[<span class="string">&quot;b&quot;</span>] = obj2</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;当前字典:&quot;</span>, <span class="built_in">dict</span>(weak_val_dict))</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> obj1</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;删除 obj1 后:&quot;</span>, <span class="built_in">dict</span>(weak_val_dict))  <span class="comment"># 只剩 &#x27;b&#x27;: obj2</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="弱引用集合">弱引用集合</h3><p>类似 <code>set</code>，但元素是弱引用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">weak_set = weakref.WeakSet()</span><br><span class="line"></span><br><span class="line">obj1 = MyClass(<span class="string">&quot;SetObj1&quot;</span>)</span><br><span class="line">obj2 = MyClass(<span class="string">&quot;SetObj2&quot;</span>)</span><br><span class="line"></span><br><span class="line">weak_set.add(obj1)</span><br><span class="line">weak_set.add(obj2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;当前集合:&quot;</span>, <span class="built_in">list</span>(weak_set))</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> obj1</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;删除 obj1 后:&quot;</span>, <span class="built_in">list</span>(weak_set))  <span class="comment"># 只剩 obj2</span></span><br></pre></td></tr></table></figure><h3 id="应用场景">应用场景</h3><ul class="lvl-0"><li class="lvl-2"><p>缓存系统，避免内存泄漏</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> weakref</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DataCache</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>._cache = weakref.WeakValueDictionary()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, key</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._cache.get(key)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set</span>(<span class="params">self, key, value</span>):</span><br><span class="line">        <span class="variable language_">self</span>._cache[key] = value</span><br><span class="line"></span><br><span class="line">cache = DataCache()</span><br><span class="line">big_data = MyClass(<span class="string">&quot;BigData&quot;</span>)</span><br><span class="line">cache.<span class="built_in">set</span>(<span class="string">&quot;data1&quot;</span>, big_data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cache.get(<span class="string">&quot;data1&quot;</span>))  <span class="comment"># 存在</span></span><br><span class="line"><span class="keyword">del</span> big_data</span><br><span class="line"><span class="built_in">print</span>(cache.get(<span class="string">&quot;data1&quot;</span>))  <span class="comment"># None —— 自动清理！</span></span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>观察者模式 / 事件监听器，避免循环引用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Subject</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>._observers = weakref.WeakSet()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_observer</span>(<span class="params">self, observer</span>):</span><br><span class="line">        <span class="variable language_">self</span>._observers.add(observer)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">notify</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> obs <span class="keyword">in</span> <span class="variable language_">self</span>._observers:</span><br><span class="line">            obs.update()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Observer</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;收到通知！&quot;</span>)</span><br><span class="line"></span><br><span class="line">subject = Subject()</span><br><span class="line">observer = Observer()</span><br><span class="line">subject.add_observer(observer)</span><br><span class="line">subject.notify()  <span class="comment"># 收到通知！</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> observer  <span class="comment"># observer 被回收，自动从 WeakSet 中移除</span></span><br><span class="line">subject.notify()  <span class="comment"># 无输出，不会报错</span></span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>父子对象引用，避免循环引用导致内存泄漏</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        <span class="variable language_">self</span>.children = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, parent</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        <span class="variable language_">self</span>.parent = weakref.ref(parent)  <span class="comment"># 弱引用父对象，避免循环引用</span></span><br><span class="line"></span><br><span class="line">p = Parent(<span class="string">&quot;Parent1&quot;</span>)</span><br><span class="line">c = Child(<span class="string">&quot;Child1&quot;</span>, p)</span><br><span class="line">p.children.append(c)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c.parent().name)  <span class="comment"># Parent1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> p  <span class="comment"># 父对象可被正常回收</span></span><br><span class="line"><span class="built_in">print</span>(c.parent())       <span class="comment"># None</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="系统中的应用">系统中的应用</h2><p>支持传递多个参数+弱引用的回调函数使用</p><h3 id="定义回调函数">定义回调函数</h3><p>支持多个参数：用于处理主函数完成后的操作：成功或失败的处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">handle_workflow_completion</span>(<span class="params">self, task_id, prompt_id, success, msg, **kwargs</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> lock:</span><br><span class="line">            <span class="keyword">if</span> success:</span><br><span class="line">                task.status = TaskStatus.SUCCESS.value</span><br><span class="line">                task.task_msg = <span class="string">f&quot;任务执行成功，工作流已完成：<span class="subst">&#123;msg&#125;</span>&quot;</span></span><br><span class="line">                <span class="variable language_">self</span>.on_complete(task, prompt_id, file_names)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> task.execution_count &lt;= <span class="variable language_">self</span>.task_max_retry:</span><br><span class="line">                    task.status = TaskStatus.QUEUED.value</span><br><span class="line">                    task.task_msg = msg</span><br><span class="line">                    task.end_time = <span class="literal">None</span>  <span class="comment"># 清除结束时间</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="variable language_">self</span>.on_error(task, <span class="string">f&quot;任务执行失败：已重试超过<span class="subst">&#123;self.task_max_retry&#125;</span>次，<span class="subst">&#123;msg&#125;</span>&quot;</span>)</span><br><span class="line">                    async_send_failure_email(task_id, task.task_type, task.task_msg)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print_log_exception()</span><br></pre></td></tr></table></figure><h3 id="定义主函数">定义主函数</h3><p>主函数内部可以继续使用回调函数：<code>on_complete</code>、<code>on_error</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">async_run_workflow</span>(<span class="params">self, on_complete=<span class="literal">None</span>, on_error=<span class="literal">None</span>, task_id=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> true:</span><br><span class="line">            on_complete(task_id, prompt_id) </span><br><span class="line"></span><br><span class="line">        workflow_status_checker.check_workflow_status_async(</span><br><span class="line">            <span class="comment"># on_complete=weakref.WeakMethod(task_callback_handler.handle_workflow_completion),</span></span><br><span class="line">            <span class="comment"># on_timeout=weakref.WeakMethod(task_callback_handler.handle_workflow_timeout),</span></span><br><span class="line">            on_complete=task_callback_handler.handle_workflow_completion,</span><br><span class="line">            on_timeout=task_callback_handler.handle_workflow_timeout,</span><br><span class="line">            prompt_id=prompt_id,</span><br><span class="line">            task_id=task_id</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> prompt_id</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print_log_exception()</span><br><span class="line">        on_error(task_id, &#123;<span class="built_in">str</span>(e)&#125;)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="定义执行函数">定义执行函数</h3><p>执行主函数，调用回调函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">check_workflow_status_async</span>(<span class="params">self, prompt_id: <span class="built_in">str</span>,</span></span><br><span class="line"><span class="params">                                on_complete: <span class="type">Callable</span>[[<span class="built_in">str</span>, <span class="built_in">bool</span>], <span class="literal">None</span>],</span></span><br><span class="line"><span class="params">                                task_id: <span class="built_in">str</span> = <span class="literal">None</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">   <span class="keyword">if</span> true:</span><br><span class="line">    <span class="variable language_">self</span>.callback_with_complete(task_id, prompt_id, <span class="literal">True</span>, <span class="string">&quot;成功&quot;</span>, on_complete)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 执行完成回调，标记为失败</span></span><br><span class="line">    <span class="variable language_">self</span>.callback_with_complete(task_id, prompt_id, <span class="literal">False</span>, <span class="string">&quot;工作流执行出错，错误&quot;</span>, on_complete)    </span><br></pre></td></tr></table></figure><h3 id="弱引用调用回调函数">弱引用调用回调函数</h3><p>使用 <code>functools </code>包装所有参数，使用 <code>weakref </code>调用 <code>functools </code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">callback_with_complete</span>(<span class="params">self, task_id: <span class="built_in">str</span>, prompt_id: <span class="built_in">str</span>, success: <span class="built_in">bool</span>, msg: <span class="built_in">str</span>, on_complete</span>):</span><br><span class="line">    <span class="comment"># 执行完成回调，标记为失败</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        callback_with_args = functools.partial(</span><br><span class="line">            on_complete,</span><br><span class="line">            task_id,</span><br><span class="line">            prompt_id,</span><br><span class="line">            success,</span><br><span class="line">            output_name,</span><br><span class="line">            msg</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        weak_callback = weakref.ref(callback_with_args)</span><br><span class="line">        <span class="comment"># 调用弱引用回调</span></span><br><span class="line">        <span class="keyword">if</span> weak_callback() <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            weak_callback()()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            warning(<span class="string">&quot;weak_callback_complete 对象已被垃圾回收&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        error(<span class="string">f&quot;weak_callback_complete 执行完成回调时出错: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">        print_log_exception()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">用于事件触发、异步操作的回调函数，用于辅助垃圾回收机制的弱引用，防止内存泄漏。</summary>
    
    
    
    <category term="Python" scheme="https://pengline.github.io/categories/Python/"/>
    
    <category term="回调函数" scheme="https://pengline.github.io/categories/Python/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/"/>
    
    
    <category term="Python回调函数" scheme="https://pengline.github.io/tags/Python%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/"/>
    
    <category term="Python弱引用" scheme="https://pengline.github.io/tags/Python%E5%BC%B1%E5%BC%95%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 提供的默认图标样式（4.7.0）</title>
    <link href="https://pengline.github.io/2025/09/20/84109943ebba4ffb9278daf2c200c0aa/"/>
    <id>https://pengline.github.io/2025/09/20/84109943ebba4ffb9278daf2c200c0aa/</id>
    <published>2025-09-20T03:28:10.611Z</published>
    <updated>2025-09-24T15:08:10.385Z</updated>
    
    <content type="html"><![CDATA[<head>    <link rel="stylesheet" id="9iphp-style-css" href="/css/hexo-icons.css" type="text/css" media="all">    <sty</head><body><article class="well clearfix page fa-icons" id="post"><div class="page-content">        <h1 class="page-header">使用指南</h1><div class="alert alert-info">引入CSS：<code>&lt;link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet"&gt;</code><br>HTML标签用法 <code>&lt;i class="fa fa-XXX"&gt;&lt;/i&gt;</code> （如：<code>&lt;i class="fa fa-home"&gt;&lt;/i&gt;</code> 输出 <iclass="fa fa-home"></i>）<br>           配置文件用法 <code>name: / || fas fa-XXX</code>（如：<code>首页: / || fas fa-home</code> 输出 <iclass="fa fa-home"></i>）<br>            更多内容请访问 <a class="alert-link" href="http://fontawesome.io/" target="_blank" data-original-title="" title="">http://fontawesome.io/</a></div><section id="new"><h1 class="page-header">4.7新增图标</h1><div class="row fontawesome-icon-list"><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-address-book" aria-hidden="true"></i> address-book</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-address-book-o" aria-hidden="true"></i> address-book-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-address-card" aria-hidden="true"></i> Example of address-card</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-address-card-o" aria-hidden="true"></i> address-card-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bandcamp" aria-hidden="true"></i> bandcamp</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bath" aria-hidden="true"></i> bath</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bathtub" aria-hidden="true"></i> bathtub <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-drivers-license" aria-hidden="true"></i> drivers-license <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-drivers-license-o" aria-hidden="true"></i> drivers-license-o <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-eercast" aria-hidden="true"></i> eercast</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-envelope-open" aria-hidden="true"></i> envelope-open</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-envelope-open-o" aria-hidden="true"></i> envelope-open-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-etsy" aria-hidden="true"></i> etsy</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-free-code-camp" aria-hidden="true"></i> free-code-camp</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-grav" aria-hidden="true"></i> grav</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-handshake-o" aria-hidden="true"></i> handshake-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-id-badge" aria-hidden="true"></i> id-badge</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-id-card" aria-hidden="true"></i> id-card</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-id-card-o" aria-hidden="true"></i> id-card-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-imdb" aria-hidden="true"></i> imdb</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-linode" aria-hidden="true"></i> linode</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-meetup" aria-hidden="true"></i> meetup</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-microchip" aria-hidden="true"></i> microchip</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-podcast" aria-hidden="true"></i> podcast</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-quora" aria-hidden="true"></i> quora</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-ravelry" aria-hidden="true"></i> ravelry</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-s15" aria-hidden="true"></i> s15 <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-shower" aria-hidden="true"></i> shower</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-snowflake-o" aria-hidden="true"></i> snowflake-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-superpowers" aria-hidden="true"></i> superpowers</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-telegram" aria-hidden="true"></i> telegram</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thermometer" aria-hidden="true"></i> thermometer <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thermometer-0" aria-hidden="true"></i> thermometer-0 <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thermometer-1" aria-hidden="true"></i> thermometer-1 <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thermometer-2" aria-hidden="true"></i> thermometer-2 <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thermometer-3" aria-hidden="true"></i> thermometer-3 <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thermometer-4" aria-hidden="true"></i> thermometer-4 <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thermometer-empty" aria-hidden="true"></i> thermometer-empty</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thermometer-full" aria-hidden="true"></i> thermometer-full</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thermometer-half" aria-hidden="true"></i> thermometer-half</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thermometer-quarter" aria-hidden="true"></i> thermometer-quarter</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thermometer-three-quarters" aria-hidden="true"></i> thermometer-three-quarters</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-times-rectangle" aria-hidden="true"></i> times-rectangle <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-times-rectangle-o" aria-hidden="true"></i> times-rectangle-o <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-user-circle" aria-hidden="true"></i> user-circle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-user-circle-o" aria-hidden="true"></i> user-circle-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-user-o" aria-hidden="true"></i> user-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-vcard" aria-hidden="true"></i> vcard <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-vcard-o" aria-hidden="true"></i> vcard-o <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-window-close" aria-hidden="true"></i> window-close</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-window-close-o" aria-hidden="true"></i> window-close-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-window-maximize" aria-hidden="true"></i> window-maximize</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-window-minimize" aria-hidden="true"></i> window-minimize</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-window-restore" aria-hidden="true"></i> window-restore</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-wpexplorer" aria-hidden="true"></i> wpexplorer</div></div></section><section id="web-application"><h1 class="page-header">Web 应用类</h1><div class="row fontawesome-icon-list"><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-address-book" aria-hidden="true"></i> address-book</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-address-book-o" aria-hidden="true"></i> address-book-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-address-card" aria-hidden="true"></i> address-card</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-address-card-o" aria-hidden="true"></i> address-card-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-adjust" aria-hidden="true"></i> adjust</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-american-sign-language-interpreting" aria-hidden="true"></i> american-sign-language-interpreting</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-anchor" aria-hidden="true"></i> anchor</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-archive" aria-hidden="true"></i> archive</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-area-chart" aria-hidden="true"></i> area-chart</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-arrows" aria-hidden="true"></i> arrows</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-arrows-h" aria-hidden="true"></i> arrows-h</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-arrows-v" aria-hidden="true"></i> arrows-v</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-asl-interpreting" aria-hidden="true"></i> asl-interpreting <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-assistive-listening-systems" aria-hidden="true"></i> assistive-listening-systems</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-asterisk" aria-hidden="true"></i> asterisk</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-at" aria-hidden="true"></i> at</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-audio-description" aria-hidden="true"></i> audio-description</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-automobile" aria-hidden="true"></i> automobile <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-balance-scale" aria-hidden="true"></i> balance-scale</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-ban" aria-hidden="true"></i> ban</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bank" aria-hidden="true"></i> bank <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bar-chart" aria-hidden="true"></i> bar-chart</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bar-chart-o" aria-hidden="true"></i> bar-chart-o <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-barcode" aria-hidden="true"></i> barcode</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bars" aria-hidden="true"></i> bars</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bath" aria-hidden="true"></i> bath</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bathtub" aria-hidden="true"></i> bathtub <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-battery" aria-hidden="true"></i> battery <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-battery-0" aria-hidden="true"></i> battery-0 <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-battery-1" aria-hidden="true"></i> battery-1 <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-battery-2" aria-hidden="true"></i> battery-2 <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-battery-3" aria-hidden="true"></i> battery-3 <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-battery-4" aria-hidden="true"></i> battery-4 <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-battery-empty" aria-hidden="true"></i> battery-empty</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-battery-full" aria-hidden="true"></i> battery-full</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-battery-half" aria-hidden="true"></i> battery-half</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-battery-quarter" aria-hidden="true"></i> battery-quarter</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-battery-three-quarters" aria-hidden="true"></i> battery-three-quarters</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bed" aria-hidden="true"></i> bed</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-beer" aria-hidden="true"></i> beer</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bell" aria-hidden="true"></i> bell</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bell-o" aria-hidden="true"></i> bell-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bell-slash" aria-hidden="true"></i> bell-slash</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bell-slash-o" aria-hidden="true"></i> bell-slash-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bicycle" aria-hidden="true"></i> bicycle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-binoculars" aria-hidden="true"></i> binoculars</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-birthday-cake" aria-hidden="true"></i> birthday-cake</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-blind" aria-hidden="true"></i> blind</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bluetooth" aria-hidden="true"></i> bluetooth</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bluetooth-b" aria-hidden="true"></i> bluetooth-b</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bolt" aria-hidden="true"></i> bolt</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bomb" aria-hidden="true"></i> bomb</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-book" aria-hidden="true"></i> book</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bookmark" aria-hidden="true"></i> bookmark</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bookmark-o" aria-hidden="true"></i> bookmark-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-braille" aria-hidden="true"></i> braille</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-briefcase" aria-hidden="true"></i> briefcase</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bug" aria-hidden="true"></i> bug</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-building" aria-hidden="true"></i> building</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-building-o" aria-hidden="true"></i> building-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bullhorn" aria-hidden="true"></i> bullhorn</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bullseye" aria-hidden="true"></i> bullseye</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bus" aria-hidden="true"></i> bus</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cab" aria-hidden="true"></i> cab <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-calculator" aria-hidden="true"></i> calculator</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-calendar" aria-hidden="true"></i> calendar</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-calendar-check-o" aria-hidden="true"></i> calendar-check-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-calendar-minus-o" aria-hidden="true"></i> calendar-minus-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-calendar-o" aria-hidden="true"></i> calendar-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-calendar-plus-o" aria-hidden="true"></i> calendar-plus-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-calendar-times-o" aria-hidden="true"></i> calendar-times-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-camera" aria-hidden="true"></i> camera</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-camera-retro" aria-hidden="true"></i> camera-retro</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-car" aria-hidden="true"></i> car</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-caret-square-o-down" aria-hidden="true"></i> caret-square-o-down</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-caret-square-o-left" aria-hidden="true"></i> caret-square-o-left</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-caret-square-o-right" aria-hidden="true"></i> caret-square-o-right</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-caret-square-o-up" aria-hidden="true"></i> caret-square-o-up</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cart-arrow-down" aria-hidden="true"></i> cart-arrow-down</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cart-plus" aria-hidden="true"></i> cart-plus</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cc" aria-hidden="true"></i> cc</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-certificate" aria-hidden="true"></i> certificate</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-check" aria-hidden="true"></i> check</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-check-circle" aria-hidden="true"></i> check-circle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-check-circle-o" aria-hidden="true"></i> check-circle-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-check-square" aria-hidden="true"></i> check-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-check-square-o" aria-hidden="true"></i> check-square-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-child" aria-hidden="true"></i> child</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-circle" aria-hidden="true"></i> circle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-circle-o" aria-hidden="true"></i> circle-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-circle-o-notch" aria-hidden="true"></i> circle-o-notch</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-circle-thin" aria-hidden="true"></i> circle-thin</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-clock-o" aria-hidden="true"></i> clock-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-clone" aria-hidden="true"></i> clone</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-close" aria-hidden="true"></i> close <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cloud" aria-hidden="true"></i> cloud</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cloud-download" aria-hidden="true"></i> cloud-download</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cloud-upload" aria-hidden="true"></i> cloud-upload</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-code" aria-hidden="true"></i> code</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-code-fork" aria-hidden="true"></i> code-fork</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-coffee" aria-hidden="true"></i> coffee</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cog" aria-hidden="true"></i> cog</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cogs" aria-hidden="true"></i> cogs</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-comment" aria-hidden="true"></i> comment</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-comment-o" aria-hidden="true"></i> comment-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-commenting" aria-hidden="true"></i> commenting</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-commenting-o" aria-hidden="true"></i> commenting-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-comments" aria-hidden="true"></i> comments</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-comments-o" aria-hidden="true"></i> comments-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-compass" aria-hidden="true"></i> compass</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-copyright" aria-hidden="true"></i> copyright</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-creative-commons" aria-hidden="true"></i> creative-commons</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-credit-card" aria-hidden="true"></i> credit-card</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-credit-card-alt" aria-hidden="true"></i> credit-card-alt</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-crop" aria-hidden="true"></i> crop</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-crosshairs" aria-hidden="true"></i> crosshairs</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cube" aria-hidden="true"></i> cube</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cubes" aria-hidden="true"></i> cubes</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cutlery" aria-hidden="true"></i> cutlery</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-dashboard" aria-hidden="true"></i> dashboard <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-database" aria-hidden="true"></i> database</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-deaf" aria-hidden="true"></i> deaf</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-deafness" aria-hidden="true"></i> deafness <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-desktop" aria-hidden="true"></i> desktop</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-diamond" aria-hidden="true"></i> diamond</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-dot-circle-o" aria-hidden="true"></i> dot-circle-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-download" aria-hidden="true"></i> download</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-drivers-license" aria-hidden="true"></i> drivers-license <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-drivers-license-o" aria-hidden="true"></i> drivers-license-o <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-edit" aria-hidden="true"></i> edit <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-ellipsis-h" aria-hidden="true"></i> ellipsis-h</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-ellipsis-v" aria-hidden="true"></i> ellipsis-v</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-envelope" aria-hidden="true"></i> envelope</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-envelope-o" aria-hidden="true"></i> envelope-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-envelope-open" aria-hidden="true"></i> envelope-open</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-envelope-open-o" aria-hidden="true"></i> envelope-open-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-envelope-square" aria-hidden="true"></i> envelope-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-eraser" aria-hidden="true"></i> eraser</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-exchange" aria-hidden="true"></i> exchange</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-exclamation" aria-hidden="true"></i> exclamation</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-exclamation-circle" aria-hidden="true"></i> exclamation-circle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-exclamation-triangle" aria-hidden="true"></i> exclamation-triangle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-external-link" aria-hidden="true"></i> external-link</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-external-link-square" aria-hidden="true"></i> external-link-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-eye" aria-hidden="true"></i> eye</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-eye-slash" aria-hidden="true"></i> eye-slash</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-eyedropper" aria-hidden="true"></i> eyedropper</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-fax" aria-hidden="true"></i> fax</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-feed" aria-hidden="true"></i> feed <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-female" aria-hidden="true"></i> female</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-fighter-jet" aria-hidden="true"></i> fighter-jet</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-archive-o" aria-hidden="true"></i> file-archive-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-audio-o" aria-hidden="true"></i> file-audio-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-code-o" aria-hidden="true"></i> file-code-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-excel-o" aria-hidden="true"></i> file-excel-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-image-o" aria-hidden="true"></i> file-image-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-movie-o" aria-hidden="true"></i> file-movie-o <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-pdf-o" aria-hidden="true"></i> file-pdf-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-photo-o" aria-hidden="true"></i> file-photo-o <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-picture-o" aria-hidden="true"></i> file-picture-o <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-powerpoint-o" aria-hidden="true"></i> file-powerpoint-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-sound-o" aria-hidden="true"></i> file-sound-o <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-video-o" aria-hidden="true"></i> file-video-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-word-o" aria-hidden="true"></i> file-word-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-zip-o" aria-hidden="true"></i> file-zip-o <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-film" aria-hidden="true"></i> film</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-filter" aria-hidden="true"></i> filter</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-fire" aria-hidden="true"></i> fire</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-fire-extinguisher" aria-hidden="true"></i> fire-extinguisher</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-flag" aria-hidden="true"></i> flag</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-flag-checkered" aria-hidden="true"></i> flag-checkered</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-flag-o" aria-hidden="true"></i> flag-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-flash" aria-hidden="true"></i> flash <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-flask" aria-hidden="true"></i> flask</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-folder" aria-hidden="true"></i> folder</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-folder-o" aria-hidden="true"></i> folder-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-folder-open" aria-hidden="true"></i> folder-open</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-folder-open-o" aria-hidden="true"></i> folder-open-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-frown-o" aria-hidden="true"></i> frown-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-futbol-o" aria-hidden="true"></i> futbol-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-gamepad" aria-hidden="true"></i> gamepad</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-gavel" aria-hidden="true"></i> gavel</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-gear" aria-hidden="true"></i> gear <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-gears" aria-hidden="true"></i> gears <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-gift" aria-hidden="true"></i> gift</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-glass" aria-hidden="true"></i> glass</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-globe" aria-hidden="true"></i> globe</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-graduation-cap" aria-hidden="true"></i> graduation-cap</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-group" aria-hidden="true"></i> group <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-grab-o" aria-hidden="true"></i> hand-grab-o <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-lizard-o" aria-hidden="true"></i> hand-lizard-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-paper-o" aria-hidden="true"></i> hand-paper-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-peace-o" aria-hidden="true"></i> hand-peace-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-pointer-o" aria-hidden="true"></i> hand-pointer-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-rock-o" aria-hidden="true"></i> hand-rock-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-scissors-o" aria-hidden="true"></i> hand-scissors-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-spock-o" aria-hidden="true"></i> hand-spock-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-stop-o" aria-hidden="true"></i> hand-stop-o <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-handshake-o" aria-hidden="true"></i> handshake-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hard-of-hearing" aria-hidden="true"></i> hard-of-hearing <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hashtag" aria-hidden="true"></i> hashtag</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hdd-o" aria-hidden="true"></i> hdd-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-headphones" aria-hidden="true"></i> headphones</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-heart" aria-hidden="true"></i> heart</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-heart-o" aria-hidden="true"></i> heart-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-heartbeat" aria-hidden="true"></i> heartbeat</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-history" aria-hidden="true"></i> history</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-home" aria-hidden="true"></i> home</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hotel" aria-hidden="true"></i> hotel <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hourglass" aria-hidden="true"></i> hourglass</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hourglass-1" aria-hidden="true"></i> hourglass-1 <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hourglass-2" aria-hidden="true"></i> hourglass-2 <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hourglass-3" aria-hidden="true"></i> hourglass-3 <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hourglass-end" aria-hidden="true"></i> hourglass-end</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hourglass-half" aria-hidden="true"></i> hourglass-half</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hourglass-o" aria-hidden="true"></i> hourglass-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hourglass-start" aria-hidden="true"></i> hourglass-start</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-i-cursor" aria-hidden="true"></i> i-cursor</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-id-badge" aria-hidden="true"></i> id-badge</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-id-card" aria-hidden="true"></i> id-card</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-id-card-o" aria-hidden="true"></i> id-card-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-image" aria-hidden="true"></i> image <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-inbox" aria-hidden="true"></i> inbox</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-industry" aria-hidden="true"></i> industry</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-info" aria-hidden="true"></i> info</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-info-circle" aria-hidden="true"></i> info-circle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-institution" aria-hidden="true"></i> institution <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-key" aria-hidden="true"></i> key</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-keyboard-o" aria-hidden="true"></i> keyboard-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-language" aria-hidden="true"></i> language</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-laptop" aria-hidden="true"></i> laptop</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-leaf" aria-hidden="true"></i> leaf</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-legal" aria-hidden="true"></i> legal <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-lemon-o" aria-hidden="true"></i> lemon-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-level-down" aria-hidden="true"></i> level-down</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-level-up" aria-hidden="true"></i> level-up</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-life-bouy" aria-hidden="true"></i> life-bouy <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-life-buoy" aria-hidden="true"></i> life-buoy <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-life-ring" aria-hidden="true"></i> life-ring</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-life-saver" aria-hidden="true"></i> life-saver <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-lightbulb-o" aria-hidden="true"></i> lightbulb-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-line-chart" aria-hidden="true"></i> line-chart</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-location-arrow" aria-hidden="true"></i> location-arrow</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-lock" aria-hidden="true"></i> lock</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-low-vision" aria-hidden="true"></i> low-vision</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-magic" aria-hidden="true"></i> magic</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-magnet" aria-hidden="true"></i> magnet</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-mail-forward" aria-hidden="true"></i> mail-forward <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-mail-reply" aria-hidden="true"></i> mail-reply <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-mail-reply-all" aria-hidden="true"></i> mail-reply-all <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-male" aria-hidden="true"></i> male</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-map" aria-hidden="true"></i> map</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-map-marker" aria-hidden="true"></i> map-marker</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-map-o" aria-hidden="true"></i> map-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-map-pin" aria-hidden="true"></i> map-pin</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-map-signs" aria-hidden="true"></i> map-signs</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-meh-o" aria-hidden="true"></i> meh-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-microchip" aria-hidden="true"></i> microchip</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-microphone" aria-hidden="true"></i> microphone</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-microphone-slash" aria-hidden="true"></i> microphone-slash</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-minus" aria-hidden="true"></i> minus</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-minus-circle" aria-hidden="true"></i> minus-circle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-minus-square" aria-hidden="true"></i> minus-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-minus-square-o" aria-hidden="true"></i> minus-square-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-mobile" aria-hidden="true"></i> mobile</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-mobile-phone" aria-hidden="true"></i> mobile-phone <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-money" aria-hidden="true"></i> money</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-moon-o" aria-hidden="true"></i> moon-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-mortar-board" aria-hidden="true"></i> mortar-board <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-motorcycle" aria-hidden="true"></i> motorcycle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-mouse-pointer" aria-hidden="true"></i> mouse-pointer</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-music" aria-hidden="true"></i> music</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-navicon" aria-hidden="true"></i> navicon <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-newspaper-o" aria-hidden="true"></i> newspaper-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-object-group" aria-hidden="true"></i> object-group</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-object-ungroup" aria-hidden="true"></i> object-ungroup</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-paint-brush" aria-hidden="true"></i> paint-brush</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-paper-plane" aria-hidden="true"></i> paper-plane</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-paper-plane-o" aria-hidden="true"></i> paper-plane-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-paw" aria-hidden="true"></i> paw</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-pencil" aria-hidden="true"></i> pencil</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-pencil-square" aria-hidden="true"></i> pencil-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-pencil-square-o" aria-hidden="true"></i> pencil-square-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-percent" aria-hidden="true"></i> percent</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-phone" aria-hidden="true"></i> phone</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-phone-square" aria-hidden="true"></i> phone-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-photo" aria-hidden="true"></i> photo <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-picture-o" aria-hidden="true"></i> picture-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-pie-chart" aria-hidden="true"></i> pie-chart</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-plane" aria-hidden="true"></i> plane</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-plug" aria-hidden="true"></i> plug</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-plus" aria-hidden="true"></i> plus</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-plus-circle" aria-hidden="true"></i> plus-circle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-plus-square" aria-hidden="true"></i> plus-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-plus-square-o" aria-hidden="true"></i> plus-square-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-podcast" aria-hidden="true"></i> podcast</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-power-off" aria-hidden="true"></i> power-off</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-print" aria-hidden="true"></i> print</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-puzzle-piece" aria-hidden="true"></i> puzzle-piece</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-qrcode" aria-hidden="true"></i> qrcode</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-question" aria-hidden="true"></i> question</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-question-circle" aria-hidden="true"></i> question-circle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-question-circle-o" aria-hidden="true"></i> question-circle-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-quote-left" aria-hidden="true"></i> quote-left</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-quote-right" aria-hidden="true"></i> quote-right</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-random" aria-hidden="true"></i> random</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-recycle" aria-hidden="true"></i> recycle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-refresh" aria-hidden="true"></i> refresh</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-registered" aria-hidden="true"></i> registered</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-remove" aria-hidden="true"></i> remove <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-reorder" aria-hidden="true"></i> reorder <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-reply" aria-hidden="true"></i> reply</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-reply-all" aria-hidden="true"></i> reply-all</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-retweet" aria-hidden="true"></i> retweet</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-road" aria-hidden="true"></i> road</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-rocket" aria-hidden="true"></i> rocket</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-rss" aria-hidden="true"></i> rss</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-rss-square" aria-hidden="true"></i> rss-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-s15" aria-hidden="true"></i> s15 <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-search" aria-hidden="true"></i> search</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-search-minus" aria-hidden="true"></i> search-minus</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-search-plus" aria-hidden="true"></i> search-plus</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-send" aria-hidden="true"></i> send <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-send-o" aria-hidden="true"></i> send-o <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-server" aria-hidden="true"></i> server</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-share" aria-hidden="true"></i> share</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-share-alt" aria-hidden="true"></i> share-alt</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-share-alt-square" aria-hidden="true"></i> share-alt-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-share-square" aria-hidden="true"></i> share-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-share-square-o" aria-hidden="true"></i> share-square-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-shield" aria-hidden="true"></i> shield</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-ship" aria-hidden="true"></i> ship</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-shopping-bag" aria-hidden="true"></i> shopping-bag</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-shopping-basket" aria-hidden="true"></i> shopping-basket</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-shopping-cart" aria-hidden="true"></i> shopping-cart</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-shower" aria-hidden="true"></i> shower</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-sign-in" aria-hidden="true"></i> sign-in</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-sign-language" aria-hidden="true"></i> sign-language</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-sign-out" aria-hidden="true"></i> sign-out</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-signal" aria-hidden="true"></i> signal</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-signing" aria-hidden="true"></i> signing <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-sitemap" aria-hidden="true"></i> sitemap</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-sliders" aria-hidden="true"></i> sliders</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-smile-o" aria-hidden="true"></i> smile-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-snowflake-o" aria-hidden="true"></i> snowflake-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-soccer-ball-o" aria-hidden="true"></i> soccer-ball-o <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-sort" aria-hidden="true"></i> sort</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-sort-alpha-asc" aria-hidden="true"></i> sort-alpha-asc</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-sort-alpha-desc" aria-hidden="true"></i> sort-alpha-desc</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-sort-amount-asc" aria-hidden="true"></i> sort-amount-asc</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-sort-amount-desc" aria-hidden="true"></i> sort-amount-desc</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-sort-asc" aria-hidden="true"></i> sort-asc</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-sort-desc" aria-hidden="true"></i> sort-desc</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-sort-down" aria-hidden="true"></i> sort-down <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-sort-numeric-asc" aria-hidden="true"></i> sort-numeric-asc</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-sort-numeric-desc" aria-hidden="true"></i> sort-numeric-desc</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-sort-up" aria-hidden="true"></i> sort-up <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-space-shuttle" aria-hidden="true"></i> space-shuttle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-spinner" aria-hidden="true"></i> spinner</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-spoon" aria-hidden="true"></i> spoon</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-square" aria-hidden="true"></i> square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-square-o" aria-hidden="true"></i> square-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-star" aria-hidden="true"></i> star</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-star-half" aria-hidden="true"></i> star-half</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-star-half-empty" aria-hidden="true"></i> star-half-empty <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-star-half-full" aria-hidden="true"></i> star-half-full <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-star-half-o" aria-hidden="true"></i> star-half-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-star-o" aria-hidden="true"></i> star-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-sticky-note" aria-hidden="true"></i> sticky-note</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-sticky-note-o" aria-hidden="true"></i> sticky-note-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-street-view" aria-hidden="true"></i> street-view</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-suitcase" aria-hidden="true"></i> suitcase</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-sun-o" aria-hidden="true"></i> sun-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-support" aria-hidden="true"></i> support <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-tablet" aria-hidden="true"></i> tablet</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-tachometer" aria-hidden="true"></i> tachometer</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-tag" aria-hidden="true"></i> tag</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-tags" aria-hidden="true"></i> tags</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-tasks" aria-hidden="true"></i> tasks</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-taxi" aria-hidden="true"></i> taxi</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-television" aria-hidden="true"></i> television</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-terminal" aria-hidden="true"></i> terminal</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thermometer" aria-hidden="true"></i> thermometer <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thermometer-0" aria-hidden="true"></i> thermometer-0 <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thermometer-1" aria-hidden="true"></i> thermometer-1 <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thermometer-2" aria-hidden="true"></i> thermometer-2 <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thermometer-3" aria-hidden="true"></i> thermometer-3 <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thermometer-4" aria-hidden="true"></i> thermometer-4 <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thermometer-empty" aria-hidden="true"></i> thermometer-empty</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thermometer-full" aria-hidden="true"></i> thermometer-full</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thermometer-half" aria-hidden="true"></i> thermometer-half</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thermometer-quarter" aria-hidden="true"></i> thermometer-quarter</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thermometer-three-quarters" aria-hidden="true"></i> thermometer-three-quarters</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thumb-tack" aria-hidden="true"></i> thumb-tack</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thumbs-down" aria-hidden="true"></i> thumbs-down</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thumbs-o-down" aria-hidden="true"></i> thumbs-o-down</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thumbs-o-up" aria-hidden="true"></i> thumbs-o-up</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thumbs-up" aria-hidden="true"></i> thumbs-up</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-ticket" aria-hidden="true"></i> ticket</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-times" aria-hidden="true"></i> times</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-times-circle" aria-hidden="true"></i> times-circle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-times-circle-o" aria-hidden="true"></i> times-circle-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-times-rectangle" aria-hidden="true"></i> times-rectangle <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-times-rectangle-o" aria-hidden="true"></i> times-rectangle-o <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-tint" aria-hidden="true"></i> tint</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-toggle-down" aria-hidden="true"></i> toggle-down <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-toggle-left" aria-hidden="true"></i> toggle-left <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-toggle-off" aria-hidden="true"></i> toggle-off</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-toggle-on" aria-hidden="true"></i> toggle-on</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-toggle-right" aria-hidden="true"></i> toggle-right <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-toggle-up" aria-hidden="true"></i> toggle-up <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-trademark" aria-hidden="true"></i> trademark</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-trash" aria-hidden="true"></i> trash</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-trash-o" aria-hidden="true"></i> trash-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-tree" aria-hidden="true"></i> tree</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-trophy" aria-hidden="true"></i> trophy</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-truck" aria-hidden="true"></i> truck</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-tty" aria-hidden="true"></i> tty</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-tv" aria-hidden="true"></i> tv <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-umbrella" aria-hidden="true"></i> umbrella</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-universal-access" aria-hidden="true"></i> universal-access</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-university" aria-hidden="true"></i> university</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-unlock" aria-hidden="true"></i> unlock</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-unlock-alt" aria-hidden="true"></i> unlock-alt</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-unsorted" aria-hidden="true"></i> unsorted <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-upload" aria-hidden="true"></i> upload</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-user" aria-hidden="true"></i> user</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-user-circle" aria-hidden="true"></i> user-circle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-user-circle-o" aria-hidden="true"></i> user-circle-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-user-o" aria-hidden="true"></i> user-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-user-plus" aria-hidden="true"></i> user-plus</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-user-secret" aria-hidden="true"></i> user-secret</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-user-times" aria-hidden="true"></i> user-times</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-users" aria-hidden="true"></i> users</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-vcard" aria-hidden="true"></i> vcard <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-vcard-o" aria-hidden="true"></i> vcard-o <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-video-camera" aria-hidden="true"></i> video-camera</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-volume-control-phone" aria-hidden="true"></i> volume-control-phone</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-volume-down" aria-hidden="true"></i> volume-down</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-volume-off" aria-hidden="true"></i> volume-off</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-volume-up" aria-hidden="true"></i> volume-up</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-warning" aria-hidden="true"></i> warning <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-wheelchair" aria-hidden="true"></i> wheelchair</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-wheelchair-alt" aria-hidden="true"></i> wheelchair-alt</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-wifi" aria-hidden="true"></i> wifi</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-window-close" aria-hidden="true"></i> window-close</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-window-close-o" aria-hidden="true"></i> window-close-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-window-maximize" aria-hidden="true"></i> window-maximize</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-window-minimize" aria-hidden="true"></i> window-minimize</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-window-restore" aria-hidden="true"></i> window-restore</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-wrench" aria-hidden="true"></i> wrench</div>                <div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-circle-o-notch" aria-hidden="true"></i> circle-o-notch</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cog" aria-hidden="true"></i> cog</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-gear" aria-hidden="true"></i> gear <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-refresh" aria-hidden="true"></i> refresh</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-spinner" aria-hidden="true"></i> spinner</div>                <div class="row fontawesome-icon-list"><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-check-square" aria-hidden="true"></i> check-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-check-square-o" aria-hidden="true"></i> check-square-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-circle" aria-hidden="true"></i> circle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-circle-o" aria-hidden="true"></i> circle-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-dot-circle-o" aria-hidden="true"></i> dot-circle-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-minus-square" aria-hidden="true"></i> minus-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-minus-square-o" aria-hidden="true"></i> minus-square-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-plus-square" aria-hidden="true"></i> plus-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-plus-square-o" aria-hidden="true"></i> plus-square-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-square" aria-hidden="true"></i> square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-square-o" aria-hidden="true"></i> square-o</div></div></section>        <section id="file-type"><h1 class="page-header">文本文件类</h1><div class="row fontawesome-icon-list"><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-align-center" aria-hidden="true"></i> align-center</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-align-justify" aria-hidden="true"></i> align-justify</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-align-left" aria-hidden="true"></i> align-left</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-align-right" aria-hidden="true"></i> align-right</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bold" aria-hidden="true"></i> bold</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-chain" aria-hidden="true"></i> chain <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-chain-broken" aria-hidden="true"></i> chain-broken</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-clipboard" aria-hidden="true"></i> clipboard</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-columns" aria-hidden="true"></i> columns</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-copy" aria-hidden="true"></i> copy <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cut" aria-hidden="true"></i> cut <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-dedent" aria-hidden="true"></i> dedent <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-eraser" aria-hidden="true"></i> eraser</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file" aria-hidden="true"></i> file</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-o" aria-hidden="true"></i> file-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-text" aria-hidden="true"></i> file-text</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-text-o" aria-hidden="true"></i> file-text-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-files-o" aria-hidden="true"></i> files-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-floppy-o" aria-hidden="true"></i> floppy-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-font" aria-hidden="true"></i> font</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-header" aria-hidden="true"></i> header</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-indent" aria-hidden="true"></i> indent</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-italic" aria-hidden="true"></i> italic</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-link" aria-hidden="true"></i> link</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-list" aria-hidden="true"></i> list</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-list-alt" aria-hidden="true"></i> list-alt</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-list-ol" aria-hidden="true"></i> list-ol</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-list-ul" aria-hidden="true"></i> list-ul</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-outdent" aria-hidden="true"></i> outdent</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-paperclip" aria-hidden="true"></i> paperclip</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-paragraph" aria-hidden="true"></i> paragraph</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-paste" aria-hidden="true"></i> paste <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-repeat" aria-hidden="true"></i> repeat</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-rotate-left" aria-hidden="true"></i> rotate-left <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-rotate-right" aria-hidden="true"></i> rotate-right <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-save" aria-hidden="true"></i> save <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-scissors" aria-hidden="true"></i> scissors</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-strikethrough" aria-hidden="true"></i> strikethrough</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-subscript" aria-hidden="true"></i> subscript</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-superscript" aria-hidden="true"></i> superscript</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-table" aria-hidden="true"></i> table</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-text-height" aria-hidden="true"></i> text-height</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-text-width" aria-hidden="true"></i> text-width</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-th" aria-hidden="true"></i> th</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-th-large" aria-hidden="true"></i> th-large</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-th-list" aria-hidden="true"></i> th-list</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-underline" aria-hidden="true"></i> underline</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-undo" aria-hidden="true"></i> undo</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-unlink" aria-hidden="true"></i> unlink <span class="text-muted">(alias)</span></div>                <div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file" aria-hidden="true"></i> file</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-archive-o" aria-hidden="true"></i> file-archive-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-audio-o" aria-hidden="true"></i> file-audio-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-code-o" aria-hidden="true"></i> file-code-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-excel-o" aria-hidden="true"></i> file-excel-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-image-o" aria-hidden="true"></i> file-image-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-movie-o" aria-hidden="true"></i> file-movie-o <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-o" aria-hidden="true"></i> file-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-pdf-o" aria-hidden="true"></i> file-pdf-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-photo-o" aria-hidden="true"></i> file-photo-o <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-picture-o" aria-hidden="true"></i> file-picture-o <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-powerpoint-o" aria-hidden="true"></i> file-powerpoint-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-sound-o" aria-hidden="true"></i> file-sound-o <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-text" aria-hidden="true"></i> file-text</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-text-o" aria-hidden="true"></i> file-text-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-video-o" aria-hidden="true"></i> file-video-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-word-o" aria-hidden="true"></i> file-word-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-zip-o" aria-hidden="true"></i> file-zip-o <span class="text-muted">(alias)</span></div></div></section><section id="hand"><h1 class="page-header">手势类</h1><div class="row fontawesome-icon-list"><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-grab-o" aria-hidden="true"></i> hand-grab-o <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-lizard-o" aria-hidden="true"></i> hand-lizard-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-o-down" aria-hidden="true"></i> hand-o-down</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-o-left" aria-hidden="true"></i> hand-o-left</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-o-right" aria-hidden="true"></i> hand-o-right</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-o-up" aria-hidden="true"></i> hand-o-up</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-paper-o" aria-hidden="true"></i> hand-paper-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-peace-o" aria-hidden="true"></i> hand-peace-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-pointer-o" aria-hidden="true"></i> hand-pointer-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-rock-o" aria-hidden="true"></i> hand-rock-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-scissors-o" aria-hidden="true"></i> hand-scissors-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-spock-o" aria-hidden="true"></i> hand-spock-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-stop-o" aria-hidden="true"></i> hand-stop-o <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thumbs-down" aria-hidden="true"></i> thumbs-down</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thumbs-o-down" aria-hidden="true"></i> thumbs-o-down</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thumbs-o-up" aria-hidden="true"></i> thumbs-o-up</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thumbs-up" aria-hidden="true"></i> thumbs-up</div></div></section><section id="transportation"><h1 class="page-header">交通类</h1><div class="row fontawesome-icon-list"><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-ambulance" aria-hidden="true"></i> ambulance</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-automobile" aria-hidden="true"></i> automobile <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bicycle" aria-hidden="true"></i> bicycle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bus" aria-hidden="true"></i> bus</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cab" aria-hidden="true"></i> cab <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-car" aria-hidden="true"></i> car</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-fighter-jet" aria-hidden="true"></i> fighter-jet</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-motorcycle" aria-hidden="true"></i> motorcycle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-plane" aria-hidden="true"></i> plane</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-rocket" aria-hidden="true"></i> rocket</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-ship" aria-hidden="true"></i> ship</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-space-shuttle" aria-hidden="true"></i> space-shuttle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-subway" aria-hidden="true"></i> subway</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-taxi" aria-hidden="true"></i> taxi</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-train" aria-hidden="true"></i> train</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-truck" aria-hidden="true"></i> truck</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-wheelchair" aria-hidden="true"></i> wheelchair</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-wheelchair-alt" aria-hidden="true"></i> wheelchair-alt</div></div></section><section id="gender"><h1 class="page-header">性别类</h1><div class="row fontawesome-icon-list"><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-genderless" aria-hidden="true"></i> genderless</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-intersex" aria-hidden="true"></i> intersex <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-mars" aria-hidden="true"></i> mars</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-mars-double" aria-hidden="true"></i> mars-double</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-mars-stroke" aria-hidden="true"></i> mars-stroke</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-mars-stroke-h" aria-hidden="true"></i> mars-stroke-h</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-mars-stroke-v" aria-hidden="true"></i> mars-stroke-v</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-mercury" aria-hidden="true"></i> mercury</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-neuter" aria-hidden="true"></i> neuter</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-transgender" aria-hidden="true"></i> transgender</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-transgender-alt" aria-hidden="true"></i> transgender-alt</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-venus" aria-hidden="true"></i> venus</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-venus-double" aria-hidden="true"></i> venus-double</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-venus-mars" aria-hidden="true"></i> venus-mars</div></div></section><section id="payment"><h1 class="page-header">支付类</h1><div class="row fontawesome-icon-list"><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cc-amex" aria-hidden="true"></i> cc-amex</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cc-diners-club" aria-hidden="true"></i> cc-diners-club</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cc-discover" aria-hidden="true"></i> cc-discover</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cc-jcb" aria-hidden="true"></i> cc-jcb</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cc-mastercard" aria-hidden="true"></i> cc-mastercard</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cc-paypal" aria-hidden="true"></i> cc-paypal</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cc-stripe" aria-hidden="true"></i> cc-stripe</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cc-visa" aria-hidden="true"></i> cc-visa</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-credit-card" aria-hidden="true"></i> credit-card</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-credit-card-alt" aria-hidden="true"></i> credit-card-alt</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-google-wallet" aria-hidden="true"></i> google-wallet</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-paypal" aria-hidden="true"></i> paypal</div></div></section><section id="chart"><h1 class="page-header">图表类</h1><div class="row fontawesome-icon-list"><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-area-chart" aria-hidden="true"></i> area-chart</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bar-chart" aria-hidden="true"></i> bar-chart</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bar-chart-o" aria-hidden="true"></i> bar-chart-o <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-line-chart" aria-hidden="true"></i> line-chart</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-pie-chart" aria-hidden="true"></i> pie-chart</div></div></section><section id="currency"><h1 class="page-header">货币类</h1><div class="row fontawesome-icon-list"><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bitcoin" aria-hidden="true"></i> bitcoin <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-btc" aria-hidden="true"></i> btc</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cny" aria-hidden="true"></i> cny <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-dollar" aria-hidden="true"></i> dollar <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-eur" aria-hidden="true"></i> eur</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-euro" aria-hidden="true"></i> euro <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-gbp" aria-hidden="true"></i> gbp</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-gg" aria-hidden="true"></i> gg</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-gg-circle" aria-hidden="true"></i> gg-circle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-ils" aria-hidden="true"></i> ils</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-inr" aria-hidden="true"></i> inr</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-jpy" aria-hidden="true"></i> jpy</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-krw" aria-hidden="true"></i> krw</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-money" aria-hidden="true"></i> money</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-rmb" aria-hidden="true"></i> rmb <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-rouble" aria-hidden="true"></i> rouble <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-rub" aria-hidden="true"></i> rub</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-ruble" aria-hidden="true"></i> ruble <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-rupee" aria-hidden="true"></i> rupee <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-shekel" aria-hidden="true"></i> shekel <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-sheqel" aria-hidden="true"></i> sheqel <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-try" aria-hidden="true"></i> try</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-turkish-lira" aria-hidden="true"></i> turkish-lira <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-usd" aria-hidden="true"></i> usd</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-won" aria-hidden="true"></i> won <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-yen" aria-hidden="true"></i> yen <span class="text-muted">(alias)</span></div></div></section><section id="directional"><h1 class="page-header">方向类</h1><div class="row fontawesome-icon-list"><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-angle-double-down" aria-hidden="true"></i> angle-double-down</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-angle-double-left" aria-hidden="true"></i> angle-double-left</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-angle-double-right" aria-hidden="true"></i> angle-double-right</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-angle-double-up" aria-hidden="true"></i> angle-double-up</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-angle-down" aria-hidden="true"></i> angle-down</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-angle-left" aria-hidden="true"></i> angle-left</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-angle-right" aria-hidden="true"></i> angle-right</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-angle-up" aria-hidden="true"></i> angle-up</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-arrow-circle-down" aria-hidden="true"></i> arrow-circle-down</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-arrow-circle-left" aria-hidden="true"></i> arrow-circle-left</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-arrow-circle-o-down" aria-hidden="true"></i> arrow-circle-o-down</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-arrow-circle-o-left" aria-hidden="true"></i> arrow-circle-o-left</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-arrow-circle-o-right" aria-hidden="true"></i> arrow-circle-o-right</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-arrow-circle-o-up" aria-hidden="true"></i> arrow-circle-o-up</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-arrow-circle-right" aria-hidden="true"></i> arrow-circle-right</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-arrow-circle-up" aria-hidden="true"></i> arrow-circle-up</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-arrow-down" aria-hidden="true"></i> arrow-down</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-arrow-left" aria-hidden="true"></i> arrow-left</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-arrow-right" aria-hidden="true"></i> arrow-right</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-arrow-up" aria-hidden="true"></i> arrow-up</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-arrows" aria-hidden="true"></i> arrows</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-arrows-alt" aria-hidden="true"></i> arrows-alt</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-arrows-h" aria-hidden="true"></i> arrows-h</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-arrows-v" aria-hidden="true"></i> arrows-v</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-caret-down" aria-hidden="true"></i> caret-down</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-caret-left" aria-hidden="true"></i> caret-left</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-caret-right" aria-hidden="true"></i> caret-right</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-caret-square-o-down" aria-hidden="true"></i> caret-square-o-down</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-caret-square-o-left" aria-hidden="true"></i> caret-square-o-left</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-caret-square-o-right" aria-hidden="true"></i> caret-square-o-right</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-caret-square-o-up" aria-hidden="true"></i> caret-square-o-up</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-caret-up" aria-hidden="true"></i> caret-up</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-chevron-circle-down" aria-hidden="true"></i> chevron-circle-down</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-chevron-circle-left" aria-hidden="true"></i> chevron-circle-left</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-chevron-circle-right" aria-hidden="true"></i> chevron-circle-right</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-chevron-circle-up" aria-hidden="true"></i> chevron-circle-up</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-chevron-down" aria-hidden="true"></i> chevron-down</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-chevron-left" aria-hidden="true"></i> chevron-left</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-chevron-right" aria-hidden="true"></i> chevron-right</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-chevron-up" aria-hidden="true"></i> chevron-up</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-exchange" aria-hidden="true"></i> exchange</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-o-down" aria-hidden="true"></i> hand-o-down</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-o-left" aria-hidden="true"></i> hand-o-left</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-o-right" aria-hidden="true"></i> hand-o-right</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-o-up" aria-hidden="true"></i> hand-o-up</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-long-arrow-down" aria-hidden="true"></i> long-arrow-down</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-long-arrow-left" aria-hidden="true"></i> long-arrow-left</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-long-arrow-right" aria-hidden="true"></i> long-arrow-right</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-long-arrow-up" aria-hidden="true"></i> long-arrow-up</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-toggle-down" aria-hidden="true"></i> toggle-down <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-toggle-left" aria-hidden="true"></i> toggle-left <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-toggle-right" aria-hidden="true"></i> toggle-right <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-toggle-up" aria-hidden="true"></i> toggle-up <span class="text-muted">(alias)</span></div></div></section><section id="video-player"><h1 class="page-header">视频类</h1><div class="row fontawesome-icon-list"><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-arrows-alt" aria-hidden="true"></i> arrows-alt</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-backward" aria-hidden="true"></i> backward</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-compress" aria-hidden="true"></i> compress</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-eject" aria-hidden="true"></i> eject</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-expand" aria-hidden="true"></i> expand</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-fast-backward" aria-hidden="true"></i> fast-backward</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-fast-forward" aria-hidden="true"></i> fast-forward</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-forward" aria-hidden="true"></i> forward</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-pause" aria-hidden="true"></i> pause</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-pause-circle" aria-hidden="true"></i> pause-circle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-pause-circle-o" aria-hidden="true"></i> pause-circle-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-play" aria-hidden="true"></i> play</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-play-circle" aria-hidden="true"></i> play-circle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-play-circle-o" aria-hidden="true"></i> play-circle-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-random" aria-hidden="true"></i> random</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-step-backward" aria-hidden="true"></i> step-backward</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-step-forward" aria-hidden="true"></i> step-forward</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-stop" aria-hidden="true"></i> stop</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-stop-circle" aria-hidden="true"></i> stop-circle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-stop-circle-o" aria-hidden="true"></i> stop-circle-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-youtube-play" aria-hidden="true"></i> youtube-play</div></div></section><section id="brand"><h1 class="page-header">品牌logo类</h1><div class="row fontawesome-icon-list margin-bottom-lg"><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-500px" aria-hidden="true"></i> 500px</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-adn" aria-hidden="true"></i> adn</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-amazon" aria-hidden="true"></i> amazon</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-android" aria-hidden="true"></i> android</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-angellist" aria-hidden="true"></i> angellist</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-apple" aria-hidden="true"></i> apple</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bandcamp" aria-hidden="true"></i> bandcamp</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-behance" aria-hidden="true"></i> behance</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-behance-square" aria-hidden="true"></i> behance-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bitbucket" aria-hidden="true"></i> bitbucket</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bitbucket-square" aria-hidden="true"></i> bitbucket-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bitcoin" aria-hidden="true"></i> bitcoin <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-black-tie" aria-hidden="true"></i> black-tie</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bluetooth" aria-hidden="true"></i> bluetooth</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bluetooth-b" aria-hidden="true"></i> bluetooth-b</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-btc" aria-hidden="true"></i> btc</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-buysellads" aria-hidden="true"></i> buysellads</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cc-amex" aria-hidden="true"></i> cc-amex</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cc-diners-club" aria-hidden="true"></i> cc-diners-club</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cc-discover" aria-hidden="true"></i> cc-discover</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cc-jcb" aria-hidden="true"></i> cc-jcb</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cc-mastercard" aria-hidden="true"></i> cc-mastercard</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cc-paypal" aria-hidden="true"></i> cc-paypal</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cc-stripe" aria-hidden="true"></i> cc-stripe</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cc-visa" aria-hidden="true"></i> cc-visa</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-chrome" aria-hidden="true"></i> chrome</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-codepen" aria-hidden="true"></i> codepen</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-codiepie" aria-hidden="true"></i> codiepie</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-connectdevelop" aria-hidden="true"></i> connectdevelop</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-contao" aria-hidden="true"></i> contao</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-css3" aria-hidden="true"></i> css3</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-dashcube" aria-hidden="true"></i> dashcube</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-delicious" aria-hidden="true"></i> delicious</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-deviantart" aria-hidden="true"></i> deviantart</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-digg" aria-hidden="true"></i> digg</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-dribbble" aria-hidden="true"></i> dribbble</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-dropbox" aria-hidden="true"></i> dropbox</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-drupal" aria-hidden="true"></i> drupal</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-edge" aria-hidden="true"></i> edge</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-eercast" aria-hidden="true"></i> eercast</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-empire" aria-hidden="true"></i> empire</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-envira" aria-hidden="true"></i> envira</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-etsy" aria-hidden="true"></i> etsy</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-expeditedssl" aria-hidden="true"></i> expeditedssl</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-fa" aria-hidden="true"></i> fa <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-facebook" aria-hidden="true"></i> facebook</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-facebook-f" aria-hidden="true"></i> facebook-f <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-facebook-official" aria-hidden="true"></i> facebook-official</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-facebook-square" aria-hidden="true"></i> facebook-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-firefox" aria-hidden="true"></i> firefox</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-first-order" aria-hidden="true"></i> first-order</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-flickr" aria-hidden="true"></i> flickr</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-font-awesome" aria-hidden="true"></i> font-awesome</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-fonticons" aria-hidden="true"></i> fonticons</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-fort-awesome" aria-hidden="true"></i> fort-awesome</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-forumbee" aria-hidden="true"></i> forumbee</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-foursquare" aria-hidden="true"></i> foursquare</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-free-code-camp" aria-hidden="true"></i> free-code-camp</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-ge" aria-hidden="true"></i> ge <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-get-pocket" aria-hidden="true"></i> get-pocket</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-gg" aria-hidden="true"></i> gg</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-gg-circle" aria-hidden="true"></i> gg-circle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-git" aria-hidden="true"></i> git</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-git-square" aria-hidden="true"></i> git-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-github" aria-hidden="true"></i> github</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-github-alt" aria-hidden="true"></i> github-alt</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-github-square" aria-hidden="true"></i> github-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-gitlab" aria-hidden="true"></i> gitlab</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-gittip" aria-hidden="true"></i> gittip <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-glide" aria-hidden="true"></i> glide</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-glide-g" aria-hidden="true"></i> glide-g</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-google" aria-hidden="true"></i> google</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-google-plus" aria-hidden="true"></i> google-plus</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-google-plus-circle" aria-hidden="true"></i> google-plus-circle <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-google-plus-official" aria-hidden="true"></i> google-plus-official</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-google-plus-square" aria-hidden="true"></i> google-plus-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-google-wallet" aria-hidden="true"></i> google-wallet</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-gratipay" aria-hidden="true"></i> gratipay</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-grav" aria-hidden="true"></i> grav</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hacker-news" aria-hidden="true"></i> hacker-news</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-houzz" aria-hidden="true"></i> houzz</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-html5" aria-hidden="true"></i> html5</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-imdb" aria-hidden="true"></i> imdb</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-instagram" aria-hidden="true"></i> instagram</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-internet-explorer" aria-hidden="true"></i> internet-explorer</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-ioxhost" aria-hidden="true"></i> ioxhost</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-joomla" aria-hidden="true"></i> joomla</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-jsfiddle" aria-hidden="true"></i> jsfiddle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-lastfm" aria-hidden="true"></i> lastfm</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-lastfm-square" aria-hidden="true"></i> lastfm-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-leanpub" aria-hidden="true"></i> leanpub</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-linkedin" aria-hidden="true"></i> linkedin</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-linkedin-square" aria-hidden="true"></i> linkedin-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-linode" aria-hidden="true"></i> linode</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-linux" aria-hidden="true"></i> linux</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-maxcdn" aria-hidden="true"></i> maxcdn</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-meanpath" aria-hidden="true"></i> meanpath</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-medium" aria-hidden="true"></i> medium</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-meetup" aria-hidden="true"></i> meetup</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-mixcloud" aria-hidden="true"></i> mixcloud</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-modx" aria-hidden="true"></i> modx</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-odnoklassniki" aria-hidden="true"></i> odnoklassniki</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-odnoklassniki-square" aria-hidden="true"></i> odnoklassniki-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-opencart" aria-hidden="true"></i> opencart</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-openid" aria-hidden="true"></i> openid</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-opera" aria-hidden="true"></i> opera</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-optin-monster" aria-hidden="true"></i> optin-monster</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-pagelines" aria-hidden="true"></i> pagelines</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-paypal" aria-hidden="true"></i> paypal</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-pied-piper" aria-hidden="true"></i> pied-piper</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-pied-piper-alt" aria-hidden="true"></i> pied-piper-alt</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-pied-piper-pp" aria-hidden="true"></i> pied-piper-pp</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-pinterest" aria-hidden="true"></i> pinterest</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-pinterest-p" aria-hidden="true"></i> pinterest-p</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-pinterest-square" aria-hidden="true"></i> pinterest-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-product-hunt" aria-hidden="true"></i> product-hunt</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-qq" aria-hidden="true"></i> qq</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-quora" aria-hidden="true"></i> quora</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-ra" aria-hidden="true"></i> ra <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-ravelry" aria-hidden="true"></i> ravelry</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-rebel" aria-hidden="true"></i> rebel</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-reddit" aria-hidden="true"></i> reddit</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-reddit-alien" aria-hidden="true"></i> reddit-alien</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-reddit-square" aria-hidden="true"></i> reddit-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-renren" aria-hidden="true"></i> renren</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-resistance" aria-hidden="true"></i> resistance <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-safari" aria-hidden="true"></i> safari</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-scribd" aria-hidden="true"></i> scribd</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-sellsy" aria-hidden="true"></i> sellsy</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-share-alt" aria-hidden="true"></i> share-alt</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-share-alt-square" aria-hidden="true"></i> share-alt-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-shirtsinbulk" aria-hidden="true"></i> shirtsinbulk</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-simplybuilt" aria-hidden="true"></i> simplybuilt</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-skyatlas" aria-hidden="true"></i> skyatlas</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-skype" aria-hidden="true"></i> skype</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-slack" aria-hidden="true"></i> slack</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-slideshare" aria-hidden="true"></i> slideshare</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-snapchat" aria-hidden="true"></i> snapchat</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-snapchat-ghost" aria-hidden="true"></i> snapchat-ghost</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-snapchat-square" aria-hidden="true"></i> snapchat-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-soundcloud" aria-hidden="true"></i> soundcloud</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-spotify" aria-hidden="true"></i> spotify</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-stack-exchange" aria-hidden="true"></i> stack-exchange</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-stack-overflow" aria-hidden="true"></i> stack-overflow</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-steam" aria-hidden="true"></i> steam</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-steam-square" aria-hidden="true"></i> steam-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-stumbleupon" aria-hidden="true"></i> stumbleupon</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-stumbleupon-circle" aria-hidden="true"></i> stumbleupon-circle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-superpowers" aria-hidden="true"></i> superpowers</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-telegram" aria-hidden="true"></i> telegram</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-tencent-weibo" aria-hidden="true"></i> tencent-weibo</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-themeisle" aria-hidden="true"></i> themeisle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-trello" aria-hidden="true"></i> trello</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-tripadvisor" aria-hidden="true"></i> tripadvisor</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-tumblr" aria-hidden="true"></i> tumblr</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-tumblr-square" aria-hidden="true"></i> tumblr-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-twitch" aria-hidden="true"></i> twitch</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-twitter" aria-hidden="true"></i> twitter</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-twitter-square" aria-hidden="true"></i> twitter-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-usb" aria-hidden="true"></i> usb</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-viacoin" aria-hidden="true"></i> viacoin</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-viadeo" aria-hidden="true"></i> viadeo</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-viadeo-square" aria-hidden="true"></i> viadeo-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-vimeo" aria-hidden="true"></i> vimeo</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-vimeo-square" aria-hidden="true"></i> vimeo-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-vine" aria-hidden="true"></i> vine</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-vk" aria-hidden="true"></i> vk</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-wechat" aria-hidden="true"></i> wechat <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-weibo" aria-hidden="true"></i> weibo</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-weixin" aria-hidden="true"></i> weixin</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-whatsapp" aria-hidden="true"></i> whatsapp</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-wikipedia-w" aria-hidden="true"></i> wikipedia-w</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-windows" aria-hidden="true"></i> windows</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-wordpress" aria-hidden="true"></i> wordpress</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-wpbeginner" aria-hidden="true"></i> wpbeginner</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-wpexplorer" aria-hidden="true"></i> wpexplorer</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-wpforms" aria-hidden="true"></i> wpforms</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-xing" aria-hidden="true"></i> xing</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-xing-square" aria-hidden="true"></i> xing-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-y-combinator" aria-hidden="true"></i> y-combinator</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-y-combinator-square" aria-hidden="true"></i> y-combinator-square <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-yahoo" aria-hidden="true"></i> yahoo</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-yc" aria-hidden="true"></i> yc <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-yc-square" aria-hidden="true"></i> yc-square <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-yelp" aria-hidden="true"></i> yelp</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-yoast" aria-hidden="true"></i> yoast</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-youtube" aria-hidden="true"></i> youtube</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-youtube-play" aria-hidden="true"></i> youtube-play</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-youtube-square" aria-hidden="true"></i> youtube-square</div></div></section><section id="medical"><h1 class="page-header">医疗类</h1><div class="row fontawesome-icon-list"><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-ambulance" aria-hidden="true"></i> ambulance</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-h-square" aria-hidden="true"></i> h-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-heart" aria-hidden="true"></i> heart</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-heart-o" aria-hidden="true"></i> heart-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-heartbeat" aria-hidden="true"></i> heartbeat</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hospital-o" aria-hidden="true"></i> hospital-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-medkit" aria-hidden="true"></i> medkit</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-plus-square" aria-hidden="true"></i> plus-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-stethoscope" aria-hidden="true"></i> stethoscope</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-user-md" aria-hidden="true"></i> user-md</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-wheelchair" aria-hidden="true"></i> wheelchair</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-wheelchair-alt" aria-hidden="true"></i> wheelchair-alt</div></div></section>        <section id="accessibility"><h1 class="page-header">障碍类（助残）</h1><div class="row fontawesome-icon-list"><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-american-sign-language-interpreting" aria-hidden="true"></i> american-sign-language-interpreting</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-asl-interpreting" aria-hidden="true"></i> asl-interpreting <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-assistive-listening-systems" aria-hidden="true"></i> assistive-listening-systems</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-audio-description" aria-hidden="true"></i> audio-description</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-blind" aria-hidden="true"></i> blind</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-braille" aria-hidden="true"></i> braille</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cc" aria-hidden="true"></i> cc</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-deaf" aria-hidden="true"></i> deaf</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-deafness" aria-hidden="true"></i> deafness <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hard-of-hearing" aria-hidden="true"></i> hard-of-hearing <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-low-vision" aria-hidden="true"></i> low-vision</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-question-circle-o" aria-hidden="true"></i> question-circle-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-sign-language" aria-hidden="true"></i> sign-language</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-signing" aria-hidden="true"></i> signing <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-tty" aria-hidden="true"></i> tty</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-universal-access" aria-hidden="true"></i> universal-access</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-volume-control-phone" aria-hidden="true"></i> volume-control-phone</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-wheelchair" aria-hidden="true"></i> wheelchair</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-wheelchair-alt" aria-hidden="true"></i> wheelchair-alt</div></div></section></div></article></body>]]></content>
    
    
    <summary type="html">Hexo 提供的默认图标样式，完整的675个图标样式，可添加至hexo的各个主题中，如：Butterfly</summary>
    
    
    
    <category term="Tools" scheme="https://pengline.github.io/categories/Tools/"/>
    
    <category term="Hexo" scheme="https://pengline.github.io/categories/Tools/Hexo/"/>
    
    
    <category term="Hexo" scheme="https://pengline.github.io/tags/Hexo/"/>
    
    <category term="Hexo图标" scheme="https://pengline.github.io/tags/Hexo%E5%9B%BE%E6%A0%87/"/>
    
    <category term="Butterfly图标" scheme="https://pengline.github.io/tags/Butterfly%E5%9B%BE%E6%A0%87/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 如何自定义类似主页的分页列表</title>
    <link href="https://pengline.github.io/2025/09/19/474520ec174b490f96586dfa50bb510f/"/>
    <id>https://pengline.github.io/2025/09/19/474520ec174b490f96586dfa50bb510f/</id>
    <published>2025-09-18T16:00:00.000Z</published>
    <updated>2025-09-21T03:30:55.116Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>注意版本</strong>：框架 <a href="https://hexo.io/">Hexo 7.3.0</a>|主题 <a href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly 5.4.3</a></p></blockquote><p><strong>需求</strong>：构建一个文学列表栏目，根据不同类别（三行诗集、诗词歌赋等），每个栏目可以有多个作品展示（类似首页，每页展示10条，数据为标题、时间、描述、作者、图片等）。</p><p>具体效果可参照我的博客： ”文学 -  诗词歌赋“</p><h2 id="注意事项">注意事项</h2><p>Front-matter 必须严格格式（md文件）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 春日偶得</span><br><span class="line">type: poems</span><br><span class="line">date: <span class="number">2025</span>-<span class="number">04</span>-<span class="number">01</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure><p><strong>对于脚本的放置位置</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>放在项目根 scripts（推荐用于全局逻辑）</p></li><li class="lvl-2"><p>放在主题 scripts（推荐用于主题专属逻辑）</p></li></ul><p>我是放在主题butterfly之下  <code>themes/butterfly/scripts/custom/</code></p></blockquote><p><strong>对于模板文件的配置</strong>：</p><blockquote><p>三个地方必须完全一致：</p><ol><li class="lvl-3">Front-matter: <code>layout: custom/literature</code></li><li class="lvl-3">Generator: <code>layout: ['custom/literature']</code></li><li class="lvl-3">文件路径: <code>layout/custom/literature.pug</code></li></ol><p>如果没有加载到模板，会自动用 <code>archive</code> 模板（时间轴形式）</p></blockquote><p><strong>对于路径的配置</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>Generator 中的 basePath，必须和你的文件路径 <strong>完全一致</strong>！如果文件路径是 <code>literature/poems/</code>，但 <code>basePath</code> 是 <code>literature/three-line-poems/</code>  会导致路由不匹配，找不到模板。</p></li><li class="lvl-2"><p><strong>路径不能有符号</strong>，如：我之前 <code>literature/three-line-poems/</code> ，存在符号导致一直路由不到自定义模板中</p></li></ul></blockquote><p><strong>其他文件异常</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Cannot read properties of undefined (reading &#x27;length&#x27;)</span></span><br><span class="line"><span class="comment">// 可以在报错的指定行，添加判断条件  &amp;&amp; page.categories.data</span></span><br><span class="line"><span class="keyword">if</span> theme.<span class="property">post_meta</span>.<span class="property">post</span>.<span class="property">categories</span> &amp;&amp; page.<span class="property">categories</span> &amp;&amp; page.<span class="property">categories</span>.<span class="property">data</span> &amp;&amp; page.<span class="property">categories</span>.<span class="property">data</span>.<span class="property">length</span> &gt; <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>项目结构</strong>：</p><blockquote><p>hexo-blog/<br>├── source/<br>│   ├── _posts/文学/<br>│   │   ├── <a href="http://xn--4yqs28akwekh.md">春日偶得.md</a>           ← 包含 type: three-line-poem<br>│   │   └── <a href="http://xn--ess69p03e5y8b.md">夜读有感.md</a><br>│   └── literature/<br>│       └──poems/<br>│           └── <a href="http://index.md">index.md</a>      ← layout: custom/literature<br>├── themes/<br>│   └── butterfly/<br>│       ├── layout/custom/<br>│       │   └── literature.pug<br>│       ├── scripts/custom/<br>│       │   └──poems.js  ← layout: custom/literature<br>│       ├── source/css/custom/<br>│       │   └──literature.css<br>└── _config.yml</p></blockquote><h2 id="前提条件">前提条件</h2><ol><li class="lvl-3"><p>你已安装 Hexo 并创建了博客项目。</p></li><li class="lvl-3"><p>已安装 <code>hexo-pagination</code> 插件（用于分页逻辑）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-pagination --save</span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p>使用 Pug 作为模板引擎（默认是 EJS，需配置）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug --save</span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p>在 <code>_config.yml</code> 中设置主题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure></li></ol><h2 id="创建自定义页面">创建自定义页面</h2><blockquote><p><strong>注意</strong>：框架会自动创建该文件。你也可以自己手动创建，指定相关信息。</p></blockquote><p>创建页面文件（列表）：在 <code>source/literature/poems/index.md</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 三行诗集</span><br><span class="line">layout: custom/literature</span><br><span class="line">pagination: <span class="literal">true</span></span><br><span class="line">per_page: <span class="number">5</span></span><br><span class="line">type: three-line-poem</span><br><span class="line">---</span><br></pre></td></tr></table></figure><blockquote><ul class="lvl-1"><li class="lvl-2"><p><code>layout: custom/literature</code> → 指定使用自定义模板（模板所在位置：<strong>路径/文件名</strong>）</p></li><li class="lvl-2"><p><code>per_page: 5</code> → 每页显示5首诗</p></li><li class="lvl-2"><p><code>type: three-line-poem</code> → 自定义类型，用于筛选文章</p></li></ul></blockquote><h2 id="准备文章数据">准备文章数据</h2><p><code>source/_posts/文学/春日偶得.md</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 春日偶得</span><br><span class="line">date: <span class="number">2025</span>-<span class="number">04</span>-<span class="number">01</span></span><br><span class="line">categories: [文学, 诗集]</span><br><span class="line">tags: [三行情诗, 春日偶得]</span><br><span class="line">type: three-line-poem</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">春风拂面不须酒，</span><br><span class="line">落花随步即成诗。</span><br><span class="line">心静自然天地宽。</span><br></pre></td></tr></table></figure><p><code>source/_posts/文学/夜读有感.md</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 夜读有感</span><br><span class="line">date: <span class="number">2025</span>-<span class="number">04</span>-<span class="number">02</span></span><br><span class="line">categories: [文学, 诗集]</span><br><span class="line">tags: [三行情诗, 夜读有感]</span><br><span class="line">type: three-line-poem</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">灯下翻书夜已深，</span><br><span class="line">字里行间见古人。</span><br><span class="line">合卷方知月照襟。</span><br></pre></td></tr></table></figure><blockquote><p>所有你想在 <code>/literature/poems</code> 页面展示的诗，都加上 <code>type: three-line-poem</code>。</p><p>路径可以随意，如： <code>source/_posts/test/test.md</code></p></blockquote><h2 id="创建分页模板（pug）">创建分页模板（pug）</h2><p>在主题目录（ <code>themes/butterfly/layout/</code>）下创建模板（模板一定要与 hexo-pagination 版本对应，否则会出错，目前是4.0.0）</p><p><code>themes/butterfly/layout/custom/literature.pug</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">extends ../includes/layout.pug</span><br><span class="line"></span><br><span class="line">block content</span><br><span class="line">  style.</span><br><span class="line">    @import url(&#x27;/css/custom/literature.css&#x27;);</span><br><span class="line"></span><br><span class="line">  .poetry-page</span><br><span class="line">    .container</span><br><span class="line">      .poetry-header</span><br><span class="line">        h1= page.title || &#x27;诗集&#x27;</span><br><span class="line">      </span><br><span class="line">      - var poemPosts = page.posts || [];</span><br><span class="line">      if poemPosts.length === 0</span><br><span class="line">        .no-poems</span><br><span class="line">          p 📖 暂无诗歌，敬请期待...</span><br><span class="line">      else</span><br><span class="line">        .poem-container</span><br><span class="line">          each post in poemPosts</span><br><span class="line">            .poem-card</span><br><span class="line">              .card-header</span><br><span class="line">                h3.poem-title= post.title</span><br><span class="line">                if post.author</span><br><span class="line">                  p.poem-author 【#&#123;post.author&#125;】</span><br><span class="line">                .poem-meta</span><br><span class="line">                  if post.date &amp;&amp; post.address</span><br><span class="line">                    span #&#123;new Date(post.date).toLocaleDateString(&#x27;zh-CN&#x27;, &#123; year: &#x27;numeric&#x27;, month: &#x27;long&#x27;, day: &#x27;numeric&#x27; &#125;)&#125; • #&#123;post.address&#125;</span><br><span class="line">                  else if post.date</span><br><span class="line">                    span #&#123;new Date(post.date).toLocaleDateString(&#x27;zh-CN&#x27;, &#123; year: &#x27;numeric&#x27;, month: &#x27;long&#x27;, day: &#x27;numeric&#x27; &#125;)&#125;</span><br><span class="line">                  else if post.address</span><br><span class="line">                    span #&#123;post.address&#125;</span><br><span class="line">                if post.description</span><br><span class="line">                  p.poem-description= post.description</span><br><span class="line">            </span><br><span class="line">              .poem-body</span><br><span class="line">                .poem-content</span><br><span class="line">                  -</span><br><span class="line">                    var contentText = post.content || &#x27;&#x27;;</span><br><span class="line">                    var cleanText = contentText.replace(/&lt;[^&gt;]*&gt;/g, &#x27;&#x27;).replace(/\s*\n\s*/g, &#x27;\n&#x27;).trim();</span><br><span class="line">                    var lines = cleanText.split(&#x27;\n&#x27;).filter(line =&gt; line.trim() !== &#x27;&#x27;);</span><br><span class="line">                  if lines.length &gt; 0</span><br><span class="line">                    each line, i in lines</span><br><span class="line">                      - var cleanLine = line.trim().replace(/^(《[^》]*》\s*)/, &#x27;&#x27;);</span><br><span class="line">                      if cleanLine</span><br><span class="line">                        p.poem-line= cleanLine</span><br><span class="line">                  else</span><br><span class="line">                    p.poem-line(style=&#x27;text-align: center; color: #999;&#x27;) 无诗句内容</span><br><span class="line"></span><br><span class="line">              .card-footer</span><br><span class="line">                a.read-more(href=url_for(post.path)) 📖 阅读全文</span><br><span class="line"></span><br><span class="line">      if page.total &gt; 1</span><br><span class="line">        .pagination-wrap</span><br><span class="line">          .pagination-title</span><br><span class="line">            | 第 #&#123;page.current&#125; 页，共 #&#123;page.total&#125; 页</span><br><span class="line">          .pagination</span><br><span class="line">            if page.prev &amp;&amp; page.prev &gt; 0</span><br><span class="line">              a.page-link.prev(href=url_for(page.prev_link))</span><br><span class="line">                span.page-nav &amp;laquo; 上一页</span><br><span class="line">            else</span><br><span class="line">              span.page-link.disabled</span><br><span class="line">                span.page-nav &amp;laquo; 上一页</span><br><span class="line"></span><br><span class="line">            - for (let i = 1; i &lt;= page.total; i++)</span><br><span class="line">              if i === page.current</span><br><span class="line">                span.page-link.current= i</span><br><span class="line">              else</span><br><span class="line">                - var pageLink = i === 1 ? page.base : page.base + &#x27;page/&#x27; + i;</span><br><span class="line">                  a.page-link(href=url_for(pageLink))= i</span><br><span class="line"></span><br><span class="line">            if page.next &amp;&amp; page.next &gt; 0</span><br><span class="line">              a.page-link.next(href=url_for(page.next_link))</span><br><span class="line">                span.page-nav 下一页 &amp;raquo;</span><br><span class="line">            else</span><br><span class="line">              span.page-link.disabled</span><br><span class="line">                span.page-nav 下一页 &amp;raquo;</span><br></pre></td></tr></table></figure><p>如果你希望更精确控制“诗句预览”，可以在生成器或模板中预处理。</p><p>每首诗显示为一张精美卡片：</p><blockquote><p>┌──────────────────────────────────────┐<br>│  《春日偶得》                               │ ← 渐变标题栏<br>│  余一叶知秋尽               │<br>│   己亥年正月 •  老家     ├<br>│  春日散步偶得小诗，心随景动。        │ ← 描述（斜体灰色）<br>│                                        │<br>│  春风拂面不须酒，                       │ ← 第一行（橙色）<br>│  落花随步即成诗。               │ ← 第二行（蓝色）<br>│  心静自然天地宽。                       │ ← 第三行（绿色加粗）<br>├──────────────────────────────────────┤<br>│                                  📖 阅读全文 │ ← 右下角按钮<br>└──────────────────────────────────────┘</p><ul class="lvl-1"><li class="lvl-2">网格自适应（PC 3列，平板 2列，手机 1列）</li><li class="lvl-2">鼠标悬停轻微上浮 + 阴影加深</li><li class="lvl-2">点击标题或“阅读全文”进入详情页</li><li class="lvl-2">分页导航 + 页码跳转</li></ul></blockquote><p>如果显示：未提取到诗句内容</p><p>可能问题：你的Generator 与 模板中的数据不对应，获取数据的属性不同，或者缺少文章</p><h2 id="pug-模板样式（CSS）">pug 模板样式（CSS）</h2><p>在主题目录（ <code>themes/butterfly/source/</code>）下创建样式<code>themes\butterfly\source\css\custom\literature.css</code></p><p>你可以根据自己的需求，随意更改样式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.poetry-page</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">2rem</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f8f9fa</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.poetry-header</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">2rem</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1.5rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.poetry-header</span> <span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2.2rem</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#2c3e50</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.poem-grid</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">2rem</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">2rem</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">1200px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.poem-grid</span> &#123;</span><br><span class="line"><span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0</span> <span class="number">1rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.poem-card</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: white;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">4px</span> <span class="number">12px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.05</span>);</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.poem-card</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">24px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">2px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card-header</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1.5rem</span> <span class="number">1.5rem</span> <span class="number">1rem</span> <span class="number">1.5rem</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#f0f0f0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.poem-title</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.3rem</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0.5rem</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#2c3e50</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.poem-meta</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.85rem</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#7f8c8d</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.poem-body</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1.5rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.poem-content</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">1rem</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.poem-line</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.1rem</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.8</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0.4rem</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.3rem</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;STKaiti&quot;</span>, <span class="string">&quot;KaiTi&quot;</span>, serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.poem-line</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#e74c3c</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.poem-line</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#3498db</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.poem-line</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#27ae60</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">500</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card-footer</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1rem</span> <span class="number">1.5rem</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f8f9fa</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: right;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.read-more</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#5d8aa8</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.9rem</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">500</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.read-more</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#2c5aa0</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.no-poems</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">3rem</span> <span class="number">2rem</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.1rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注入分页数据（Generator）">注入分页数据（Generator）</h2><p>你需要在主题的脚本或插件中为该页面生成分页器。在主题的 <code>scripts/custom</code> 目录创建 <code>three-line-poem.js</code></p><blockquote><p><strong>注意</strong>： 此处的 register generators名称 “three-line-poem”，必须保持唯一，否则会与其他冲突而不起效果。</p><p>插件的使用 参照 <a href="https://github.com/hexojs/hexo-pagination">Git 文档</a>，配置错误会导致加载不到模板，一直使用默认的。</p></blockquote><p>你可以随意在 <code>processedPosts</code> 中添加任意返回值，然后在pug模板中获取展示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// themes/butterfly/scripts/three-line-poem-pagination.js</span></span><br><span class="line"><span class="keyword">const</span> pagination = <span class="built_in">require</span>(<span class="string">&#x27;hexo-pagination&#x27;</span>);</span><br><span class="line"></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">generator</span>.<span class="title function_">register</span>(<span class="string">&#x27;three-line-poem&#x27;</span>, <span class="keyword">function</span>(<span class="params">locals</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; config &#125; = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">const</span> &#123; posts &#125; = locals;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 筛选 type: poems 的文章</span></span><br><span class="line">  <span class="keyword">const</span> poemPosts = posts</span><br><span class="line">    .<span class="title function_">sort</span>(<span class="string">&#x27;-date&#x27;</span>)</span><br><span class="line">    .<span class="title function_">filter</span>(<span class="function"><span class="params">post</span> =&gt;</span> post.<span class="property">type</span> === <span class="string">&#x27;three-line-poem&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> processedPosts = poemPosts.<span class="title function_">map</span>(<span class="function"><span class="params">post</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">title</span>: post.<span class="property">title</span>,</span><br><span class="line"><span class="attr">author</span>: post.<span class="property">author</span>,</span><br><span class="line"><span class="attr">date</span>: post.<span class="property">date</span>,</span><br><span class="line"><span class="attr">content</span>: post.<span class="property">content</span>,</span><br><span class="line"><span class="attr">description</span>: post.<span class="property">description</span>,</span><br><span class="line">&#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> basePath = <span class="string">&#x27;literature/poems/&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> paginated = <span class="title function_">pagination</span>(basePath, processedPosts, &#123;</span><br><span class="line">    <span class="attr">perPage</span>: config.<span class="property">theme</span>.<span class="property">per_page</span> || <span class="number">10</span>,</span><br><span class="line">    <span class="attr">layout</span>: [<span class="string">&quot;custom/literature&quot;</span>], <span class="comment">// ← 和你的模板路径一致 , &#x27;index&#x27;, &#x27;archive&#x27;</span></span><br><span class="line">    <span class="attr">format</span>: <span class="string">&#x27;page/%d/&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;三行情诗&quot;</span>,</span><br><span class="line">  <span class="attr">tag</span>: <span class="string">&quot;三行情诗&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> paginated;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>这个脚本会在生成时为 <code>/literature/poems/</code> 创建分页，并注入 <code>paginator</code> 对象到模板上下文。</p><p>在脚本中加 <code>console.log</code>， 验证脚本是否被加载</p><p>在主题配置（<code>themes/butterfly/_config.yml</code>）中添加：<code>per_page: 10</code>，这样你可以统一控制每页数量。</p></blockquote><h2 id="生成并预览">生成并预览</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行</span></span><br><span class="line">hexo clean &amp; hexo g &amp; hexo s</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行生成后，检查输出文件：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">public/literature/poems/index.html</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">public/literature/poems/page/2/index.html</span></span><br><span class="line">hexo g --debug &gt; debug.log 2&gt;&amp;1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">预览</span></span><br><span class="line">http://localhost:4000/literature/poems/</span><br><span class="line">http://localhost:4000/literature/poems/page/2/</span><br></pre></td></tr></table></figure><blockquote><ul class="lvl-1"><li class="lvl-2"><p>访问 <code>/literature/poems/</code> 显示第一页诗歌列表（每页10首）。</p></li><li class="lvl-2"><p>底部有“上一页 / 页码 / 下一页”导航。</p></li><li class="lvl-2"><p>支持输入页码跳转。</p></li><li class="lvl-2"><p>每首诗标题可点击进入详情页。</p></li><li class="lvl-2"><p>响应式、语义化 Pug 结构。</p></li></ul></blockquote><p><img src="/imgs/image-20250920181655896.png" alt="image-20250920181655896"></p><h2 id="隐藏文章">隐藏文章</h2><p>如果需要在首页或其他栏目隐藏，可以使用 插件  <a href="https://github.com/prinsss/hexo-hide-posts/blob/master/README_ZH.md">hexo-hide-posts</a>，支持在特定标签显示或隐藏指定文章。</p><p>详细教程参考  <a href="https://github.com/prinsss/hexo-hide-posts/blob/master/README_ZH.md">插件Github说明</a>  或  <a href="https://insectmk.cn/posts/9c83ed78/#%E5%89%8D%E8%A8%80">博客</a></p><p>如我的配置，其他地方隐藏，只在 “文学-三行诗集” 栏目显示</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hide_posts:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>     <span class="comment"># 是否启用 hexo-hide-posts</span></span><br><span class="line">  <span class="attr">filter:</span> <span class="string">hidden</span>     <span class="comment"># 隐藏文章的 front-matter 标识，也可以改成其他你喜欢的名字</span></span><br><span class="line">  <span class="attr">noindex:</span> <span class="literal">false</span>    <span class="comment"># 为隐藏的文章添加 noindex meta 标签，阻止搜索引擎收录</span></span><br><span class="line">  <span class="comment"># 设置白名单，白名单中的 generator 可以访问隐藏文章</span></span><br><span class="line">  <span class="comment"># 常见的 generators 有：index, tag, category, archive, sitemap, feed, etc.</span></span><br><span class="line">  <span class="comment"># allowlist_generators: [&#x27;*&#x27;]</span></span><br><span class="line">  <span class="attr">allowlist_generators:</span> [<span class="string">&#x27;three-line-poem&#x27;</span>]</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 设置黑名单，黑名单中的 generator 不可以访问隐藏文章</span></span><br><span class="line">  <span class="comment"># 如果同时设置了黑名单和白名单，白名单的优先级更高</span></span><br><span class="line">  <span class="comment"># blocklist_generators: [&#x27;*&#x27;]</span></span><br><span class="line">  <span class="attr">blocklist_generators:</span> [<span class="string">&#x27;index&#x27;</span>, <span class="string">&#x27;tag&#x27;</span>, <span class="string">&#x27;archive&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">如何给 Hexo 的其他页面定义类似首页的分页列表，构建入口列表展示和查看详细（Hexo + Butterfly）</summary>
    
    
    
    <category term="Tools" scheme="https://pengline.github.io/categories/Tools/"/>
    
    <category term="Hexo" scheme="https://pengline.github.io/categories/Tools/Hexo/"/>
    
    
    <category term="Hexo" scheme="https://pengline.github.io/tags/Hexo/"/>
    
    <category term="Hexo自定义分页" scheme="https://pengline.github.io/tags/Hexo%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%86%E9%A1%B5/"/>
    
    <category term="Hexo分页" scheme="https://pengline.github.io/tags/Hexo%E5%88%86%E9%A1%B5/"/>
    
    <category term="Butterfly分页" scheme="https://pengline.github.io/tags/Butterfly%E5%88%86%E9%A1%B5/"/>
    
  </entry>
  
  <entry>
    <title>Java 中各种锁的概念和应用场景</title>
    <link href="https://pengline.github.io/2025/09/16/12fcec526d85480c91adb7dc237cd547/"/>
    <id>https://pengline.github.io/2025/09/16/12fcec526d85480c91adb7dc237cd547/</id>
    <published>2025-09-15T16:00:00.000Z</published>
    <updated>2025-09-18T10:44:54.094Z</updated>
    
    <content type="html"><![CDATA[<h2 id="锁的种类">锁的种类</h2><img src="/imgs/image-20250917085547942.png" alt="image-20250917085547942" style="zoom: 80%;" /><h3 id="乐观锁-VS-悲观锁">乐观锁 VS 悲观锁</h3><p><strong>悲观锁</strong>：认为在使用数据的时候一定有别的线程来修改数据，因此在获取数据的时候会先加锁，确保数据不会被别的线程修改。Java中，synchronized关键字和Lock的实现类都是悲观锁，还有数据库的    <code>for UPDATE</code>。</p><p><strong>乐观锁</strong>：认为自己在使用数据时不会有别的线程修改数据，所以不会添加锁，只是在更新数据的时候去判断之前有没有别的线程更新了这个数据。（如果已被修改则重试或提交异常）。</p><p>乐观锁机为无锁机制，如atomic类的cas算法自旋实现，版本号机制，如数据库version字段。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>悲观锁适合写操作多的场景，先加锁可以保证写操作时数据正确。</p><p>对于资源竞争严重（线程冲突严重）的情况，CAS自旋的概率会比较大，从而浪费更多的CPU资源，效率低于synchronized等同步悲观锁。</p></li><li class="lvl-2"><p>乐观锁适合读操作多的场景，不加锁的特点能够使其读操作的性能大幅提升，增加吞吐量。</p><p>对于资源竞争较少（线程冲突较轻）的情况，使用synchronized同步锁进行线程阻塞和唤醒切换（用户态、内核态间的切换操作额外浪费消耗cpu资源）；而CAS基于硬件实现，不需要进入内核，不需要切换线程，操作自旋几率较少，可以获得更高的性能</p></li></ul></blockquote><img src="/imgs/20181122101946394.png" alt="img" style="zoom:67%;" /><h3 id="自旋锁-VS-阻塞锁">自旋锁 VS 阻塞锁</h3><p>阻塞或唤醒一个Java线程需要操作系统切换CPU状态来完成，这种状态转换需要耗费处理器时间。如果同步代码块中的内容过于简单，状态转换消耗的时间有可能比用户代码执行的时间还要长。</p><blockquote><p>在许多场景中，同步资源的锁定时间很短，为了这一小段时间去切换线程，线程挂起和恢复现场的花费可能会让系统得不偿失。如果物理机器有多个处理器，能够让两个或以上的线程同时并行执行，我们就可以让后面那个请求锁的线程不放弃CPU的执行时间，看看持有锁的线程是否很快就会释放锁。</p></blockquote><img src="/imgs/2018112210212894.png" alt="img" style="zoom:67%;" /><blockquote><p>自旋等待虽然避免了线程切换的开销，但它要占用处理器时间。如果锁被占用的时间很短，自旋等待的效果就会非常好。反之，如果锁被占用的时间很长，那么自旋的线程只会白浪费处理器资源。所以，自旋等待的时间必须要有一定的限度，如果自旋超过了限定次数（默认是10次，可以使用-XX:PreBlockSpin来更改）没有成功获得锁，就应当挂起线程。</p></blockquote><p>自旋锁的实现原理同样也是CAS，AtomicInteger中调用unsafe进行自增操作的源码中的do-while循环就是一个自旋操作，如果修改数值失败则通过循环来执行自旋，直至修改成功。</p><p><img src="/imgs/20181122104052869.png" alt="img"></p><blockquote><p>**自适自旋锁：**自旋的时间（次数）不再固定，而是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定。如果在同一个锁对象上，自旋等待刚刚成功获得过锁，并且持有锁的线程正在运行中，那么虚拟机就会认为这次自旋也是很有可能再次成功，进而它将允许自旋等待持续相对更长的时间。如果对于某个锁，自旋很少成功获得过，那在以后尝试获取这个锁时将可能省略掉自旋过程，直接阻塞线程，避免浪费处理器资源。</p></blockquote><p>java中自旋锁的简单实现方式:</p><p>当有第二个线程调用lock操作时由于owner值不为空，导致循环一直被执行，直至第一个线程调用unlock函数将owner设置为null，第二个线程才能进入临界区。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpinLock</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> AtomicReference&lt;Thread&gt; cas = <span class="keyword">new</span> <span class="title class_">AtomicReference</span>&lt;Thread&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">current</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">    <span class="comment">// 让当前线程不停地的在循环体内执行实现的，当循环的条件被其他线程改变时 才能进入临界区</span></span><br><span class="line">        <span class="keyword">while</span> (!cas.compareAndSet(<span class="literal">null</span>, current)) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">current</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        cas.compareAndSet(current, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自旋锁的其他种类： 在自旋锁中 另有三种常见的锁形式:   <strong>TicketLock ，CLHlock ，MCSlock</strong></p><p><strong>自旋锁的优点</strong>：</p><blockquote><ol><li class="lvl-3"><p>自旋锁不会使线程状态发生切换，一直处于用户态，即线程一直都是active的；不会使线程进入阻塞状态，减少了不必要的上下文切换，执行速度快</p></li><li class="lvl-3"><p>非自旋锁在获取不到锁的时候会进入阻塞状态，从而进入内核态，当获取到锁的时候需要从内核态恢复，需要线程上下文切换。 （线程被阻塞后便进入内核（Linux）调度状态，这个会导致系统在用户态与内核态之间来回切换，严重影响锁的性能）</p></li></ol></blockquote><p><strong>自旋锁的缺点</strong>：</p><blockquote><ol><li class="lvl-3"><p>消耗CPU：如果某个线程持有锁的时间过长，就会导致其它等待获取锁的线程进入循环等待。使用不当会造成CPU使用率极高。</p></li><li class="lvl-3"><p>非公平：自旋锁不是公平的，即无法满足等待时间最长的线程优先获取锁。不公平的锁就会存在“线程饥饿”问题。</p></li></ol></blockquote><p>Ticket锁主要解决的是访问顺序的问题（<strong>公平性</strong>），主要的问题是在多核cpu上。</p><p>最先请求获取锁的线程可以最先获取到锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TicketLock</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">AtomicInteger</span> <span class="variable">serviceNum</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">AtomicInteger</span> <span class="variable">ticketNum</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Integer&gt; LOCAL = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">myticket</span> <span class="operator">=</span> ticketNum.getAndIncrement();</span><br><span class="line">        LOCAL.set(myticket); <span class="comment">// 防止被外部修改myticket值</span></span><br><span class="line">  <span class="comment">// 每次都要查询一个serviceNum 服务号，影响性能（必须要到主内存读取，并阻止其他cpu修改）。</span></span><br><span class="line">        <span class="keyword">while</span> (myticket != serviceNum.get()) &#123; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">myticket</span> <span class="operator">=</span> LOCAL.get();</span><br><span class="line">        serviceNum.compareAndSet(myticket, myticket + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>TicketLock存在的问题:</strong></p><p>多处理器系统上，每个进程/线程占用的处理器都在读写同一个变量serviceNum ，每次读写操作都必须在多个处理器缓存之间进行缓存同步，这会导致繁重的系统总线和内存的流量，大大降低系统整体的性能。</p><p>CLHLock 和MCSLock 则是两种类型相似的公平锁，采用链表的形式进行排序，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CLHLock</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">CLHNode</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">isLocked</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> CLHNode     tail;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;CLHNode&gt; LOCAL = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;CLHNode&gt;();</span><br><span class="line">    <span class="comment">// 将指定类型的指定的volatile引用字段进行原子更新(tail获取、设定值两个操作是非原子的)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicReferenceFieldUpdater&lt;CLHLock, CLHNode&gt; UPDATER = AtomicReferenceFieldUpdater.newUpdater(CLHLock.class, CLHNode.class, <span class="string">&quot;tail&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CLHNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CLHNode</span>();</span><br><span class="line">        LOCAL.set(node);</span><br><span class="line">        <span class="type">CLHNode</span> <span class="variable">preNode</span> <span class="operator">=</span> UPDATER.getAndSet(<span class="built_in">this</span>, node);</span><br><span class="line">        <span class="keyword">if</span> (preNode != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (preNode.isLocked) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            preNode = <span class="literal">null</span>;</span><br><span class="line">            LOCAL.set(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CLHNode</span> <span class="variable">node</span> <span class="operator">=</span> LOCAL.get();</span><br><span class="line">        <span class="keyword">if</span> (!UPDATER.compareAndSet(<span class="built_in">this</span>, node, <span class="literal">null</span>)) &#123;</span><br><span class="line">            node.isLocked = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        node = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CLHlock是不停的查询前驱变量， 导致不适合在NUMA 架构下使用（在这种结构下，每个线程分布在不同的物理内存区域）</p><p>MCSLock则是对本地变量的节点进行循环。不存在CLHlock 的问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MCSLock</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MCSNode</span> &#123;</span><br><span class="line">        <span class="keyword">volatile</span> MCSNode next;</span><br><span class="line">        <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">isLocked</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;MCSNode&gt; NODE = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;MCSNode&gt;();</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unused&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> MCSNode queue;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicReferenceFieldUpdater&lt;MCSLock, MCSNode&gt; UPDATER = AtomicReferenceFieldUpdater.newUpdater(MCSLock.class, MCSNode.class, <span class="string">&quot;queue&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MCSNode</span> <span class="variable">currentNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MCSNode</span>();</span><br><span class="line">        NODE.set(currentNode);</span><br><span class="line">        <span class="type">MCSNode</span> <span class="variable">preNode</span> <span class="operator">=</span> UPDATER.getAndSet(<span class="built_in">this</span>, currentNode);</span><br><span class="line">        <span class="keyword">if</span> (preNode != <span class="literal">null</span>) &#123;</span><br><span class="line">            preNode.next = currentNode;</span><br><span class="line">            <span class="keyword">while</span> (currentNode.isLocked) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MCSNode</span> <span class="variable">currentNode</span> <span class="operator">=</span> NODE.get();</span><br><span class="line">        <span class="keyword">if</span> (currentNode.next == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (UPDATER.compareAndSet(<span class="built_in">this</span>, currentNode, <span class="literal">null</span>)) &#123;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (currentNode.next == <span class="literal">null</span>) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            currentNode.next.isLocked = <span class="literal">false</span>;</span><br><span class="line">            currentNode.next = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul class="lvl-1"><li class="lvl-2"><p>CLH 的队列是隐式的队列，没有真实的后继结点属性。</p></li><li class="lvl-2"><p>MCS 的队列是显式的队列，有真实的后继结点属性。</p></li></ul></blockquote><p>JAVA中，能够进入\退出、阻塞状态或包含阻塞锁的方法有 ，<strong>synchronized</strong> ，<strong>ReentrantLock</strong>，<strong>Object.wait()和notify()</strong>,   <strong>LockSupport.park()和unpart()</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CLHLock</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">CLHNode</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">volatile</span> Thread isLocked;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> CLHNode tail;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;CLHNode&gt; LOCAL = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;CLHNode&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicReferenceFieldUpdater&lt;CLHLock, CLHNode&gt; UPDATER = AtomicReferenceFieldUpdater.newUpdater(CLHLock.class, CLHNode.class, <span class="string">&quot;tail&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CLHNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CLHNode</span>();</span><br><span class="line">        LOCAL.set(node);</span><br><span class="line">        <span class="type">CLHNode</span> <span class="variable">preNode</span> <span class="operator">=</span> UPDATER.getAndSet(<span class="built_in">this</span>, node);</span><br><span class="line">        <span class="keyword">if</span> (preNode != <span class="literal">null</span>) &#123;</span><br><span class="line">            preNode.isLocked = Thread.currentThread();</span><br><span class="line">            LockSupport.park(<span class="built_in">this</span>);</span><br><span class="line">            preNode = <span class="literal">null</span>;</span><br><span class="line">            LOCAL.set(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CLHNode</span> <span class="variable">node</span> <span class="operator">=</span> LOCAL.get();</span><br><span class="line">        <span class="keyword">if</span> (!UPDATER.compareAndSet(<span class="built_in">this</span>, node, <span class="literal">null</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;unlock\t&quot;</span> + node.isLocked.getName());</span><br><span class="line">            LockSupport.unpark(node.isLocked);</span><br><span class="line">        &#125;</span><br><span class="line">        node = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>阻塞锁的优势在于，阻塞的线程不会占用cpu时间， 不会导致 CPu占用率过高，但进入时间以及恢复时间都要比自旋锁略慢。在竞争激烈的情况下 阻塞锁的性能要明显高于 自旋锁。</p></blockquote><p><strong>在线程竞争不激烈的情况下，使用自旋锁，竞争激烈的情况下使用阻塞锁</strong>。</p><h3 id="无锁-VS-偏向锁"><a href="https://www.cnblogs.com/jyroy/p/11365935.html">无锁 VS 偏向锁 </a></h3><p>偏向锁实际上是一种锁优化的，其目的是为了减少数据在无竞争情况下的性能消耗。</p><p>核心思想就是<strong>锁会偏向第一个获取它的线程</strong>，在接下来的执行过程中该锁没有其他的线程获取，则持有偏向锁的线程永远不需要再同步。</p><blockquote><p><strong>偏向锁的获取</strong><br>当一个线程访问同步块并获取锁时，会在对象头和栈帧中的锁记录里储存锁偏向的线程ID。以后该线程在进入和退出同步块时不需要进行CAS操作来加锁和解锁，只需要检查当前Mark Word中储存的线程是否指向当前线程，如果成功，表示已经获得对象锁；如果检测失败，则需要再测试一下Mark Word中偏向锁的标志是否已经被置为1（表示当前锁是偏向锁）：如果没有则使用CAS操作竞争锁，如果设置了，则尝试使用CAS将对象头的偏向锁指向当前线程。</p></blockquote><blockquote><p><strong>偏向锁的撤销</strong><br>偏向锁使用一种等待竞争出现才释放锁的机制，所以当有其他线程尝试获得锁时，才会释放锁。</p><p>偏向锁的撤销，需要等到安全点。它首先会暂停拥有偏向锁的线程，然后检查持有偏向锁的线程是否活着，如果不处于活动状态，则将对象头设置为无锁状态；如果依然活动，拥有偏向锁的栈会被执行，遍历偏向对象的锁记录，栈中的锁记录和对象头的Mark Word要么重新偏向其他线程，要么恢复到无锁或者标记对象不合适作为偏向锁（膨胀为轻量级锁），最后唤醒暂停的线程。</p></blockquote><blockquote><p><strong>关闭偏向锁</strong><br>偏向锁在Java运行环境中默认开启，但是不会随着程序启动立即生效，而是在启动几秒种后才激活，可以使用参数关闭延迟：<br><strong>-XX：BiasedLockingStartupDelay=0</strong><br>同样可以关闭偏向锁（程序默认进入轻量级锁）<br><strong>-XX：UseBiasedLocking=false</strong></p></blockquote><h3 id="轻量级锁-VS-重量级锁">轻量级锁 VS 重量级锁</h3><p>重量级锁就是最开始的线程阻塞操作，又叫悲观锁。</p><p>相对轻量级而言，重量级锁的阻塞挂起/唤醒线程需要从底层的的<strong>用户态</strong>转为<strong>内核态</strong> ，消耗CPU资源。</p><blockquote><p>轻量级锁是JDK1.6之中加入的新型锁机制，它并不是来代替重量级锁的，他的本意是在没有多线程竞争的前提下，减少传统的重量级锁使用操作系统互斥量产生的性能消耗。</p></blockquote><p><strong>轻量级锁加锁</strong></p><blockquote><p>线程在执行同步块之前，JVM会现在当前线程的栈帧中创建用于储存锁记录的空间（LockRecord），并将对象头的Mark Word信息复制到锁记录中。然后线程尝试使用CAS将对象头的MarkWord替换为指向锁记录的指针。</p><p>如果成功，当前线程获得锁，并且对象的锁标志位转变为“00”，如果失败，表示其他线程竞争锁，当前线程便会尝试自旋获取锁。</p><p><strong>如果有两条以上的线程竞争同一个锁，那么轻量级锁就不再有效</strong>，要膨胀为重量级锁，锁标志的状态变为“10”，MarkWord中储存的就是指向重量级锁（互斥量）的指针，后面等待的线程也要进入阻塞状态。</p></blockquote><p><strong>轻量级锁解锁</strong></p><blockquote><p>轻量级锁解锁时，同样通过CAS操作将对象头换回来。如果成功，则表示没有竞争发生。如果失败，说明有其他线程尝试过获取该锁，锁同样会膨胀为重量级锁。在释放锁的同时，唤醒被挂起的线程。</p></blockquote><h3 id="公平锁-VS-非公平锁">公平锁 VS 非公平锁</h3><p><strong>公平锁（Fair Lock）：</strong> 若等待队列非空，则直接入队；否则尝试获取锁</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>当一个线程尝试获取锁时，<strong>即使当前锁是可用的（没有被占用）</strong>，它也会<strong>先检查等待队列中是否有其他线程在排队</strong>。</p></li><li class="lvl-2"><p>如果有排队线程，当前线程会<strong>直接进入队列末尾排队</strong>，而不是“插队”获取锁。</p></li><li class="lvl-2"><p>保证了“先来先得”的公平性，避免线程饥饿。</p></li></ul></blockquote><p>**非公平锁（Non-fair Lock）：**先尝试获取锁，获取失败后，放入队列</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>当一个线程尝试获取锁时，<strong>不管等待队列中是否有其他线程</strong>，它都会<strong>首先尝试直接获取锁（CAS 抢占）</strong>。</p></li><li class="lvl-2"><p>如果抢锁成功 → 直接获得锁，不管队列里有没有“老员工”在排队。</p></li><li class="lvl-2"><p>如果抢锁失败 → 才进入等待队列排队。</p></li><li class="lvl-2"><p>这样可能导致“插队”，但<strong>吞吐量通常更高</strong>，因为减少了线程挂起/唤醒的开销。</p></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ReentrantLock</span> <span class="variable">fairLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>(<span class="literal">true</span>);   <span class="comment">// 公平锁</span></span><br><span class="line"><span class="type">ReentrantLock</span> <span class="variable">unfairLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();     <span class="comment">// 非公平锁（默认）</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>特性</th><th>公平锁</th><th>非公平锁</th></tr></thead><tbody><tr><td>获取锁时行为</td><td>检查队列，有排队则入队</td><td>直接尝试抢锁，失败才入队</td></tr><tr><td>吞吐量</td><td>较低（频繁上下文切换）</td><td>较高（减少排队，直接抢占）</td></tr><tr><td>公平性</td><td>保证 FIFO，无饥饿</td><td>不保证，可能插队</td></tr><tr><td>默认</td><td>否</td><td>是</td></tr></tbody></table><h3 id="可重入锁-VS-非可重入锁">可重入锁 VS 非可重入锁</h3><p>可重入锁又名递归锁，是指在同一个线程在外层方法获取锁的时候，再进入该线程的内层方法会自动获取锁（前提是锁对象是同一个对象或者class），不会因为之前已经获取过还没释放而阻塞。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>Java中<code>ReentrantLock</code>和<code>synchronized</code>都是可重入锁，可重入锁的一个优点是可一定程度避免死锁。</p></li><li class="lvl-2"><p>非可重入锁<code>NonReentrantLock</code>。</p></li></ul></blockquote><p>为什么可重入锁就可以在嵌套调用时可以自动获得锁呢？</p><blockquote><p>举例：有多个人在排队打水，此时管理员允许锁和同一个人的多个水桶绑定。这个人用多个水桶打水时，第一个水桶和锁绑定并打完水之后，第二个水桶也可以直接和锁绑定并开始打水，所有的水桶都打完水之后打水人才会将锁还给管理员。这个人的所有打水流程都能够成功执行，后续等待的人也能够打到水。</p><img src="/imgs/2018112210434386.png" alt="img" style="zoom:50%;" /></blockquote><p><strong>可重入锁的实现</strong></p><p>可重入锁，也叫做递归锁，指的是同一线程，在外层函数获得锁之后 ，内层递归函数仍然可以获取该锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getId() + <span class="string">&quot;--&gt; get&quot;</span>);</span><br><span class="line">        set();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getId() + <span class="string">&quot;--&gt; set&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ss).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ss).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ss).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>可重入锁最大的作用是避免死锁</strong></p><p>对于自旋锁来说， 若有同一线程两次调用<code>lock()</code> ，会导致第二次调用lock位置进行自旋，产生了死锁。说明这个锁并不是可重入的。</p><p><strong>自旋锁实现可重入锁</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpinLock1</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> AtomicReference&lt;Thread&gt; owner = <span class="keyword">new</span> <span class="title class_">AtomicReference</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">current</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        <span class="keyword">if</span> (current == owner.get()) &#123;</span><br><span class="line">            count++; <span class="comment">// 线程计数</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!owner.compareAndSet(<span class="literal">null</span>, current)) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">current</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        <span class="keyword">if</span> (current == owner.get()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (count != <span class="number">0</span>) &#123;</span><br><span class="line">                count--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                owner.compareAndSet(current, <span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="独享锁（互斥）-VS-共享锁">独享锁（互斥） VS 共享锁</h3><p><strong>独享锁</strong>（Exclusive Lock / 互斥锁）</p><p>同一时刻<strong>只允许一个线程</strong>持有该锁，其他线程必须等待锁释放后才能获取。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>互斥性：保证线程安全，避免数据竞争。</p></li><li class="lvl-2"><p>适用于写操作或需要独占资源的场景。</p></li><li class="lvl-2"><p>性能较低（因为并发度低），但安全性高。</p></li></ul></blockquote><p>Java 中的实现：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><code>synchronized</code> 关键字（隐式锁）</p></li><li class="lvl-2"><p><code>ReentrantLock</code>（显式锁，默认是独享锁）</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同一时刻只有一个线程能执行 `increment()` 方法。 </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p><strong>共享锁</strong>（Shared Lock / 读锁）</p><p>允许多个线程<strong>同时持有该锁</strong>，前提是这些线程的操作是“兼容”的（如多个读操作）。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>允许多个线程并发读取，提高并发性能。</p></li><li class="lvl-2"><p>不允许与写操作（独享锁）同时进行。</p></li><li class="lvl-2"><p>适用于“读多写少”的场景。</p></li></ul></blockquote><p>Java 中的实现：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><code>ReentrantReadWriteLock.ReadLock</code>（共享锁）</p></li><li class="lvl-2"><p><code>ReentrantReadWriteLock.WriteLock</code>（独享锁）</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多个线程可同时调用 `read()`，但调用 `write()` 时，其他读/写线程都必须等待。 </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Data</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ReentrantReadWriteLock</span> <span class="variable">rwLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读操作 - 共享锁</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">read</span><span class="params">()</span> &#123;</span><br><span class="line">        rwLock.readLock().lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            rwLock.readLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写操作 - 独享锁</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String newValue)</span> &#123;</span><br><span class="line">        rwLock.writeLock().lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.value = newValue;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            rwLock.writeLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><table><thead><tr><th>特性</th><th>独享锁（互斥锁）</th><th>共享锁（读锁）</th></tr></thead><tbody><tr><td>持有者数量</td><td>只能被一个线程持有</td><td>可被多个线程同时持有</td></tr><tr><td>适用场景</td><td>写操作、修改资源</td><td>读操作、查询资源</td></tr><tr><td>并发性</td><td>低（串行化）</td><td>高（允许多读）</td></tr><tr><td>典型实现</td><td><code>synchronized</code>,<code>ReentrantLock</code></td><td><code>ReentrantReadWriteLock.ReadLock</code></td></tr><tr><td>与对方的兼容性</td><td>不能与其他任何锁共存</td><td>可与其他共享锁共存，但不能与独享锁共存</td></tr><tr><td>性能</td><td>较低（阻塞其他线程）</td><td>较高（读操作可并发）</td></tr></tbody></table><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>读 &gt;&gt; 写</strong> ➜ 用 <code>ReentrantReadWriteLock</code>（共享读 + 独占写）</p></li><li class="lvl-2"><p><strong>写频繁 或 读写差不多</strong> ➜ 用 <code>ReentrantLock</code> 或 <code>synchronized</code>（简单高效）</p></li><li class="lvl-2"><p><strong>追求极致性能 + 读多写少</strong> ➜ 甚至可以考虑 <code>StampedLock</code>（Java 8+，支持乐观读）</p></li></ul></blockquote><h2 id="如何避免死锁">如何避免死锁</h2><p>活锁：线程的状态可以改变但是却不能继续执行</p><p><strong>死锁发生四个条件</strong>：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>互斥条件</strong>：一个资源每次只能被一个线程使用。要求对所分配的资源（如打印机）进行排他性控制，即在一段时间内某 资源仅为一个线程所占有。此时若有其他线程请求该资源，则请求线程只能等待。</p></li><li class="lvl-2"><p><strong>请求与保持条件</strong>：一个线程因请求资源而阻塞时，对已获得的资源保持不放（线程已经保持了至少一个资源，但又提出了新的资源请求，而该资源已被其他线程占有，此时请求线程被阻塞，但对自己已获得的资源保持不放）。</p></li><li class="lvl-2"><p><strong>不剥夺条件</strong>：线程已获得的资源，在末使用完之前，不能强行剥夺（只能是主动释放)。</p></li><li class="lvl-2"><p><strong>循环等待条件</strong>：若干线程之间形成一种头尾相接的循环等待资源关系。</p></li></ul><blockquote><p>当以上四个条件均满足，必然会造成死锁，发生死锁的线程无法进行下去，它们所持有的资源也无法释放。这样会导致CPU的吞吐量下降。当多个线程需要相同的一些锁，但是按照不同的顺序加锁，死锁就很容易发生。</p></blockquote><h3 id="避免死锁">避免死锁</h3><p>（破坏其中一个条件即可）：</p><p>最简单的方法就是阻止循环等待条件。将系统中所有的资源设置标志位、排序，规定所有的线程申请资源必须以一定的顺序（升序或降序）做操作来避免死锁，获取所有锁的顺序保持一致。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>让一个线程一次性申请所有的资源（破坏请求与保持条件）</p></li><li class="lvl-2"><p>加锁添加时限或通过 Lock 可重入锁，释放线程占用的锁（线程尝试获取锁的时候加上一定的时限，超过时限则放弃对该锁的请求，并释放自己占有的锁）（破坏不剥夺条件）</p></li><li class="lvl-2"><p>加锁顺序保持一致（线程按照一定的顺序加锁，确保所有的线程都是按照相同的顺序获得锁）（破坏循环等待条件）</p></li></ul></blockquote><h3 id="死锁检查">死锁检查</h3><p>死锁可能导致线程池满，线程无法销毁，一直占用。服务假死状态，CPU飙升</p><p>使用<code>jps</code>， <code>jstack</code> 或 <code>jconsole</code> 工具<code>dump</code>线程分析，它是 jdk 自带的线程堆栈分析工具。</p><p>arthas 分析线程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jps -l        #用jps来找到当前java的进程号,l表示列出路径</span><br><span class="line">jstack -l 14804 # 查看进程下所有线程状态（直接列出异常线程状态：Found one Java-level deadlock）</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">JConsole是一个图形化的监控工具！通过 线程 -&gt; 检测死锁    ，可查看死锁</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">jvisualvm是一个图形化的监控工具！ 线程中以红色表示异常线程</span></span><br></pre></td></tr></table></figure><h3 id="死锁复现">死锁复现</h3><p>解决一下死锁，只需要将加锁顺序改成一样，即都先加锁o1，再加锁o2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个简单的死锁类：加锁顺序不一致，且互相等待/争夺锁资源</span></span><br><span class="line"><span class="comment"> * 当DeadLock类的对象flag==1时（td1），先锁定o1,睡眠500毫秒</span></span><br><span class="line"><span class="comment"> * 而td1在睡眠的时候另一个flag==0的对象（td2）线程启动，先锁定o2,睡眠500毫秒</span></span><br><span class="line"><span class="comment"> * td1睡眠结束后需要锁定o2才能继续执行，而此时o2已被td2锁定；</span></span><br><span class="line"><span class="comment"> * td2睡眠结束后需要锁定o1才能继续执行，而此时o1已被td1锁定；</span></span><br><span class="line"><span class="comment"> * td1、td2相互等待，都需要得到对方锁定的资源才能继续执行，从而死锁。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeadLock</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//静态对象是类的所有对象共享的  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">o2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;flag=&quot;</span> + flag);</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (o1) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (o2) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (o2) &#123; <span class="comment">// 此处改为o1</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (o1) &#123;  <span class="comment">// 此处改为o2，即可避免死锁</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DeadLock</span> <span class="variable">td1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeadLock</span>();</span><br><span class="line">        <span class="type">DeadLock</span> <span class="variable">td2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeadLock</span>();</span><br><span class="line">        td1.flag = <span class="number">1</span>;</span><br><span class="line">        td2.flag = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//td1,td2都处于可执行状态，但JVM线程调度先执行哪个线程是不确定的。  </span></span><br><span class="line">        <span class="comment">//td2的run()可能在td1的run()之前运行  </span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(td1).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(td2).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h2 id="对象头与锁">对象头与锁</h2><p>锁就保存在对象头中。</p><p>Hotpot虚拟机的对象头分两部分信息：<strong>Mark Word（标记字段）、Klass Pointer（类型指针）</strong>。</p><p>Mark Word：</p><blockquote><p>默认存储对象的<u>HashCode，分代年龄和锁标志位</u>信息。这些信息都是与对象自身定义无关的数据，所以Mark Word被设计成一个非固定的数据结构以便在极小的空间内存存储尽量多的数据。它会根据对象的状态复用自己的存储空间，也就是说在运行期间Mark Word里存储的<u>数据会随着锁标志位的变化而变化</u>。这部分数据长度在32位和64位虚拟机中分别为32bit和64bit，它又称为“MarkWord”，它是实现锁的关键。</p></blockquote><p>Klass Point：</p><blockquote><p>对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。如果是数组的话，还有一个额外的空间储存数组长度。</p></blockquote><p>它的变化状态如下所示<br><img src="/imgs/20151217151455512" alt="img" style="zoom:67%;" /></p><p>如：synchronized是悲观锁，在操作同步资源之前需要给同步资源先加锁，这把锁就是存在Java对象头里的</p><h3 id="锁优化">锁优化</h3><p>主要是jdk中针对 Synchronized 关键字的优化。</p><p>Java 中的 <code>synchronized</code> 是最常用的同步机制，但早期版本（JDK 1.5 之前）性能较差，因为每次加锁/解锁都要调用操作系统内核的 Mutex（互斥量），涉及<strong>用户态到内核态切换</strong>，开销大。</p><p>从 JDK 1.6 开始，JVM 对 <code>synchronized</code> 做了大量优化，引入了  <strong>“锁优化”</strong> 手段：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>锁消除（Lock Elimination）</p></li><li class="lvl-2"><p>锁粗化（Lock Coarsening）</p></li><li class="lvl-2"><p>自旋锁 &amp; 自适应自旋（Spin Lock）</p></li><li class="lvl-2"><p>偏向锁（Biased Locking）</p></li><li class="lvl-2"><p>轻量级锁（Lightweight Locking）</p></li><li class="lvl-2"><p>重量级锁（Heavyweight Locking）→ 即“锁膨胀”</p></li></ul></blockquote><h3 id="锁消除">锁消除</h3><p>JVM 在 JIT 编译时，通过<strong>逃逸分析（Escape Analysis）</strong> 发现某个锁对象<strong>不会被多个线程访问</strong>（即“未逃逸”），则直接<strong>移除不必要的加锁操作</strong>。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>对象是局部变量，且不会被其他线程访问。</p></li><li class="lvl-2"><p>字符串拼接中 <code>StringBuffer</code> 的 <code>append()</code> 方法（内部有 <code>synchronized</code>，但局部使用时可消除）。</p></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// append() 是同步方法，但因为 sb 是局部变量，不会被其他线程访问，JVM 会消除锁，等价于用 StringBuilder。 </span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">concat</span><span class="params">(String s1, String s2)</span> &#123;</span><br><span class="line">    <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(); <span class="comment">// 局部变量，不逃逸</span></span><br><span class="line">    sb.append(s1);</span><br><span class="line">    sb.append(s2);</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认开启（JDK 1.6+），可通过参数控制：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-XX:+DoEscapeAnalysis      # 开启逃逸分析（默认开启）</span><br><span class="line">-XX:+EliminateLocks        # 开启锁消除（默认开启）</span><br></pre></td></tr></table></figure><h3 id="锁粗化">锁粗化</h3><p>如果一段代码中<strong>对同一个对象反复加锁、解锁</strong>（如循环内），JVM 会将多个加锁操作<strong>合并成一个范围更大的锁</strong>，减少加解锁次数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 源代码</span></span><br><span class="line"><span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">    doSomething1();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">    doSomething2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">    doSomething3();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JVM 优化为：</span></span><br><span class="line"><span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">    doSomething1();</span><br><span class="line">    doSomething2();</span><br><span class="line">    doSomething3();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实际代码</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (String.class)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// JIT优化后</span></span><br><span class="line"><span class="keyword">synchronized</span> (String.class) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="锁升级（锁膨胀）">锁升级（锁膨胀）</h3><p>指锁从<strong>轻量级 → 重量级</strong>的升级过程。这是 <code>synchronized</code> 实现的核心机制之一。</p><p>Java 对象头中有一个 <strong>Mark Word</strong>，用于存储锁状态。锁有四种状态（按竞争强度升级）</p><blockquote><p>在Java中，锁共有4种状态，级别从低到高依次为：无状态锁，偏向锁，轻量级锁和重量级锁状态，这几个状态会随着竞争情况逐渐升级。锁可以升级但不能降级。</p><p>锁的四种状态由低到高依次为：<strong>无锁    -&gt;    偏向锁    -&gt;    轻量级锁    -&gt;    重量级锁</strong></p></blockquote><img src="/imgs/20210205103013432.png" alt="img" style="zoom: 67%;" /><p>并且四种状态会随着竞争的情况逐渐升级，而且是<strong>不可逆</strong>的过程</p><img src="/imgs/20200603161323889.png" alt="img" style="zoom: 80%;" /><table><thead><tr><th>锁</th><th>优点</th><th>缺点</th><th>适用场景</th></tr></thead><tbody><tr><td>偏向锁</td><td>加锁和解锁不需要额外的消耗，和执行非同步方法相比仅存在纳秒级的差距</td><td>如果线程间存在锁竞争，会带来额外的锁撤销的消耗</td><td>适用于只有一个线程访问同步块场景</td></tr><tr><td>轻量级锁</td><td>竞争的线程不会阻塞，提高了程序的响应速度</td><td>如果始终得不到索竞争的线程，使用自旋会消耗CPU</td><td>追求响应速度，同步块执行速度非常快</td></tr><tr><td>重量级锁</td><td>线程竞争不使用自旋，不会消耗CPU</td><td>线程阻塞，响应时间缓慢</td><td>追求吞吐量，同步块执行速度较慢</td></tr></tbody></table><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>无锁</strong>：指<strong>没有对资源进行锁定</strong>，所有的线程都能访问并修改同一个资源，但同时只有一个线程能修改成功。果有多个线程修改同一个值，必定会有一个线程能修改成功，而其他修改失败的线程会不断重试直到修改成功。</p></li><li class="lvl-2"><p><strong>偏向锁</strong>：指当<strong>一段同步代码一直被同一个线程所访问</strong>时，即不存在多个线程的竞争时，那么该线程在后续访问时便会自动获得锁，从而降低获取锁带来的消耗，即提高性能。</p><ul class="lvl-3"><li class="lvl-4">初次执行到synchronized代码块的时候，锁对象变成偏向锁（通过CAS修改对象头里的锁标志位。执行完同步代码块后，线程并不会主动释放偏向锁，当第二次到达同步代码块时，线程会判断此时持有锁的线程是否就是自己，如果是则正常往下执行。由于之前没有释放锁，也就没有额外开销。偏向锁只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁，线程是不会主动释放偏向锁的。</li><li class="lvl-4">关于偏向锁的撤销，需要等待全局安全点，即在某个时间点上没有字节码正在执行时，它会先暂停拥有偏向锁的线程，然后判断锁对象是否处于被锁定状态。如果线程不处于活动状态，则将对象头设置成无锁状态，并撤销偏向锁，恢复到无锁（标志位为01）或轻量级锁（标志位为00）的状态。</li></ul></li><li class="lvl-2"><p><strong>轻量级锁</strong>：指当锁是偏向锁的时候，却<strong>被另外的线程所访问。存在少量锁竞争</strong>，此时偏向锁就会升级为轻量级锁，其他线程会通过自旋的形式尝试获取锁，线程不会阻塞，从而提高性能（JVM默认自旋次数为 -XX:PreBlockSpin=10）。</p><ul class="lvl-3"><li class="lvl-4">轻量级锁的获取主要由两种情况：<br>① 当关闭偏向锁功能时；<br>② 由于多个线程竞争偏向锁导致偏向锁升级为轻量级锁。</li></ul></li><li class="lvl-2"><p><strong>重量级锁</strong>：是指当有一个线程获取锁之后，其余<strong>所有等待获取该锁的线程都会处于阻塞状态</strong>（用户态 - 内核态）。由操作系统来负责线程间的调度和线程的状态变更。而这样会出现频繁地对线程运行状态的切换，线程的挂起和唤醒，从而消耗大量的系统资计数器记录自旋次数，达到最大自旋次数的线程，会将轻量级锁升级为重量级锁，当后续线程尝试获取锁时，发现被占用的锁是重量级锁，则直接将自己挂起（而不是忙等），等待将来被唤醒。</p></li></ul></blockquote><img src="/imgs/20200606123648335.png" alt="img" style="zoom:80%;" /><p><strong>锁升级过程详解</strong>：</p><p>① <strong>无锁 → 偏向锁</strong></p><ul class="lvl-0"><li class="lvl-2"><p>第一个线程访问同步块时，JVM 会将对象 Mark Word 设置为偏向该线程 ID。</p></li><li class="lvl-2"><p>后续该线程再进入，无需任何同步操作（零成本）。</p></li><li class="lvl-2"><p>若有其他线程竞争 → 撤销偏向锁 → 升级为轻量级锁。</p></li></ul><blockquote><p><strong>注意：JDK 15 开始默认禁用偏向锁，JDK 17+ 已移除。</strong></p></blockquote><p>② <strong>轻量级锁</strong></p><ul class="lvl-0"><li class="lvl-2"><p>通过 <strong>CAS（Compare And Swap）</strong> 尝试将对象头指向当前线程栈中的 Lock Record。</p></li><li class="lvl-2"><p>成功 → 获取锁。</p></li><li class="lvl-2"><p>失败 → 自旋重试（自适应自旋）。</p></li><li class="lvl-2"><p>自旋多次失败 → 升级为重量级锁。</p></li></ul><p>③ <strong>重量级锁</strong></p><ul class="lvl-0"><li class="lvl-2"><p>调用操作系统 Mutex，线程挂起进入阻塞队列。</p></li><li class="lvl-2"><p>由 OS 调度唤醒，开销最大。</p></li><li class="lvl-2"><p>但适合长时间持有锁或高竞争场景。</p></li></ul><h2 id="Java-提供的锁">Java 提供的锁</h2><p>造成线程安全问题的主要诱因：一是存在共享数据(也称临界资源)，二是存在多条线程共同操作共享数据</p><h3 id="Synchronized">Synchronized</h3><p>又称 <strong>对象监视器（Object Monitor）</strong>。</p><p>当一个线程正在访问一个对象的 synchronized 实例方法，那么其他线程不能访问该对象的其他 synchronized 方法（一个对象只有一把锁），同一线程内是可重入的，如果两个实例对象获取同一把锁，则会出现锁失效：</p><p>Synchronized关键字会让没有得到锁资源的线程进入<strong>BLOCKED</strong>状态，而后在争夺到锁资源后恢复为<strong>RUNNABLE</strong>状态，这个过程中涉及到操作系统<strong>用户模式</strong>和<strong>内核模式</strong>的转换，代价比较高（优化：增加了从<strong>偏向锁</strong>到<strong>轻量级锁</strong>再到<strong>重量级锁</strong>的过度）</p><h4 id="锁定范围">锁定范围</h4><p>Synchronized 的使用不同，加锁范围会有所不同：</p><blockquote><ol><li class="lvl-3"><p>修饰一个代码块，被修饰的代码块称为同步语句块，其作用的范围是大括号{}括起来的代码，作用的对象是<strong>调用这个代码块的对象（一个线程访问一个对象中的synchronized(this)同步代码块时，其他试图访问该对象的线程将被阻塞），如果为参数对象（synchronized (dto.getLock())）,则只会锁定阻塞同一对象</strong>；</p></li><li class="lvl-3"><p>修饰一个方法，被修饰的方法称为同步方法，其作用的范围是整个方法，作用的对象是<strong>调用这个方法的对象（两个对象间不会锁）</strong>；</p></li><li class="lvl-3"><p>修饰一个静态的方法，其作用的范围是整个静态方法，作用的对象是这个<strong>类对象</strong>；</p></li><li class="lvl-3"><p>修饰一个类，其作用的范围是synchronized后面括号括起来的部分，作用主的对象是这个类的所有对象。</p></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同步线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SyncThread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThreadDto</span> <span class="variable">lock1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThreadDto</span>();</span><br><span class="line">        <span class="type">MyThreadDto</span> <span class="variable">lock2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThreadDto</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">MySyncThread</span> <span class="variable">syncThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MySyncThread</span>(lock1);</span><br><span class="line">        <span class="type">MySyncThread</span> <span class="variable">syncThread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MySyncThread</span>(lock2);</span><br><span class="line"></span><br><span class="line">            <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(syncThread, <span class="string">&quot;SyncThread-1=&quot;</span> + i);</span><br><span class="line">            thread1.start();</span><br><span class="line"></span><br><span class="line">            <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(syncThread2, <span class="string">&quot;SyncThread-2=&quot;</span> + i);</span><br><span class="line">            thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySyncThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> count;</span><br><span class="line">    <span class="keyword">private</span> MyThreadDto packageAccessLock;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MySyncThread</span><span class="params">(MyThreadDto accessLock)</span> &#123;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        packageAccessLock = accessLock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 此处获得的是参数中的锁，只有同一对象的该参数才会阻塞</span></span><br><span class="line">        <span class="keyword">synchronized</span> (packageAccessLock.getLock()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + (count++));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThreadDto</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如下：出现结果为小于2000000，获得两个不同实例对象的锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountingSyncBad</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">increase</span><span class="params">()</span>&#123;    <span class="comment">// static 修饰，锁为当前类对象</span></span><br><span class="line">        i++;</span><br><span class="line">    &#125; <span class="comment">// 修饰实例方法，此时的锁对象为实例对象（如new AccountingSyncBad()）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000000</span>;j++)&#123;</span><br><span class="line">            increase();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;        <span class="comment">//new新实例</span></span><br><span class="line">        <span class="comment">// 获得两个不同对象的锁</span></span><br><span class="line">        Thread t1=<span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">AccountingSyncBad</span>());                <span class="comment">//new新实例</span></span><br><span class="line">        Thread t2=<span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">AccountingSyncBad</span>());</span><br><span class="line">        <span class="comment">// 获得同一把锁</span></span><br><span class="line">   <span class="comment">//     AccountingSyncBad instance = new AccountingSyncBad();</span></span><br><span class="line">   <span class="comment">//     Thread t1 = new Thread(instance);</span></span><br><span class="line">    <span class="comment">//    Thread t2 = new Thread(instance);</span></span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();                <span class="comment">//join含义:当前线程A等待thread线程终止之后才能从thread.join()返回</span></span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同步线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SyncThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SyncThread</span><span class="params">()</span> &#123;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + (count++));</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SyncThread</span> <span class="variable">syncThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SyncThread</span>(); <span class="comment">// 同一个对象阻塞</span></span><br><span class="line">        <span class="comment">// SyncThread syncThread2 = new SyncThread(); // 不同对象不阻塞</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(syncThread, <span class="string">&quot;SyncThread-1&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(syncThread, <span class="string">&quot;SyncThread-2&quot;</span>);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>synchronized可保证一个线程的变化(主要是共享数据的变化)被其他线程所看到（保证可见性，完全可以替代Volatile功能）</p><p><strong>应用方式：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>修饰实例方法，作用于当前实例加锁，进入同步代码前要获得当前实例的锁</p></li><li class="lvl-2"><p>修饰静态方法，作用于当前类对象加锁，进入同步代码前要获得当前类对象的锁</p></li><li class="lvl-2"><p>修饰代码块，指定加锁对象，对给定对象加锁，进入同步代码库前要获得给定对象的锁。</p></li></ul><p><strong>作用：</strong></p><blockquote><ol><li class="lvl-3"><p>原子性：确保线程互斥的访问同步代码；</p></li><li class="lvl-3"><p>可见性：保证共享变量的修改能够及时可见，其实是通过Java内存模型中的 “<strong>对一个变量unlock操作之前，必须要同步到主内存中；如果对一个变量进行lock操作，则将会清空工作内存中此变量的值，在执行引擎使用此变量前，需要重新从主内存中load操作或assign操作初始化变量值</strong>” 来保证的；</p></li><li class="lvl-3"><p>有序性：有效解决重排序问题，即 “一个unlock操作先行发生(happen-before)于后面对同一个锁的lock操作”；</p></li></ol></blockquote><h4 id="原理实现">原理实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javap -v -p XXX.class    # 执行编译，查看字节码</span><br></pre></td></tr></table></figure><p>如果synchronized修饰的是方法，会生成一个  <mark>ACC_SYNCHRONIZED</mark>  指令，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    s++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/imgs/image-20210621192740860.png" alt="image-20210621192740860" style="zoom: 50%;" /><p>如果synchronized修饰的是代码块，会生成一个  <mark>monitorenter</mark>  和  <mark>monitorexit</mark> 指令，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">        s++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码正常结束或抛出异常都会执行  monitorexit  退出监控锁。</p><img src="/imgs/image-20210621192947651.png" alt="image-20210621192947651" style="zoom: 67%;" /><p>monitor对象主要由以下几个字段来组成。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>count</strong>  记录个数</p></li><li class="lvl-2"><p><strong>wanitset</strong>   处于wait状态，会被加入到 waitset</p></li><li class="lvl-2"><p><strong>entryList</strong>    处于等待锁状态的线程，会被加入到entryList中。</p></li></ul><p>当monitor对象被线程持有时，count会加1，当线程释放monitor对象时，count会减1，用count表示monitor对象是否被持有。</p><p>而且synchronized有可重入性，当一个线程重复持有锁时，count会一直加，释放时候，会一直减，直到为0时，才算这块执行完。</p></blockquote><h4 id="重量级优化">重量级优化</h4><p>通常我们称Sychronized锁是一种重量级锁，是因为在互斥状态下，没有得到锁的线程会被挂起阻塞，而挂起线程和恢复线程的操作都需要在<strong>用户态</strong>和 <strong>内核态</strong>之间相互转换，而状态转换很耗费处理器时间，故称为重量级。</p><p>为了消除<strong>用户态</strong>和 <strong>内核态</strong>的开销转换，引入自旋，所谓的自旋，就是让没有获得锁的线程自己运行一段时间的自循环，这就是自旋锁。</p><blockquote><p>自旋锁在JDK6以后已经默认开启，可以通过-XX:+UseSpinning参数来开启。不挂起线程的代价就是该线程会一直占用处理器。如果锁被占用的时间很短，自旋等待的效果就会很好，反之，自旋会消耗大量处理器资源。因此，自旋的等待时间必须有一定的限度，如果超过限度还没有获得锁，就要挂起线程，这个限度默认是10次，可以使用-XX：PreBlockSpin改变。</p><p>在JDK6以后又引入了自适应自旋锁，也就说自旋的时间限度不是一个固定值了，而是由上一次同一个锁的自旋时间及锁的拥有者状态来决定。虚拟机认为，如果同一个锁对象自旋刚刚成功获得锁，那么下一次很可能获得锁，所以允许这次自旋锁自旋很长时间、而如果某个锁很少获得锁，那么以后在获取锁的过程中可能忽略到自旋过程。</p></blockquote><h3 id="Volatile">Volatile</h3><p>Java虚拟机提供的轻量级的同步机制，被volatile修饰的共享变量，就具有了以下两点特性：</p><blockquote><p><strong>1 . 保证了不同线程对该变量操作的内存可见性</strong>（当一个线程修改了被volatile修饰的值，新值总数可以被其他线程立即得知。）;</p><p><strong>2 . 禁止指令重排序</strong>（避免多线程环境下程序出现乱序执行的现象）。</p></blockquote><p><strong>并不保证安全性，不具有原子性</strong>（如果第二个线程在第一个线程读取旧值和写回新值期间读取i的域值）</p><blockquote><p>在线程执行时，首先会从主存中read变量值，再load到工作内存中的副本中，然后再传给处理器执行，执行完毕后再给工作内存中的副本赋值，随后工作内存再把值传回给主存，主存中的值才更新。</p><p>两个线程操作（修改），可能出现缓存不一致的问题。（只有一个线程修改操作，其他线程只读取，不存在原子性问题，但是i++操作就不行了）</p></blockquote><h4 id="使用场景">使用场景</h4><blockquote><p>只能在有限的情形下使用 volatile 变量替代锁。要使 volatile 变量提供理想的线程安全，必须同时满足下面两个条件：</p><ul class="lvl-1"><li class="lvl-2">对变量的写操作不依赖于当前值。</li><li class="lvl-2">该变量没有包含在具有其他变量的不变式中。</li></ul></blockquote><h4 id="指令重排">指令重排</h4><p><strong>什么是指令重排序？</strong><br><strong>在虚拟机层面</strong></p><blockquote><p>为了尽可能减少*<u>内存操作速度远慢于CPU运行速度</u>*所带来的CPU空置的影响，虚拟机会按照自己的一些规则，将程序编写顺序打乱——即写在后面的代码在时间顺序上可能会先执行，而写在前面的代码会后执行——以尽可能充分地利用CPU。</p><p>拿上面的例子来说：假如不是a=1的操作，而是<code>a=new byte[1024*1024]</code>(分配1M空间)`，那么它会运行地很慢，此时CPU是等待其执行结束呢，还是先执行下面那句flag=true呢？显然，先执行flag=true可以提前使用CPU，加快整体效率，当然这样的前提是不会产生错误。</p><p>虽然这里有两种情况：后面的代码先于前面的代码开始执行；前面的代码先开始执行，但当效率较慢的时候，后面的代码开始执行并先于前面的代码执行结束。不管谁先开始，总之后面的代码在一些情况下存在先结束的可能。</p></blockquote><p><strong>在硬件层面</strong></p><blockquote><p>CPU会将接收到的一批指令按照其规则重排序，同样是基于CPU速度比缓存速度快的原因，和上一点的目的类似，只是硬件处理的话，每次只能在接收到的有限指令范围内重排序，而虚拟机可以在更大层面、更多指令范围内重排序。硬件的重排序机制参见《从JVM并发看CPU内存指令重排序(Memory Reordering)》</p></blockquote><h4 id="原理实现-2">原理实现</h4><p><strong>volatile如何让变量立即可见</strong></p><blockquote><p>当写一个volatile变量时，JMM会把该线程对应的工作内存中的共享变量值刷新到主内存中，当读取一个volatile变量时，JMM会把该线程对应的工作内存置为无效，那么该线程将只能从主内存中重新读取共享变量。volatile变量正是通过这种写-读方式实现对其他线程可见（但其内存语义实现则是通过内存屏障）</p></blockquote><p><strong>volatile禁止指令重排优化</strong></p><p><mark>内存屏障</mark>，又称内存栅栏，是一个CPU指令，它的作用有两个，一是保证特定操作的执行顺序，二是保证某些变量的内存可见性。</p><blockquote><p>由于编译器和处理器都能执行指令重排优化</p><p>如果在指令间插入一条Memory Barrier则会告诉编译器和CPU，不管什么指令都不能和这条Memory Barrier指令重排序，也就是说通过插入内存屏障禁止在内存屏障前后的指令执行重排序优化。</p><p>Memory Barrier的另外一个作用是强制刷出各种CPU的缓存数据，因此任何CPU上的线程都能读取到这些数据的最新版本</p></blockquote><p>典型的禁止重排优化的例子DCL</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoubleCheckLock</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DoubleCheckLock instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DoubleCheckLock <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (instance==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (DoubleCheckLock.class)&#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="comment">//多线程环境下可能会出现问题的地方</span></span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">DoubleCheckLock</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字节码会生成一个 <mark>ACC_VOLATILE</mark></p><img src="/imgs/image-20210622094704147.png" alt="image-20210622094704147" style="zoom:67%;" /><h3 id="Lock">Lock</h3><p>API层面的可重入锁，包含<strong>ReentrantLock、ReadLock、ReadLockView、WriteLock、WriteLockView</strong></p><img src="/imgs/aHR0cDo2ZtdD1qcGVn" alt="img" style="zoom: 80%;" /><p>如果n个线程持有的为同一把锁，则需要竞争且阻塞，否则有各自的锁时，不会阻塞。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同步线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SyncThread</span> &#123;</span><br><span class="line">    <span class="comment">// 所有对象在同一SyncThread对象中将持有该同一把锁，发生阻塞</span></span><br><span class="line">   <span class="comment">// private final Lock lock = new ReentrantLock();</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 以下实例化两个对象，两个对象的两把锁。互不影响</span></span><br><span class="line">        <span class="type">MyThreadDto</span> <span class="variable">lock1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThreadDto</span>();</span><br><span class="line">        <span class="type">MyThreadDto</span> <span class="variable">lock2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThreadDto</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">MySyncThread</span> <span class="variable">syncThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MySyncThread</span>(lock1);</span><br><span class="line">        <span class="type">MySyncThread</span> <span class="variable">syncThread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MySyncThread</span>(lock2);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(syncThread, <span class="string">&quot;SyncThread-1&quot;</span>);</span><br><span class="line">        thread1.start();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(syncThread2, <span class="string">&quot;SyncThread-2&quot;</span>);</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySyncThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> count;</span><br><span class="line">    <span class="keyword">private</span> MyThreadDto packageAccessLock;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MySyncThread</span><span class="params">(MyThreadDto accessLock)</span> &#123;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        packageAccessLock = accessLock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                packageAccessLock.getReentrantLock().lockInterruptibly();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + (count++));</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                  packageAccessLock.getReentrantLock().unlock();</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThreadDto</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">// 每个MyThreadDto对象都有各自的一把锁，当为同一个MyThreadDto对象时，将会被阻塞。不同对象不会竞争</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Lock</span> <span class="variable">reentrantLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现原理（AQS）">实现原理（<a href="https://www.cnblogs.com/weiqihome/p/9665718.html">AQS</a>）</h4><p>用一个CAS操作，判断state是否是0（表示当前锁未被占用），如果是0则把它+1，并且设置当前线程为该锁的独占线程，表示获取锁成功。当多个线程同时尝试占用同一个锁时，CAS操作只能保证一个线程操作成功，剩下的只能乖乖的去排队 。</p><p>“非公平”即体现在这里，如果占用锁的线程刚释放锁，state置为0，而排队等待锁的线程还未唤醒时，新来的线程就直接抢占了该锁，那么就“插队”了。</p><p><strong>源码分析</strong></p><p>公平锁：若等待队列非空，则直接入队；否则尝试获取锁</p><p>非公平锁：先尝试获取锁，获取失败后，放入队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置 volatile int state = 1 成功表示加锁，0时释放锁，大于1表示重复加锁</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))    <span class="comment">// 通过CAS尝试变量从0设置为1</span></span><br><span class="line">setExclusiveOwnerThread(Thread.currentThread());    <span class="comment">// 设置变量为当前线程</span></span><br><span class="line"><span class="keyword">else</span> <span class="comment">// 加锁失败，放入等待队列（列表尾部）</span></span><br><span class="line">acquire(<span class="number">1</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以独占模式获取，忽略中断。 通过至少调用一次tryAcquire ，成功返回。 否则线程会排队，可能会反复阻塞和解除阻塞，调用tryAcquire直到成功。 此方法可用于实现方法Lock.lock 。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">acquire</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp; <span class="comment">// 先尝试加锁</span></span><br><span class="line"><span class="comment">// 以独占不间断模式获取已在队列中的线程。 由条件等待方法以及获取使用。</span></span><br><span class="line">acquireQueued(addWaiter(Node.EXCLUSIVE), arg))    </span><br><span class="line">selfInterrupt(); <span class="comment">// 中断当前线程</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加锁失败后放入排队队列，至尾部，并中断当前加锁线程</span></span><br><span class="line"><span class="keyword">private</span> Node <span class="title function_">addWaiter</span><span class="params">(Node mode)</span> &#123;</span><br><span class="line"><span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(Thread.currentThread(), mode);</span><br><span class="line"><span class="type">Node</span> <span class="variable">pred</span> <span class="operator">=</span> tail;</span><br><span class="line"><span class="keyword">if</span> (pred != <span class="literal">null</span>) &#123;</span><br><span class="line">node.prev = pred;</span><br><span class="line"><span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class="line">   pred.next = node;</span><br><span class="line">   <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">enq(node); <span class="comment">// 加入队尾</span></span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>加锁</strong></p><blockquote><p>第一步。尝试去获取锁。如果尝试获取锁成功，方法直接返回。非公平锁tryAcquire的流程是：检查state字段，若为0，表示锁未被占用，那么尝试占用，若不为0，检查当前锁是否被自己占用，若被自己占用，则更新state字段，表示重入锁的次数。如果以上两点都没有成功，则获取锁失败，返回false。</p><p>第二步，入队。其他线程占用锁，执行tryAcquire失败，并且入等待队列线程先入等待队列，然后开始自旋，尝试获取锁，获取成功就返回，失败则在队列里找一个安全点把自己挂起直到超时时间过期。这里为什么还需要循环呢？因为当前线程节点的前驱状态可能不是SIGNAL，那么在当前这一轮循环中线程不会被挂起，然后更新超时时间，开始新一轮的尝试。</p><p>第三步，挂起。已经入队的线程尝试获取锁，若失败则会被挂起。线程入队后能够挂起的前提是，它的前驱节点的状态为SIGNAL。若符合则返回true，将自己挂起。如果不符合，再看前驱节点是否&gt;0(CANCELLED)，若是向前遍历直到找到第一个符合要求的前驱，若不是则将前驱节点的状态设置为SIGNAL。</p></blockquote><p><strong>解锁</strong></p><blockquote><p>先尝试释放锁，若释放成功，那么查看头结点的状态是否为SIGNAL，如果是则唤醒头结点的下个节点关联的线程，如果释放失败那么返回false表示解锁失败</p><p>当前释放锁的线程若不持有锁，则抛出异常。若持有锁，计算释放后的state值是否为0，若为0表示锁已经被成功释放，并且则清空独占线程，最后更新state值，返回free。</p></blockquote><p>ReentrantLock#lock的原理流程图大致如下</p><p><img src="/imgs/aHR0cDovL21tYmd3hfZm10PWpwZWc" alt="img"></p><h3 id="Atomic（CAS）">Atomic（CAS）</h3><p>属于乐观锁，自旋等待直到成功，可设置自旋次数。</p><p>并发越高，失败的次数会越多，CAS如果长时间不成功，会极大的增加CPU的开销。因此CAS不适合竞争十分频繁的场景。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自旋</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndAddInt</span><span class="params">(Object var1, <span class="type">long</span> var2, <span class="type">int</span> var4)</span> &#123;</span><br><span class="line">    <span class="type">int</span> var5;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        var5 = <span class="built_in">this</span>.getIntVolatile(var1, var2);</span><br><span class="line">    &#125; <span class="keyword">while</span>(!<span class="built_in">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> var5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CAS由于是在硬件层面保证的原子性，不会锁住当前线程，它的效率是很高的。</p><h4 id="ABA-问题">ABA 问题</h4><p>避免ABA问题的版本号机制，如AtomicStampedReference。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">overTimeWaitMin</span><span class="params">(AbstractBaseGssp baseGssp, BaseDictDto dto, Map&lt;String, AtomicStampedReference&lt;AbstractBaseGssp&gt;&gt; mapReference)</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">    <span class="keyword">if</span> (dto == <span class="literal">null</span> || baseGssp == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> dto.getCode() + BaseConstants.SEPARATOR_06 + baseGssp.getGpsSn();</span><br><span class="line">    <span class="type">int</span> <span class="variable">stayMin</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mapReference.containsKey(key)) &#123;</span><br><span class="line">        <span class="comment">// 获得旧对象</span></span><br><span class="line">        AtomicStampedReference&lt;AbstractBaseGssp&gt; gsspReference = mapReference.get(key);</span><br><span class="line">        <span class="type">AbstractBaseGssp</span> <span class="variable">lastGssp</span> <span class="operator">=</span> gsspReference.getReference();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 有移动</span></span><br><span class="line">        <span class="keyword">if</span> (GsspUtil.hasMoved(lastGssp.getLongitude(), lastGssp.getLatitude(), baseGssp.getLongitude(), baseGssp.getLatitude())) &#123;</span><br><span class="line">            <span class="comment">// 比较stamp版本 并重新设值</span></span><br><span class="line">            gsspReference.compareAndSet(lastGssp, baseGssp, gsspReference.getStamp(), gsspReference.getStamp() + <span class="number">1</span>);</span><br><span class="line">            mapReference.put(key, gsspReference);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            stayMin = GsspUtil.timeIntervalMin(lastGssp.getGpsTime(), baseGssp.getGpsTime());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">        mapReference.put(key, <span class="keyword">new</span> <span class="title class_">AtomicStampedReference</span>&lt;&gt;(baseGssp, <span class="number">0</span>)); <span class="comment">// 初始值及版本</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> stayMin;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Java 提供了多种类型的锁，各自有何特性，如何合理使用这些锁？JVM 层面理解锁的原理和优化过程。</summary>
    
    
    
    <category term="Java" scheme="https://pengline.github.io/categories/Java/"/>
    
    <category term="高并发" scheme="https://pengline.github.io/categories/Java/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
    
    <category term="Java 锁" scheme="https://pengline.github.io/tags/Java-%E9%94%81/"/>
    
    <category term="锁升级" scheme="https://pengline.github.io/tags/%E9%94%81%E5%8D%87%E7%BA%A7/"/>
    
    <category term="锁消除" scheme="https://pengline.github.io/tags/%E9%94%81%E6%B6%88%E9%99%A4/"/>
    
    <category term="Synchronized" scheme="https://pengline.github.io/tags/Synchronized/"/>
    
    <category term="Atomic" scheme="https://pengline.github.io/tags/Atomic/"/>
    
    <category term="Lock" scheme="https://pengline.github.io/tags/Lock/"/>
    
    <category term="死锁检查" scheme="https://pengline.github.io/tags/%E6%AD%BB%E9%94%81%E6%A3%80%E6%9F%A5/"/>
    
    <category term="偏向锁" scheme="https://pengline.github.io/tags/%E5%81%8F%E5%90%91%E9%94%81/"/>
    
    <category term="轻量级锁" scheme="https://pengline.github.io/tags/%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81/"/>
    
    <category term="乐观锁" scheme="https://pengline.github.io/tags/%E4%B9%90%E8%A7%82%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>表达式的概念和求值实现</title>
    <link href="https://pengline.github.io/2025/09/16/ba484d8d518d4691bc0c1737da33d517/"/>
    <id>https://pengline.github.io/2025/09/16/ba484d8d518d4691bc0c1737da33d517/</id>
    <published>2025-09-15T16:00:00.000Z</published>
    <updated>2025-09-18T07:17:45.615Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>中缀表达式是人熟悉的表达式。例如 <code>3 + 5 * 6</code></p></li><li class="lvl-2"><p>前缀表达式，也称波兰表达式，运算符写在操作数前面。例如 <code>(3 + 4) * 5 - 6</code> 对应的前缀表达式为：<code>- * + 3 4 5 6</code></p></li><li class="lvl-2"><p>后缀表达式，也称逆波兰表达式，运算符写在操作数后面。例如 <code>(3 + 4) * 5 - 6</code> 对应的后缀表达式为：<code>3 4 + 5 * 6 -</code></p></li></ul><h2 id="前缀表达式">前缀表达式</h2><p>求值规则：<strong>自右向左</strong> 扫描表达式，遇到数字时压栈，遇到运算符则弹出栈顶两个数做对应运算，并将结果压入栈中。</p><ul class="lvl-0"><li class="lvl-2"><p>中缀表达式：<code>( 3 + 4 ) * 5 - 6</code></p></li><li class="lvl-2"><p>前缀表达式：<code>- * + 3 4 5 6</code></p></li></ul><p>执行计算过程：</p><blockquote><p>1. 将表达式 <code>自右向左</code> 扫描，将 <code>6 5 4 3</code> 依次压入栈中<br>  2. 遇到 <code>+</code> 时，将 <code>3 、4</code> 弹出，计算 <code>3 + 4</code>，然后将结果 <code>7</code> 压入栈中<br>  3. 遇到 <code>*</code> 时，将 <code>7、5</code> 弹出，计算 <code>7 * 5</code>，然后将结果 <code>35</code> 压入栈中<br>  4. 遇到 <code>-</code> 时，将 <code>35、6</code> 弹出，计算 <code>35 - 6</code>，然后将结果 <code>29</code> 压入栈中</p></blockquote><h2 id="后缀表达式">后缀表达式</h2><p>求值规则：<strong>从左至右</strong> 依次扫描表达式，遇到数字压入栈中，遇到运算符则弹出栈顶两个数做对应运算，并将结果压入栈中。</p><ul class="lvl-0"><li class="lvl-2"><p>中缀表达式：<code>( 3 + 4 ) * 5 - 6</code></p></li><li class="lvl-2"><p>后缀表达式：<code>3 4 + 5 * 6 -</code></p></li></ul><p>执行计算过程：</p><blockquote><p>1. 将表达式 <code>从左至右</code> 扫描，遇到括号，优先级最大，将<code>3 4</code>压入栈中<br>  2. 再括号收尾后，遇到 <code>+</code> 时，将 <code>4、3</code> 弹出，计算 <code>3 + 4</code>，然后将结果 <code>7</code> 压入栈中<br>  3. 将 <code>5</code> 压入栈中，左边为栈<br>  4. 遇到 <code>*</code> 时，将 <code>5、7</code> 弹出，计算 <code>7 * 5</code>，然后将结果 <code>35</code> 压入栈中<br>  5. 将 <code>6</code> 压入栈中<br>  6. 遇到 <code>-</code> 时，将 <code>35、6</code> 弹出，计算 <code>35 - 6</code>，然后将结果 <code>29</code> 压入栈中</p></blockquote><h2 id="中缀表达式">中缀表达式</h2><p>需要把 <strong>中缀表达式转后缀表达式</strong>，再做计算</p><p><strong>转化规则</strong>：把每个运算符都移到它的两个操作数的后面，然后删除括号即可。</p><blockquote><p>下面表以 <code>2 * ( ( 5 - 3 ) * 4 ) - 16 / 2</code> 作为样例演示转换的步骤。</p><p>创建两个栈 a 和 b，a 用于存储转换过程，b 用于临时存储操作符与小括号。</p></blockquote><table><thead><tr><th>运算步骤</th><th>扫描到字符</th><th>a 栈（栈低 -&gt; 栈顶）</th><th>b 栈（栈底 -&gt; 栈顶）</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>2</td><td>^</td><td>数字直接压入 a</td></tr><tr><td>2</td><td>*</td><td>2</td><td>*</td><td>b 中无符号，直接将 <code>*</code> 压入 b</td></tr><tr><td>3</td><td>(</td><td>2</td><td>*、(</td><td>括号优先级最高，左括号直接压入 b</td></tr><tr><td>4</td><td>(</td><td>2</td><td>*、( 、(</td><td>括号优先级最高，左括号直接压入 b</td></tr><tr><td>5</td><td>5</td><td>2、5</td><td>*、( 、(</td><td>数字直接压入 a</td></tr><tr><td>6</td><td>-</td><td>2、5</td><td>*、( 、( 、-</td><td><code>-</code> 优先级低于 <code>(</code>，由于 <code>(</code> 不是运算符，<code>-</code> 压入 b</td></tr><tr><td>7</td><td>3</td><td>2、5、3</td><td>*、( 、( 、-</td><td>数字直接压入 a</td></tr><tr><td>8</td><td>)</td><td>2、5、3、-</td><td>*、(</td><td>遇到右括号，符号依次弹出 b，并依次压入 a，直至遇到左括号，且删除左括号</td></tr><tr><td>9</td><td>*</td><td>2、5、3、-</td><td><em>、( 、</em></td><td><code>*</code> 比左括号优先级低，由于 <code>(</code> 不是运算符，<code>*</code> 压入 b</td></tr><tr><td>10</td><td>4</td><td>2、5、3、-、4</td><td><em>、( 、</em></td><td>数字直接压入 a</td></tr><tr><td>11</td><td>)</td><td>2、5、3、-、4、*</td><td>*</td><td>遇到右括号<code>)</code>，符号依次弹出 b，并依次压入 a，直至遇到左括号 <code>(</code>，且删除左括号 <code>(</code></td></tr><tr><td>12</td><td>-</td><td>2、5、3、-、4、<em>、</em></td><td>-</td><td><code>-</code> 优先级低于 <code>*</code>，<code>*</code> 出栈并压入 a，此时 <code>(</code> 变为栈顶元素，<code>-</code> 优先级低于 <code>(</code>，将 <code>-</code> 压入 b，</td></tr><tr><td>13</td><td>16</td><td>2、5、3、-、4、<em>、</em>、16</td><td>-</td><td>数字直接压入 a</td></tr><tr><td>14</td><td>/</td><td>2、5、3、-、4、<em>、</em>、16</td><td>-、/</td><td><code>/</code> 优先级高于 <code>-</code>，<code>/</code> 压入 b</td></tr><tr><td>15</td><td>2</td><td>2、5、3、-、4、<em>、</em>、16、2</td><td>-、/</td><td>数字直接压入 a</td></tr><tr><td>16</td><td>^</td><td>2、5、3、-、4、<em>、</em>、16、2、/</td><td>-</td><td>遍历完成，将 b 中的元素依次压入 a</td></tr><tr><td>17</td><td>^</td><td>2、5、3、-、4、<em>、</em>、16、2、/、-</td><td>^</td><td>遍历完成，将 b 中的元素依次压入 a</td></tr></tbody></table><blockquote><ol><li class="lvl-3"><p>每次扫描到的 数字 直接压入 a 栈</p></li><li class="lvl-3"><p>每次扫描到的符号 x 需要与 b 栈顶部的符号 y 比较优先级，如果 x &gt; y，则 x 压入 b 栈，如果 x &lt;= y，将 b 栈顶元素弹出后压入 a，继续比较 x 与 下一个 y。</p></li><li class="lvl-3"><p>最终获取的表达式为：2 5 3 - 4 * * 16 2 / -，需要将 a 中的元素弹出后再逆序。</p></li></ol></blockquote><h2 id="中缀表达式求值（整数版）">中缀表达式求值（整数版）</h2><p>通过栈的特性，转换为后缀表达式后求值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;HJ54 表达式求值</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;  给定一个字符串描述的算术表达式，计算出结果值。如：400+5 * 2 / (12-7)</span></span><br><span class="line"><span class="comment"> *（不支持小数位计算）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> He.hp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> haeng2030@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2024/12/12 15:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExpressionEvaluation</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> List&lt;Character&gt; symbol = Arrays.asList(<span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;)&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; list = parse(<span class="string">&quot;400+5 * 4 / (12-7)&quot;</span>);</span><br><span class="line">        System.out.println(list.toString());<span class="comment">// [400, +, 5, *, 4, /, (, 12, -, 7, )]</span></span><br><span class="line">        List&lt;String&gt; list2 = infixConvertToPostfix(list);</span><br><span class="line">        System.out.println(list2.toString());<span class="comment">// [400, 5, 4, *, 12, 7, -, /, +]</span></span><br><span class="line">        System.out.println(compute(list2));<span class="comment">// 404</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将表达式截取转换为字符（中缀表达式字符顺序）：  400, +, 5, *, 2, /, (, 12, -, 5, )</span></span><br><span class="line"><span class="comment">     * 如果遍历到操作符号，如 + - * / ( ) 直接添加到 ls 中。</span></span><br><span class="line"><span class="comment">     * 如果遍历到数，需要判断是否为多位数。如果是单位数，直接添加到 list 中。如果是多位数，需要拼接这个多位数，然后再添加到 list 中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">parse</span><span class="params">(String expre)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">num</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">char</span> charVal;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; expre.length(); i++) &#123;</span><br><span class="line">            charVal = expre.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (isNumber(charVal)) &#123;</span><br><span class="line">                num.append(charVal);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (symbol.contains(charVal)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (num.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    list.add(num.toString());</span><br><span class="line">                &#125;</span><br><span class="line">                num = <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">                list.add(String.valueOf(charVal));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (num.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            list.add(num.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将中缀表达式转换为后缀表达式:</span></span><br><span class="line"><span class="comment">     * 1、创建两个栈 s1、s2，s1 存储临时字符，s2 存储转换过程</span></span><br><span class="line"><span class="comment">     * 2、遍历后缀表达式的 list</span></span><br><span class="line"><span class="comment">     * 遍历到数字，直接添加到 s2 中。</span></span><br><span class="line"><span class="comment">     * 遍历到符号 + - * / 时，需要与 s1 栈顶符号比较优先级。</span></span><br><span class="line"><span class="comment">     * 如果比 s1 栈顶符号优先级高，则直接压入 s1。</span></span><br><span class="line"><span class="comment">     * 反之，将 s1 栈顶元素弹出并添加到 s2 中，继续与 s1 的次顶元素比较，直至 s1 为空或ls中遍历到的元素优先级高于 s1 栈顶符号。</span></span><br><span class="line"><span class="comment">     * 遍历到 (，直接压入 s1 中。</span></span><br><span class="line"><span class="comment">     * 遍历到 )，弹出 s1 中的符号，直至遇到 (，最后将 ( 弹出，ls 继续向后遍历，这样就删除了一对括号。</span></span><br><span class="line"><span class="comment">     * 3、list 遍历完以后，将 s1 中剩余的符号依次弹出并添加到 s2 中。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">infixConvertToPostfix</span><span class="params">(List&lt;String&gt; list)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建两个栈，s1 用于存储临时符号</span></span><br><span class="line">        Stack&lt;String&gt; s1 = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// s2 由于没有 pop 操作，并且最终需要逆序输出，所以使用 ArrayList 代替之</span></span><br><span class="line">        List&lt;String&gt; s2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.matches(<span class="string">&quot;\\d+&quot;</span>)) &#123;  <span class="comment">// 正则匹配，匹配到数字，直接添加到 s2</span></span><br><span class="line">                s2.add(s);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;(&quot;</span>.equals(s)) &#123;  <span class="comment">// 遍历到 (，直接压入 s1</span></span><br><span class="line">                s1.push(s);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;)&quot;</span>.equals(s)) &#123;  <span class="comment">// 遍历到 ) ，弹出 s1 中的符号添加到 s2 中，直至遇到 (</span></span><br><span class="line">                <span class="keyword">while</span> (!<span class="string">&quot;(&quot;</span>.equals(s1.peek())) &#123;  <span class="comment">// peek() 查看栈顶元素</span></span><br><span class="line">                    s2.add(s1.pop());</span><br><span class="line">                &#125;</span><br><span class="line">                s1.pop();  <span class="comment">// 当 ( 弹出，消除小括号</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  <span class="comment">// 遍历到 + - * /</span></span><br><span class="line">                <span class="comment">// s1 不为空，且当遍历到的符号，小于等于栈顶符号优先级，需要弹栈操作</span></span><br><span class="line">                <span class="comment">// 直到当前符号优先级大于 s1 栈顶元素或 s1 弹空时，结束</span></span><br><span class="line">                <span class="keyword">while</span> (!s1.empty() &amp;&amp; (getPriority(s) &lt;= getPriority(s1.peek()))) &#123;</span><br><span class="line">                    s2.add(s1.pop());  <span class="comment">// 将 s1 栈顶符号弹出添加到 s2 中</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 比较结束后，将当前字符压入 s1 中</span></span><br><span class="line">                s1.push(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 将 s1 中剩余符号添加到 s2 中</span></span><br><span class="line">        <span class="keyword">while</span> (!s1.empty()) &#123;</span><br><span class="line">            s2.add(s1.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算后缀表达式的值:</span></span><br><span class="line"><span class="comment">     * 1、创建一个栈 num，用于存储结果。</span></span><br><span class="line"><span class="comment">     * 2、依次遍历 list 中的元素，对每次遍历到的元素做相应处理。</span></span><br><span class="line"><span class="comment">     *      遍历到数时，直接压入 num 中。</span></span><br><span class="line"><span class="comment">     *      遍历到运算符时，从 num 中弹出两个数，使用该运算符做运算，并将运算结果结果继续压入 num 中。</span></span><br><span class="line"><span class="comment">     * 3、最后 num 中只会剩下一个数，将这个数弹出返回即可。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">compute</span><span class="params">(List&lt;String&gt; list)</span> &#123;</span><br><span class="line">        Stack&lt;Integer&gt; num = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">// 接收栈顶数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">// 接收次顶数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">// 每次计算结果</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.matches(<span class="string">&quot;\\d+&quot;</span>)) &#123;    <span class="comment">// 如果是数，就压栈</span></span><br><span class="line">                num.push(Integer.parseInt(s));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                num1 = num.pop();</span><br><span class="line">                num2 = num.pop();</span><br><span class="line">                <span class="keyword">switch</span> (s) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">                        res = num2 + num1;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">                        res = num2 - num1;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">                        res = num2 * num1;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">                        res = num2 / num1;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;扫描到未知符号！&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                num.push(res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isNumber</span><span class="params">(<span class="type">char</span> c)</span> &#123;</span><br><span class="line">        <span class="comment">// ascll码中数字 0 ~ 9 对应 48 ~ 57</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">48</span> &lt;= c &amp;&amp; c &lt;= <span class="number">57</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">//    符号优先级</span></span><br><span class="line"><span class="comment">//    当前遍历到的符号是运算符(+ - * /)，且此时 s1 栈顶元素为 ( 时，应当将运算符入栈，而不是弹出 (，所以将 ( 的优先级设为最小</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getPriority</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;*&quot;</span>.equals(s) || <span class="string">&quot;/&quot;</span>.equals(s)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;+&quot;</span>.equals(s) || <span class="string">&quot;-&quot;</span>.equals(s)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;(&quot;</span>.equals(s)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;扫描到未知符号！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">三种表达式的概念特性，以及如何计算出人类熟知表达式的值（中缀表达式）。</summary>
    
    
    
    <category term="算法" scheme="https://pengline.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="数学计算" scheme="https://pengline.github.io/categories/%E7%AE%97%E6%B3%95/%E6%95%B0%E5%AD%A6%E8%AE%A1%E7%AE%97/"/>
    
    
    <category term="表达式求值" scheme="https://pengline.github.io/tags/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/"/>
    
    <category term="HJ54" scheme="https://pengline.github.io/tags/HJ54/"/>
    
    <category term="中缀表达式" scheme="https://pengline.github.io/tags/%E4%B8%AD%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
    <category term="前缀表达式" scheme="https://pengline.github.io/tags/%E5%89%8D%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
    <category term="后缀表达式" scheme="https://pengline.github.io/tags/%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>VMware 如何扩展 Centos7 的磁盘容量</title>
    <link href="https://pengline.github.io/2025/09/15/35f4ef2aabae45d4b9f215b1a36ac023/"/>
    <id>https://pengline.github.io/2025/09/15/35f4ef2aabae45d4b9f215b1a36ac023/</id>
    <published>2025-09-14T16:00:00.000Z</published>
    <updated>2025-09-16T00:50:41.043Z</updated>
    
    <content type="html"><![CDATA[<p>场景：使用 VMware 搭建的 Centos 7.6 系统，使用过程中发现磁盘容量不够，通过 VMware 的图形界面进行扩容成功后，但是执行系统的 <code>df -h</code> 指令后并未显示已扩容的空间。</p><blockquote><p>当前磁盘组为  centos_master，需要新增一个 sd3</p></blockquote><h2 id="新增分区">新增分区</h2><p>新添加的容量需要通过新增的分区分配到系统中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看待扩展的磁盘总空间：</span></span><br><span class="line">lsblk</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看磁盘的详细信息：</span> </span><br><span class="line">fdisk -l</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">对新增加的硬盘进行分区：执行：m-&gt;n-&gt;p-&gt;输入分区号(一般都是最新加入的盘，3或者4)-&gt;回车-&gt;回车-&gt;w</span></span><br><span class="line">fdisk /dev/sda</span><br><span class="line"></span><br><span class="line">fdisk -l</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">发现/dev/sda2的Id是83，需要改成8e，保持和/dev/sda2是一样的。</span></span><br></pre></td></tr></table></figure><img src="/imgs/Centos7%20%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9/image-20250718225436566.png" alt="image-20250718225436566" style="zoom:67%;" /><h2 id="修改分区">修改分区</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将system类型改成Linux LVM类型，执行命令：</span></span><br><span class="line">fdisk /dev/sda</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数如下图所示</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改后查看：</span></span><br><span class="line">fdisk -l</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启系统 ：</span></span><br><span class="line">shutdown -r now</span><br></pre></td></tr></table></figure><img src="/imgs/Centos7%20%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9/image-20250718225713990.png" alt="image-20250718225713990" style="zoom:67%;" /><h2 id="磁盘格式化">磁盘格式化</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">对新增加的硬盘格式化：如下图</span></span><br><span class="line">mkfs.ext3 /dev/sda3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加新LVM到已有的LVM组，实现扩容：</span></span><br><span class="line">pvcreate /dev/sda3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看是否创建成功：</span></span><br><span class="line">pvdisplay</span><br></pre></td></tr></table></figure><img src="/imgs/Centos7%20%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9/image-20250718230053864.png" alt="image-20250718230053864" style="zoom:67%;" /><img src="/imgs/Centos7%20%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9/image-20250718230437266.png" alt="image-20250718230437266" style="zoom:67%;" /><h2 id="扩展磁盘">扩展磁盘</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">扩展 centos_master</span></span><br><span class="line">vgextend centos_master /dev/sda3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看是否修改成功：</span></span><br><span class="line">pvdisplay</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行扩容：每个 PE 占了 4.00MiB，所以不足30g</span></span><br><span class="line">lvextend -L +29.99G /dev/mapper/centos_master-root</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看是否扩容成功：</span></span><br><span class="line">lvs</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看磁盘空间采用的文件系统：</span> </span><br><span class="line">df -T</span><br></pre></td></tr></table></figure><img src="/imgs/Centos7%20%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9/image-20250718231108241.png" alt="image-20250718231108241" style="zoom:67%;" /><h2 id="刷新磁盘">刷新磁盘</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行命令：</span></span><br><span class="line">xfs_growfs /dev/mapper/centos_master-root</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看结果</span></span><br><span class="line">df -T</span><br><span class="line">df -h</span><br></pre></td></tr></table></figure><img src="/imgs/Centos7%20%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9/image-20250718231500513.png" alt="image-20250718231500513" style="zoom:67%;" /><h2 id="修复-PV">修复 PV</h2><p>执行两次 pvcreate 后，会出现 unknown 的 Physical volume（之前的会变成 unknown  ），如下图：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pvdisplay 查看pv 发现有一个unknown pv</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">去除未知或已丢失的VG</span></span><br><span class="line">vgreduce --removemissing /dev/centos_master</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看</span></span><br><span class="line">pvdisplay </span><br><span class="line">pvs</span><br><span class="line">vgs</span><br></pre></td></tr></table></figure><img src="/imgs/Centos7%20%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9/image-20250718232007920.png" alt="image-20250718232007920" style="zoom:67%;" /><p>使用 <code>pvs </code> 查看有 unknown 名称的 PV</p><img src="/imgs/Centos7%20%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9/image-20250718232301393.png" alt="image-20250718232301393" style="zoom:67%;" />]]></content>
    
    
    <summary type="html">VMware 虚拟机 Centos7 系统扩展磁盘后，系统并没有显示扩容的容量（df命令），如何给系统扩容。</summary>
    
    
    
    <category term="Linux" scheme="https://pengline.github.io/categories/Linux/"/>
    
    <category term="Centos" scheme="https://pengline.github.io/categories/Linux/Centos/"/>
    
    
    <category term="VMware" scheme="https://pengline.github.io/tags/VMware/"/>
    
    <category term="Centos7" scheme="https://pengline.github.io/tags/Centos7/"/>
    
    <category term="Centos7磁盘扩容" scheme="https://pengline.github.io/tags/Centos7%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9/"/>
    
    <category term="VMware系统磁盘扩容" scheme="https://pengline.github.io/tags/VMware%E7%B3%BB%E7%BB%9F%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9/"/>
    
  </entry>
  
  <entry>
    <title>系统架构设计的实施考量和演进过程</title>
    <link href="https://pengline.github.io/2025/09/11/64e3ec6a2be5436b9bd931ad7a023235/"/>
    <id>https://pengline.github.io/2025/09/11/64e3ec6a2be5436b9bd931ad7a023235/</id>
    <published>2025-09-10T16:00:00.000Z</published>
    <updated>2025-09-18T09:02:45.670Z</updated>
    
    <content type="html"><![CDATA[<p>常用架构模式：</p><table><thead><tr><th style="text-align:left">模式</th><th style="text-align:left">适用场景</th><th style="text-align:left">技术示例</th></tr></thead><tbody><tr><td style="text-align:left">微服务</td><td style="text-align:left">复杂业务系统</td><td style="text-align:left">Spring Cloud + Docker</td></tr><tr><td style="text-align:left">事件驱动</td><td style="text-align:left">实时数据处理</td><td style="text-align:left">Kafka + Lambda</td></tr><tr><td style="text-align:left">Serverless<br />（无服务器架构，云计算模型）</td><td style="text-align:left">突发流量场景</td><td style="text-align:left">AWS Lambda<br />阿里云 函数计算</td></tr><tr><td style="text-align:left">微内核</td><td style="text-align:left">可插拔功能需求</td><td style="text-align:left">OSGi/Eclipse插件体系</td></tr></tbody></table><p>分支管理：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><code>main</code>: 生产环境</p></li><li class="lvl-2"><p><code>release/*</code>: 预发布分支</p></li><li class="lvl-2"><p><code>feature/*</code>: 功能开发分支</p></li><li class="lvl-2"><p><code>hotfix/*</code>: 热修复分支</p></li></ul></blockquote><h2 id="架构设计维度">架构设计维度</h2><p>软件架构设计与拆分，关键考虑因素和步骤：</p><h3 id="一、核心设计原则">一、核心设计原则</h3><ol><li class="lvl-3"><p><strong>单一职责原则</strong></p></li></ol><p>每个模块/服务只解决一个特定问题，避免职责混乱，从而降低系统的复杂性并提高可维护性。</p><ol start="2"><li class="lvl-3"><p>**接口分离原则 **</p><p>为不同的客户端提供专用接口，而不是使用一个通用的、庞大的接口。这样可以避免客户端依赖不需要的功能。</p></li><li class="lvl-3"><p><strong>依赖倒置原则</strong></p><p>高层模块不应该依赖于底层模块，二者都应该依赖于抽象。即，依赖于抽象，不要依赖于具体实现。通过依赖注入等技术，可以降低模块之间的耦合度。</p></li><li class="lvl-3"><p><strong>开放封闭原则</strong></p><p>对扩展开放，对修改封闭。一般不要直接修改类库源码（即使你有源代码），通过继承等方式扩展。</p></li><li class="lvl-3"><p><strong>里氏替换原则</strong></p><p>子类必须能够替换父类而不影响系统行为。确保了继承关系的正确性和一致性。</p></li><li class="lvl-3"><p><strong>迪米特法则</strong>（最少知识原则）</p><p>模块之间的交互尽量少，避免过多的依赖关系，从而降低系统的耦合度。</p></li><li class="lvl-3"><p><strong>高内聚低耦合</strong>原则</p><ul class="lvl-2"><li class="lvl-7">相关功能集中，模块间依赖最小化。如订单系统内部包含完整订单生命周期处理</li></ul></li></ol><h3 id="二、架构拆分维度">二、架构拆分维度</h3><p>合理划分系统层次，提高代码的可维护性和可测试性。推荐使用 MVC、六边形架构、CQRS、DDD（领域驱动设计）等模式。</p><ol><li class="lvl-3"><p><strong>水平拆分</strong>（分层架构）</p><ul class="lvl-2"><li class="lvl-5"><strong>表现层（Presentation Layer）</strong>：如 Web 层（Spring MVC、Thymeleaf、REST API）</li><li class="lvl-5"><strong>业务逻辑层/应用层（Service Layer）</strong>：处理业务逻辑的编排流程</li><li class="lvl-5"><strong>数据访问层/基础设施层（DAO / Repository Layer）</strong>：与数据库交互、常用工具，包含API 交互的<strong>防腐层</strong></li><li class="lvl-5"><strong>领域模型层（Domain Layer）</strong>：实体、值对象、聚合根等，核心模型、业务</li></ul></li><li class="lvl-3"><p><strong>垂直拆分</strong>（功能模块化）</p><ul class="lvl-2"><li class="lvl-5">用户中心</li><li class="lvl-5">商品服务</li><li class="lvl-5">订单服务</li><li class="lvl-5">支付服务</li><li class="lvl-5">物流服务</li><li class="lvl-5">…</li></ul></li><li class="lvl-3"><p><strong>数据拆分策略</strong></p><ul class="lvl-2"><li class="lvl-5"><p>读写分离（CQRS模式）</p></li><li class="lvl-5"><p>冷热数据分离（热数据存Redis）</p></li><li class="lvl-5"><p>分库分表（用户ID、哈希分片等）</p></li></ul></li></ol><h2 id="架构设计考量">架构设计考量</h2><p>关键设计考量：确保系统具备高可用性、可扩展性、可维护性和安全性</p><h3 id="一、非功能性需求">一、非功能性需求</h3><ul class="lvl-0"><li class="lvl-2"><p><strong>性能</strong>：CDN加速静态资源，数据库索引优化。保证系统响应时间和吞吐量满足需求。</p><ul class="lvl-2"><li class="lvl-4"><p>缓存策略（Redis、Ehcache、Caffeine）</p></li><li class="lvl-4"><p>数据库优化（索引、慢查询、读写分离）</p></li><li class="lvl-4"><p>异步处理（消息队列：Kafka、RabbitMQ）</p></li><li class="lvl-4"><p>并发编程优化（线程池、CompletableFuture、Reactive 编程）</p></li></ul></li><li class="lvl-2"><p><strong>可用性</strong>：确保系统在部分组件故障时仍能正常运行，多AZ部署，熔断降级策略（如Hystrix）</p><ul class="lvl-2"><li class="lvl-4"><p>集群部署（如 Spring Boot + Docker + Kubernetes）</p></li><li class="lvl-4"><p>故障转移（Failover）机制</p></li><li class="lvl-4"><p>服务注册与发现（如 Eureka、Nacos、Consul）</p></li><li class="lvl-4"><p>健康检查与熔断机制（如 Hystrix、Resilience4j）</p></li></ul></li><li class="lvl-2"><p><strong>扩展性</strong>：系统应能应对用户量和数据量的增长。K8s自动伸缩</p><ul class="lvl-2"><li class="lvl-4"><p>水平扩展：通过增加服务器节点（如微服务架构）</p></li><li class="lvl-4"><p>垂直扩展：提升单机性能（有限）</p></li><li class="lvl-4"><p>使用负载均衡（Nginx、HAProxy）</p></li><li class="lvl-4"><p>无状态设计（便于横向扩展）</p></li></ul></li><li class="lvl-2"><p><strong>安全性</strong>：零信任架构，保护系统免受攻击和数据泄露。</p><ul class="lvl-2"><li class="lvl-4">身份认证（OAuth2、JWT、Spring Security）</li><li class="lvl-4">授权机制（RBAC、ABAC）</li><li class="lvl-4">数据加密（HTTPS、敏感字段加密）</li><li class="lvl-4">防止常见攻击（XSS、CSRF、SQL 注入）</li><li class="lvl-4">安全审计与日志监控</li></ul></li><li class="lvl-2"><p><strong>可维护性与可读性</strong>：便于团队协作和后期维护。</p><ul class="lvl-2"><li class="lvl-4"><p>遵循设计模式（工厂、策略、观察者等）</p></li><li class="lvl-4"><p>代码规范与命名规范</p></li><li class="lvl-4"><p>模块化设计（Maven/Gradle 多模块）</p></li><li class="lvl-4"><p>文档化（Swagger API 文档、架构图、流程图）</p></li></ul></li><li class="lvl-2"><p><strong>可测试性（Testability）</strong>：确保系统易于测试。</p><ul class="lvl-2"><li class="lvl-4">单元测试（JUnit、Mockito）</li><li class="lvl-4">集成测试（TestContainers、SpringBootTest）</li><li class="lvl-4">自动化测试与 CI/CD 集成（Jenkins、GitLab CI）</li><li class="lvl-4">Mock 外部依赖（如数据库、第三方服务）</li></ul></li></ul><h3 id="二、分布式系统挑战">二、分布式系统挑战</h3><ul class="lvl-0"><li class="lvl-2"><p>事务处理：跨多个节点/服务的事务难以实现原子性（Atomicity）和隔离性（Isolation）</p><ul class="lvl-2"><li class="lvl-4"><p>本地事务（Spring @Transactional）</p></li><li class="lvl-4"><p>分布式事务（Seata、TCC、Saga 模式）</p></li><li class="lvl-4"><p>最终一致性（通过消息队列实现）</p></li><li class="lvl-4"><p>幂等性设计（防止重复操作）</p></li></ul></li><li class="lvl-2"><p>分布式ID：id唯一，且有序高效</p></li><li class="lvl-2"><p>分布式锁：并发与竞争条件，保证数据数据安全，支持高并发</p></li><li class="lvl-2"><p>一致性：CAP权衡，最终一致性实现</p></li><li class="lvl-2"><p>服务发现：Nacos/Consul/Eureka注册中心</p></li><li class="lvl-2"><p>容错与弹性设计：系统应具备自我恢复能力。</p><ul class="lvl-2"><li class="lvl-4">重试机制</li><li class="lvl-4">熔断与降级（Resilience4j）</li><li class="lvl-4">限流（Sentinel、RateLimiter）</li><li class="lvl-4">超时控制</li></ul></li><li class="lvl-2"><p><strong>脑裂问题</strong>：网络分区导致集群分裂成多个子集群，各自选举 Leader，数据冲突。</p></li></ul><h3 id="三、演进式架构">三、演进式架构</h3><ul class="lvl-0"><li class="lvl-2"><p>防腐层（Anti-Corruption Layer）隔离遗留系统</p></li><li class="lvl-2"><p>特性开关（Feature Toggle）实现渐进式发布</p></li><li class="lvl-2"><p>可观测性：指标（Prometheus）+日志（ELK）+链路追踪（Jaeger）</p></li><li class="lvl-2"><p>数据分片与负载均衡：数据如何在多个节点间合理分布？（一致性哈希、范围分片等）</p></li><li class="lvl-2"><p>配置与部署复杂性：多节点配置管理困难，需要DevOps、CI/CD等</p></li></ul><h2 id="架构实施流程">架构实施流程</h2><p>架构实施成功关键要素：</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><strong>业务驱动</strong></td><td>架构服务于业务目标，不是技术炫技</td></tr><tr><td><strong>渐进式演进</strong></td><td>不要“大爆炸式重构”，采用绞杀者模式、抽象分支等渐进策略</td></tr><tr><td><strong>自动化先行</strong></td><td>CI/CD、自动化测试、自动化部署是架构落地的基石</td></tr><tr><td><strong>可观测性是生命线</strong></td><td>没有监控的架构 = 盲人摸象</td></tr><tr><td><strong>团队能力匹配</strong></td><td>架构再先进，团队不会用也是灾难 → 需培训、结对、文档、Code Review</td></tr><tr><td><strong>架构治理常态化</strong></td><td>定期评审、技术债管理、防止架构腐化</td></tr></tbody></table><p>以下为可落地、分阶段、有方法论支撑的架构实施流程，从核心任务到成果物输出。</p><h3 id="阶段一：业务需求与目标对齐（What）">阶段一：业务需求与目标对齐（What）</h3><ol><li class="lvl-3"><p>明确业务目标（如支撑日活百万、大促零故障、全球化部署）</p></li><li class="lvl-3"><p>识别核心场景（如秒杀、推荐、支付、履约）</p></li><li class="lvl-3"><p>定义 SLA（可用性 99.99%？延迟 &lt; 200ms？）</p></li><li class="lvl-3"><p>确定约束条件（预算、团队能力、合规、上线时间）</p></li></ol><blockquote><p><strong>输出成果物</strong>：</p><ul class="lvl-1"><li class="lvl-2">《业务架构说明书》</li><li class="lvl-2">《非功能性需求清单》（性能、安全、扩展性、容灾等）</li><li class="lvl-2">《成功度量指标》（如订单成功率、P99 延迟、MTTR）</li></ul></blockquote><h3 id="阶段二：现状评估与差距分析（Where）">阶段二：现状评估与差距分析（Where）</h3><p>工具推荐：使用 C4 模型（Context, Container, Component, Code）画架构图。</p><ol><li class="lvl-3"><p>梳理当前系统架构（画出拓扑图、依赖关系）</p></li><li class="lvl-3"><p>识别瓶颈（如数据库单点、无缓存、无监控）</p></li><li class="lvl-3"><p>评估团队能力（是否有 K8s/微服务经验？）</p></li><li class="lvl-3"><p>评估基础设施（是否上云？是否有 CI/CD？）</p></li></ol><blockquote><p><strong>输出成果物</strong>：</p><ul class="lvl-1"><li class="lvl-2">《当前架构评估报告》</li><li class="lvl-2">《技术债清单》</li><li class="lvl-2">《演进路线图（初稿）》</li></ul></blockquote><h3 id="阶段三：架构设计与选型（How）">阶段三：架构设计与选型（How）</h3><p>技术选型要考虑“社区活跃度、团队熟悉度、云厂商支持度、License 成本”。</p><ol><li class="lvl-3"><p>设计目标架构（逻辑架构、部署架构、数据架构）</p></li><li class="lvl-3"><p>技术选型（语言、框架、中间件、数据库、云服务）</p></li><li class="lvl-3"><p>关键方案设计：</p><ul class="lvl-2"><li class="lvl-5">服务拆分策略（按业务域？按变更频率？）</li><li class="lvl-5">数据一致性方案（Saga？TCC？本地消息表？）</li><li class="lvl-5">高可用方案（多活？异地容灾？）</li><li class="lvl-5">安全方案（mTLS？RBAC？WAF？）</li></ul></li><li class="lvl-3"><p>制定演进路径（是“绞杀者模式”还是“并行双跑”？）</p></li></ol><blockquote><p><strong>输出成果物</strong>：</p><ul class="lvl-1"><li class="lvl-2">《目标架构设计文档》</li><li class="lvl-2">《技术选型报告》</li><li class="lvl-2">《关键方案设计说明书》（如《分布式事务方案》《缓存穿透解决方案》）</li><li class="lvl-2">《架构决策记录（ADR）》</li></ul></blockquote><h3 id="阶段四：原型验证与技术预研">阶段四：原型验证与技术预研</h3><ol><li class="lvl-3"><p>对关键技术点做 PoC（如：用 Seata 实现 TCC 事务；用 Istio 实现金丝雀发布）</p></li><li class="lvl-3"><p>验证性能（压测核心接口，如“下单”）</p></li><li class="lvl-3"><p>验证可行性（能否在团队内推广？是否有学习成本？）</p></li><li class="lvl-3"><p>验证成本（云资源费用、License 费用、人力投入）</p></li></ol><blockquote><p><strong>输出成果物</strong>：</p><ul class="lvl-1"><li class="lvl-2">《PoC 验证报告》</li><li class="lvl-2">《性能压测报告》</li><li class="lvl-2">《风险评估与应对方案》</li></ul></blockquote><h3 id="阶段五：分阶段实施与灰度上线">阶段五：分阶段实施与灰度上线</h3><ol><li class="lvl-3"><p>制定实施里程碑（如：Q3 完成用户中心重构，Q4 上线订单新架构）</p></li><li class="lvl-3"><p>采用“绞杀者模式”或“抽象分支”逐步替换老系统</p></li><li class="lvl-3"><p>建立自动化流水线（CI/CD）</p></li><li class="lvl-3"><p>灰度发布策略（按用户 ID、地域、设备灰度）</p></li><li class="lvl-3"><p>数据迁移与双写方案（确保平滑过渡）</p></li></ol><blockquote><p><strong>输出成果物</strong>：</p><ul class="lvl-1"><li class="lvl-2">《实施路线图 &amp; 甘特图》</li><li class="lvl-2">《发布计划 &amp; 回滚方案》</li><li class="lvl-2">《数据迁移方案》</li><li class="lvl-2">《灰度策略文档》</li></ul></blockquote><p>推荐工具：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>发布：Argo Rollouts / Flagger / Spinnaker</p></li><li class="lvl-2"><p>数据迁移：Debezium + Kafka Connect / 双写中间表</p></li><li class="lvl-2"><p>监控比对：新老系统指标对比（订单成功率、延迟等）</p></li></ul></blockquote><h3 id="阶段六：可观测性体系建设">阶段六：可观测性体系建设</h3><p>黄金指标：延迟（Latency）、流量（Traffic）、错误（Errors）、饱和度（Saturation）—— USE / RED 方法论。</p><ol><li class="lvl-3"><p>建设“监控三件套”：</p><ul class="lvl-2"><li class="lvl-5"><strong>Metrics（指标）</strong>：Prometheus + Grafana</li><li class="lvl-5"><strong>Logging（日志）</strong>：ELK / Loki + Filebeat</li><li class="lvl-5"><strong>Tracing（链路）</strong>：Jaeger / Zipkin / SkyWalking</li></ul></li><li class="lvl-3"><p>设置关键告警（如错误率 &gt; 1%、P99 &gt; 1s）</p></li><li class="lvl-3"><p>建立 SLO/SLI 体系（如“下单接口可用性 99.95%”）</p></li><li class="lvl-3"><p>建设业务大盘（订单量、GMV、转化率等）</p></li></ol><blockquote><p><strong>输出成果物</strong>：</p><ul class="lvl-1"><li class="lvl-2">《可观测性架构图》</li><li class="lvl-2">《告警规则清单》</li><li class="lvl-2">《SLO 定义文档》</li><li class="lvl-2">《值班手册 &amp; 应急预案》</li></ul></blockquote><h3 id="阶段七：高可用与容灾演练">阶段七：高可用与容灾演练</h3><ol><li class="lvl-3"><p>设计容灾架构（同城双活？异地多活？）</p></li><li class="lvl-3"><p>实施混沌工程（Chaos Mesh / Chaos Monkey）：</p><ul class="lvl-2"><li class="lvl-5">注入网络延迟、节点宕机、磁盘满、CPU 打满等故障</li><li class="lvl-5">验证系统自愈能力（K8s 自动重启？服务熔断？）</li></ul></li><li class="lvl-3"><p>压测演练（全链路压测、突增流量模拟）</p></li><li class="lvl-3"><p>故障复盘机制（建立 Blameless Postmortem 文化）</p></li></ol><blockquote><p><strong>输出成果物</strong>：</p><ul class="lvl-1"><li class="lvl-2">《容灾架构设计》</li><li class="lvl-2">《混沌工程实验报告》</li><li class="lvl-2">《压测报告 &amp; 容量规划》</li><li class="lvl-2">《故障复盘模板》</li></ul></blockquote><h3 id="阶段八：持续优化与架构治理">阶段八：持续优化与架构治理</h3><p>推荐指标：部署频率、变更前置时间、变更失败率、MTTR（平均恢复时间）—— DevOps DORA 指标。</p><ol><li class="lvl-3"><p>建立架构治理委员会（定期评审架构演进）</p></li><li class="lvl-3"><p>技术债管理（每季度偿还一定比例）</p></li><li class="lvl-3"><p>性能持续优化（慢 SQL 治理、缓存命中率提升）</p></li><li class="lvl-3"><p>成本优化（资源利用率分析、Spot 实例、冷热数据分层）</p></li><li class="lvl-3"><p>架构防腐（防止“微服务膨胀”、“过度设计”）</p></li></ol><blockquote><p><strong>输出成果物</strong>：</p><ul class="lvl-1"><li class="lvl-2">《架构治理章程》</li><li class="lvl-2">《技术债看板》</li><li class="lvl-2">《成本优化报告》</li><li class="lvl-2">《架构健康度评估》（如服务依赖复杂度、部署频率、故障率）</li></ul></blockquote><h2 id="架构演进过程">架构演进过程</h2><p>分布式系统的架构演进过程，是随着业务规模增长、技术能力提升、硬件成本下降和用户需求变化而不断迭代优化的过程。</p><blockquote><p>是从“单体”走向“分布式”，从“中心化”走向“去中心化/服务化”，从“人工运维”走向“自动化/智能化”的演进路径。</p></blockquote><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>单体架构</td><td>快速验证、简单部署</td><td>Tomcat、MySQL、单机部署</td><td>扩展性差、耦合严重</td></tr><tr><td>垂直拆分</td><td>解耦应用与数据</td><td>多服务器、读写分离、CDN</td><td>跨库一致性、运维复杂</td></tr><tr><td>分布式服务（SOA）</td><td>服务复用、团队协作</td><td>RPC、注册中心、配置中心</td><td>服务治理、链路追踪</td></tr><tr><td>微服务架构</td><td>敏捷交付、独立演进</td><td>Spring Cloud、Docker、K8s（初期）</td><td>分布式事务、数据聚合、服务爆炸</td></tr><tr><td>云原生架构</td><td>弹性伸缩、高可用、自动化</td><td>Kubernetes、Service Mesh、Serverless</td><td>运维复杂、安全策略、有状态管理</td></tr><tr><td>智能自适应架构</td><td>自治、自愈、成本最优</td><td>AIOps、混沌工程、边缘计算、FaaS</td><td>算法可靠性、系统可解释性</td></tr></tbody></table><blockquote><ol><li class="lvl-3"><p><strong>初创期</strong>：LAMP 单体，一台服务器跑 Web + DB。</p></li><li class="lvl-3"><p><strong>增长期</strong>：拆分 Web 与 DB，引入缓存（Redis）、搜索（Elasticsearch）。</p></li><li class="lvl-3"><p><strong>爆发期</strong>：按业务拆服务（用户、商品、订单、支付），引入 Dubbo + ZooKeeper。</p></li><li class="lvl-3"><p><strong>成熟期</strong>：全面微服务化，K8s 编排，Service Mesh 管理流量，建设数据中台。</p></li><li class="lvl-3"><p><strong>云原生期</strong>：混合云部署，部分服务 Serverless 化，AI 推荐 + 智能运维。</p></li><li class="lvl-3"><p><strong>未来</strong>：边缘节点处理附近用户请求，AI 实时调价 + 库存预测，系统自优化。</p></li></ol></blockquote><h3 id="一、单体架构">一、单体架构</h3><ul class="lvl-0"><li class="lvl-2"><p><strong>发布风险高</strong>：一个小改动需全量部署，容易“牵一发而动全身”。</p></li><li class="lvl-2"><p><strong>技术栈锁定</strong>：整个系统只能使用一种语言/框架。</p></li><li class="lvl-2"><p><strong>团队协作困难</strong>：多人修改同一代码库，合并冲突频繁。</p></li><li class="lvl-2"><p><strong>单点故障</strong>：一个模块崩溃可能导致整个系统瘫痪。</p></li><li class="lvl-2"><p><strong>性能瓶颈</strong>：数据库、业务逻辑、文件服务等共享资源，难以横向扩展。</p></li></ul><blockquote><p>适用场景：</p><ul class="lvl-1"><li class="lvl-2">初创产品 MVP（最小可行产品）</li><li class="lvl-2">用户量 &lt; 10万，QPS &lt; 1000</li><li class="lvl-2">团队规模小（&lt;10人）</li></ul></blockquote><h3 id="二、垂直拆分架构（应用与数据分离）">二、垂直拆分架构（应用与数据分离）</h3><p>当单体性能瓶颈显现（如数据库成为瓶颈），需要提升系统稳定性和可维护性</p><ol><li class="lvl-3"><p><strong>应用与数据库分离</strong>：Web 服务与 DB 部署在不同服务器。</p></li><li class="lvl-3"><p><strong>按功能垂直拆分</strong>：如用户中心、订单中心、商品中心各自独立部署。</p></li><li class="lvl-3"><p><strong>静态资源独立</strong>：图片、JS、CSS 交给 CDN 或独立服务器。</p></li></ol><blockquote><ul class="lvl-1"><li class="lvl-2"><p>减轻单机压力，提高并发能力。</p></li><li class="lvl-2"><p>各模块可独立扩展、独立维护。</p></li><li class="lvl-2"><p>数据库按业务拆分，缓解连接数和锁竞争。</p></li></ul></blockquote><p>同时会引入新问题：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>服务间调用开始出现（HTTP/RPC），需处理超时、重试、降级。</p></li><li class="lvl-2"><p>数据一致性难保证（如订单与库存需跨库操作）。</p></li><li class="lvl-2"><p>运维复杂度上升（多进程、多机器）。</p></li></ul></blockquote><h3 id="三、分布式服务架构（SOA）">三、分布式服务架构（SOA）</h3><p>当业务复杂度爆炸，垂直拆分后模块仍庞大，需支持多团队并行开发、独立发布</p><ol><li class="lvl-3"><p>引入 <strong>服务化思想</strong>：将通用能力抽象为“服务”，如登录服务、支付服务、通知服务。</p></li><li class="lvl-3"><p>使用 <strong>RPC 框架</strong>：如 Dubbo、gRPC、Thrift 实现服务间高效调用。</p></li><li class="lvl-3"><p>引入 <strong>服务注册与发现</strong>：ZooKeeper、Consul、Eureka。</p></li><li class="lvl-3"><p>初步实现 <strong>配置中心、服务治理</strong>（限流、熔断、路由）。</p></li></ol><blockquote><ul class="lvl-1"><li class="lvl-2"><p>服务复用性高，避免重复造轮子。</p></li><li class="lvl-2"><p>团队按服务划分，职责清晰，发布独立。</p></li><li class="lvl-2"><p>技术栈可异构（不同服务可用不同语言）。</p></li></ul></blockquote><p>于此同时会带来新挑战：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>分布式事务问题凸显（跨服务数据一致性）。</p></li><li class="lvl-2"><p>服务依赖复杂，链路变长，排查问题困难。</p></li><li class="lvl-2"><p>需引入监控、日志、链路追踪系统。</p></li></ul></blockquote><h3 id="四、微服务架构">四、微服务架构</h3><p>SOA 服务粒度仍粗，发布耦合；需要更敏捷、更弹性的架构。同时随着容器化、DevOps、云原生技术成熟</p><ul class="lvl-0"><li class="lvl-2"><p><strong>服务粒度更细</strong>：一个服务只做一件事（单一职责）。</p></li><li class="lvl-2"><p><strong>独立部署 &amp; 独立数据源</strong>：每个服务拥有自己的数据库（Database per Service）。</p></li><li class="lvl-2"><p><strong>去中心化治理</strong>：服务自治，技术选型自由。</p></li><li class="lvl-2"><p><strong>基础设施自动化</strong>：CI/CD、容器编排（Kubernetes）、服务网格（Service Mesh）。</p></li></ul><p>挑战进一步升级：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>分布式事务更复杂</strong> → Saga、TCC、本地消息表、Event Sourcing</p></li><li class="lvl-2"><p><strong>数据聚合查询困难</strong> → CQRS、数据中台、宽表同步</p></li><li class="lvl-2"><p><strong>服务爆炸</strong> → 服务网格（Istio、Linkerd）接管通信治理</p></li><li class="lvl-2"><p><strong>运维复杂度指数上升</strong> → 需要 SRE、可观测性体系、AIOps</p></li></ul></blockquote><h3 id="五、云原生架构">五、云原生架构</h3><p>企业全面上云，追求极致弹性、高可用、低成本。Kubernetes 成为事实标准，基础设施服务化</p><ul class="lvl-0"><li class="lvl-2"><p><strong>容器化封装</strong>（Docker），自动扩缩容（HPA/VPA）</p></li><li class="lvl-2"><p><strong>动态编排管理</strong>（Kubernetes），故障自愈（Pod 重启、节点迁移），灰度发布、金丝雀发布、蓝绿部署</p></li><li class="lvl-2"><p><strong>面向微服务</strong></p></li><li class="lvl-2"><p><strong>服务网格</strong>（Service Mesh）</p></li><li class="lvl-2"><p><strong>声明式 API &amp; 不可变基础设施</strong></p></li><li class="lvl-2"><p><strong>DevSecOps &amp; GitOps</strong></p></li></ul><blockquote><ul class="lvl-1"><li class="lvl-2"><p>资源利用率高，成本优化。</p></li><li class="lvl-2"><p>系统韧性（Resilience）强，SLA 可保障。</p></li><li class="lvl-2"><p>快速迭代，支持业务创新。</p></li></ul></blockquote><p>带来新挑战：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>学习曲线陡峭（K8s、CRD、Operator、Sidecar 等概念）</p></li><li class="lvl-2"><p>监控/安全/网络策略复杂（需零信任、mTLS、NetworkPolicy）</p></li><li class="lvl-2"><p>有状态服务管理难（如数据库、消息队列的 K8s 化）</p></li></ul></blockquote><h3 id="六、智能化-自适应架构（AI）">六、智能化 &amp; 自适应架构（AI）</h3><p>随着系统规模超大（千万级 QPS），人工运维不可持续。AI 技术成熟，可用于系统自优化</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>AIOps</strong>：异常检测、根因分析、自动扩缩容决策。</p></li><li class="lvl-2"><p><strong>混沌工程常态化</strong>：主动注入故障，验证系统韧性。</p></li><li class="lvl-2"><p><strong>Serverless + Event-Driven</strong>：极致解耦，按事件触发计算。</p></li><li class="lvl-2"><p><strong>数据与计算融合架构</strong>：流批一体、湖仓一体、近数据计算。</p></li><li class="lvl-2"><p><strong>边缘计算 + 分布式云</strong>：计算靠近用户，降低延迟。</p></li><li class="lvl-2"><p><strong>自治系统（Autonomous System）</strong>：自我监控、自我修复、自我优化。</p></li></ul></blockquote><h3 id="电商系统架构演进示例">电商系统架构演进示例</h3><p>某跨境电商架构演进的过程：</p><table><thead><tr><th>阶段</th><th>订单量</th><th>架构</th><th>技术点</th><th>特点</th></tr></thead><tbody><tr><td>初创期（1.0阶段）</td><td>日活几百</td><td>单体架构</td><td>Spring Boot + MySQL</td><td>快速上线、验证模式</td></tr><tr><td>增长期（2.0阶段）</td><td>日活1万+</td><td>垂直拆分 + 缓存</td><td>Redis + CDN + 读写分离</td><td>性能优化、支持增长</td></tr><tr><td>发展期（3.0阶段）</td><td>日订单10万+</td><td>分布式服务化</td><td>Dubbo + MQ + 分库分表</td><td>解耦协作、高并发支持</td></tr><tr><td>成熟期（4.0阶段）</td><td>日订单百万+</td><td>云原生微服务</td><td>K8s + Istio + Serverless</td><td>弹性伸缩、全球高可用</td></tr><tr><td>未来（5.0阶段）</td><td>日订单千万+</td><td>智能自适应架构</td><td>AIOps + 边缘计算 + EDA</td><td>自治系统、极致体验与效率</td></tr></tbody></table><blockquote><p>关键指标：订单处理能力从100TPS提升至5000TPS</p></blockquote><p><strong>一下为具体场景和实现，以及存在的挑战</strong>：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>1.0阶段</strong>：单体应用（Spring Boot + MySQL）。功能简单，日活几百，订单少量。</p><blockquote><p>前后端一体，MySQL 单机，手动部署等。</p><ul class="lvl-3"><li class="lvl-2"><p>大促时服务器 CPU 100%，页面打不开。</p></li><li class="lvl-2"><p>改个商品页，要重启整个系统，影响其他模块。</p></li><li class="lvl-2"><p>图片加载慢，数据库慢查询拖垮整个应用。</p></li></ul></blockquote></li><li class="lvl-2"><p><strong>2.0阶段</strong>：垂直拆分 + 基础优化。用户增长到日活 1 万，订单上千。支持促销、优惠券等</p><blockquote><p>应用与数据库分离、引入缓存、读写分离、静态资源 CDN、按功能垂直拆分等</p><ul class="lvl-3"><li class="lvl-2"><p>库存超卖（多个用户同时下单扣减库存）→ 需加锁或队列。</p></li><li class="lvl-2"><p>订单与库存数据在不同模块，一致性难保证。</p></li><li class="lvl-2"><p>服务之间开始用 HTTP 调用，超时、失败频发。</p></li></ul></blockquote></li><li class="lvl-2"><p><strong>3.0阶段</strong>：服务化拆分（商品/订单独立部署）。日订单量 10 万+，峰值 QPS 上千。</p><blockquote><p>服务拆分为用户、商品、订单、库存、支付等模块，引入 RPC 框架、服务注册发现、消息队列削峰解耦等。</p><ul class="lvl-3"><li class="lvl-2"><p>“下单失败但库存已扣” → 需补偿机制或 Saga 模式。</p></li><li class="lvl-2"><p>“服务调用链太长，不知道哪一步慢” → 需全链路监控。</p></li><li class="lvl-2"><p>“服务太多，配置管理混乱” → 需统一配置中心。</p></li><li class="lvl-2"><p>“发布一个服务导致整个系统雪崩” → 需熔断限流（Sentinel/Hystrix）。</p></li></ul></blockquote></li><li class="lvl-2"><p><strong>4.0阶段</strong>：云原生微服务架构。支持日订单百万级，峰值 QPS 数万。</p><blockquote><p>容器化、Kubernetes 编排、数据中台建设（统一数仓、用户画像、BI 报表、推荐算法）、中间件云托管、<strong>混沌工程</strong>。</p><ul class="lvl-3"><li class="lvl-2"><p>K8s YAML 配置爆炸 → 需 Helm / Kustomize / GitOps。</p></li><li class="lvl-2"><p>Sidecar 增加延迟 → 需性能调优。</p></li><li class="lvl-2"><p>多集群管理复杂 → 需 Karmada / Cluster API。</p></li><li class="lvl-2"><p>数据一致性仍难 → 引入 CDC（如 Debezium） + 事件溯源。</p></li></ul></blockquote></li><li class="lvl-2"><p><strong>5.0阶段</strong>：智能化 &amp; 自适应架构。日订单千万级，AI 驱动个性化推荐、动态定价、智能客服。系统“自我感知、自我修复和优化。</p><blockquote><ul class="lvl-3"><li class="lvl-2"><strong>AIOps</strong>：自动根因分析、智能扩缩容、异常检测（日志/指标自动聚类告警）。</li><li class="lvl-2"><strong>边缘计算</strong>：用户附近部署边缘节点，处理“附近商品推荐”，降低延迟，提升体验。</li><li class="lvl-2"><strong>Serverless 全面化</strong>：促销活动页面、临时计算任务全部 FaaS 化。按调用付费，资源零浪费。</li><li class="lvl-2"><strong>事件驱动架构（EDA）</strong>：业务事件 → Kafka → 消费者（下单 → 扣库存、埋点、通知）。系统高度解耦，弹性极强。</li><li class="lvl-2"><strong>数字孪生 &amp; 仿真压测</strong>：构建线上系统镜像，提前模拟大促流量，自动调优参数。</li></ul></blockquote></li></ul><p><strong>真实案例参考</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>淘宝：从 LAMP → 垂直拆分 → 服务化（HSF）→ 微服务（Dubbo）→ 云原生（Sigma / ASI）</p></li><li class="lvl-2"><p>亚马逊：从单体 → SOA → 微服务 → Serverless（Lambda）→ 智能化推荐系统</p></li><li class="lvl-2"><p>拼多多：早期用 Go 单体 → 快速服务化 → 全链路压测 + 极致优化 → 支撑“百亿补贴”高并发</p></li></ul></blockquote>]]></content>
    
    
    <summary type="html">介绍了架构设计的基本维度和设计考量，以及具体的实施流程和架构演进的详细过程，以电商系统为例。</summary>
    
    
    
    <category term="架构" scheme="https://pengline.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    <category term="架构设计" scheme="https://pengline.github.io/categories/%E6%9E%B6%E6%9E%84/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="架构设计" scheme="https://pengline.github.io/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="架构模式" scheme="https://pengline.github.io/tags/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="架构实施" scheme="https://pengline.github.io/tags/%E6%9E%B6%E6%9E%84%E5%AE%9E%E6%96%BD/"/>
    
    <category term="架构演进" scheme="https://pengline.github.io/tags/%E6%9E%B6%E6%9E%84%E6%BC%94%E8%BF%9B/"/>
    
    <category term="云原生架构" scheme="https://pengline.github.io/tags/%E4%BA%91%E5%8E%9F%E7%94%9F%E6%9E%B6%E6%9E%84/"/>
    
    <category term="微服务架构" scheme="https://pengline.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/"/>
    
    <category term="分布式架构" scheme="https://pengline.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84/"/>
    
    <category term="AI自适应架构" scheme="https://pengline.github.io/tags/AI%E8%87%AA%E9%80%82%E5%BA%94%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Java 多线程之线程池原理与使用指南</title>
    <link href="https://pengline.github.io/2025/09/10/366f9754e67846f0b38a4354a634b75f/"/>
    <id>https://pengline.github.io/2025/09/10/366f9754e67846f0b38a4354a634b75f/</id>
    <published>2025-09-09T16:00:00.000Z</published>
    <updated>2025-09-18T08:43:56.820Z</updated>
    
    <content type="html"><![CDATA[<p>使用线程池的优点：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>降低资源消耗</strong>：通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</p></li><li class="lvl-2"><p><strong>提高响应速度</strong>：当任务到达时，任务可以不需要等到线程创建就能立即执行。</p></li><li class="lvl-2"><p><strong>提高线程的可管理性</strong>：线程是稀缺资源，如果无限制地创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一分配、调优和监控。</p></li></ul><blockquote><p>所有线程池都基于 <code>java.util.concurrent.ThreadPoolExecutor</code>，底层是操作系统线程（Platform Threads），创建和切换成本高，需池化复用。</p><p>Java 21 引入了虚拟线程（Virtual Threads），让“一个任务一个线程”成为 I/O 场景的最佳实践。</p></blockquote><h2 id="线程池概念结构">线程池概念结构</h2><h3 id="核心组件">核心组件</h3><ul class="lvl-0"><li class="lvl-2"><p>核心线程数（<strong>corePoolSize</strong>）：线程池中常驻的线程数量，即使空闲也不会被回收（除非设置 <code>allowCoreThreadTimeOut(true)</code>）。</p></li><li class="lvl-2"><p>最大线程数（<strong>maximumPoolSize</strong>）：线程池允许创建的最大线程数量。当任务队列满且当前线程数 &lt; maximumPoolSize 时，会创建非核心线程执行任务。</p></li><li class="lvl-2"><p>非核心线程的存活时长（<strong>keepAliveTime</strong>）：非核心线程在空闲时的存活时间。超过该时间将被回收。</p></li><li class="lvl-2"><p>工作队列（<strong>BlockingQueue</strong><Runnable>）：当核心线程都在忙时，新任务会被放入队列等待。</p><ul class="lvl-2"><li class="lvl-4"><code>LinkedBlockingQueue</code>：无界队列（默认不设上限，易 OOM）</li><li class="lvl-4"><code>ArrayBlockingQueue</code>：有界队列</li><li class="lvl-4"><code>SynchronousQueue</code>：不存储元素，直接移交任务给线程（常用于 CachedThreadPool）</li><li class="lvl-4"><code>PriorityBlockingQueue</code>：优先级队列</li></ul></li><li class="lvl-2"><p>拒绝策略（<strong>RejectedExecutionHandler</strong>）：当线程池和队列都满了，如何处理新提交的任务，常见策略有：</p><ul class="lvl-2"><li class="lvl-4"><strong>AbortPolicy</strong>： 它将直接抛出RejectedExecutionException（默认）</li><li class="lvl-4"><strong>CallerRunsPolicy</strong>： 它直接在execute方法的调用线程中运行被拒绝的任务。如果执行程序已关闭，则会丢弃该任务</li><li class="lvl-4"><strong>DiscardOldestPolicy</strong>： 它放弃最旧的未处理请求，然后重试execute执行当前任务。</li><li class="lvl-4"><strong>DiscardPolicy</strong>： 默认情况下它将丢弃被拒绝的任务。</li></ul></li></ul><h3 id="执行流程">执行流程</h3><img src="/imgs/868f71cd0007cc74fd9bd0b963619a51.png" alt="深入理解线程池（详解）_线程池的工作原理-CSDN博客" style="zoom: 50%;" /><blockquote><p>1.查看核心线程池是否已满，不满就创建一条线程执行任务，否则执行第二步。</p><p>2.查看任务队列是否已满，不满就将任务存储在任务队列中，否则执行第三步。</p><p>3.查看线程池是否已满，即是否达到最大线程池数，不满就创建一条线程执行任务，否则就按照策略处理无法执行的任务。</p><p>4.当线程池中的线程数量大于核心线程时，如果某线程空闲时间超过<strong>keepAliveTime</strong>，线程将被终止。这样，线程池可以动态的调整池中的线程数。</p><p>5.当设置<strong>allowCoreThreadTimeOut</strong>(true)时，线程池中corePoolSize线程空闲时间达到<strong>keepAliveTime</strong>也将关闭</p></blockquote><h3 id="线程池状态">线程池状态</h3><p>线程池的状态和线程的状态是完全不同的，线程池的状态有以下 5 种：</p><ol><li class="lvl-3"><p><strong>running</strong>：运行状态，线程池创建好后会进入此状态，如不手动调用关闭方法，那线程池在整个程序运行期间都是此状态。</p></li><li class="lvl-3"><p><strong>shutdown</strong>：关闭状态，不再接受新任务提交，但是会将已保存在任务队列中的任务处理完。</p></li><li class="lvl-3"><p><strong>stop</strong>：停止状态，不再接受新任务提交，并且会中断当前正在执行的任务、放弃任务队列中已有的任务。</p></li><li class="lvl-3"><p><strong>tidying</strong>：整理状态，所有的任务都执行完毕后（也包括任务队列中的任务执行完），当前线程池中的活动线程数降为 0 时的状态。到此状态之后，会调用线程池的 terminated() 方法。</p></li><li class="lvl-3"><p><strong>terminated</strong>：销毁状态，当执行完线程池的 terminated() 方法之后就会变为此状态。</p></li></ol><p><img src="/imgs/image-20240705162257743.png" alt="image-20240705162257743"></p><img src="/imgs/620cc55cd9c0f63fc7aa1ddaaee8812d.png" alt="image.png" style="zoom:37%;" /><blockquote><ul class="lvl-1"><li class="lvl-2"><p>shutdown()  不再接收新的任务，但是现有任务继续，且队列中等候的线程也将会执行。除非内部有停止标识</p></li><li class="lvl-2"><p>shutdownNow()  不再接收新的任务，但是现有任务继续，队列中等候的线程不会再执行，将交给外部线程处理</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shutdown</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">mainLock</span> <span class="operator">=</span> <span class="built_in">this</span>.mainLock;</span><br><span class="line">    mainLock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      checkShutdownAccess();        </span><br><span class="line">      advanceRunState(SHUTDOWN);    </span><br><span class="line">      interruptIdleWorkers();        </span><br><span class="line">      onShutdown(); </span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      mainLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    tryTerminate();    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> List&lt;Runnable&gt; <span class="title function_">shutdownNow</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Runnable&gt; tasks;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">mainLock</span> <span class="operator">=</span> <span class="built_in">this</span>.mainLock;</span><br><span class="line">    mainLock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      checkShutdownAccess();</span><br><span class="line">      advanceRunState(STOP);</span><br><span class="line">      interruptWorkers();</span><br><span class="line">      tasks = drainQueue();    </span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      mainLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    tryTerminate();</span><br><span class="line">    <span class="keyword">return</span> tasks;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><p>重写 terminated() 方法，销毁前执行一些其他操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolStateTransition</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">      <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">0L</span>,</span><br><span class="line">              TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">100</span>)) &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">terminated</span><span class="params">()</span> &#123;</span><br><span class="line">              <span class="built_in">super</span>.terminated();</span><br><span class="line">              System.out.println(<span class="string">&quot;执行 terminated() 方法&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      threadPool.shutdown();</span><br><span class="line">      <span class="keyword">while</span> (!threadPool.awaitTermination(<span class="number">1</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;线程池正在运行中&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="线程池体系结构">线程池体系结构</h3><p><code>java.util.concurrent.Executor</code>: 负责线程的使用和调度的根接口;</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><code>ExecutorService</code>: 子接口,线程池的主要接口;</p><ul class="lvl-3"><li class="lvl-4"><code>AbstractExecutorService</code>: 接口抽象类，维护了通用方法：线程提交和运行<ul class="lvl-5"><li class="lvl-6"><code>ThreadPoolExecutor</code>: 线程池的实现类; 维护了线程池参数、状态、等待队列、锁和方法实现</li><li class="lvl-6"><code>ForkJoinPool</code>:并行线程池的实现类; 维护了线程池参数、状态、等待队列、工作线程</li><li class="lvl-6"><code>DelegatedExecutorService</code>:</li></ul></li></ul></li><li class="lvl-2"><p><code>ScheduledExecutorService</code>: 子接口,负责线程的调度;</p><ul class="lvl-3"><li class="lvl-4"><code>ScheduledThreadPoolExecutor</code>: 继承了线程池的实现类,实现了负责线程调度的子接口;</li></ul></li></ul></blockquote><p>工具类:    Executors（<font color=red>慎用</font>：最大线程数过大，队列大小未做限制，会导致CPU和内存占用过大出现服务宕机问题）</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><code>ExecutorService=Executors.newFixedThreadPool()</code>: <strong>固定大小</strong>线程池（<strong>核心=最大=n</strong>）;</p></li><li class="lvl-2"><p><code>ExecutorService=Executors.newCachedThreadPool()</code>: <strong>缓存</strong>线程池，<strong>核心=0，最大=MAX_INT</strong>，没有核心线程数;</p></li><li class="lvl-2"><p><code>ExecutorService=Executors.newSingleThreadExecutor()</code>: <strong>单个</strong>线程池, 线程池只有一个线程<strong>核心=最大=1</strong>;</p></li><li class="lvl-2"><p><code>ExecutorService=Executors.newWorkStealingPool()</code>:  <strong>并行</strong>线程池，默认核心大小为<strong>CPU核数</strong>（Runtime.getRuntime().availableProcessors()），最大默认 256</p></li><li class="lvl-2"><p><code>ScheduledExecutorService=Executors.newScheduledThreadPool()</code>: <strong>延时或定时</strong>的执行任务，<strong>核心=n，最大=MAX_INT</strong>;</p></li></ul></blockquote><p>spring 提供的 线程池</p><blockquote><p>TaskExecutor 接口</p><ul class="lvl-1"><li class="lvl-2"><p>AsyncTaskExecutor 接口</p><ul class="lvl-3"><li class="lvl-4"><p>SchedulingTaskExecutor 接口</p><ul class="lvl-5"><li class="lvl-6"><p>ThreadPoolTaskExecutor</p></li><li class="lvl-6"><p>ThreadPoolTaskScheduler</p></li><li class="lvl-6"><p>ConcurrentTaskExecutor</p></li><li class="lvl-6"><p>SimpleThreadPoolTaskExecutor</p></li></ul></li><li class="lvl-4"><p>SimpleAsyncTaskExecutor</p></li></ul></li></ul></blockquote><h2 id="线程池使用指南">线程池使用指南</h2><p>使用场景和建议</p><table><thead><tr><th>线程池类型</th><th>适用场景</th><th>Java 建议（21）</th></tr></thead><tbody><tr><td>FixedThreadPool</td><td>CPU 密集、控制并发</td><td>仍可用，但 I/O 场景改用虚拟线程</td></tr><tr><td>CachedThreadPool</td><td>短时突发任务</td><td>不推荐，改用虚拟线程或限流版</td></tr><tr><td>SingleThreadExecutor</td><td>串行任务</td><td>仍可用，注意队列大小</td></tr><tr><td>ScheduledThreadPool</td><td>定时任务</td><td>仍为首选</td></tr><tr><td>WorkStealingPool</td><td>分治计算</td><td>仍为首选（CPU 密集）</td></tr><tr><td><strong>VirtualThreadPerTask</strong></td><td><strong>高并发 I/O</strong></td><td><strong>Java 21+ 首选方案</strong></td></tr></tbody></table><p>总结推荐：</p><table><thead><tr><th>类型</th><th>适用场景</th><th>推荐实现方式</th><th>注意事项</th></tr></thead><tbody><tr><td>平台线程池（ThreadPoolExecutor）</td><td>CPU密集型、可控并发</td><td>自定义 ThreadPoolExecutor 或谨慎使用 Executors 工具类</td><td>控制线程数、队列类型、拒绝策略，注意关闭</td></tr><tr><td>虚拟线程池（Virtual Threads）</td><td>I/O密集型、高并发短任务</td><td><code>Executors.newVirtualThreadPerTaskExecutor()</code></td><td>适合大量阻塞任务，注意异常处理，目前为预览特性</td></tr></tbody></table><h3 id="ThreadPoolExecutor">ThreadPoolExecutor</h3><p><strong>ThreadPoolExecutor（标准线程池）</strong>，是线程池的核心实现类。可以自定义核心线程数、最大线程数、任务队列、拒绝策略等。</p><blockquote><p>通过 <code>Executors</code> 工厂方法可以快速创建几种常用配置的线程池，但是不建议生产用，如：</p><ul class="lvl-1"><li class="lvl-2"><code>newFixedThreadPool(int nThreads)</code>：固定大小的线程池。</li><li class="lvl-2"><code>newSingleThreadExecutor()</code>：单线程的线程池。</li><li class="lvl-2"><code>newCachedThreadPool()</code>：可缓存的线程池，线程数量几乎无限制，适合大量短时任务。</li><li class="lvl-2"><code>newScheduledThreadPool(int corePoolSize)</code>：支持定时及周期性任务调度。</li></ul></blockquote><h4 id="配置示例">配置示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAsync</span> <span class="comment">// 开启对异步任务的支持</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadAsyncConfigurer</span> <span class="keyword">implements</span> <span class="title class_">AsyncConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果当前运行的线程数小于corePoolSize，那么就创建线程来执行任务（执行时需要获取全局锁）。</span></span><br><span class="line"><span class="comment">     * 如果运行的线程大于或等于corePoolSize，那么就把task加入BlockQueue。</span></span><br><span class="line"><span class="comment">     * 如果创建的线程数量大于BlockQueue的最大容量，且线程小于maxPoolSize，那么创建新线程来执行该任务。</span></span><br><span class="line"><span class="comment">     * 如果创建线程导致当前运行的线程数超过maximumPoolSize，就根据饱和策略来拒绝该任务。</span></span><br><span class="line"><span class="comment">     * 如果允许关闭所有核心线程，则等待keepAliveSeconds 将关闭</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Executor <span class="title function_">getAsyncExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="comment">//通过Runtime方法来获取当前服务器cpu内核，根据cpu内核来创建核心线程数和最大线程数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">threadCount</span> <span class="operator">=</span> Runtime.getRuntime().availableProcessors();</span><br><span class="line"></span><br><span class="line">        <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">threadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">        <span class="comment">// 设置核心线程数（若使用的线程数大于核心线程且小于最大线程时，只有当队列满时才创建新的线程执行任务）</span></span><br><span class="line">        <span class="comment">// 若小于核心线程数，则创建新线程执行任务</span></span><br><span class="line">        threadPool.setCorePoolSize(threadCount + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 设置最大线程数，若线程已达到最大线程数，且队列已满，则根据设置的中止策略执行后面的任务</span></span><br><span class="line">        threadPool.setMaxPoolSize(threadCount * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 线程池所使用的缓冲队列</span></span><br><span class="line">        threadPool.setQueueCapacity(<span class="number">500</span>);</span><br><span class="line">        <span class="comment">// 是否允许线程池中corePoolSize线程空闲时间达到keepAliveTime关闭        </span></span><br><span class="line">        threadPool.setAllowCoreThreadTimeOut(<span class="literal">false</span>);</span><br><span class="line">        <span class="comment">// 等待任务在关机时完成--表明等待所有线程执行完</span></span><br><span class="line">        threadPool.setWaitForTasksToCompleteOnShutdown(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 等待时间 （默认为0，此时立即停止），并没等待xx秒后强制停止</span></span><br><span class="line">        threadPool.setAwaitTerminationSeconds(<span class="number">60</span> * <span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 线程名称前缀</span></span><br><span class="line">        threadPool.setThreadNamePrefix(<span class="string">&quot;taskExector-&quot;</span>);</span><br><span class="line">        <span class="comment">//    设置中止策略(达到最大线程数后，队列已满且无线程可用于处理后面的任务时的策略)</span></span><br><span class="line">         <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常。</span></span><br><span class="line"><span class="comment">         * ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。</span></span><br><span class="line"><span class="comment">         * ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）</span></span><br><span class="line"><span class="comment">         * ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        threadPool.setRejectedExecutionHandler(<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br><span class="line">        <span class="comment">// 初始化线程</span></span><br><span class="line">        threadPool.initialize();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// keepAliveTime  当超过核心线程数的线程执行完任务后，需要等待的时间，超过该时间则销毁</span></span><br><span class="line">        <span class="keyword">return</span> threadPool;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者以下方式</span></span><br><span class="line">    <span class="meta">@Lazy</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;executorService&quot;, destroyMethod = &quot;shutdown&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ExecutorService <span class="title function_">executorService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//核心线程数（获取硬件）：线程池创建时候初始化的线程数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">corePoolSize</span> <span class="operator">=</span> Runtime.getRuntime().availableProcessors();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(corePoolSize + <span class="number">1</span>, corePoolSize * <span class="number">2</span> + <span class="number">1</span>, <span class="number">20</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingDeque</span>&lt;&gt;(<span class="number">2000</span>), <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用案例">使用案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolExample</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">corePoolSize</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxPoolSize</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">keepAliveTime</span> <span class="operator">=</span> <span class="number">60L</span>;</span><br><span class="line">        <span class="type">TimeUnit</span> <span class="variable">timeUnit</span> <span class="operator">=</span> TimeUnit.SECONDS;</span><br><span class="line">        <span class="type">int</span> <span class="variable">queueCapacity</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用有界队列</span></span><br><span class="line">        BlockingQueue&lt;Runnable&gt; workQueue = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(queueCapacity);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可选：自定义线程工厂（给线程设置有意义的名字）</span></span><br><span class="line">        <span class="type">ThreadFactory</span> <span class="variable">threadFactory</span> <span class="operator">=</span> Executors.defaultThreadFactory(); <span class="comment">// 或自定义</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可选：自定义拒绝策略</span></span><br><span class="line">        <span class="type">RejectedExecutionHandler</span> <span class="variable">rejectionHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy(); <span class="comment">// 默认抛异常</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 ThreadPoolExecutor</span></span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">                corePoolSize,</span><br><span class="line">                maxPoolSize,</span><br><span class="line">                keepAliveTime,</span><br><span class="line">                timeUnit,</span><br><span class="line">                workQueue,</span><br><span class="line">                threadFactory,</span><br><span class="line">                rejectionHandler</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提交任务示例</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">taskId</span> <span class="operator">=</span> i;</span><br><span class="line">            executor.execute(() -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;执行任务 &quot;</span> + taskId + <span class="string">&quot;，线程：&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    Thread.currentThread().interrupt();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 优雅关闭线程池</span></span><br><span class="line">        executor.shutdown(); <span class="comment">// 不再接受新任务，等待已提交任务完成</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!executor.awaitTermination(<span class="number">60</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">                executor.shutdownNow(); <span class="comment">// 强制终止</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            executor.shutdownNow();</span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意事项">注意事项</h4><ol><li class="lvl-3"><p>不要盲目使用 <code>Executors</code> 提供的快捷方法，尤其是 <code>newCachedThreadPool()</code>，可能导致线程数无限增长。</p></li><li class="lvl-3"><p>明确任务特性（CPU密集型 or I/O密集型）来设置合理的线程数：</p><blockquote><ul class="lvl-3"><li class="lvl-2"><p>CPU密集型：线程数 ≈ CPU核心数</p></li><li class="lvl-2"><p>I/O密集型：线程数可以设高一些，如 CPU核心数 * (1 + 平均等待时间/平均计算时间)</p></li></ul><p>合理选择任务队列，比如：</p><ul class="lvl-3"><li class="lvl-2"><p>有界队列（如 ArrayBlockingQueue）可以防止资源耗尽，但可能触发拒绝策略；</p></li><li class="lvl-2"><p>无界队列（如 LinkedBlockingQueue）可能导致内存问题。</p></li></ul><p>一定要妥善处理线程池的关闭，调用 <code>shutdown()</code> 或 <code>shutdownNow()</code>，避免资源泄漏。</p></blockquote></li></ol><p>（1）<code>FixedThreadPool</code> — 固定大小线程池，无界队列</p><p><strong>适用</strong>：控制并发数，适合 CPU 密集或稳定负载，<strong>风险</strong>：任务堆积 → OOM</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生产建议:</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">4</span>, <span class="number">4</span>, <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">1000</span>), <span class="comment">// 有界队列</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br></pre></td></tr></table></figure><p>（2）<code>CachedThreadPool</code> — 弹性线程池，大量线程</p><p><strong>适用</strong>：大量短生命周期任务（如 HTTP 请求），<strong>风险</strong>：线程爆炸 → CPU/内存耗尽</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生产建议：限制最大线程数 + 监控</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">0</span>, <span class="number">200</span>, <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">SynchronousQueue</span>&lt;&gt;(),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">CustomThreadFactory</span>(<span class="string">&quot;cached-pool&quot;</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br></pre></td></tr></table></figure><p>（3）<code>SingleThreadExecutor</code> — 单线程串行池，无界队列</p><p><strong>适用</strong>：日志写入、顺序消费、串行化任务，<strong>风险</strong>：任务堆积 → OOM</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line"></span><br><span class="line"><span class="comment">//生产建议：改用有界队列 + 拒绝策略</span></span><br></pre></td></tr></table></figure><p>（4）<code>ScheduledThreadPool</code> — 定时任务池</p><p><strong>适用</strong>：定时心跳、轮询、延迟任务，<strong>注意</strong>：任务执行超时 → 后续任务延迟堆积（不会并发），未捕获异常 → 任务终止</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ScheduledExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">executor.scheduleAtFixedRate(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        heartbeat();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;心跳失败&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="number">0</span>, <span class="number">30</span>, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure><p>（5）<code>WorkStealingPool</code>（Java 8+）— 工作窃取池</p><p><strong>实现</strong>：<code>ForkJoinPool</code>，<strong>适用</strong>：递归、分治、CPU 密集型计算（如并行流底层），<strong>注意</strong>：任务应无阻塞、无状态，不适合 I/O 密集型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newWorkStealingPool();</span><br><span class="line"><span class="comment">// 或 Executors.newWorkStealingPool(4);</span></span><br></pre></td></tr></table></figure><h3 id="ForkJoinTask（并行任务）">ForkJoinTask（并行任务）</h3><ul class="lvl-0"><li class="lvl-2"><p>可递归拆分的任务（如：排序、搜索、矩阵运算、树遍历）；</p></li><li class="lvl-2"><p>CPU 密集型计算；</p></li><li class="lvl-2"><p>大量细粒度任务（任务执行时间 &gt; 调度开销）；</p></li><li class="lvl-2"><p>需要结果合并的场景（RecursiveTask）。</p></li></ul><h4 id="使用案例-2">使用案例</h4><p>使用案例：不带返回值的fork-join计算：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrintTask</span> <span class="keyword">extends</span> <span class="title class_">RecursiveAction</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">THRESHOLD</span> <span class="operator">=</span> <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> start;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> end;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PrintTask</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.start = start;</span><br><span class="line">        <span class="built_in">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (end - start &lt; THRESHOLD) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt;= end; i++) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;,i=&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">middle</span> <span class="operator">=</span> (start + end) / <span class="number">2</span>;</span><br><span class="line">            <span class="type">PrintTask</span> <span class="variable">firstTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintTask</span>(start, middle);</span><br><span class="line">            <span class="type">PrintTask</span> <span class="variable">secondTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintTask</span>(middle + <span class="number">1</span>, end);</span><br><span class="line">            invokeAll(firstTask, secondTask);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">ForkJoinPool</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ForkJoinPool</span>();</span><br><span class="line">        pool.submit(<span class="keyword">new</span> <span class="title class_">PrintTask</span>(<span class="number">1</span>,<span class="number">50</span>));</span><br><span class="line">        pool.awaitTermination(<span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line">        pool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用案例：带返回值的计算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculateTask</span> <span class="keyword">extends</span> <span class="title class_">RecursiveTask</span>&lt;Integer&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">THRESHOLD</span> <span class="operator">=</span> <span class="number">49</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> start;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> end;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CalculateTask</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.start = start;</span><br><span class="line">        <span class="built_in">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Integer <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (end - start &lt;= THRESHOLD) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt;= end; i++) &#123;</span><br><span class="line">                result += i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">middle</span> <span class="operator">=</span> (start + end) / <span class="number">2</span>;</span><br><span class="line">            <span class="type">CalculateTask</span> <span class="variable">firstTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CalculateTask</span>(start, middle);</span><br><span class="line">            <span class="type">CalculateTask</span> <span class="variable">secondTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CalculateTask</span>(middle + <span class="number">1</span>, end);</span><br><span class="line">            invokeAll(firstTask, secondTask);</span><br><span class="line">            <span class="keyword">return</span> firstTask.join() + secondTask.join();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">            result1 += i;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;循环计算 1-1000000 累加值：&quot;</span> + result1);</span><br><span class="line"></span><br><span class="line">        <span class="type">ForkJoinPool</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ForkJoinPool</span>();</span><br><span class="line">        ForkJoinTask&lt;Integer&gt; task = pool.submit(<span class="keyword">new</span> <span class="title class_">CalculateTask</span>(<span class="number">1</span>, <span class="number">1000000</span>));</span><br><span class="line">        <span class="type">int</span> <span class="variable">result2</span> <span class="operator">=</span> task.get();</span><br><span class="line">        System.out.println(<span class="string">&quot;并行计算 1-1000000 累加值：&quot;</span> + result2);</span><br><span class="line">        pool.awaitTermination(<span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line">        pool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="调优建议">调优建议</h4><ol><li class="lvl-3"><p><strong>合理设置并行度</strong>：一般 = CPU 核数；若任务有阻塞，可适当增加；</p></li><li class="lvl-3"><p><strong>任务粒度控制</strong>：太小 → 调度开销大；太大 → 无法充分利用多核；</p></li><li class="lvl-3"><p><strong>避免在任务中阻塞</strong>：如必须阻塞，使用 <code>ForkJoinPool.managedBlock(...)</code>；</p></li><li class="lvl-3"><p><strong>监控 commonPool</strong>：避免被阻塞任务拖垮整个应用；</p></li><li class="lvl-3"><p><strong>自定义 ForkJoinPool</strong>：隔离业务，避免相互影响。</p></li></ol><h4 id="注意事项-2">注意事项</h4><p>不适用场景，且在 ForkJoinTask 中执行阻塞 I/O 或 synchronized，会严重降低性能！</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>I/O 阻塞任务（会阻塞工作线程，影响窃取效率）；</p></li><li class="lvl-2"><p>任务不可拆分或拆分成本高；</p></li><li class="lvl-2"><p>任务间强依赖，无法并行。</p></li></ul></blockquote><h3 id="VirtualThreadPerTask">VirtualThreadPerTask</h3><p>虚拟线程适合高并发、I/O 密集型任务，能极大提升系统吞吐量且资源开销极小。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>虚拟线程不是由 OS 管理，而是由 JVM 调度，挂起和恢复开销极低。</p></li><li class="lvl-2"><p>每个虚拟线程占用内存极少（约 1KB~2KB），而平台线程通常需要 MB 级栈空间。</p></li><li class="lvl-2"><p>虚拟线程适合大量并发的阻塞任务（如 HTTP 请求、数据库访问等）。</p></li></ul></blockquote><h4 id="使用方式">使用方式</h4><ul class="lvl-0"><li class="lvl-2"><p>直接通过 <code>Executors.newVirtualThreadPerTaskExecutor()</code> 创建一个“每任务一个虚拟线程”的执行器。</p></li><li class="lvl-2"><p>或者使用 <code>Thread.ofVirtual().factory()</code> 构建虚拟线程工厂，再传入 <code>ThreadPoolExecutor</code>。</p></li></ul><p>使用 <code>Executors.newVirtualThreadPerTaskExecutor()</code> 可以简单地为每个任务分配一个虚拟线程，无需手动管理线程数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">var</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newVirtualThreadPerTaskExecutor()) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10_000</span>; i++) &#123;</span><br><span class="line">        executor.submit(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// 模拟 I/O：数据库查询、HTTP 调用等</span></span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;result&quot;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// 自动关闭</span></span><br></pre></td></tr></table></figure><blockquote><ul class="lvl-1"><li class="lvl-2"><p>每个任务一个虚拟线程，无池化，自动回收</p><ul class="lvl-3"><li class="lvl-4">无需调优线程池参数</li><li class="lvl-4">无队列堆积、无拒绝策略问题</li><li class="lvl-4">高吞吐、低延迟（尤其 I/O 场景）</li></ul></li></ul></blockquote><p><strong>虚拟线程 + 平台线程混合使用</strong>（高级场景）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 平台线程池处理 CPU 密集任务</span></span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">cpuPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(</span><br><span class="line">    Runtime.getRuntime().availableProcessors()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 虚拟线程处理 I/O 任务</span></span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">ioPool</span> <span class="operator">=</span> Executors.newVirtualThreadPerTaskExecutor();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组合使用</span></span><br><span class="line">ioPool.submit(() -&gt; &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> fetchDataFromNetwork(); <span class="comment">// I/O</span></span><br><span class="line">    cpuPool.submit(() -&gt; processData(data)); <span class="comment">// CPU</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="使用案例-3">使用案例</h4><p>简单的使用场景：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Web 服务（Spring Boot 3.2+ 支持虚拟线程）</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newVirtualThreadPerTaskExecutor();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/data&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CompletableFuture&lt;String&gt; <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// 模拟数据库查询（阻塞）</span></span><br><span class="line">            <span class="keyword">try</span> &#123; Thread.sleep(<span class="number">100</span>); &#125; <span class="keyword">catch</span> (Exception e) &#123;&#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;result&quot;</span>;</span><br><span class="line">        &#125;, executor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意事项-3">注意事项</h4><p>虚拟线程适合用于大量并发的、会阻塞的任务，例如网络请求、文件读写等。不适合用于计算密集型任务，因为虚拟线程仍然运行在有限的物理线程上，过多计算仍会竞争。</p><ol><li class="lvl-3"><p><strong>不适合 CPU 密集型任务</strong></p><ul class="lvl-2"><li class="lvl-5"><p>虚拟线程运行在平台线程上，CPU 密集会阻塞 Carrier 线程</p></li><li class="lvl-5"><p>应提交给 <code>ForkJoinPool</code> 或固定大小平台线程池</p></li></ul></li><li class="lvl-3"><p><strong>避免在虚拟线程中使用 <code>synchronized</code></strong></p><ul class="lvl-2"><li class="lvl-5"><p><code>synchronized</code> 会 pin 住底层平台线程，失去虚拟线程优势</p></li><li class="lvl-5"><p>改用 <code>ReentrantLock</code>、<code>StampedLock</code>、<code>Semaphore</code> 等</p></li></ul></li><li class="lvl-3"><p><strong>ThreadLocal 使用需谨慎</strong></p><ul class="lvl-2"><li class="lvl-5"><p>虚拟线程数量巨大 → ThreadLocal 内存泄漏风险</p></li><li class="lvl-5"><p>使用后及时 <code>remove()</code>，或改用 <code>ScopedValue</code>（Java 21 新增）</p></li></ul></li><li class="lvl-3"><p><strong>不要将虚拟线程放入传统线程池</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不推荐：虚拟线程放入传统线程池无意义</span></span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">pool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">pool.submit(() -&gt; Thread.startVirtualThread(task)); <span class="comment">// 多此一举</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确：直接使用虚拟线程执行器</span></span><br><span class="line">virtualExecutor.submit(task);</span><br></pre></td></tr></table></figure></li></ol><h2 id="线程池原理详解">线程池原理详解</h2><h3 id="ThreadPoolExecutor（标准常用）">ThreadPoolExecutor（标准常用）</h3><p>通过构造器设置核心参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="type">int</span> corePoolSize,      // 核心线程数</span></span><br><span class="line"><span class="params">    <span class="type">int</span> maximumPoolSize,   // 最大线程数</span></span><br><span class="line"><span class="params">    <span class="type">long</span> keepAliveTime,    // 空闲线程存活时间</span></span><br><span class="line"><span class="params">    TimeUnit unit,         // 时间单位</span></span><br><span class="line"><span class="params">    BlockingQueue&lt;Runnable&gt; workQueue, // 任务队列</span></span><br><span class="line"><span class="params">    ThreadFactory threadFactory,       // 线程工厂</span></span><br><span class="line"><span class="params">    RejectedExecutionHandler handler   // 拒绝策略</span></span><br><span class="line"><span class="params">)</span></span><br></pre></td></tr></table></figure><p><code>ThreadPoolExecutor</code> 使用一个 <code>AtomicInteger</code> 类型的字段 <code>ctl</code> 来同时表示 <strong>线程池状态</strong> 和 <strong>工作线程数量</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>高3位：线程池运行状态（runState）</p></li><li class="lvl-2"><p>低29位：工作线程数（workerCount）</p></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">RUNNING</span>    <span class="operator">=</span> -<span class="number">1</span> &lt;&lt; COUNT_BITS; <span class="comment">// 接受新任务，处理队列中任务</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SHUTDOWN</span>   <span class="operator">=</span>  <span class="number">0</span> &lt;&lt; COUNT_BITS; <span class="comment">// 不接受新任务，处理队列中任务</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">STOP</span>       <span class="operator">=</span>  <span class="number">1</span> &lt;&lt; COUNT_BITS; <span class="comment">// 不接受新任务，不处理队列任务，中断进行中任务</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TIDYING</span>    <span class="operator">=</span>  <span class="number">2</span> &lt;&lt; COUNT_BITS; <span class="comment">// 所有任务终止，workerCount=0，将调用 terminated()</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TERMINATED</span> <span class="operator">=</span>  <span class="number">3</span> &lt;&lt; COUNT_BITS; <span class="comment">// terminated() 已执行完毕</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 状态转换:</span></span><br><span class="line">RUNNING → SHUTDOWN （调用 shutdown()）</span><br><span class="line">          ↓</span><br><span class="line">        STOP （调用 shutdownNow()）</span><br><span class="line">          ↓</span><br><span class="line">       TIDYING （任务和线程都清空）</span><br><span class="line">          ↓</span><br><span class="line">     TERMINATED （terminated() 执行完毕）</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>内部定义了一个内部类 <code>Worker</code>，继承自 <code>AbstractQueuedSynchronizer（AQS）</code>，实现了简单的不可重入独占锁，用于控制线程执行任务时的状态。</p><p><strong>Worker 的作用</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>封装工作线程（Thread）；</p></li><li class="lvl-2"><p>持有第一个要执行的任务（firstTask）；</p></li><li class="lvl-2"><p>统计已完成任务数；</p></li><li class="lvl-2"><p>通过 AQS 实现任务执行时的“锁定”，避免中断正在运行的任务。</p></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继承AQS，使用CAS实现线程状态控制</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Worker</span> <span class="keyword">extends</span> <span class="title class_">AbstractQueuedSynchronizer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">/** Thread this worker is running in.  Null if factory fails. */</span></span><br><span class="line">    <span class="keyword">final</span> Thread thread;</span><br><span class="line">    <span class="comment">/** Initial task to run.  Possibly null. */</span></span><br><span class="line">    Runnable firstTask;</span><br><span class="line">    <span class="comment">/** Per-thread task counter */</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">long</span> completedTasks;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates with given first task and thread from ThreadFactory.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> firstTask the first task (null if none)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Worker(Runnable firstTask) &#123;</span><br><span class="line">        setState(-<span class="number">1</span>); <span class="comment">// inhibit interrupts until runWorker</span></span><br><span class="line">        <span class="built_in">this</span>.firstTask = firstTask;</span><br><span class="line">        <span class="built_in">this</span>.thread = getThreadFactory().newThread(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        runWorker(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通过CAS判断是否有线程在运行</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">tryAcquire</span><span class="params">(<span class="type">int</span> unused)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">            setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 释放线程</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">tryRelease</span><span class="params">(<span class="type">int</span> unused)</span> &#123;</span><br><span class="line">        setExclusiveOwnerThread(<span class="literal">null</span>);</span><br><span class="line">        setState(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span>        &#123; acquire(<span class="number">1</span>); &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">()</span>  &#123; <span class="keyword">return</span> tryAcquire(<span class="number">1</span>); &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span>      &#123; release(<span class="number">1</span>); &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isLocked</span><span class="params">()</span> &#123; <span class="keyword">return</span> getState() != <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">interruptIfStarted</span><span class="params">()</span> &#123;</span><br><span class="line">        Thread t;</span><br><span class="line">        <span class="keyword">if</span> (getState() &gt;= <span class="number">0</span> &amp;&amp; (t = thread) != <span class="literal">null</span> &amp;&amp; !t.isInterrupted()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                t.interrupt();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SecurityException ignore) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="VirtualThreadPerTask（虚拟线程）">VirtualThreadPerTask（虚拟线程）</h3><p>虚拟线程是轻量级线程，由 JVM 管理，底层使用少量平台线程（OS线程）调度大量虚拟线程。</p><table><thead><tr><th>维度</th><th>传统线程池（平台线程）</th><th>虚拟线程（Java 21+）</th></tr></thead><tbody><tr><td>线程成本</td><td>高（MB 级栈，OS 管理）</td><td>极低（KB 级，JVM 管理）</td></tr><tr><td>最大并发数</td><td>通常几百~几千</td><td>可达百万级</td></tr><tr><td>适用场景</td><td>CPU 密集型、定时任务</td><td>I/O 密集型（首选）</td></tr><tr><td>是否需要池化</td><td>必须池化复用</td><td>无需池化，按需创建（每个任务新建虚拟线程）</td></tr><tr><td>阻塞影响</td><td>阻塞 = 浪费线程</td><td>阻塞 = 自动挂起，不占平台线程</td></tr><tr><td>调优复杂度</td><td>高（队列、线程数、拒绝策略）</td><td>低（无需调优）</td></tr></tbody></table><blockquote><ul class="lvl-1"><li class="lvl-2"><p>轻量级线程，由 JVM 管理，不是 OS 线程</p></li><li class="lvl-2"><p>创建成本极低（可创建百万级）</p></li><li class="lvl-2"><p>阻塞时不阻塞底层 OS 线程（自动挂起/恢复）</p></li><li class="lvl-2"><p>适用于高并发 I/O 密集型场景</p></li></ul></blockquote><h4 id="虚拟线程的本质"><strong>虚拟线程的本质</strong></h4><p>虚拟线程是 <strong>Project Loom</strong> 引入的轻量级线程，由 JVM 而非操作系统管理：</p><ul class="lvl-0"><li class="lvl-2"><p>每个虚拟线程在 Java 堆中只是一个对象（约几百字节）；</p></li><li class="lvl-2"><p>虚拟线程映射到少量平台线程（Carrier Threads）上运行；</p></li><li class="lvl-2"><p>虚拟线程在执行阻塞操作（如 I/O、sleep、锁等待）时会自动 <strong>“卸载”（unmount）</strong>，让出底层平台线程，等可继续执行时再 <strong>“挂载”（mount）</strong> 到任意平台线程上继续执行。</p></li></ul><h4 id="虚拟线程的实现"><strong>虚拟线程的实现</strong></h4><p><code>Executors.newVirtualThreadPerTaskExecutor()</code> 返回的是一个 <code>ThreadPerTaskExecutor</code> 实例（内部类）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例化 ThreadPerTaskExecutor</span></span><br><span class="line"><span class="keyword">public</span> ThreadPerTaskExecutor <span class="title function_">newVirtualThreadPerTaskExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPerTaskExecutor</span>(Thread.ofVirtual().factory());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ThreadPerTaskExecutor 核心逻辑：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ThreadPerTaskExecutor</span> <span class="keyword">implements</span> <span class="title class_">Executor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ThreadFactory factory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ThreadPerTaskExecutor</span><span class="params">(ThreadFactory factory)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.factory = factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Runnable task)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(task);</span><br><span class="line">        factory.newThread(task).start(); <span class="comment">// 每次新建虚拟线程并启动</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并启动线程</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Runnable task)</span> &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> Thread.ofVirtual().unstarted(task);</span><br><span class="line">    thread.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul class="lvl-1"><li class="lvl-2"><p>每次 <code>execute(task)</code> → 创建一个全新的虚拟线程；</p></li><li class="lvl-2"><p>启动该线程执行任务；</p></li><li class="lvl-2"><p>任务执行完毕 → 虚拟线程自动销毁（GC 回收）；</p></li><li class="lvl-2"><p><strong>无队列、无线程池、无复用、无拒绝策略。</strong></p></li></ul></blockquote><h4 id="虚拟线程的特点"><strong>虚拟线程的特点</strong></h4><ol><li class="lvl-3"><p>创建成本极低</p><ul class="lvl-2"><li class="lvl-5">创建百万个虚拟线程内存开销仅几十 MB；</li><li class="lvl-5">对比：创建 1000 个平台线程可能就耗尽内存或 OS 线程限制。</li></ul></li><li class="lvl-3"><p><strong>阻塞不阻塞平台线程</strong></p><ul class="lvl-2"><li class="lvl-5">当虚拟线程执行 <code>socket.read()</code>, <code>Thread.sleep()</code>, <code>synchronized</code>, <code>Lock.lock()</code> 等操作时，JVM 会自动将其从 Carrier Thread 上卸载，让 Carrier Thread 去执行其他虚拟线程；</li><li class="lvl-5">当 I/O 完成或锁可用时，虚拟线程被重新调度执行；</li><li class="lvl-5"><strong>平台线程始终处于忙碌状态，无“线程饥饿”问题。</strong></li></ul></li><li class="lvl-3"><p><strong>无需线程池管理</strong></p><ul class="lvl-2"><li class="lvl-5">传统线程池是为了复用昂贵的平台线程；</li><li class="lvl-5">虚拟线程足够便宜，复用无意义，反而增加复杂度；</li><li class="lvl-5">“一个任务一个线程”变成最优实践。</li></ul></li></ol><h3 id="ForkJoinPool-（并行窃取）">ForkJoinPool （并行窃取）</h3><p>Java 7 引入的并发工具类，位于 <code>java.util.concurrent</code> 包中，专为 <strong>分治算法（Divide and Conquer）</strong> 和 <strong>并行任务处理</strong> 设计。它在 Java 8 的 <code>parallelStream()</code>、<code>CompletableFuture</code> 默认线程池中被广泛使用，是现代 Java 高性能并行计算的核心基础设施。</p><blockquote><p>其主旨是将大任务分成若干小任务，之后再并行对这些小任务进行计算，最终汇总这些任务的结果。 类似map-reduce</p></blockquote><h4 id="核心思想"><strong>核心思想</strong></h4><p>ForkJoinPool采取<strong>工作窃取算法</strong>（<strong>work-stealing</strong>），以避免工作线程由于拆分了任务之后的join等待过程。这样处于空闲的工作线程将从其他工作线程的队列中主动去窃取任务来执行。</p><ul class="lvl-0"><li class="lvl-2"><p><strong>工作窃取（Work-Stealing）</strong>：空闲线程从其他线程的任务队列“偷”任务执行，提高 CPU 利用率；</p></li><li class="lvl-2"><p><strong>轻量级任务调度</strong>：避免传统线程池中任务入队/出队的锁竞争；</p></li><li class="lvl-2"><p><strong>递归任务分解</strong>：支持任务“fork”拆分子任务，“join”合并结果。</p></li></ul><blockquote><p><strong>工作窃取</strong>：当某个线程的任务队列中没有可执行任务的时候，从其他线程的任务队列中窃取任务来执行，以充分利用工作线程的计算能力，减少线程由于获取不到任务而造成的空闲浪费。</p><p>ForkJoinPool中的所有线程都会尝试查找并执行提交到线程池中由其他活动创建的任务，如果不存在这些任务，则进行阻塞</p><p>在 ForkJoinPool 中，线程池中每个工作线程（ForkJoinWorkerThread）都对应一个任务队列（WorkQueue），工作线程优先处理来自自身队列的任务（LIFO或FIFO顺序，参数 mode 决定），然后以FIFO的顺序随机窃取其他队列中的任务。</p><p>在ForkJoinpool中，工作任务的队列都采用双端队列Deque容器。在通常使用队列都在队尾插入，在队头消费以实现FIFO。而为了实现工作窃取，会改成工作线程在工作队列上LIFO,而窃取其他线程的任务的时候，从队列头部取获取。</p></blockquote><p><strong>其中的核心类</strong>：</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><code>ForkJoinPool</code></td><td>线程池主类，管理线程、调度任务</td></tr><tr><td><code>ForkJoinWorkerThread</code></td><td>工作线程，每个线程绑定一个 WorkQueue</td></tr><tr><td><code>WorkQueue</code></td><td>双端队列（Deque），存储待执行任务，支持 LIFO（本线程取）和 FIFO（其他线程偷）</td></tr><tr><td><code>ForkJoinTask</code></td><td>任务抽象基类（类似 Runnable），支持 fork/join</td></tr><tr><td><code>RecursiveTask&lt;T&gt;</code></td><td>有返回值的递归任务（继承 ForkJoinTask）</td></tr><tr><td><code>RecursiveAction</code></td><td>无返回值的递归任务</td></tr></tbody></table><h4 id="工作窃取机制">工作窃取机制</h4><p><strong>WorkQueue 结构</strong></p><ul class="lvl-0"><li class="lvl-2"><p>每个 <code>ForkJoinWorkerThread</code> 拥有一个 <code>WorkQueue</code>；</p></li><li class="lvl-2"><p><code>WorkQueue</code> 是 <strong>双端队列（Deque）</strong>；</p></li><li class="lvl-2"><p>本线程操作队列尾部（LIFO）→ 减少竞争，利于缓存局部性；</p></li><li class="lvl-2"><p>其他线程偷任务从队列头部（FIFO）→ 避免偷“刚提交的大任务”，偷“老任务”更公平；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// runState bits: SHUTDOWN must be negative, others arbitrary powers of two</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span>  <span class="variable">RSLOCK</span>     <span class="operator">=</span> <span class="number">1</span>;        <span class="comment">//</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span>  <span class="variable">RSIGNAL</span>    <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">1</span>;    <span class="comment">//    信号</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span>  <span class="variable">STARTED</span>    <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">2</span>;    <span class="comment">//    开始</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span>  <span class="variable">STOP</span>       <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">29</span>;    <span class="comment">//    停止</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span>  <span class="variable">TERMINATED</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">30</span>;    <span class="comment">//    销毁</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span>  <span class="variable">SHUTDOWN</span>   <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">31</span>;    <span class="comment">//    关闭</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 工作队列</span></span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">WorkQueue</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">INITIAL_QUEUE_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">13</span>; <span class="comment">// 初始容量 8k</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAXIMUM_QUEUE_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">26</span>; <span class="comment">// 最大容量 64M</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> scanState;    <span class="comment">// versioned, &lt;0: inactive; odd:scanning</span></span><br><span class="line">    <span class="type">int</span> stackPred;             <span class="comment">// pool stack (ctl) predecessor</span></span><br><span class="line">    <span class="type">int</span> nsteals;               <span class="comment">// 抢断次数</span></span><br><span class="line">    <span class="type">int</span> hint;                  <span class="comment">// 随机化和窃取的索引</span></span><br><span class="line">    <span class="type">int</span> config;                <span class="comment">// pool index and mode</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> qlock;        <span class="comment">// 1: locked, &lt; 0: terminate; else 0</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> base;         <span class="comment">// index of next slot for poll</span></span><br><span class="line">    <span class="type">int</span> top;                   <span class="comment">// index of next slot for push</span></span><br><span class="line">    ForkJoinTask&lt;?&gt;[] array;   <span class="comment">// the elements (initially unallocated)</span></span><br><span class="line">    <span class="keyword">final</span> ForkJoinPool pool;   <span class="comment">// the containing pool (may be null)</span></span><br><span class="line">    <span class="keyword">final</span> ForkJoinWorkerThread owner; <span class="comment">// 工作线程，默认线程数量等于处理器的核心数</span></span><br><span class="line">    <span class="keyword">volatile</span> Thread parker;    <span class="comment">// == owner during call to park; else null</span></span><br><span class="line">    <span class="keyword">volatile</span> ForkJoinTask&lt;?&gt; currentJoin;  <span class="comment">// task being joined in awaitJoin</span></span><br><span class="line">    <span class="keyword">volatile</span> ForkJoinTask&lt;?&gt; currentSteal; <span class="comment">// mainly used by helpStealer</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>工作窃取（Work-Stealing）流程</strong></p><blockquote><p>线程A空闲<br>│<br>▼<br>随机选择一个其他线程B的 WorkQueue<br>│<br>▼<br>从线程B的 WorkQueue 头部窃取一个任务<br>│<br>▼<br>执行窃取的任务</p></blockquote><p>窃取操作是无锁或低竞争的（通过 CAS + 位运算优化），极大减少线程间同步开销。</p><h4 id="内部状态与调度">内部状态与调度</h4><ol><li class="lvl-3"><p><strong>ctl（控制状态）</strong></p><p>类似 <code>ThreadPoolExecutor</code>，<code>ForkJoinPool</code> 使用一个 <code>long</code> 类型字段 <code>ctl</code> 表示：</p><ul class="lvl-2"><li class="lvl-5"><p>低 32 位：活跃/空闲线程数；</p></li><li class="lvl-5"><p>高 32 位：用于唤醒、创建线程等信号。</p></li></ul></li><li class="lvl-3"><p><strong>任务提交方式</strong></p><p>外部队列是 FIFO，内部队列是 LIFO + 支持窃取。</p><ul class="lvl-2"><li class="lvl-5"><p><strong>外部提交（External Submissions）</strong>：如 <code>pool.submit(task)</code> → 进入 <code>Submission Queue</code>（共享队列）；</p></li><li class="lvl-5"><p><strong>内部 fork（Internal Forks）</strong>：如 <code>task.fork()</code> → 进入当前线程的 <code>WorkQueue</code> 尾部。</p></li></ul></li><li class="lvl-3"><p><strong>线程唤醒机制</strong></p><p>当任务提交到空队列或新任务到来时，<code>ForkJoinPool</code> 会尝试：</p><ul class="lvl-2"><li class="lvl-5"><p>唤醒一个空闲线程，或创建新线程（不超过最大并行度）；</p></li><li class="lvl-5"><p>使用“缓存行填充” + “伪共享避免”优化并发性能。</p></li></ul></li></ol><h4 id="fork-与-join-原理">fork() 与 join() 原理</h4><p>任务拆分+合并</p><blockquote><p>在ForkJoinPool中，任务的拆分和合并是通过继承自RecursiveAction或RecursiveTask的类来实现的。</p><p>开发者需要实现compute方法来定义任务的处理逻辑。</p><ol><li class="lvl-3"><p>当一个大任务被拆分成多个小任务时，这些小任务会被提交到ForkJoinPool中并行执行。</p></li><li class="lvl-3"><p>当所有小任务都执行完成后，它们的结果会被合并起来得到大任务的处理结果。</p></li></ol></blockquote><p><strong>fork()</strong></p><p>如果是 ForkJoinWorkerThread  推入自己的 WorkQueue（LIFO）。否则提交到公共队列（common pool 的 submission queue）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> ForkJoinTask&lt;V&gt; <span class="title function_">fork</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">    <span class="keyword">if</span> (t <span class="keyword">instanceof</span> ForkJoinWorkerThread)</span><br><span class="line">        ((ForkJoinWorkerThread) t).workQueue.push(<span class="built_in">this</span>); <span class="comment">// 推入当前线程队列尾部</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ForkJoinPool.common.externalPush(<span class="built_in">this</span>); <span class="comment">// 外部线程提交到共享队列</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>join()</strong></p><p>调用 doJoin()  如果任务未完成，当前线程会尝试帮助执行其他任务，或阻塞等待（通过 <code>ManagedBlocker</code> 或 <code>park</code>）；</p><p><strong>不会傻等，而是“帮助执行”或“窃取任务”，提高 CPU 利用率。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">join</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> s;</span><br><span class="line">    <span class="keyword">if</span> ((s = doJoin() &amp; DONE_MASK) != NORMAL)</span><br><span class="line">        reportException(s);</span><br><span class="line">    <span class="keyword">return</span> getRawResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="并行度（Parallelism）">并行度（Parallelism）</h4><p>默认并行度 = <code>Runtime.getRuntime().availableProcessors()</code>；可通过构造函数指定：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>并行度 ≠ 线程数：线程数可能略多（补偿阻塞），但活跃线程数 ≈ 并行度；</p></li><li class="lvl-2"><p>可通过 <code>ForkJoinPool.commonPool()</code> 获取全局共享池（默认并行度）。</p></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ForkJoinPool</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(Math.min(MAX_CAP, Runtime.getRuntime().availableProcessors()), <span class="comment">// CPU核心数</span></span><br><span class="line">         defaultForkJoinWorkerThreadFactory, <span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置并行度参数</span></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">ForkJoinPool</span><span class="params">(<span class="type">int</span> parallelism,                         // 并行度：最大 <span class="number">32767</span></span></span><br><span class="line"><span class="params">                     ForkJoinWorkerThreadFactory factory,    // 线程创建工厂类</span></span><br><span class="line"><span class="params">                     UncaughtExceptionHandler handler,        // 异常处理接口（因未捕获异常突然终止时执行）</span></span><br><span class="line"><span class="params">                     <span class="type">int</span> mode,                                // 异步模式：FIFO_QUEUE，LIFO_QUEUE,默认LIFO</span></span><br><span class="line"><span class="params">                     String workerNamePrefix)</span> &#123;               <span class="comment">//工作线程名称前缀</span></span><br><span class="line">    <span class="built_in">this</span>.workerNamePrefix = workerNamePrefix;</span><br><span class="line">    <span class="built_in">this</span>.factory = factory;</span><br><span class="line">    <span class="built_in">this</span>.ueh = handler;</span><br><span class="line">    <span class="built_in">this</span>.config = (parallelism &amp; SMASK) | mode;</span><br><span class="line">    <span class="type">long</span> <span class="variable">np</span> <span class="operator">=</span> (<span class="type">long</span>)(-parallelism); <span class="comment">// offset ctl counts</span></span><br><span class="line">    <span class="built_in">this</span>.ctl = ((np &lt;&lt; AC_SHIFT) &amp; AC_MASK) | ((np &lt;&lt; TC_SHIFT) &amp; TC_MASK);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认线程池工厂类</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">DefaultForkJoinWorkerThreadFactory</span></span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">ForkJoinWorkerThreadFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> ForkJoinWorkerThread <span class="title function_">newThread</span><span class="params">(ForkJoinPool pool)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ForkJoinWorkerThread</span>(pool);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="其他说明">其他说明</h4><ul class="lvl-0"><li class="lvl-2"><p>Java 8+ 中的 <code>parallelStream() </code> 默认使用 <code>ForkJoinPool.commonPool()</code>，任务被自动拆分为 <code>ForkJoinTask</code> 并并行执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.parallelStream().map(...).filter(...).collect(...); </span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p>CompletableFuture（默认异步执行器），默认使用  <code>ForkJoinPool.commonPool()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture.supplyAsync(() -&gt; task());</span><br><span class="line"><span class="comment">// 如果 commonPool 被阻塞（如大量 IO），会影响所有 parallelStream 和 CompletableFuture，可引入自定义线程池</span></span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ForkJoinPool</span>(<span class="number">8</span>);</span><br><span class="line">CompletableFuture.supplyAsync(() -&gt; task(), pool);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">介绍几种线程池的基本概念、使用案例以及注意事项，和各自的底层原理实现。</summary>
    
    
    
    <category term="Java" scheme="https://pengline.github.io/categories/Java/"/>
    
    <category term="多线程" scheme="https://pengline.github.io/categories/Java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
    <category term="Java多线程" scheme="https://pengline.github.io/tags/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    <category term="ThreadPoolExecutor" scheme="https://pengline.github.io/tags/ThreadPoolExecutor/"/>
    
    <category term="线程池" scheme="https://pengline.github.io/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
    <category term="Executors" scheme="https://pengline.github.io/tags/Executors/"/>
    
    <category term="VirtualThreadPerTask" scheme="https://pengline.github.io/tags/VirtualThreadPerTask/"/>
    
    <category term="WorkStealingPool" scheme="https://pengline.github.io/tags/WorkStealingPool/"/>
    
    <category term="ForkJoinTask" scheme="https://pengline.github.io/tags/ForkJoinTask/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 系统如何搭建 Kubernetes 集群</title>
    <link href="https://pengline.github.io/2025/09/09/84c118df8b3e4db4a1e3557e7633f8e8/"/>
    <id>https://pengline.github.io/2025/09/09/84c118df8b3e4db4a1e3557e7633f8e8/</id>
    <published>2025-09-09T02:43:40.646Z</published>
    <updated>2025-09-16T00:49:10.829Z</updated>
    
    <content type="html"><![CDATA[<p>在Ubuntu24 上安装 Kubernetes 集群的详细过程，包括：节点安装调试、网络插件安装、Dashboard安装、Nginx 部署测试。</p><h2 id="基础安装">基础安装</h2><h3 id="系统环境设置">系统环境设置</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 永久关闭防火墙：</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">disable</span> --now ufw</span><br><span class="line"><span class="comment"># 设置为亚洲的上海时区</span></span><br><span class="line"><span class="built_in">sudo</span> timedatectl set-timezone Asia/Shanghai</span><br><span class="line"><span class="comment"># 重启时间同步服务</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl restart systemd-timesyncd.service</span><br><span class="line"><span class="comment"># 确保时间同步服务正常运行</span></span><br><span class="line">timedatectl status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 闭Swap分区</span></span><br><span class="line"><span class="built_in">sudo</span> swapoff -a</span><br><span class="line"><span class="built_in">sudo</span> sed -i <span class="string">&#x27;/swap/d&#x27;</span> /etc/fstab</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装policycoreutils软件包</span></span><br><span class="line"><span class="built_in">sudo</span> apt install -y policycoreutils</span><br><span class="line"><span class="comment"># 检查selinux关闭状态</span></span><br><span class="line">sestatus</span><br></pre></td></tr></table></figure><h3 id="系统参数配置">系统参数配置</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加主机名映射</span></span><br><span class="line"><span class="built_in">sudo</span> vi /etc/hosts</span><br><span class="line">    192.168.159.200 master200</span><br><span class="line">    192.168.159.201 slave201</span><br><span class="line">    192.168.159.202 slave202</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置内核参数：</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | sudo tee /etc/sysctl.d/k8s.conf</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class="line"><span class="string">net.ipv4.ip_forward = 1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> sysctl --system</span><br><span class="line"></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | sudo tee /etc/modules-load.d/k8s.conf</span></span><br><span class="line"><span class="string">overlay</span></span><br><span class="line"><span class="string">br_netfilter</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> modprobe overlay</span><br><span class="line"><span class="built_in">sudo</span> modprobe br_netfilter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置所需的 sysctl 参数，参数在重新启动后保持不变</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | sudo tee /etc/sysctl.d/k8s.conf</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables  = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="string">net.ipv4.ip_forward                 = 1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用 sysctl 参数而不重新启动</span></span><br><span class="line"><span class="built_in">sudo</span> sysctl --system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 系统变量在你的 sysctl 配置中被设置为 1：</span></span><br><span class="line">sysctl net.bridge.bridge-nf-call-iptables net.bridge.bridge-nf-call-ip6tables net.ipv4.ip_forward</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指令确认 br_netfilter 和 overlay 模块被加载：</span></span><br><span class="line">lsmod | grep br_netfilter</span><br><span class="line">lsmod | grep overlay</span><br></pre></td></tr></table></figure><h3 id="安装containerd容器">安装containerd容器</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装Containerd：</span></span><br><span class="line"><span class="built_in">sudo</span> apt install -y containerd</span><br><span class="line"><span class="comment"># curl -LO https://github.com/containerd/containerd/releases/download/v1.7.13/cri-containerd-cni-1.7.13-linux-amd64.tar.gz</span></span><br><span class="line"><span class="comment"># sudo tar -zxvf cri-containerd-cni-1.7.13-linux-amd64.tar.gz -C /</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">containerd -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成配置文件：</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /etc/containerd</span><br><span class="line">containerd config default | <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/containerd/config.toml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件： 将SystemdCgroup设置为true</span></span><br><span class="line"><span class="built_in">sudo</span> sed -i <span class="string">&#x27;s/SystemdCgroup = false/SystemdCgroup = true/&#x27;</span> /etc/containerd/config.toml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改镜像</span></span><br><span class="line"><span class="built_in">sudo</span> vi /etc/containerd/config.toml</span><br><span class="line"><span class="comment"># 修改 sandbox_image 值为 registry.aliyuncs.com/google_containers/pause:3.9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> --now containerd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl restart containerd</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> containerd</span><br><span class="line"><span class="built_in">sudo</span> systemctl status containerd</span><br><span class="line"></span><br><span class="line"><span class="comment">############################################## 使用（安装nginx）</span></span><br><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">ctr image pull docker.io/library/nginx:latest</span><br><span class="line"><span class="comment"># 列出镜像</span></span><br><span class="line">ctr image <span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 删除镜像</span></span><br><span class="line">ctr image <span class="built_in">rm</span> docker.io/library/nginx:latest</span><br><span class="line"><span class="comment"># 导入镜像</span></span><br><span class="line">ctr image import image.tar</span><br><span class="line"><span class="comment"># 导出镜像</span></span><br><span class="line">ctr image <span class="built_in">export</span> image.tar docker.io/library/nginx:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建容器</span></span><br><span class="line">ctr container create docker.io/library/nginx:latest my-nginx</span><br><span class="line"><span class="comment"># 启动容器任务</span></span><br><span class="line">ctr task start my-nginx</span><br><span class="line"><span class="comment"># 停止容器任务</span></span><br><span class="line">ctr task <span class="built_in">kill</span> my-nginx</span><br><span class="line"><span class="comment"># 删除容器</span></span><br><span class="line">ctr container <span class="built_in">rm</span> my-nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看任务列表</span></span><br><span class="line">ctr task <span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">ctr task <span class="built_in">exec</span> --<span class="built_in">tty</span> --exec-id shell my-nginx /bin/sh</span><br><span class="line"><span class="comment"># 查看容器日志</span></span><br><span class="line">ctr task logs my-nginx</span><br></pre></td></tr></table></figure><h3 id="安装Kubernetes组件">安装Kubernetes组件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 必要组件</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"><span class="built_in">sudo</span> apt-get install -y apt-transport-https ca-certificates curl gpg</span><br><span class="line"></span><br><span class="line"><span class="comment">#Kubernetes 软件包仓库的公共签名密钥</span></span><br><span class="line">curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | <span class="built_in">sudo</span> gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 Kubernetes apt 仓库</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /&#x27;</span> | <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/apt/sources.list.d/kubernetes.list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新安装</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"><span class="built_in">sudo</span> apt-get install -y kubelet kubeadm kubectl</span><br><span class="line"><span class="built_in">sudo</span> apt-mark hold kubelet kubeadm kubectl</span><br><span class="line"></span><br><span class="line">kubeadm version</span><br></pre></td></tr></table></figure><h2 id="集群安装">集群安装</h2><h3 id="初始化集群">初始化集群</h3><p>在主节点上执行这行命令将主节点的镜像拉取下来：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过 kubeadm version 确定版本号</span></span><br><span class="line"><span class="built_in">sudo</span> kubeadm config images pull \</span><br><span class="line">--image-repository=registry.aliyuncs.com/google_containers \</span><br><span class="line">--kubernetes-version=v1.28.15 \</span><br><span class="line">--cri-socket=unix:///run/containerd/containerd.sock</span><br></pre></td></tr></table></figure><p>执行集群初始化，注意IP和版本以及网络地址（network、service 可保持默认，需要与其他对应）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> kubeadm init \</span><br><span class="line">--apiserver-advertise-address=192.168.159.200 \</span><br><span class="line">--image-repository=registry.aliyuncs.com/google_containers \</span><br><span class="line">--kubernetes-version=v1.28.15 \</span><br><span class="line">--service-cidr=10.96.0.0/12 \</span><br><span class="line">--pod-network-cidr=10.244.0.0/16 \</span><br><span class="line">--cri-socket=unix:///run/containerd/containerd.sock</span><br></pre></td></tr></table></figure><p>相关参数解释：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>apiserver-advertise-address：集群广播地址，用 master 节点的内网 IP。</p></li><li class="lvl-2"><p>image-repository：由于默认拉取镜像地址 <a href="http://k8s.gcr.io">k8s.gcr.io</a> 国内无法访问，这里指定阿里云镜像仓库地址。</p></li><li class="lvl-2"><p>kubernetes-version： K8s 版本，与上面安装的软件版本一致。</p></li><li class="lvl-2"><p>service-cidr：集群 Service 网段。</p></li><li class="lvl-2"><p>pod-network-cidr：集群 Pod 网段。</p></li><li class="lvl-2"><p>cri-socket：指定 cri-socket 接口，我们这里使用 unix:///var/run/cri-dockerd.sock。</p></li></ul></blockquote><p>初始化完成后如图所示：会出现两条命令，需要记录下来。</p><img src="/imgs/image-20250719175104305.png" alt="image-20250719175104305" style="zoom:50%;" /><p>在主节点上执行以下操作：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这个命令句是  kubeadm init 执行后打印的：看上图</span></span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure><h3 id="节点安装">节点安装</h3><p>在所有工作节点上执行这行命令（注意修改为自己的token）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这个命令句是  kubeadm init 执行后打印的：看上图，初始化完后的视图</span></span><br><span class="line">kubeadm <span class="built_in">join</span> 192.168.159.200:6443 \</span><br><span class="line">--token kxzrga.d74axaspi1patvof \</span><br><span class="line">--discovery-token-ca-cert-hash sha256:062b1ad988e637ae9cbeaacf0a89a35fbb5fe582ebb55768fe0ac7c7e6f2ee45 \</span><br><span class="line">--cri-socket=unix:///run/containerd/containerd.sock</span><br></pre></td></tr></table></figure><h3 id="集群查看">集群查看</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在主节点上查看所有节点：</span></span><br><span class="line">kubectl get nodes -o wide</span><br><span class="line"></span><br><span class="line"><span class="comment"># 节点</span></span><br><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 集群和dns信息</span></span><br><span class="line">kubectl cluster-info</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20250720172436281.png" alt="image-20250720172436281"></p><h3 id="网络问题">网络问题</h3><p>couldn’t get current server API group list: Get “<a href="http://localhost:8080/api?timeout=32s">http://localhost:8080/api?timeout=32s</a>”: dial tcp 127.0.0.1:8080: connect: connection refused</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># kubectl 没有使用到证书与k8s api通信，在初始化集群的时候要想使用kubectl</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 解决方法</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export KUBECONFIG=/etc/kubernetes/kubelet.conf&quot;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h3 id="NotReady（pod）">NotReady（pod）</h3><p>某些关键的 pod 没有运行起来，可以用以下方式调查原因：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看pod运行状态</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl get pods</span><br><span class="line"><span class="built_in">sudo</span> kubectl get pod --all-namespaces</span><br><span class="line"></span><br><span class="line"><span class="comment">#kube-system的 pod 状态</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl get pod -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看pod节点详情 sudo kubectl describe pod &lt;NAMESPACE_NAME&gt; -n kube-system</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl describe pod coredns-66f779496c-fjq22 -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器日志运行日志sudo kubectl logs -f -n &lt;NAMESPACE&gt; &lt;NAMESPACE_NAME&gt;</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl logs -f -n kube-system coredns-66f779496c-fjq22</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查资源限制：检查Pod的资源配置是否合理sudo kubectl get pod &lt;pod-name&gt; -o yaml</span></span><br><span class="line"><span class="comment"># 查看resources字段，确认CPU和内存限制是否满足容器需求。</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl get pod coredns-66f779496c-fjq22 -o yaml</span><br></pre></td></tr></table></figure><p>资源查看：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查节点Taints配置</span></span><br><span class="line">kubectl describe node slave201 |grep Taint</span><br><span class="line"><span class="comment"># 如果输出中包含类似 Taints: node-role.kubernetes.io/master:NoSchedule，则说明节点设置了Taints</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证CoreDNS Toleration设置</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl edit deployment coredns -n kube-system</span><br><span class="line"><span class="comment"># 检查CoreDNS的Deployment或DaemonSet YAML文件，确保其包含正确的Toleration配置。以下是示例配置：</span></span><br><span class="line"><span class="comment"># tolerations:</span></span><br><span class="line"><span class="comment">#   - key: CriticalAddonsOnly</span></span><br><span class="line"><span class="comment">#     operator: Exists</span></span><br><span class="line"><span class="comment">#   - effect: NoSchedule</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 确认资源充足</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl describe pod coredns-66f779496c-rhnb9 -n kube-system</span><br><span class="line"><span class="comment"># 如果输出中包含Insufficient cpu，则说明节点资源不足</span></span><br></pre></td></tr></table></figure><h3 id="Pending（CoreDNS）"><a href="http://docs.kubernetes.org.cn/827.html">Pending（CoreDNS）</a></h3><blockquote><p><strong>问题</strong>：coredns Pending</p><p>3 node(s) had untolerated taint {<a href="http://node.kubernetes.io/not-ready:">node.kubernetes.io/not-ready:</a> }. preemption: 0/3 nodes are available: 3 Preemption is not helpful for scheduling.</p><img src="/imgs/image-20250719214020713.png" alt="image-20250719214020713" style="zoom:67%;" /><p><strong>解决</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#########################################  查看 CoreDNS 状态</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl get pod --all-namespaces</span><br><span class="line"><span class="built_in">sudo</span> kubectl get pod -n kube-system</span><br><span class="line"><span class="built_in">sudo</span> kubectl get pods -n kube-system | grep coredns</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 CoreDNS 服务是否正常运行：</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl get svc -n kube-system | grep kube-dns</span><br><span class="line"></span><br><span class="line"><span class="comment">#  CoreDNS 配置</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl edit configmap coredns -n kube-system</span><br><span class="line"><span class="comment"># 常见配置项说明</span></span><br><span class="line"><span class="comment"># kubernetes：解析 Kubernetes 内部域名。</span></span><br><span class="line"><span class="comment"># forward：将未匹配的域名请求转发到上游 DNS。</span></span><br><span class="line"><span class="comment"># cache：启用 DNS 缓存，提高查询效率。</span></span><br><span class="line"><span class="comment"># reload：自动加载配置变更。</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl edit deployment coredns -n kube-system</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">######################################### 解决 DNS 功能</span></span><br><span class="line"><span class="comment"># 报错内容：3 node(s) had untolerated taint &#123;env_role: &#125;. preemption: 0/3 nodes are available: 3 Preemption is not helpful for scheduling..</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl describe pod coredns-58fbbbd8c5-9f9hl -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查一下看看节点是否被打污点了: node节点变成了NoSchedule</span></span><br><span class="line">kubectl describe node master200 |grep Taint</span><br><span class="line"></span><br><span class="line"><span class="comment"># 出错：去掉污点</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl taint node master200 env_role:NoSchedule-</span><br><span class="line"><span class="built_in">sudo</span> kubectl taint node slave201 env_role:NoSchedule-</span><br><span class="line"><span class="built_in">sudo</span> kubectl taint node slave202 env_role:NoSchedule-</span><br></pre></td></tr></table></figure></blockquote><h3 id="启动">启动</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart kubelet</span><br><span class="line"><span class="built_in">sudo</span> systemctl restart containerd</span><br></pre></td></tr></table></figure><h2 id="网络插件"><a href="https://kubernetes.io/zh-cn/docs/concepts/cluster-administration/addons/">网络插件</a></h2><p>除了coredns必选外，其他三个插件选其一即可。</p><p><strong>检查 <code>kubelet</code> 是否正常</strong></p><p>CNI 插件依赖 <code>kubelet</code>，如果 <code>kubelet</code> 没有正确指定 CNI 目录，则会失败：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">journalctl -u kubelet -f | grep cni</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果看到如下报错：failed to read CNI config /etc/cni/net.d: no such file or directory</span></span><br><span class="line"><span class="comment"># 则说明 CNI 目录没有配置正确，需要重启 `kubelet`：</span></span><br><span class="line">systemctl restart kubelet</span><br><span class="line"></span><br><span class="line"><span class="comment"># Kubelet 需要在 /opt/cni/bin/ 目录找到 CNI 可执行文件：如果为空，则 CNI 没有正确安装，需要重新安装 CNI 插件。</span></span><br><span class="line"><span class="built_in">ls</span> -l /opt/cni/bin/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 /etc/cni/net.d/ 是否有 CNI 配置文件：正常情况下应有 CNI 配置文件,如果没有，请重新安装 CNI 插件。</span></span><br><span class="line"><span class="built_in">ls</span> -l /etc/cni/net.d/</span><br></pre></td></tr></table></figure><h3 id="coredns">coredns</h3><p>DNS 是使用集群插件 管理器自动启动的内置的 Kubernetes 服务。</p><blockquote><p>从 Kubernetes v1.12 开始，CoreDNS 是推荐的 DNS 服务器，取代了 kube-dns。 如果 你的集群原来使用 kube-dns，你可能部署的仍然是 kube-dns 而不是 CoreDNS。</p></blockquote><p>重新安装  <a href="https://docker.aityp.com/image/quay.io/prometheus/busybox:latest">镜像</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除Deployment和ConfigMap</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl delete deployment coredns -n kube-system \</span><br><span class="line"><span class="built_in">sudo</span> kubectl delete configmaps coredns -n kube-system</span><br><span class="line"><span class="comment"># 清理集群角色和绑定</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl delete clusterrolebindings system:coredns \</span><br><span class="line"><span class="built_in">sudo</span> kubectl delete clusterroles system:coredns</span><br><span class="line"><span class="comment"># 删除ServiceAccount</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl delete serviceaccounts coredns -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新CoreDNS配置并验证，Kubernetes会自动重新创建CoreDNS Pod</span></span><br><span class="line"><span class="comment"># sudo kubectl delete pod -l k8s-app=kube-dns -n kube-system</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载部署脚本文件：</span></span><br><span class="line">wget https://raw.githubusercontent.com/coredns/deployment/master/kubernetes/deploy.sh</span><br><span class="line"><span class="built_in">chmod</span> +x deploy.sh</span><br><span class="line">apt -y install jq</span><br><span class="line"><span class="comment"># 下载coredns.yaml.sed文件： -O coredns.yaml</span></span><br><span class="line">wget https://raw.githubusercontent.com/coredns/deployment/master/kubernetes/coredns.yaml.sed</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改clusterIP（如果需要）： 默认的clusterIP为10.96.0.10，如果需要修改，可以执行以下命令：</span></span><br><span class="line">./deploy.sh -i 10.96.0.10 &gt; coredns.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更换源 image: coredns/coredns:1.9.4  </span></span><br><span class="line"><span class="comment"># 为    image: swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/coredns/coredns:1.9.4</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl apply -f coredns.yaml</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> kubectl get pod --all-namespaces</span><br><span class="line"><span class="built_in">sudo</span> kubectl get pods -n kube-system -w</span><br><span class="line"><span class="built_in">sudo</span> kubectl get pods -n kube-system -l k8s-app=kube-dns</span><br><span class="line"></span><br><span class="line"><span class="comment">######################################### 验证 DNS 功能</span></span><br><span class="line">vim busybox.yaml</span><br><span class="line"><span class="comment"># 输入 :set paste解决编辑YML文件时，遇到自动缩进导致格式混乱的问题</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">name: busybox</span><br><span class="line">namespace: default</span><br><span class="line">spec:</span><br><span class="line">containers:</span><br><span class="line">  - name: busybox</span><br><span class="line">    image: swr.cn-north-4.myhuaweicloud.com/ddn-k8s/quay.io/prometheus/busybox</span><br><span class="line">    <span class="built_in">command</span>:</span><br><span class="line">      - <span class="built_in">sleep</span></span><br><span class="line">      - <span class="string">&quot;3600&quot;</span></span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">  restartPolicy: Always</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> kubectl apply -f busybox.yaml</span><br><span class="line"><span class="built_in">sudo</span> watch kubectl get pods busybox</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一旦该 pod 运行，您就可以在环境中执行 nslookup。如果您看到Server的内容，则 DNS 工作正常</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl <span class="built_in">exec</span> -ti busybox -- nslookup kubernetes.default</span><br></pre></td></tr></table></figure><h3 id="flannel"><a href="https://github.com/flannel-io/flannel">flannel</a></h3><p>由 CoreOS 开发的项目 Flannel，可能是最直接和最受欢迎的 CNI 插件。</p><blockquote><p>它是容器编排系统中最成熟的网络结构示例之一，旨在实现更好的容器间和主机间网络。随着 CNI 概念的兴起，Flannel CNI 插件算是早期的入门。</p><p>与其他方案相比，Flannel 相对容易安装和配置。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">curl -LO https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class="line"><span class="comment"># 修改 kube-flannel.yml </span></span><br><span class="line"><span class="comment"># 将 image: quay.io/coreos/flannel:v0.13.1-rc2 修改为 </span></span><br><span class="line"><span class="comment">#  image: swr.cn-north-4.myhuaweicloud.com/ddn-k8s/quay.io/coreos/flannel:v0.13.1-rc2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> kubectl apply -f kube-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="comment">#监控安装过程</span></span><br><span class="line"><span class="built_in">sudo</span> watch kubectl get all -o wide -n kube-flannel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看pod状态</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl get pod -n kube-flannel</span><br><span class="line"><span class="built_in">sudo</span> kubectl get pod --all-namespaces</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看服务节点状态</span></span><br><span class="line">kubectl get nodes</span><br><span class="line">kubectl get nodes -o wide</span><br></pre></td></tr></table></figure><h3 id="calico"><a href="https://docs.tigera.io/calico/latest/getting-started/kubernetes/quickstart">calico</a></h3><p>Calico 是 Kubernetes 生态系统中另一种流行的网络选择。</p><blockquote><p>虽然 Flannel 被公认为是最简单的选择，但 Calico 以其性能、灵活性而闻名。Calico 的功能更为全面，不仅提供主机和 pod 之间的网络连接，还涉及网络安全和管理。Calico CNI 插件在 CNI 框架内封装了 Calico 的功能。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装Tigera Calico操作符和自定义资源</span></span><br><span class="line">curl -LO https://raw.githubusercontent.com/projectcalico/calico/v3.30.2/manifests/tigera-operator.yaml</span><br><span class="line"><span class="comment"># 修改镜像quay.io/tigera/operator:v1.38.3 到国内 https://docker.aityp.com/</span></span><br><span class="line"><span class="comment"># image: swr.cn-north-4.myhuaweicloud.com/ddn-k8s/quay.io/tigera/operator:v1.38.3</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl apply -f tigera-operator.yaml</span><br><span class="line"><span class="built_in">sudo</span> kubectl delete -f tigera-operator.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载客户端资源文件</span></span><br><span class="line">curl -LO https://raw.githubusercontent.com/projectcalico/calico/v3.30.2/manifests/custom-resources.yaml</span><br><span class="line"><span class="comment"># 修改pod的网段地址</span></span><br><span class="line">sed -i <span class="string">&#x27;s/cidr: 192.168.0.0/cidr: 10.244.0.0/g&#x27;</span> custom-resources.yaml</span><br><span class="line"><span class="built_in">sudo</span> kubectl apply -f custom-resources.yaml</span><br><span class="line"><span class="built_in">sudo</span> kubectl delete -f custom-resources.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监控</span></span><br><span class="line"><span class="built_in">sudo</span> watch kubectl get all -o wide -n calico-system</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> kubectl describe pod csi-node-driver-ks4k9 -n calico-system</span><br><span class="line"><span class="built_in">sudo</span> kubectl get pod -n calico-system</span><br><span class="line"><span class="built_in">sudo</span> kubectl get pod --all-namespaces</span><br></pre></td></tr></table></figure><h3 id="cilium">cilium</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/cilium/cilium/v1.12/install/kubernetes/quick-install.yaml</span><br></pre></td></tr></table></figure><h2 id="Dashboard"><a href="https://github.com/kubernetes/dashboard/releases">Dashboard</a></h2><p>一定要与k8s版本对应，在官网查看支持的版本。</p><p><img src="/imgs/image-20250720163701810.png" alt="image-20250720163701810"></p><h3 id="安装插件">安装插件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看k8s 版本Version: v1.28.15</span></span><br><span class="line">kubectl version</span><br><span class="line"></span><br><span class="line">wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml</span><br><span class="line"><span class="comment"># 把recommended.yaml里访问方式调整为nodeport,是集群外部能否访问</span></span><br><span class="line"><span class="comment"># 添加 type 和 nodePort 节点</span></span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  ports:</span><br><span class="line">    - port: 443</span><br><span class="line">      targetPort: 8443</span><br><span class="line">      nodePort: 30012</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改镜像</span></span><br><span class="line"><span class="comment"># image 前加 swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/， 如下：</span></span><br><span class="line"><span class="comment"># image: swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/kubernetesui/dashboard:v2.7.0</span></span><br><span class="line"><span class="comment"># image: swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/kubernetesui/metrics-scraper:v1.0.8</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> kubectl apply -f recommended.yaml</span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl get all -n kubernetes-dashboard</span><br><span class="line"><span class="comment"># 端口信息</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl get pod,svc -n kubernetes-dashboard</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问： https://192.168.159.200:30012/</span></span><br></pre></td></tr></table></figure><h3 id="获取token：方式一">获取token：方式一</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输入 :set paste解决编辑YML文件时，遇到自动缩进导致格式混乱的问题</span></span><br><span class="line">vim admin-token.yaml</span><br><span class="line"><span class="comment"># 粘贴以下内容</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: admin</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: admin</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster-admin</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: admin</span><br><span class="line">    namespace: kubernetes-dashboard</span><br><span class="line">  </span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  name: kubernetes-dashboard-token</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/service-account.name: <span class="string">&quot;admin&quot;</span></span><br><span class="line"><span class="built_in">type</span>: kubernetes.io/service-account-token</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> kubectl apply -f admin-token.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看kubernetes-dashboard下面的secret</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl get secret -n kubernetes-dashboard</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看登录token(获取令牌)</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl describe secret kubernetes-dashboard-token -n kubernetes-dashboard</span><br><span class="line"><span class="built_in">sudo</span> kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep admin-user | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="获取token：方式二">获取token：方式二</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建Service Account</span></span><br><span class="line">kubectl create serviceaccount dashboard-admin-sa -n kubernetes-dashboard</span><br><span class="line"><span class="comment"># 绑定ClusterRole</span></span><br><span class="line">kubectl create clusterrolebinding dashboard-admin-sa-binding \</span><br><span class="line">  --clusterrole=cluster-admin \</span><br><span class="line">  --serviceaccount=kubernetes-dashboard:dashboard-admin-sa</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 获取Token信息</span></span><br><span class="line">kubectl -n kubernetes-dashboard get secret $(kubectl -n kubernetes-dashboard get sa dashboard-admin-sa -o jsonpath=<span class="string">&quot;&#123;.secrets[0].name&#125;&quot;</span>) -o jsonpath=<span class="string">&quot;&#123;.data.token&#125;&quot;</span> | <span class="built_in">base64</span> --decode</span><br></pre></td></tr></table></figure><h3 id="常见问题及解答">常见问题及解答</h3><table><thead><tr><th>问题</th><th>答案</th></tr></thead><tbody><tr><td>1. 创建Service Account时提示权限不足</td><td>确保你有足够的权限在集群中创建Service Account。如果你是集群管理员，可以尝试使用<code>cluster-admin</code>权限。</td></tr><tr><td>2. 获取Token信息时提示找不到Secret</td><td>确认Service Account名称是否正确，且是否已经成功创建。可以通过<code>kubectl get sa</code>命令查看Service Account列表。</td></tr><tr><td>3. 登录时提示Token无效</td><td>确认Token信息是否正确复制，且Token是否已经过期。Token的有效期通常是24小时，过期后需要重新创建。</td></tr><tr><td>4. 无法打开Kubernetes Dashboard</td><td>确认Kubernetes Dashboard是否已经正确安装并启动。可以通过<code>kubectl get pods -n kubernetes-dashboard</code>命令查看Dashboard的运行状态。</td></tr><tr><td>5. 登录后无法看到集群资源</td><td>确认Service Account是否已经绑定到正确的ClusterRole，且ClusterRole是否拥有足够的权限。</td></tr></tbody></table><h3 id="效果展示">效果展示</h3><p><img src="/imgs/image-20250720172611409.png" alt="image-20250720172611409"></p><p><img src="/imgs/image-20250720172701262.png" alt="image-20250720172701262"></p><h2 id="部署nginx">部署nginx</h2><p><code>vim nginx-deploy.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx-deploy</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-deploy</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx-deploy</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx-deploy</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">registry.cn-shenzhen.aliyuncs.com/xiaohh-docker/nginx:1.25.4</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx-deploy</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-svc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">nodePort:</span> <span class="number">30080</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx-deploy</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br></pre></td></tr></table></figure><p>部署并查看</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> kubectl apply -f nginx-deploy.yaml</span><br><span class="line"><span class="built_in">sudo</span> kubectl get all -o wide</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问</span></span><br><span class="line">kubectl get svc</span><br><span class="line">kubectl describe service nginx-svc</span><br><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 页面  http://192.168.159.200:30080/</span></span><br></pre></td></tr></table></figure><img src="/imgs/image-20250720161241610.png" alt="image-20250720161241610" style="zoom:57%;" />]]></content>
    
    
    <summary type="html">Ubuntu24 如何安装 k8s 集群，配置网络和 Dashboard 插件，搭建Nginx服务。</summary>
    
    
    
    <category term="CICD" scheme="https://pengline.github.io/categories/CICD/"/>
    
    <category term="k8s" scheme="https://pengline.github.io/categories/CICD/k8s/"/>
    
    
    <category term="containerd" scheme="https://pengline.github.io/tags/containerd/"/>
    
    <category term="docker-compose" scheme="https://pengline.github.io/tags/docker-compose/"/>
    
    <category term="k8s" scheme="https://pengline.github.io/tags/k8s/"/>
    
    <category term="Ubuntu" scheme="https://pengline.github.io/tags/Ubuntu/"/>
    
    <category term="Kubernetes" scheme="https://pengline.github.io/tags/Kubernetes/"/>
    
    <category term="CoreDNS" scheme="https://pengline.github.io/tags/CoreDNS/"/>
    
    <category term="Calico" scheme="https://pengline.github.io/tags/Calico/"/>
    
    <category term="Dashboard" scheme="https://pengline.github.io/tags/Dashboard/"/>
    
  </entry>
  
  <entry>
    <title>Web 系统中 CPU 飙高的可能原因分析</title>
    <link href="https://pengline.github.io/2025/09/08/957a28884b7b4f9b92591bf81eb174fd/"/>
    <id>https://pengline.github.io/2025/09/08/957a28884b7b4f9b92591bf81eb174fd/</id>
    <published>2025-09-08T03:51:36.694Z</published>
    <updated>2025-09-09T01:43:21.270Z</updated>
    
    <content type="html"><![CDATA[<p>CPU 飙高（CPU 使用率持续超过 80%，甚至接近100%）是系统性能中最常见的问题，可能影响系统响应速度、服务可用性甚至导致宕机。</p><p>在 Java Web 系统中，若同时使用 Redis、MySQL、ES等中间件，CPU 飙升的原因可能不仅来自 Java 应用本身，也可能由这些外部组件的交互、配置或异常行为引发，需结合相关工具，进行<strong>端到端根因分析</strong>，才能精准定位和解决。。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>Java 线程堆栈（jstack/Arthas）</p></li><li class="lvl-2"><p>GC 情况（jstat）</p></li><li class="lvl-2"><p>中间件慢查询日志（Redis/MySQL/ES）</p></li><li class="lvl-2"><p>连接池/线程池监控</p></li><li class="lvl-2"><p>系统资源指标（CPU、上下文切换、I/O）</p></li></ul></blockquote><p>以下从 <strong>Java 应用层、Redis、MySQL、系统交互层</strong> 等维度深入分析 CPU 飙升的可能原因。</p><h2 id="Java-应用层">Java 应用层</h2><p>高并发、高吞吐的业务消耗较多CPU资源，如果CPU资源未达到瓶颈，属于正常业务场景。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看 cpu 占用率高的线程</span></span><br><span class="line">ps H -eo user,pid,ppid,tid,<span class="keyword">time</span>,%cpu,cmd --<span class="built_in">sort</span>=%cpu</span><br><span class="line"></span><br><span class="line"><span class="comment">#  查看占用内存最多的程序</span></span><br><span class="line">ps aux|<span class="built_in">head</span> -1;ps aux|grep -v PID|<span class="built_in">sort</span> -rn -k +4|<span class="built_in">head</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看占用cpu最多的程序</span></span><br><span class="line">ps aux|<span class="built_in">head</span> -1;ps aux|grep -v PID|<span class="built_in">sort</span> -rn -k +3|<span class="built_in">head</span></span><br></pre></td></tr></table></figure><h3 id="死循环或业务逻辑异常">死循环或业务逻辑异常</h3><ul class="lvl-0"><li class="lvl-2"><p>某个 Controller 或 Service 方法陷入死循环（如 while(true)、递归无终止）。</p></li><li class="lvl-2"><p>复杂业务逻辑（如多重嵌套循环、大 List 遍历、未分页的全表遍历）。</p></li><li class="lvl-2"><p>递归调用无终止条件或深度过大。</p></li><li class="lvl-2"><p>正则表达式回溯爆炸（如 <code>.*.*.*</code> 匹配长字符串）。</p></li></ul><h3 id="GC-频繁（Full-GC-Young-GC）">GC 频繁（Full GC / Young GC）</h3><ul class="lvl-0"><li class="lvl-2"><p>内存泄漏 → 对象堆积 → 触发 Full GC → STW + CPU 飙升。</p></li><li class="lvl-2"><p>大对象分配、缓存未清理、MyBatis 一级缓存过大等。</p></li><li class="lvl-2"><p>GC 线程本身是 CPU 密集型（尤其是 ParallelGC、G1 并发阶段）。</p></li><li class="lvl-2"><p>内存泄漏或对象创建过快，导致 Full GC 频繁触发。</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过 `jstat`、`jstack`、GC 日志分析。</span></span><br><span class="line">jstat -gcutil &lt;pid&gt; 1000  <span class="comment"># 查看 GC 频率和耗时</span></span><br><span class="line">jmap -histo:live &lt;pid&gt;    <span class="comment"># 查看对象分布</span></span><br></pre></td></tr></table></figure><h3 id="线程池配置不当-锁竞争">线程池配置不当 / 锁竞争</h3><ul class="lvl-0"><li class="lvl-2"><p>线程池过小 → 请求堆积 → 重试/超时 → CPU 忙等（瞬时大量请求涌入，线程池满负荷运行）。</p></li><li class="lvl-2"><p>synchronized / ReentrantLock 竞争激烈 → 线程 BLOCKED → 上下文切换频繁 → CPU 飙升。</p></li><li class="lvl-2"><p>数据库连接池耗尽 → 线程阻塞等待 → 后续请求堆积。</p></li><li class="lvl-2"><p>未做限流、降级或熔断机制，导致 CPU 被打满。</p></li><li class="lvl-2"><p>同步阻塞操作过多（如同步 I/O、锁竞争），线程频繁切换。</p></li></ul><blockquote><p>排查：<code>jstack</code> 查看大量 BLOCKED/WAITING 线程；</p><p>Arthas <code>thread -n 3</code> 查看最忙线程。</p></blockquote><h3 id="序列化-反序列化开销大">序列化/反序列化开销大</h3><ul class="lvl-0"><li class="lvl-2"><p>大量 JSON（如 FastJSON/Jackson）解析大对象（如 ES 返回万条数据）。</p></li><li class="lvl-2"><p>对象深度嵌套、循环引用、无缓存的反射调用。</p></li></ul><h3 id="算法复杂度高">算法复杂度高</h3><ul class="lvl-0"><li class="lvl-2"><p>使用了时间复杂度为 O(n²)、O(n³) 甚至更高的算法处理大数据量。</p></li><li class="lvl-2"><p>未优化的排序、搜索、正则匹配等操作在高频调用下拖垮 CPU。</p></li></ul><h3 id="Java实例CPU过高的排查方法">Java实例CPU过高的排查方法</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">top</span><br><span class="line">top -Hp 4042</span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%x\n&quot;</span>  14068  <span class="comment"># 36f4</span></span><br><span class="line">jstack 4042 | grep -a 36f4</span><br><span class="line">jstack 4042 &gt; /opt/temp.txt</span><br></pre></td></tr></table></figure><ol><li class="lvl-3"><p>使用<strong>top</strong>命令找到占用CPU较高的进程，并记录下 PID（进程号）</p><p><code>ps H -eo user,pid,ppid,tid,time,%cpu,cmd --sort=%cpu</code>  得到  4042</p><blockquote><p>或者根据 <code>jps -l</code> ，或 <code>ps -ef | grep java</code> 命令找出java应用程序对应的进程ID号</p></blockquote></li><li class="lvl-3"><p>根据进程ID查找其下的全部线程</p><p><code>top -Hp PID</code>  按照CPU使用率倒序排序  ， 如：<code>top -Hp 4042</code>  得到 14068</p><blockquote><p>或者用<strong>jstack</strong> 命令，直接查询线程状态</p></blockquote></li><li class="lvl-3"><p>将线程ID，转换为16进制</p><p><code>printf &quot;%x\n&quot;  PID</code>，如：<code>printf &quot;%x\n&quot;  14068</code>  得到  36f4</p></li><li class="lvl-3"><p>定位到具体的线程</p><p><code>jstack 进程ID| grep -a 16进制线程ID</code>， 如：<code>jstack 4042 | grep -a 36f4</code></p><blockquote><p>可能出错： <code>Unable to open socket file: target process not responding or HotSpot VM not loaded</code><br>原因分析：</p><ul class="lvl-3"><li class="lvl-2">jvm运行时会生成目录<code>/tmp/hsperfdata_&lt;username&gt;/&lt;pid&gt;</code>，用于存放jvm进程信息。</li><li class="lvl-2">jps、jstack等工具读取该目录下的pid文件获取连接信息。</li><li class="lvl-2">操作系统为了防止/tmp目录文件过多，有删除管理机制：每天用tmpwatch命令检查并删除 /tmp下超过240小时未访问过的文件和目录。</li></ul><p>解决方法：</p><ol><li class="lvl-3"><p>编辑配置，<code>vim /etc/cron.daily/tmpwatch</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加排除规则。使用 --exclude 参数来排除 hsperfdata 目录</span></span><br><span class="line">/usr/sbin/tmpwatch <span class="string">&quot;<span class="variable">$flags</span>&quot;</span> 240 /tmp --exclude=/tmp/hsperfdata_*    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 排除所有用户下的该目录：</span></span><br><span class="line">/usr/sbin/tmpwatch <span class="string">&quot;<span class="variable">$flags</span>&quot;</span> 240 /tmp --exclude=<span class="string">&#x27;^/tmp/hsperfdata_&#x27;</span></span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p>或者 更改 JVM 的临时目录<code>java -Djava.io.tmpdir=/data/tmpdir -jar demo.jar</code></p></li></ol></blockquote></li><li class="lvl-3"><p>将某个进程的全部堆栈信息放入临时文件</p><p><code>jstack PID &gt;  /opt/temp.txt</code> ，如：<code>jstack 4042 &gt; /opt/temp.txt</code></p></li><li class="lvl-3"><p>使用vi命令查看该文件，然后输入线程转换后的16进制数字搜索，<strong>查看线程状态</strong>，如：1006</p><p><img src="/imgs/image-20210627180320327.png" alt="image-20210627180320327"></p><blockquote><ul class="lvl-3"><li class="lvl-2"><p>线程名称：SimplePauseDetectorThread_1</p></li><li class="lvl-2"><p>线程类型：daemon</p></li><li class="lvl-2"><p>优先级prio: 5，默认是5</p></li><li class="lvl-2"><p>jvm线程id：tid=0x00007f…，jvm内部线程的唯一标识（通过java.lang.Thread.getId()获取，通常用自增方式实现。）</p></li><li class="lvl-2"><p>对应系统线程id（NativeThread ID）：nid=0xbd2，和top命令查看的线程pid对应，不过一个是10进制，一个是16进制。（通过命令：top -H -p pid，可以查看该进程的所有线程信息）</p></li><li class="lvl-2"><p>线程状态：waiting on condition / Object.wait() / waiting for monitor entry</p></li><li class="lvl-2"><p>起始栈地址：[0x00007f…]</p></li></ul><p>对于<strong>thread dump</strong>信息，主要关注的是线程的状态和其执行堆栈，堆栈信息应该逆向解读（从下往上）</p></blockquote></li></ol><h2 id="DB-层相关原因">DB 层相关原因</h2><p>在使用 MySQL 的过程中会遇到各种瓶颈问题，常见的是 IO 瓶颈，但是有时候会出现服务器 CPU 使用率超过 100%，应用页面访问慢，登录服务器负载很高。</p><h3 id="慢查询导致线程阻塞">慢查询导致线程阻塞</h3><ul class="lvl-0"><li class="lvl-2"><p>未加索引、索引失效、关联查询复杂 → SQL 执行慢 → Java 线程阻塞等待 → 请求堆积 → CPU 飙升（忙等/重试）。</p></li><li class="lvl-2"><p>MyBatis 生成 N+1 查询，循环中查数据库。</p></li></ul><blockquote><ul class="lvl-1"><li class="lvl-2"><p>MySQL <code>slow_query_log</code>、<code>SHOW PROCESSLIST</code></p></li><li class="lvl-2"><p>Arthas <code>monitor</code> 或 <code>trace</code> 拦截 Mapper 方法耗时</p></li><li class="lvl-2"><p><code>EXPLAIN</code> 分析执行计划</p></li></ul></blockquote><h3 id="连接池耗尽-事务未提交">连接池耗尽 / 事务未提交</h3><ul class="lvl-0"><li class="lvl-2"><p>Druid/HikariCP 连接池 maxActive 设置过小 → 获取连接阻塞。</p></li><li class="lvl-2"><p>事务未提交（如忘记 commit 或异常未回滚）→ 连接占用 → 后续线程阻塞。</p></li></ul><blockquote><ul class="lvl-1"><li class="lvl-2"><p>监控活跃连接数、等待线程数。</p></li><li class="lvl-2"><p>日志搜索 “wait millis”、“getConnection timeout”。</p></li></ul></blockquote><h3 id="大结果集查询-Java-处理开销">大结果集查询 + Java 处理开销</h3><ul class="lvl-0"><li class="lvl-2"><p><code>SELECT * FROM table</code> 无分页 → 返回 10 万行 → Java 端循环处理 → CPU 飙升。</p></li><li class="lvl-2"><p>ResultSet 未及时关闭 → 内存 + CPU 双重压力。</p></li></ul><h3 id="DB实例CPU过高的排查方法">DB实例CPU过高的排查方法</h3><p>SQL 问题导致 CPU 使用率过高是最常见的现象，比如 group by、order by、join 等，这些很大程度影响 SQL 执行效率，从而占用大量的系统资源。</p><ul class="lvl-0"><li class="lvl-2"><p><strong>SQL分析</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> # 查看 MySQL 进程（两种方式）</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">full</span> processlist; </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.processlist;</span><br><span class="line">     # command：执行的数据库操作类型</span><br><span class="line">     # sleep：休眠状态</span><br><span class="line">     # Query：查询状态</span><br><span class="line">     # <span class="keyword">connect</span>：连接状态</span><br><span class="line">     # <span class="type">time</span>：已经执行的时间，单位秒</span><br><span class="line">     # info：已经执行的 <span class="keyword">SQL</span></span><br><span class="line">     # state：<span class="keyword">SQL</span> 执行的状态，结果是 <span class="keyword">SQL</span> 语句整个执行状态中的一个，其中包含很多状态</span><br><span class="line"></span><br><span class="line"># 根据问题线程 id 定位 MySQL 中的 <span class="keyword">SQL</span>：</span><br><span class="line"><span class="keyword">select</span> a.user,a.host,a.db,b.thread_os_id,b.thread_id,a.id processlist_id,a.command,a.time,a.state,a.info <span class="keyword">from</span> information_schema.processlist a,performance_schema.threads b </span><br><span class="line"><span class="keyword">where</span> a.id <span class="operator">=</span> b.processlist_id <span class="keyword">and</span> b.thread_os_id<span class="operator">=</span><span class="number">32272</span>;</span><br><span class="line"></span><br><span class="line">#根据问题线程 id 查看其他监控指标：</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> performance_schema.events_statements_current </span><br><span class="line"><span class="keyword">where</span> thread_id <span class="keyword">in</span> </span><br><span class="line">    (<span class="keyword">select</span> thread_id <span class="keyword">from</span> performance_schema.threads <span class="keyword">where</span> thread_os_id <span class="operator">=</span> <span class="number">32272</span>)\G;</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p><strong>慢查询日志</strong></p><p>开启慢日志记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 开启慢日志记录</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> slow_query_log<span class="operator">=</span><span class="keyword">ON</span>;</span><br><span class="line"></span><br><span class="line"># 查看慢日志信息，日志中记录了慢<span class="keyword">SQl</span></span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;slow_query_log%&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p><strong>排查日志</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 更改排查日志为 <span class="keyword">TABLE</span> 方式，默认为 FILE 方式</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> log_output<span class="operator">=</span><span class="string">&#x27;TABLE&#x27;</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> general_log<span class="operator">=</span><span class="keyword">ON</span>;</span><br><span class="line"></span><br><span class="line"># 查询排查日志内容：</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> mysql.general_log <span class="keyword">ORDER</span> <span class="keyword">BY</span> event_time <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p><strong>其他配置</strong></p></li></ul><ol><li class="lvl-3"><p>检查 MySQL <strong>连接数</strong>当前使用是否超过限制。如果超出限制，而且之前的连接没有得到释放，那新的连接肯定会连接不到，造成连接延迟，影响效率。</p></li><li class="lvl-3"><p>MySQL 的 timeout 参数设置问题</p><ul class="lvl-2"><li class="lvl-5"><p>wait_timeout：MySQL 在关闭一个非交互的连接之前所要等待的秒数，其取值范围在 windows 系统中为 1-2147483，linux 系统中为 1-31536000，默认值 28800。</p></li><li class="lvl-5"><p>interactive_time：MySQL 在关闭一个交互的连接之前所要等待的秒数（如 mysql gui tool 中的连接），其取值范围随 wait_timeout 变动，默认值 28800。</p></li></ul><blockquote><p><strong>交互连接</strong>：即在 mysql_real_connect() 函数中使用了 CLIENT_INTERACTIVE 选项。通过 MySQL 客户端连接数据库。</p><p><strong>非交互式连接</strong>：通过 jdbc 连接数据库。</p><p>在 MySQL 默认设置下，当一个连接的空闲时间超过 8 小时后，当业务出现了高峰期，肯定会造成有太多的 TCP 连接没关闭，数据库连接数会不够用。从而会产生 CPU 占用过高，服务器告警等问题。</p><p>访问一次对数据库操作量不大，查询完数据就完成 ok 了，wait_timeout 设置在 120s 内。</p><p>在 MySQL 的官网，修改以上两个参数必须修改 interactive_timeout。如果修改 interactive_timeout，则 wait_timeout 也发生变化，如果只修改 wait_timeout，不生效。</p></blockquote></li></ol><h2 id="Redis-相关原因">Redis 相关原因</h2><p>使用不当，例如高消耗命令、热Key、大Key等，导致CPU使用率异常升高。当平均CPU使用率高于70%、连续5分钟内的CPU平均峰值使用率高于90%时。</p><p>CPU使用率高，主要分为以下三种现象：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>某个时间段</strong>，<strong>CPU使用率突然升高</strong>。高并发，数据查询操作频繁。</p></li><li class="lvl-2"><p><strong>某个数据节点的CPU使用率较高</strong>。可能是数据热点和倾斜问题。</p></li><li class="lvl-2"><p><strong>某个Proxy节点的CPU使用率较高</strong>。负载均衡问题，可能是某个IP的攻击或爬虫。</p></li></ul></blockquote><p><strong>导致CPU使用率异常的主要因素</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>高消耗命令</strong>：即时间复杂度为O(N)的命令，其中N为较大值。通常情况下，命令的时间复杂度越高，在执行时会消耗越多的资源，从而导致CPU使用率上升。例如KEYS、HGETALL或使用MGET、MSET、HMSET、HMGET一次操作大量Key等。</p><p>由于命令执行单元为单线程的特性，实例在执行高消耗命令时会引发排队导致应用响应变慢。极端情况下，甚至可能导致实例被整体阻塞，引发应用超时中断或流量跳过缓存层直接到达后端的数据库侧，引发雪崩效应。</p></li><li class="lvl-2"><p><strong>热Key</strong>：某个或某部分Key的请求访问次数显著超过其他Key时，代表此时可能产生了热Key。热Key将会消耗实例的大量CPU资源，从而影响其他Key的访问时延。并且，在集群架构中，如果热Key较为集中地分布在部分数据分片节点，可能会导致CPU使用率倾斜（个别分片的CPU使用率远超其他分片）。</p></li><li class="lvl-2"><p><strong>大Key</strong>：大Key会占用更多的内存，同时，对大Key的访问会显著增加实例的CPU负载和流量。大Key在一定程度上更容易形成热点从而造成CPU使用率高。如果大Key较为集中地分布在部分数据分片节点，可能会导致CPU使用率倾斜、带宽使用率倾斜及内存使用率倾斜。</p></li><li class="lvl-2"><p><strong>短连接</strong>：频繁地建立连接，导致实例的大量资源消耗在连接处理上。</p></li><li class="lvl-2"><p><strong>AOF</strong>：实例默认开启了AOF（append-only file），当实例处于高负载状态时，AOF的写盘行为将会导致CPU使用率升高及实例整体的响应时延增加。</p></li></ul></blockquote><h3 id="大-Key-热-Key-操作阻塞">大 Key / 热 Key 操作阻塞</h3><ul class="lvl-0"><li class="lvl-2"><p>单个 Key 数据过大（如 List 有 100 万元素），执行 <code>LRANGE</code>、<code>HGETALL</code> 等命令阻塞 Redis 单线程。</p></li><li class="lvl-2"><p>导致 Java 客户端线程长时间等待 → 超时重试 → CPU 飙升。</p></li></ul><blockquote><ul class="lvl-1"><li class="lvl-2"><p>Redis <code>SLOWLOG GET 10</code></p></li><li class="lvl-2"><p><code>redis-cli --bigkeys</code></p></li><li class="lvl-2"><p>监控 QPS、响应时间突增</p></li></ul></blockquote><h3 id="连接泄露-连接池耗尽">连接泄露 / 连接池耗尽</h3><ul class="lvl-0"><li class="lvl-2"><p>Jedis/Lettuce 连接未正确释放 → 连接池耗尽 → 获取连接阻塞 → 线程堆积 → CPU 忙等。</p></li><li class="lvl-2"><p>Lettuce 异步回调未处理异常 → 回调线程池被打满。</p></li></ul><blockquote><ul class="lvl-1"><li class="lvl-2"><p>日志中是否有 <code>Timeout waiting for connection</code>。</p></li><li class="lvl-2"><p>监控 Redis 连接数（<code>INFO clients</code>）。</p></li><li class="lvl-2"><p>Arthas <code>watch</code> 拦截 getConnection 方法。</p></li></ul></blockquote><h3 id="频繁-Pipeline-批量操作未优化">频繁 Pipeline / 批量操作未优化</h3><ul class="lvl-0"><li class="lvl-2"><p>一次 Pipeline 执行上千条命令，虽高效但若数据量大，序列化/网络开销仍高。</p></li><li class="lvl-2"><p>客户端 CPU 消耗在网络编解码或数据组装上。</p></li></ul><h3 id="Redis实例CPU过高的排查方法">Redis实例CPU过高的排查方法</h3><p>业务运行超预期，Redis开源版实例的CPU资源无法满足业务需求，可通过增加分片数、副本数。</p><h4 id="启用监控">启用监控</h4><p>可以使用metricbeat+filebeat+monitori进行监控。也可以通过redis proxy 进行代理监控。</p><h4 id="CPU使用率突然升高">CPU使用率突然升高</h4><ul class="lvl-0"><li class="lvl-2"><p><strong>排查并禁用高消耗命令</strong></p><ol><li class="lvl-5"><p>通过性能监控功能，确认CPU使用率高的具体时间段。</p></li><li class="lvl-5"><p>通过下述方法，找出高消耗的命令：</p><p>慢日志功能会记录执行超过指定时间阈值的命令。根据指定时间段和节点的慢查询语句和执行时长，可找出执行时间较长的高消耗命令。redis.conf 慢日志配置 和 查询</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行时间大于多少微秒(microsecond，1秒 = 1,000,000 微秒)的查询进行记录。</span></span><br><span class="line">slowlog-log-lower-than 1000</span><br><span class="line"><span class="comment">#最多能保存多少条日志</span></span><br><span class="line">slowlog-max-len 200</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印所有 slow log ，最大长度取决于 slowlog-max-len 选项的值</span></span><br><span class="line">SLOWLOG GET</span><br><span class="line"><span class="comment"># 只打印指定数量的 slow log日志。</span></span><br><span class="line">SLOWLOG GET number</span><br></pre></td></tr></table></figure></li><li class="lvl-5"><p>评估并禁用高风险命令和高消耗命令，例如FLUSHALL、KEYS、HGETALL等。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改配置文件redis.conf，添加如下内容，禁用命令</span></span><br><span class="line">rename-command KEYS     &quot;&quot;</span><br><span class="line">rename-command FLUSHALL &quot;&quot;</span><br><span class="line">rename-command FLUSHDB  &quot;&quot;</span><br><span class="line">rename-command CONFIG   &quot;&quot;</span><br></pre></td></tr></table></figure></li><li class="lvl-5"><p>根据业务情况，调整实例为读写分离架构，对高消耗命令或应用进行分流。</p></li></ol></li><li class="lvl-2"><p><strong>排查并优化短连接</strong></p><ol><li class="lvl-5">通过性能监控功能，确认CPU使用率高的具体时间段。</li><li class="lvl-5">在性能监控页面，查看是否有CPU使用率较高，连接数较高，但QPS（每秒访问次数）未达到预期的现象。如果有，说明可能存在短连接</li><li class="lvl-5">将短连接调整为长连接，例如使用JedisPool连接池连接。</li></ol></li><li class="lvl-2"><p><strong>关闭AOF</strong></p><p>实例默认开启了AOF（append-only file），当实例处于高负载状态时，频繁地执行AOF会一定程度上导致CPU使用率升高。</p><p>在业务允许的前提下，您可以考虑关闭持久化。另外将实例的数据备份时间设定到低访问/维护时间窗口内，降低影响。</p></li></ul><h4 id="节点CPU使用率不一致">节点CPU使用率不一致</h4><p>如果实例为<strong>集群架构</strong>或<strong>读写分离架构</strong>，实例的部分数据分片节点的CPU使用率高，而其他数据分片节点的CPU使用率较低</p><ul class="lvl-0"><li class="lvl-2"><p><strong>排查并禁用高消耗命令</strong></p><p>方法如上</p></li><li class="lvl-2"><p><strong>排查并优化热点Key</strong></p><ol><li class="lvl-5">通过性能监控功能，确认CPU使用率高的具体时间段。</li><li class="lvl-5">在实时Top Key统计的历史页面，选择CPU使用率高的数据节点，可看到CPU使用率高的时间段内有哪些热点Key。</li></ol><blockquote><ul class="lvl-3"><li class="lvl-2"><p>启用代理查询缓存功能（Proxy Query Cache），代理节点会缓存热点Key对应的请求和查询结果，当在有效时间内收到同样的请求时直接返回结果至客户端，无需和后端的数据分片交互，可改善对热点Key的发起大量读请求导致的访问倾斜。</p></li><li class="lvl-2"><p>如果热Key的产生来自于读请求，您可以将实例改造成读写分离架构来降低每个数据分片的读请求压力。</p></li></ul></blockquote></li><li class="lvl-2"><p><strong>排查并优化大Key</strong></p></li></ul><ol><li class="lvl-3"><p>Redis自带的 <code>BIGKEYS</code> 命令可以查询当前Redis中所有key的信息，对整个数据库中的键值对大小情况进行统计分析。会输出每种数据类型中最大的 big key 的信息，对于 String 类型来说，会输出最大 big key 的字节长度，对于集合类型来说，会输出最大 big key 的元素个数。<br><strong><code>BIGKEYS</code>命令会扫描整个数据库，这个命令本身会阻塞Redis</strong>，找出所有的大键，并将其以一个列表的形式返回给客户端。<br><code>redis-cli --bigkeys</code></p></li><li class="lvl-3"><p>Redis4.0之前，使用命令<code>debug object key</code>查看某个key的详细信息，包括该key的value大小等</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; DEBUG OBJECT key1</span><br><span class="line">Value at:0xb6838d20 refcount:1 encoding:raw serializedlength:9 lru:283790 lru_seconds_idle:150</span><br><span class="line"><span class="comment"># Value at:0xb6838d20：key 所在的内存地址。</span></span><br><span class="line"><span class="comment"># refcount:1：引用计数，表示该对象被引用的次数。</span></span><br><span class="line"><span class="comment"># encoding:raw：编码类型，这里是 raw ，表示这个字符串对象的编码类型。</span></span><br><span class="line"><span class="comment"># serializedlength:9：序列化后的长度。</span></span><br><span class="line"><span class="comment"># lru:283790：LRU （Least Recently Used）信息，即最近最少使用算法的相关信息，在内存淘汰策略中会用到。</span></span><br><span class="line"><span class="comment"># lru_seconds_idle:150：该 key 已空闲多久（单位为秒），也就是自从最后一次访问已经过去多少秒。</span></span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p>4.0版本及以上，更推荐使用<code>memory usag</code>命令。memory usage命令采用抽样的方式，默认抽样5个元素，所以计算是近似值，我们也可以手动指定抽样的个数。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; memory usage k1</span><br><span class="line">(<span class="built_in">integer</span>) 57<span class="comment"># 这里k1 value占用57字节内存</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; MEMORY usage hkey SAMPLES  1000</span><br><span class="line">(<span class="built_in">integer</span>) 617977753<span class="comment"># 指定SAMPLES为1000，分析hkey键内存占用617977753字节</span></span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p>通过工具 rdbtools 分析大key，可以分析静态rdb文件并生成csv格式的内存报告<br><code>rdb -c memory dump.rdb &gt; memory.csv</code></p></li></ol><p><strong>解决方法</strong></p><blockquote><ol><li class="lvl-3"><p>避免使用过大的value。如果需要存储大量的数据，可以将其拆分成多个小的value。</p></li><li class="lvl-3"><p>避免使用不必要的数据结构。例如，如果只需要存储一个字符串，就不要使用Hash或者List等数据结构。</p></li><li class="lvl-3"><p>定期清理过期的key。如果Redis中存在大量的过期key，就会导致Redis的性能下降。</p></li><li class="lvl-3"><p>对象压缩。</p></li></ol></blockquote><p>当发现存在Big Key问题时，我们需要及时采取措施来解决这个问题。下面列出几种可行的解决思路：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>分割大key</strong><br>将Big Key拆分成多个小key。这个方法比较简单，但是需要修改应用程序的代码。就像是把一个大蛋糕切成小蛋糕一样。或者尝试将Big Key转换成Redis的其他数据结构。例如，将Big Key转换成Hash，List或者Set等数据结构。</p></li><li class="lvl-2"><p><strong>对象压缩</strong><br>如果大key的产生原因主要是由于对象序列化后的体积过大，可以考虑使用压缩算法来减小对象的大小。需要在客户端使用一些压缩算法对数据进行压缩和解压缩操作，例如LZF、Snappy等。</p></li><li class="lvl-2"><p><strong>直接删除</strong><br>Redis 4.0+的版本，直接使用 <code>unlink</code>命令异步删除大key。<br>4.0以下的版本 可以考虑使用 <code>scan</code>命令，分批次删除。</p></li></ul><h2 id="系统交互与架构层面">系统交互与架构层面</h2><h3 id="缓存穿透-缓存雪崩">缓存穿透 / 缓存雪崩</h3><ul class="lvl-0"><li class="lvl-2"><p>Redis 缓存穿透 → 大量请求打到 MySQL → MySQL 压力大 → 响应慢 → Java 线程阻塞 → CPU 飙升。</p></li><li class="lvl-2"><p>缓存雪崩 → 同时失效 → 所有请求查 DB → DB 崩 → 应用重试 → CPU 打满。</p></li></ul><blockquote><p>解决方式：布隆过滤器、空值缓存、随机过期时间。</p></blockquote><h3 id="服务雪崩-级联故障">服务雪崩 / 级联故障</h3><ul class="lvl-0"><li class="lvl-2"><p>ES 查询慢 → 接口超时 → 重试 → MySQL 被拖慢 → Redis 连接池耗尽 → 整个系统线程阻塞 → CPU 飙升。</p></li></ul><blockquote><p>解决方式：熔断（Hystrix/Sentinel）、降级、超时控制。</p></blockquote><h3 id="异步任务堆积">异步任务堆积</h3><ul class="lvl-0"><li class="lvl-2"><p>使用 <code>@Async</code> 或线程池处理异步任务（如写 ES、发消息），若任务执行慢 → 任务堆积 → 线程持续运行 → CPU 飙升。</p></li></ul><blockquote><p>排查方式：监控线程池队列大小、活跃线程数。</p></blockquote><h2 id="诊断工具链">诊断工具链</h2><table><thead><tr><th>场景</th><th>工具</th></tr></thead><tbody><tr><td>Java 线程分析</td><td><code>jstack</code>、Arthas<code>thread</code>、`jstack</td></tr><tr><td>GC 分析</td><td><code>jstat -gcutil</code>、GC 日志 + GCeasy 分析</td></tr><tr><td>方法耗时</td><td>Arthas<code>trace</code>、<code>monitor</code>、<code>watch</code></td></tr><tr><td>Redis 诊断</td><td><code>redis-cli --bigkeys</code>、<code>SLOWLOG</code>、<code>INFO</code>、RedisInsight</td></tr><tr><td>MySQL 诊断</td><td><code>slow_query_log</code>、<code>SHOW PROCESSLIST</code>、<code>EXPLAIN</code>、Arthas 拦截 SQL</td></tr><tr><td>ES 诊断</td><td>Kibana Monitoring、慢日志、<code>_nodes/hot_threads</code></td></tr><tr><td>系统级</td><td><code>top -H</code>、<code>pidstat -t -p &lt;java_pid&gt;</code>、<code>perf record</code>、<code>vmstat 1</code></td></tr></tbody></table><h2 id="典型排查流程（实战步骤）">典型排查流程（实战步骤）</h2><ol><li class="lvl-3"><p><code>top</code> → 找到 Java 进程 PID，确认 CPU 高的是 Java 进程。</p></li><li class="lvl-4"><p><code>top -H -p &lt;pid&gt;</code> → 找到最耗 CPU 的线程 TID。</p></li><li class="lvl-4"><p><code>printf &quot;%x\n&quot; &lt;tid&gt;</code> → 转为 16 进制。</p></li><li class="lvl-3"><p>查看线程堆栈：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstack &lt;pid&gt; | grep &lt;hex_tid&gt; -A 30</span><br></pre></td></tr></table></figure><blockquote><ul class="lvl-3"><li class="lvl-2"><p>如果是 <code>GC task thread</code> → 查 GC。</p></li><li class="lvl-2"><p>如果是业务线程 → 看是否在循环、等锁、处理大对象。</p></li></ul></blockquote></li><li class="lvl-4"><p>检查 GC：<code>jstat -gcutil &lt;pid&gt; 1000</code> → 看 YGC/FGC 频率。</p></li><li class="lvl-4"><p>检查外部调用：</p></li></ol><ul class="lvl-0"><li class="lvl-5"><p>Arthas <code>trace com.xxx.service.* *</code> → 看哪个方法耗时高。</p></li><li class="lvl-5"><p>检查 Redis/MySQL/ES 慢日志。</p></li></ul><ol start="7"><li class="lvl-4"><p>检查连接池、线程池监控指标（如 Druid 监控页、HikariCP JMX）。</p></li><li class="lvl-4"><p>检查系统日志、业务日志是否有异常堆栈或超时记录。</p></li></ol><h2 id="优化与预防建议">优化与预防建议</h2><ul class="lvl-0"><li class="lvl-3"><p><strong>代码层</strong>：避免大循环、大对象、深递归；合理分页；异步化耗时操作。</p></li><li class="lvl-3"><p><strong>缓存层</strong>：避免大 Key；设置过期时间；使用本地缓存（Caffeine）减轻 Redis 压力。</p></li><li class="lvl-3"><p><strong>数据库层</strong>：SQL 优化 + 索引；避免 SELECT *，避免深度分页；使用连接池监控。</p></li><li class="lvl-2"><p><strong>架构层</strong>：</p><ul class="lvl-2"><li class="lvl-4">加入熔断降级（Sentinel）。</li><li class="lvl-4">设置合理的超时（Feign、RestTemplate、Redis、DB）。</li><li class="lvl-4">异步化 + 削峰填谷（MQ）。</li></ul></li><li class="lvl-2"><p><strong>监控层</strong>：</p><ul class="lvl-2"><li class="lvl-4">接入 Prometheus + Grafana + AlertManager。</li><li class="lvl-4">APM（SkyWalking/Pinpoint）监控全链路性能。</li><li class="lvl-4">日志中心（ELK）分析异常模式。</li></ul></li></ul>]]></content>
    
    
    <summary type="html">CPU 飙高通常是多因素导致，通常需要从“代码 → 线程 → 进程 → 系统 → 网络/外部”逐层排查。</summary>
    
    
    
    <category term="Java" scheme="https://pengline.github.io/categories/Java/"/>
    
    <category term="性能" scheme="https://pengline.github.io/categories/Java/%E6%80%A7%E8%83%BD/"/>
    
    
    <category term="锁竞争" scheme="https://pengline.github.io/tags/%E9%94%81%E7%AB%9E%E4%BA%89/"/>
    
    <category term="CPU飙高" scheme="https://pengline.github.io/tags/CPU%E9%A3%99%E9%AB%98/"/>
    
    <category term="CPU密集型" scheme="https://pengline.github.io/tags/CPU%E5%AF%86%E9%9B%86%E5%9E%8B/"/>
    
    <category term="阻塞" scheme="https://pengline.github.io/tags/%E9%98%BB%E5%A1%9E/"/>
    
    <category term="长连接" scheme="https://pengline.github.io/tags/%E9%95%BF%E8%BF%9E%E6%8E%A5/"/>
    
    <category term="GC频繁" scheme="https://pengline.github.io/tags/GC%E9%A2%91%E7%B9%81/"/>
    
  </entry>
  
  <entry>
    <title>缓存淘汰之 LRU 算法的几种实现方案</title>
    <link href="https://pengline.github.io/2025/09/08/0ef61c38eadc4998bd8330a817b4f01d/"/>
    <id>https://pengline.github.io/2025/09/08/0ef61c38eadc4998bd8330a817b4f01d/</id>
    <published>2025-09-08T03:47:25.473Z</published>
    <updated>2025-09-18T09:05:21.551Z</updated>
    
    <content type="html"><![CDATA[<p>LRU，全称 <strong>Least Recently Used</strong>，即<strong>最近最少使用</strong>。它是一种常用的缓存淘汰算法，也常用于虚拟内存管理。</p><p><strong>核心思想</strong>：LRU 认为“<strong>最近被使用过的数据，在将来被再次访问的概率更高；而很久没被访问的数据，将来被访问的概率也更低</strong>”。因此，当缓存空间已满，需要淘汰旧数据来存入新数据时，它会优先淘汰那个“最近最少使用”的数据。</p><h2 id="算法原理与数据结构">算法原理与数据结构</h2><p>为了实现 LRU，我们需要高效地完成两件事：</p><ol><li class="lvl-3"><p><strong>快速查找</strong>：判断一个数据是否在缓存中。</p></li><li class="lvl-3"><p><strong>快速排序</strong>：能清晰地记录数据的访问顺序（最近使用的和很久未使用的），并在需要时快速淘汰最久未使用的数据。</p></li></ol><p>单纯使用数组或链表都无法同时满足这两点。因此，LRU 通常由 <strong>哈希表（Hash Table）</strong> 和 <strong>双向链表（Doubly Linked List）</strong> 两种数据结构结合实现。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>双向链表（用于排序）</strong>：</p><ul class="lvl-3"><li class="lvl-4"><strong>作用</strong>：模拟访问顺序。链表头部是 <strong>最近使用的（Most Recently Used, MRU）</strong>，尾部是 <strong>最久未使用的（LRU）</strong>。</li><li class="lvl-4"><strong>操作</strong>：<ul class="lvl-5"><li class="lvl-6">每当一个数据被访问（<code>get</code>）或添加（<code>put</code>），它就被移动到链表头部。</li><li class="lvl-6">当需要淘汰数据时，直接删除链表尾部的节点。</li></ul></li><li class="lvl-4"><strong>为什么是双向链表？</strong> 因为删除一个节点（尤其是中间节点）需要知道其前驱节点，单链表无法在 O(1) 时间内完成。</li></ul></li><li class="lvl-2"><p><strong>哈希表（用于快速查找）</strong>：</p><ul class="lvl-3"><li class="lvl-4"><strong>作用</strong>：提供 Key 到 <strong>链表节点</strong> 的快速映射。</li><li class="lvl-4"><strong>操作</strong>：通过 Key 可以立刻找到对应的链表节点，从而在 O(1) 时间内获取值或定位节点以便将其移动到头部。</li></ul></li></ul></blockquote><h2 id="三种实现方案">三种实现方案</h2><p>可以选择链表或者是数组来构建</p><blockquote><ol><li class="lvl-3"><p><strong>数组实现</strong>，构建数组，其中每一个数据项标记一个访问时间戳，每次插入新数据项的时候，先把数组中存在的数据项的时间戳自增，并将新数据项的时间戳置为0并插入到数组中。每次访问数组中的数据项的时候，将被访问的数据项的时间戳置为0。当数组空间已满时，将时间戳最大的数据项淘汰（<em>插入、删除，时间复杂度O(n)</em>）。</p></li><li class="lvl-3"><p><strong>链表实现</strong>，每次新插入数据的时候将新数据插到链表的头部；每次缓存命中（即数据被访问），则将数据移到链表头部；那么当链表满的时候，就将链表尾部的数据丢弃（<em>访问时间复杂度为O(n)</em>）。</p></li><li class="lvl-3"><p><strong>链表+hash</strong>。当需要插入新的数据项的时候，如果新数据项在链表中存在（一般称为命中），则把该节点移到链表头部，如果不存在，则新建一个节点，放到链表头部，若缓存满了，则把链表最后一个节点删除即可。在访问数据的时候，如果数据项在链表中存在，则把该节点移到链表头部，否则返回-1。这样一来在链表尾部的节点就是最近最久未访问的数据项。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过HashMap中`key`存储Node的`key`,`value`存储Node来建立Map对Node的映射关系</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>&lt;K,V&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> K key;</span><br><span class="line">    <span class="keyword">private</span> V value;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;K,V&gt; prev;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;K,V&gt; next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote><img src="/imgs/2054920-d65a5fd3c5d276fd.png" alt="img" style="zoom: 67%;" /><blockquote><p>1、新数据插入到链表头部；<br>2、每当缓存命中（即缓存数据被访问），则将数据移到链表头部；<br>3、当链表满的时候，将链表尾部的数据丢弃。</p></blockquote><h3 id="基于数组实现">基于数组实现</h3><p>利用数组 + 时间戳 实现。避免了数组下标值的移动，但是需要遍历所有值，并比较时间戳大小。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;   基于数组实现lru   &lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 用一个数组来存储数据，给每一个数据项标记一个访问时间戳，每次插入新数据项的时候，先把数组中存在的数据项的时间戳自增，</span></span><br><span class="line"><span class="comment"> * 并将新数据项的时间戳置为0并插入到数组中。每次访问数组中的数据项的时候，将被访问的数据项的时间戳置为0</span></span><br><span class="line"><span class="comment"> * 当数组空间已满时，将时间戳最大的数据项淘汰。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Haeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> haeng2030@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/7/12 16:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrLruDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ArrLru</span> <span class="variable">arrLru</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrLru</span>(<span class="number">3</span>);</span><br><span class="line">        arrLru.add(<span class="number">11</span>);</span><br><span class="line">        arrLru.add(<span class="number">22</span>);</span><br><span class="line">        arrLru.add(<span class="number">33</span>);</span><br><span class="line">        arrLru.add(<span class="number">33</span>);</span><br><span class="line"></span><br><span class="line">        arrLru.print();</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line">        System.out.println(arrLru.get());</span><br><span class="line">        System.out.println(arrLru.get(<span class="number">22</span>));</span><br><span class="line"></span><br><span class="line">        arrLru.add(<span class="number">44</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line">        arrLru.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArrLru</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrLruNode[] datas;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> maxSize;    <span class="comment">// 数组最大大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;       <span class="comment">// 数组实际大小</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrLru</span><span class="params">(<span class="type">int</span> maxSize)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.maxSize = maxSize;</span><br><span class="line">        <span class="built_in">this</span>.datas = <span class="keyword">new</span> <span class="title class_">ArrLruNode</span>[maxSize];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Arrays.toString(datas));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> size;</span><br><span class="line">        <span class="keyword">if</span> (size == maxSize) &#123;  <span class="comment">// 满了</span></span><br><span class="line">            index = maxTS();  <span class="comment">// 替换最大遗漏的</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; datas.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (datas[i] == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (datas[i].value == value) &#123;</span><br><span class="line">                datas[i].ts = <span class="number">0</span>;</span><br><span class="line">                index = -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                datas[i].ts++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            datas[index] = <span class="keyword">new</span> <span class="title class_">ArrLruNode</span>(value);</span><br><span class="line">            size++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得最新使用的数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; datas.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (datas[i] == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (datas[i].ts == <span class="number">0</span>) &#123;</span><br><span class="line">                datas[i].ts = <span class="number">0</span>;</span><br><span class="line">                index = i;</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                datas[i].ts++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">idnex</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; datas.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (datas[i] == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (datas[i].value == value) &#123;</span><br><span class="line">                idnex = i;</span><br><span class="line">                datas[i].ts = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                datas[i].ts++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> idnex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得时间戳最大的（下标）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxTS</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">maxUserd</span> <span class="operator">=</span> datas[index].ts;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; datas.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (datas[i].ts &gt; maxUserd) &#123;</span><br><span class="line">                index = i;</span><br><span class="line">                maxUserd = datas[i].ts;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NoArgsConstructor</span></span><br><span class="line">    <span class="meta">@ToString</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ArrLruNode</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> value;       <span class="comment">// 储存数据</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">long</span> ts;      <span class="comment">// 使用时间戳</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ArrLruNode</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于链表实现">基于链表实现</h3><p>利用链表快捷的删除和插入特性实现，不涉及数据的下标移动计算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;   基于链表实现lru   &lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 每次新插入数据的时候将新数据插到链表的头部；每次缓存命中（即数据被访问），则将数据移到链表头部；那么当链表满的时候，就将链表尾部的数据丢弃。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Haeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> haeng2030@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/7/24 20:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListLru</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        LruNode&lt;String, Integer&gt; lru = <span class="keyword">new</span> <span class="title class_">LruNode</span>&lt;&gt;(<span class="number">8</span>);</span><br><span class="line">        lru.add(<span class="string">&quot;11&quot;</span>, <span class="number">11</span>);</span><br><span class="line">        lru.add(<span class="string">&quot;22&quot;</span>, <span class="number">22</span>);</span><br><span class="line">        lru.add(<span class="string">&quot;33&quot;</span>, <span class="number">33</span>);</span><br><span class="line">        lru.add(<span class="string">&quot;55&quot;</span>, <span class="number">55</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(lru.get(<span class="string">&quot;33&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------------------&quot;</span>);</span><br><span class="line">        System.out.println(lru.getHead());</span><br><span class="line">        System.out.println(lru.getTail());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        lru.print();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LruNode</span>&lt;K, V&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> ListLruNode&lt;K, V&gt; head;</span><br><span class="line">    <span class="keyword">private</span> ListLruNode&lt;K, V&gt; tail;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> maxSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LruNode</span><span class="params">(<span class="type">int</span> maxSize)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.maxSize = maxSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ListLruNode&lt;K, V&gt; <span class="title function_">getHead</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ListLruNode&lt;K, V&gt; <span class="title function_">getTail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加（当已存在key，当满了）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(K k, V v)</span> &#123;</span><br><span class="line">        ListLruNode&lt;K, V&gt; node = <span class="keyword">new</span> <span class="title class_">ListLruNode</span>&lt;&gt;(k, v);</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">            head = node;</span><br><span class="line">            head.next = tail;</span><br><span class="line">            tail = node;</span><br><span class="line">            tail.pre = head;</span><br><span class="line">            size = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListLruNode&lt;K, V&gt; parent = head;</span><br><span class="line">        <span class="keyword">if</span> (parent.key.equals(k)) &#123;</span><br><span class="line">            parent.value = v;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (parent.remove(k)) <span class="comment">// 移除已经存在的（根据key）</span></span><br><span class="line">            size--;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (size == maxSize) &#123; <span class="comment">// 满了</span></span><br><span class="line">            parent.remove();</span><br><span class="line">            size--;</span><br><span class="line">        &#125;</span><br><span class="line">        tail = parent.getTail();</span><br><span class="line"></span><br><span class="line">        node.next = parent; <span class="comment">// 插入头部</span></span><br><span class="line">        node.next.pre = node;</span><br><span class="line">        head = node;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据k获取</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(K k)</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        ListLruNode&lt;K, V&gt; parent = head;</span><br><span class="line">        <span class="keyword">if</span> (parent == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        ListLruNode&lt;K, V&gt; node = parent.get(k);</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node.key.equals(head.key))</span><br><span class="line">            <span class="keyword">return</span> node.value;</span><br><span class="line"></span><br><span class="line">        tail = parent.getTail();</span><br><span class="line"></span><br><span class="line">        node.next = head; <span class="comment">// 替换头节点</span></span><br><span class="line">        head.pre = node;</span><br><span class="line">        head = node;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        ListLruNode&lt;K, V&gt; parent = head;</span><br><span class="line">        <span class="keyword">if</span> (parent == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(parent);</span><br><span class="line"></span><br><span class="line">            parent = parent.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链表节点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListLruNode</span>&lt;K, V&gt; <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> K key;</span><br><span class="line">    <span class="keyword">public</span> V value;</span><br><span class="line">    <span class="keyword">public</span> ListLruNode&lt;K, V&gt; pre;</span><br><span class="line">    <span class="keyword">public</span> ListLruNode&lt;K, V&gt; next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListLruNode</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListLruNode</span><span class="params">(ListLruNode&lt;K, V&gt; node)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.key = node.key;</span><br><span class="line">        <span class="built_in">this</span>.value = node.value;</span><br><span class="line">        <span class="built_in">this</span>.next = node.next;</span><br><span class="line">        <span class="built_in">this</span>.pre = node.pre;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ListLruNode&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;key=&quot;</span> + key +</span><br><span class="line">                <span class="string">&quot;, value=&quot;</span> + value +</span><br><span class="line"><span class="comment">//                &quot;, pre=&quot; + pre +</span></span><br><span class="line">                <span class="string">&quot;, next=&quot;</span> + next +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> ListLruNode&lt;K, V&gt; <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line"><span class="comment">//        ListLruNode&lt;K, V&gt; node = new ListLruNode&lt;&gt;(this);</span></span><br><span class="line">        ListLruNode&lt;K, V&gt; node = (ListLruNode&lt;K, V&gt;) <span class="built_in">super</span>.clone(); <span class="comment">// 浅拷贝</span></span><br><span class="line">        node.key = <span class="built_in">this</span>.key;</span><br><span class="line">        node.value = <span class="built_in">this</span>.value;</span><br><span class="line"><span class="comment">// 深拷贝</span></span><br><span class="line">        node.pre = <span class="built_in">this</span>.pre;</span><br><span class="line">        node.next = <span class="built_in">this</span>.next;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 迭代获取</span></span><br><span class="line">    <span class="keyword">public</span> ListLruNode&lt;K, V&gt; <span class="title function_">get</span><span class="params">(K k)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.key.equals(k)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.pre != <span class="literal">null</span>)</span><br><span class="line">                <span class="built_in">this</span>.pre.next = <span class="built_in">this</span>.next; <span class="comment">// 移除该节点</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.next == <span class="literal">null</span> ? <span class="literal">null</span> : <span class="built_in">this</span>.next.get(k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得最后一个节点</span></span><br><span class="line">    <span class="keyword">public</span> ListLruNode&lt;K, V&gt; <span class="title function_">getTail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.next != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.next.getTail();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移除最后一个节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.next.remove();</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">this</span>.pre.next = <span class="literal">null</span>; <span class="comment">// 移除最后一个</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移除已存在的key节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(K k)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.key.equals(k)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.pre != <span class="literal">null</span>) &#123; <span class="comment">// 非头部</span></span><br><span class="line">                <span class="built_in">this</span>.pre.next = <span class="built_in">this</span>.next; <span class="comment">// 移除该节点</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.next != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.next.remove(k);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于链表-Hash实现">基于链表+Hash实现</h3><p>基于双链表和hash数组实现</p><p>其核心实现结合了<strong>哈希表（快速查找）<strong>和</strong>双向链表（维护访问顺序）</strong> 两种数据结构，使得所有操作都能在常数时间内完成。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>HashMap</strong>：存储 key → Node，实现 O(1) 查找。</p></li><li class="lvl-2"><p><strong>双向链表</strong>：维护访问顺序，头节点为最新访问，尾节点为最久未访问。</p></li><li class="lvl-2"><p>每次访问或插入，将节点移到头部；容量超限时，删除尾部节点。</p></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;   基于数组、链表和hash实现lru   &lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 用一个数组来存储链表节点数据，每次hash直接定位到该链表。hash冲突用双向链表。</span></span><br><span class="line"><span class="comment"> * 每次将插入、最新查找的节点添加至链表头部</span></span><br><span class="line"><span class="comment"> * 当链表数量达到最大值时，将末尾链表节点移除。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Haeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> haeng2030@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/7/12 16:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrLruMapDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 输出结果： 1，2，null，3，4</span></span><br><span class="line">        ArrLruMap&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">ArrLruMap</span>&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">        map.add(<span class="string">&quot;1&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        map.add(<span class="string">&quot;2&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(map.get(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">        map.add(<span class="string">&quot;3&quot;</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(map.get(<span class="string">&quot;2&quot;</span>));</span><br><span class="line">        map.add(<span class="string">&quot;4&quot;</span>, <span class="number">4</span>);</span><br><span class="line">        System.out.println(map.get(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">        System.out.println(map.get(<span class="string">&quot;3&quot;</span>));</span><br><span class="line">        System.out.println(map.get(<span class="string">&quot;4&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line">        map.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArrLruMap</span>&lt;K, V&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrLruMapNode&lt;K, V&gt;[] datas;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> maxSize;    <span class="comment">// 数组最大大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> size;       <span class="comment">// 数组实际大小</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrLruMap</span><span class="params">(<span class="type">int</span> maxSize)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.maxSize = maxSize;</span><br><span class="line">        <span class="built_in">this</span>.datas = <span class="keyword">new</span> <span class="title class_">ArrLruMapNode</span>[maxSize];</span><br><span class="line">        head = <span class="keyword">new</span> <span class="title class_">ArrLruMapNode</span>&lt;&gt;();</span><br><span class="line">        tail = <span class="keyword">new</span> <span class="title class_">ArrLruMapNode</span>&lt;&gt;();</span><br><span class="line">        head.after = tail;</span><br><span class="line">        tail.before = head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrLruMapNode&lt;K, V&gt; head;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrLruMapNode&lt;K, V&gt; tail;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getIndex</span><span class="params">(K key)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> (h = (key.hashCode() ^ <span class="number">32</span>) % maxSize) &lt; <span class="number">0</span> ? (h * -<span class="number">1</span>) : h;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Arrays.toString(datas));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;key must not null&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> getIndex(key);</span><br><span class="line">        ArrLruMapNode&lt;K, V&gt; data = datas[index];</span><br><span class="line">        ArrLruMapNode&lt;K, V&gt; node = <span class="keyword">new</span> <span class="title class_">ArrLruMapNode</span>&lt;&gt;(key, value);</span><br><span class="line">        ArrLruMapNode&lt;K, V&gt; temp = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (data == <span class="literal">null</span>) &#123; <span class="comment">// 新添加</span></span><br><span class="line">            datas[index] = node;</span><br><span class="line">            addToHead(node);</span><br><span class="line">            temp = node;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 更新存在的</span></span><br><span class="line">            <span class="comment">// 查找是否存在，如果不存在直接加入，否则就移除并加至头部</span></span><br><span class="line">            temp = replaceAndGet(data, key, value);</span><br><span class="line">            <span class="keyword">if</span> (temp != <span class="literal">null</span>) &#123;</span><br><span class="line">                temp.next = node;</span><br><span class="line">                node.pre = temp;</span><br><span class="line"></span><br><span class="line">                addToHead(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (temp != <span class="literal">null</span>)</span><br><span class="line">            size++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (size &gt; maxSize) &#123;  <span class="comment">// 满了</span></span><br><span class="line">            removeLast();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将节点插入到头部</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addToHead</span><span class="params">(ArrLruMapNode&lt;K, V&gt; node)</span> &#123;</span><br><span class="line">        head.after.before = node;</span><br><span class="line">        node.after = head.after;</span><br><span class="line"></span><br><span class="line">        head.after = node;</span><br><span class="line">        node.before = head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移除以前的，并加至头部</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">moveToHead</span><span class="params">(ArrLruMapNode&lt;K, V&gt; node, <span class="type">boolean</span> toHead)</span> &#123;</span><br><span class="line">        node.after.before = node.before;</span><br><span class="line">        node.before.after = node.after;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (toHead)</span><br><span class="line">            addToHead(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果存在，将已存在节点的值替换并移到头部。</span></span><br><span class="line">    <span class="comment">// 如贵不存在，返回拉链表的最后一个节点</span></span><br><span class="line">    <span class="keyword">private</span> ArrLruMapNode&lt;K, V&gt; <span class="title function_">replaceAndGet</span><span class="params">(ArrLruMapNode&lt;K, V&gt; root, K key, V value)</span> &#123;</span><br><span class="line">        ArrLruMapNode&lt;K, V&gt; node = root;</span><br><span class="line">        ArrLruMapNode&lt;K, V&gt; next = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.key.equals(key)) &#123;</span><br><span class="line"></span><br><span class="line">                node.value = value;</span><br><span class="line">                moveToHead(node, <span class="literal">true</span>);</span><br><span class="line">                next = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            next = node;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果存在，将指定的节点移至头部并返回</span></span><br><span class="line">    <span class="keyword">private</span> ArrLruMapNode&lt;K, V&gt; <span class="title function_">moveAndGet</span><span class="params">(ArrLruMapNode&lt;K, V&gt; root, K key)</span> &#123;</span><br><span class="line">        ArrLruMapNode&lt;K, V&gt; node = root;</span><br><span class="line">        ArrLruMapNode&lt;K, V&gt; temp = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.key.equals(key)) &#123;</span><br><span class="line"></span><br><span class="line">                moveToHead(node, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">                temp = node;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移除最后一个</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">removeLast</span><span class="params">()</span> &#123;</span><br><span class="line">        remove(tail.before);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移除指定节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(ArrLruMapNode&lt;K, V&gt; node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> getIndex(node.key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node.next == <span class="literal">null</span> &amp;&amp; node.pre == <span class="literal">null</span>) &#123;</span><br><span class="line">            datas[index] = <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node.next != <span class="literal">null</span>)</span><br><span class="line">                node.next.pre = node.pre;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node.pre != <span class="literal">null</span>)</span><br><span class="line">                node.pre.next = node.next;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node.pre == <span class="literal">null</span>)</span><br><span class="line">                datas[index] = node.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 移除链表中已存在的</span></span><br><span class="line">        moveToHead(node, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        size--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得指定数据</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(K key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;key must not null&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ArrLruMapNode&lt;K, V&gt; node = head.after;</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="literal">null</span> &amp;&amp; key.equals(node.key))</span><br><span class="line">            <span class="keyword">return</span> node.value;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> getIndex(key);</span><br><span class="line">        node = datas[index];</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        node = moveAndGet(node, key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node == <span class="literal">null</span> ? <span class="literal">null</span> : node.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节点</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ArrLruMapNode</span>&lt;K, V&gt; &#123;</span><br><span class="line">        K key;</span><br><span class="line">        <span class="type">int</span> hash;</span><br><span class="line">        <span class="keyword">volatile</span> V value;       <span class="comment">// 储存数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 双链表</span></span><br><span class="line">        <span class="keyword">volatile</span> ArrLruMapNode&lt;K, V&gt; before;</span><br><span class="line">        <span class="keyword">volatile</span> ArrLruMapNode&lt;K, V&gt; after;</span><br><span class="line">        <span class="comment">// hash冲突拉链链表</span></span><br><span class="line">        <span class="keyword">volatile</span> ArrLruMapNode&lt;K, V&gt; next;</span><br><span class="line">        <span class="keyword">volatile</span> ArrLruMapNode&lt;K, V&gt; pre;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ArrLruMapNode</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ArrLruMapNode</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Java-中如何应用">Java 中如何应用</h2><table><thead><tr><th>方式</th><th>优点</th><th>缺点</th><th>适用场景</th></tr></thead><tbody><tr><td>LinkedHashMap</td><td>简单、内置、代码少</td><td>非线程安全</td><td>简单单线程场景</td></tr><tr><td>手动双向链表</td><td>可控性强，适合面试</td><td>代码复杂，易出错</td><td>学习/面试/定制需求</td></tr><tr><td>Guava Cache</td><td>功能丰富，成熟稳定</td><td>性能略逊于 Caffeine</td><td>一般项目</td></tr><tr><td>Caffeine</td><td>高性能，功能强，推荐生产使用</td><td>需要引入第三方依赖</td><td>生产环境高性能缓存</td></tr></tbody></table><h3 id="使用内置类：LinkedHashMap">使用内置类：<code>LinkedHashMap</code></h3><p>最简单、最常用的方式。<code>LinkedHashMap</code> 内部维护了插入或访问顺序，通过重写 <code>removeEldestEntry()</code> 方法可以实现自动淘汰最久未使用的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LRUCache</span>&lt;K, V&gt; <span class="keyword">extends</span> <span class="title class_">LinkedHashMap</span>&lt;K, V&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LRUCache</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="comment">// accessOrder = true 表示按访问顺序排序（LRU核心）</span></span><br><span class="line">        <span class="built_in">super</span>(capacity, <span class="number">0.75f</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">removeEldestEntry</span><span class="params">(Map.Entry&lt;K, V&gt; eldest)</span> &#123;</span><br><span class="line">        <span class="comment">// 当 size &gt; capacity 时，移除最老的元素</span></span><br><span class="line">        <span class="keyword">return</span> size() &gt; capacity;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用第三方库">使用第三方库</h3><ul class="lvl-0"><li class="lvl-2"><p><strong>Guava</strong></p><p>Guava 的 <code>Cache</code> 支持多种淘汰策略（包括 LRU），还支持过期时间、加载函数等高级功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.cache.Cache;</span><br><span class="line"><span class="keyword">import</span> com.google.common.cache.CacheBuilder;</span><br><span class="line"></span><br><span class="line">Cache&lt;Integer, String&gt; cache = CacheBuilder.newBuilder()</span><br><span class="line">    .maximumSize(<span class="number">100</span>)</span><br><span class="line">    .build();</span><br><span class="line"></span><br><span class="line">cache.put(<span class="number">1</span>, <span class="string">&quot;A&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> cache.getIfPresent(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p><strong>Caffeine</strong></p><p>Caffeine 是目前 Java 生态中性能最好的本地缓存库，基于 Guava 改进，支持 Window TinyLFU 等更优算法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.github.benmanes.caffeine.cache.Cache;</span><br><span class="line"><span class="keyword">import</span> com.github.benmanes.caffeine.cache.Caffeine;</span><br><span class="line"></span><br><span class="line">Cache&lt;Integer, String&gt; cache = Caffeine.newBuilder()</span><br><span class="line">    .maximumSize(<span class="number">100</span>)</span><br><span class="line">    .build();</span><br><span class="line"></span><br><span class="line">cache.put(<span class="number">1</span>, <span class="string">&quot;A&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> cache.getIfPresent(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">LRU 是一种高效且实用的缓存淘汰策略，它通过“最近最少使用”的原则来最大化缓存的命中率。</summary>
    
    
    
    <category term="算法" scheme="https://pengline.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="缓存淘汰" scheme="https://pengline.github.io/categories/%E7%AE%97%E6%B3%95/%E7%BC%93%E5%AD%98%E6%B7%98%E6%B1%B0/"/>
    
    
    <category term="算法" scheme="https://pengline.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LRU" scheme="https://pengline.github.io/tags/LRU/"/>
    
    <category term="缓存淘汰" scheme="https://pengline.github.io/tags/%E7%BC%93%E5%AD%98%E6%B7%98%E6%B1%B0/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 数据库性能全面优化方案</title>
    <link href="https://pengline.github.io/2025/09/06/a3d9c654efa843ed8446359ed76b5d81/"/>
    <id>https://pengline.github.io/2025/09/06/a3d9c654efa843ed8446359ed76b5d81/</id>
    <published>2025-09-06T08:31:36.365Z</published>
    <updated>2025-09-06T14:06:32.392Z</updated>
    
    <content type="html"><![CDATA[<p>以下是全面、实用、分层次的 MySQL 性能优化解决方案，以及相关原理。</p><p>以 MySQL 5.7 为例说明。</p><h2 id="常用的优化方案">常用的优化方案</h2><h3 id="SQL-语句优化（最直接有效）">SQL 语句优化（最直接有效）</h3><ol><li class="lvl-3"><p><strong>避免全量查询</strong></p><p>避免查询多余的数据，尤其是敏感和 text 类型数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 不推荐</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 推荐：只查询需要的字段</span></span><br><span class="line"><span class="keyword">SELECT</span> id, name, email <span class="keyword">FROM</span> users;</span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p><strong>使用 EXPLAIN 分析执行计划</strong></p><p>分析 SQL 执行情况，以及索引利用率和连表查询性能等。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 关注：`type`（是否全表扫描）、`key`（是否用索引）、`rows`（扫描行数）、`Extra`（是否用临时表/文件排序）</span></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> user_id <span class="operator">=</span> <span class="number">100</span>;</span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p><strong>避免在 WHERE 中对字段进行函数操作或计算</strong></p><p>低版本 MySQL 不支持函数索引，会导致索引失效。MySQL8 有所改善。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 索引失效</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> <span class="keyword">YEAR</span>(created_at) <span class="operator">=</span> <span class="number">2024</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 改写为范围查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> created_at <span class="operator">&gt;=</span> <span class="string">&#x27;2024-01-01&#x27;</span> <span class="keyword">AND</span> created_at <span class="operator">&lt;</span> <span class="string">&#x27;2025-01-01&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p><strong>避免使用 OR</strong></p><p>会导致索引失效，MySQL8 有所改善。可改写为 UNION 或 IN，或其他字段添加索引。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 可能导致索引失效</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;Alice&#x27;</span> <span class="keyword">OR</span> age <span class="operator">=</span> <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 改用 UNION（如果字段都有索引）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;Alice&#x27;</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> age <span class="operator">=</span> <span class="number">25</span>;</span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p><strong>使用 LIMIT 分页优化</strong>（避免 OFFSET 大偏移）</p><p>涉及&quot;深度分页&quot;问题，可参照  <a href="https://hangline.github.io/2025/09/05/b35492bf2a96482e86fe1e77b2bc7812/">海量数据的深度分页查询解决方案</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 慢（深度分页）：OFFSET 100000</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> orders <span class="keyword">ORDER</span> <span class="keyword">BY</span> id LIMIT <span class="number">100000</span>, <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 优化：记住上一页最大ID</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> id <span class="operator">&gt;</span> <span class="number">100000</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> id LIMIT <span class="number">20</span>;</span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p><strong>避免复杂 CASE WHEN / IF 判断</strong>（尤其在 WHERE 或 JOIN 中）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 性能差：</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> orders</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">CASE</span> </span><br><span class="line">        <span class="keyword">WHEN</span> status <span class="operator">=</span> <span class="string">&#x27;paid&#x27;</span> <span class="keyword">AND</span> amount <span class="operator">&gt;</span> <span class="number">100</span> <span class="keyword">THEN</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">WHEN</span> status <span class="operator">=</span> <span class="string">&#x27;pending&#x27;</span> <span class="keyword">AND</span> created_at <span class="operator">&gt;</span> NOW() <span class="operator">-</span> <span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">DAY</span> <span class="keyword">THEN</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">ELSE</span> <span class="number">0</span> </span><br><span class="line">      <span class="keyword">END</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-------------------------------------------------------</span></span><br><span class="line"><span class="comment">-- 改写为逻辑表达式：</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> orders</span><br><span class="line"><span class="keyword">WHERE</span> (status <span class="operator">=</span> <span class="string">&#x27;paid&#x27;</span> <span class="keyword">AND</span> amount <span class="operator">&gt;</span> <span class="number">100</span>)</span><br><span class="line">   <span class="keyword">OR</span> (status <span class="operator">=</span> <span class="string">&#x27;pending&#x27;</span> <span class="keyword">AND</span> created_at <span class="operator">&gt;</span> NOW() <span class="operator">-</span> <span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">DAY</span>);</span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p><strong>避免高频的统计计算和字符截取</strong></p><p>如果某些计算是高频使用的，可以<strong>在写入时计算好并存储</strong>。或者定时或实时建立统计表（按天、按月）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 每次查询都计算：</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(create_time), <span class="keyword">MONTH</span>(create_time), <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> orders</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">YEAR</span>(create_time), <span class="keyword">MONTH</span>(create_time);</span><br><span class="line"></span><br><span class="line"><span class="comment">---------------------------预计算 + 冗余字段（空间换时间）-------------------------------------</span></span><br><span class="line"><span class="comment">-- 建表时或通过触发器/应用层写入</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> orders <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> order_year_month <span class="type">INT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询时直接使用</span></span><br><span class="line"><span class="keyword">SELECT</span> order_year_month, <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> orders</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> order_year_month;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 对该字段加索引</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_order_ym <span class="keyword">ON</span> orders(order_year_month);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 使用生成列：MySQL 支持虚拟列或存储列，自动计算并可加索引</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> orders </span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">COLUMN</span> order_year_month <span class="type">INT</span> </span><br><span class="line">GENERATED ALWAYS <span class="keyword">AS</span> (<span class="keyword">YEAR</span>(create_time) <span class="operator">*</span> <span class="number">100</span> <span class="operator">+</span> <span class="keyword">MONTH</span>(create_time)) STORED;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_order_ym <span class="keyword">ON</span> orders(order_year_month);</span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p><strong>使用临时表 / 中间表预处理复杂逻辑</strong></p><p>可分步优化、避免单条 SQL 过于复杂。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Step 1: 预处理中间结果到临时表</span></span><br><span class="line"><span class="keyword">CREATE</span> TEMPORARY <span class="keyword">TABLE</span> temp_filtered_orders <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> id, user_id, amount, </span><br><span class="line">       <span class="keyword">CASE</span> <span class="keyword">WHEN</span> amount <span class="operator">&gt;</span> <span class="number">100</span> <span class="keyword">THEN</span> <span class="string">&#x27;high&#x27;</span> <span class="keyword">ELSE</span> <span class="string">&#x27;low&#x27;</span> <span class="keyword">END</span> <span class="keyword">AS</span> level</span><br><span class="line"><span class="keyword">FROM</span> orders </span><br><span class="line"><span class="keyword">WHERE</span> create_time <span class="operator">&gt;=</span> <span class="string">&#x27;2024-01-01&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Step 2: 对临时表加索引（可选）</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_temp_user <span class="keyword">ON</span> temp_filtered_orders(user_id);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Step 3: 基于临时表做后续 JOIN / GROUP / 统计</span></span><br><span class="line"><span class="keyword">SELECT</span> u.name, t.level, <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> temp_filtered_orders t</span><br><span class="line"><span class="keyword">JOIN</span> users u <span class="keyword">ON</span> t.user_id <span class="operator">=</span> u.id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> u.name, t.level;</span><br></pre></td></tr></table></figure></li></ol><h3 id="索引优化（性能提升关键）">索引优化（性能提升关键）</h3><p><strong>不适合建立索引的列</strong></p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>tinyint 或 用以标致类型的int列。比如用以保存性别，选择性过大，最小都是超过25%了，因此没有设置索引的必要。</p></li><li class="lvl-2"><p>更新频繁的字段。</p></li><li class="lvl-2"><p>不会出现在where子句中的字段。</p></li><li class="lvl-2"><p>数据可能为null或空或0的字段</p></li><li class="lvl-2"><p>存储占用过大的，如：text，json</p></li></ul></blockquote><p><strong>适合建立索引的列</strong></p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>字段离散度越高，越适合选作索引的关键字。如主键和唯一字段（主键索引自动创建）。</p></li><li class="lvl-2"><p>很少更新的字段（因为也会牵连更新索引）。</p></li><li class="lvl-2"><p>占用存储空间少的字段。</p></li><li class="lvl-2"><p>存储空间固定的字段。</p></li><li class="lvl-2"><p>Where子句中经常使用的字段，分组字段、排序字段和多表连接字段（外键索引自动创建）。</p></li><li class="lvl-2"><p>尽量使用联合索引（前缀）</p></li></ul></blockquote><ol><li class="lvl-3"><p><strong>为常用 WHERE、JOIN、ORDER BY 字段建索引</strong></p><p>索引建立的规则需要遵守以上，否则可能适得其反，会被优化器所优化。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_user_email <span class="keyword">ON</span> users(email);</span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_order_user_status <span class="keyword">ON</span> orders(user_id, status);</span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p><strong>使用复合索引</strong>（联合索引），注意最左前缀原则</p><p>优先考虑使用联合索引，尤其是有类型状态的字段。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询条件 WHERE a=? AND b=? → 建立 (a, b)</span></span><br><span class="line"><span class="comment">-- 查询条件 WHERE b=? AND a=? → 同样可用 (a, b)，MySQL 会自动优化顺序（优化器）</span></span><br><span class="line"><span class="comment">-- 查询条件 WHERE b=? → 无法使用 (a, b) 索引，MySQL8 中有所优化，可能会用到</span></span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p><strong>避免过多索引</strong>（写操作变慢，空间占用大）</p><p>一般单表索引不超过 5 个，根据查询频率和区分度选择，优先使用联合索引</p></li><li class="lvl-3"><p><strong>使用覆盖索引</strong>（Covering Index）避免回表</p><p>尽量将查询字段都包含在索引中。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 如果索引包含 SELECT 所有字段，无需回表查主键</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_covering <span class="keyword">ON</span> orders(user_id, status, amount);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> user_id, status, amount <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> user_id <span class="operator">=</span> <span class="number">100</span>; <span class="comment">-- 走覆盖索引</span></span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p><strong>定期分析和重建索引</strong>（碎片整理）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ANALYZE <span class="keyword">TABLE</span> orders;  <span class="comment">-- 更新统计信息</span></span><br><span class="line">OPTIMIZE <span class="keyword">TABLE</span> orders; <span class="comment">-- 重建表和索引（锁表，谨慎使用）</span></span><br><span class="line"><span class="comment">-- 或使用在线工具：pt-online-schema-change / gh-ost</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="表结构与设计优化（思想习惯）">表结构与设计优化（思想习惯）</h3><ol><li class="lvl-3"><p><strong>选择合适的数据类型</strong></p><blockquote><ul class="lvl-3"><li class="lvl-2">使用 <code>TINYINT</code> 代替 <code>INT</code> 存布尔值</li><li class="lvl-2">使用 <code>VARCHAR(N)</code> 而不是 <code>TEXT</code>（如果长度可控）</li><li class="lvl-2">使用 <code>DATETIME</code> 而不是字符串存时间</li><li class="lvl-2">使用 <code>UNSIGNED</code> 无符号整数扩大范围</li></ul></blockquote></li><li class="lvl-3"><p><strong>避免 NULL，设置默认值</strong></p><p>NULL 会增加判断复杂度，索引效率略低，且可能存在歧义性。</p></li><li class="lvl-3"><p><strong>拆分大字段或大表</strong>（垂直/水平分表）</p><p>对于半结构化 JSON 大数据，可以选择存储在非关系型数据库中。</p><blockquote><ul class="lvl-3"><li class="lvl-2"><p>TEXT/BLOB 字段可拆到扩展表</p></li><li class="lvl-2"><p>历史数据归档（如 orders → orders_2024, orders_2023）</p></li></ul></blockquote></li><li class="lvl-3"><p><strong>使用合适存储引擎</strong></p><p>只有插入和查询的 日志类数据，可以使用 MyISAM 引擎</p><blockquote><ul class="lvl-3"><li class="lvl-2"><p>一般用 <strong>InnoDB</strong>（支持事务、行锁、外键）</p></li><li class="lvl-2"><p>读多写少且无事务可用 MyISAM（已基本淘汰）</p></li></ul></blockquote></li></ol><h3 id="MySQL-配置参数优化（底层原理）">MySQL 配置参数优化（底层原理）</h3><p>MySQL的<code>innodb_flush_method</code>参数控制着innodb数据文件及redo log的打开、刷写模式</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>redo log 物理日志</strong>（保证持久性），记录的是数据页的物理修改，而不是某一行或某几行修改，它用来恢复提交后的物理数据页(只能恢复到最后一次提交的位置)。</p></li><li class="lvl-2"><p><strong>undo 逻辑日志</strong> （保证原子性），用来回滚行记录到某个版本，根据每行记录进行记录。</p></li></ul></blockquote><h4 id="缓冲池（最重要）">缓冲池（最重要）</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">innodb_buffer_pool_size</span> = <span class="number">70</span>%-<span class="number">80</span>% of total RAM （专用数据库服务器）</span><br></pre></td></tr></table></figure><p>Buffer Pool 大小，会影响缓存命中率</p><blockquote><ol><li class="lvl-3"><p>在事务执行过程中，所有对数据页的修改都会先生成 redo log 记录，并写入 log buffer；在事务提交时，根据配置决定是否将 log buffer 中的日志刷入磁盘上的 redo log 文件（ib_logfile）。</p></li><li class="lvl-3"><p>事务执行期间，数据页的修改是在 Buffer Pool 中的“脏页”上直接进行的；事务提交时，并不会立即将这些脏页写回磁盘，而是标记为“可刷盘”，由后台线程（如 checkpoint、LRU flusher）异步写入。</p></li></ol></blockquote><h4 id="日志与刷盘策略（平衡性能与安全）">日志与刷盘策略（平衡性能与安全）</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安全（默认），设为2可提速（小概率丢数据）</span></span><br><span class="line"><span class="attr">innodb_flush_log_at_trx_commit</span> = <span class="number">1</span></span><br><span class="line"><span class="comment"># 安全，设为0或N可提速</span></span><br><span class="line"><span class="attr">sync_binlog</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>这两个参数是控制MySQL 磁盘写入策略以及数据安全性的关键参数：</p><blockquote><p>InnoDB默认开启内部的XA事务（基于redo log和undo log），采用日志先行的策略。</p><p>在未开启binlog的情况下，数据变更（增，删，改）会在内存中操作，并将事务顺序写入到redo log中，这时就会认为事务已经完成，响应事务提交成功。然后在以下参数设置条件下，才将内存中数据刷新合并到磁盘中。</p><p>在持久化到磁盘的过程中，如果服务器宕机等导致内存中数据丢失，该数据就会丢失。这种丢失是可以通过 recovery 重做日志，找回数据的。</p><p>缓存刷新的参数： <code>innodb_flush_log_at_trx_commit</code>（刷新方式）   <code>innodb_flush_log_at_timeout</code>（刷新频率）</p><ul class="lvl-1"><li class="lvl-2"><p><strong>innodb_flush_log_at_trx_commit=1</strong>（默认），每次事务提交，把log buffer刷到文件系统中去，并且调用文件系统的“flush”操作将缓存刷新到磁盘（如果底层硬件提供的IOPS比较差，MySQL并发会由于硬件IO而无法提升）。</p></li><li class="lvl-2"><p><strong>innodb_flush_log_at_trx_commit=0</strong>，每隔一秒，把log buffer刷到文件系统，并且调用文件系统的“flush”将缓存刷新到磁盘（可能丢失1秒的事务数据）。</p></li><li class="lvl-2"><p><strong>innodb_flush_log_at_trx_commit=2</strong>（推荐），每次事务提交，把log buffer刷到文件系统，但每隔一秒调用文件系统的“flush”将缓存刷新到磁盘（如果只是MySQL数据库挂掉了，由于文件系统没有问题，那么对应的事务数据并没有丢失。如果操作系统挂掉或重启，可能丢失1秒的事务数据）</p></li></ul></blockquote><p><strong>sync_binlog</strong></p><blockquote><p>sync_binlog 的默认值是0，像操作系统刷其他文件的机制一样，MySQL不会同步到磁盘中而是依赖操作系统来刷新binary log。</p><p>当sync_binlog =N (N&gt;0) ，MySQL 在每写 N次 二进制日志binary log时，会使用fdatasync()函数将它的写二进制日志binary log同步到磁盘中去。</p><p><mark>注:</mark>  如果启用了autocommit，那么每一个语句statement就会有一次写操作；否则每个事务对应一个写操作。</p></blockquote><h4 id="脏页控制（数据页）">脏页控制（数据页）</h4><p>把内存中被修改过，跟磁盘中的数据页不一致的数据页称为脏页</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 告知磁盘 I/O 能力：默认 200，SSD 建议 1000~5000</span></span><br><span class="line"><span class="attr">innodb_io_capacity</span>=<span class="number">2000</span></span><br><span class="line"><span class="comment"># 控制突发刷盘能力：默认 2000，可设为 io_capacity 的 2~5 倍</span></span><br><span class="line"><span class="attr">innodb_io_capacity_max</span>=<span class="number">3000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 脏页比例软上限：默认 75%（5.7）或 90%（8.0），建议 70~85%</span></span><br><span class="line"><span class="attr">innodb_max_dirty_pages_pct</span>=<span class="number">80</span></span><br><span class="line"><span class="comment"># 脏页刷盘起始水位：默认 0，建议设为 10~20，避免突增抖动</span></span><br><span class="line"><span class="attr">innodb_max_dirty_pages_pct_lwm</span>=<span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自适应刷盘：默认 ON，推荐保持开启</span></span><br><span class="line"><span class="attr">innodb_adaptive_flushing</span>=<span class="literal">ON</span></span><br><span class="line"><span class="comment"># 监控刷盘延迟：越大表示刷盘越滞后，应 &lt; 70% of redo log size</span></span><br><span class="line">Innodb_checkpoint_age=</span><br></pre></td></tr></table></figure><blockquote><ul class="lvl-1"><li class="lvl-2"><p><code>innodb_io_capacity</code> 参数用于告诉 InnoDB 存储引擎底层磁盘设备的 I/O 能力（单位：IOPS），InnoDB 会据此控制后台线程（如 Page Cleaner）每秒刷脏页的数量，从而避免过度消耗 I/O 资源或刷盘不足。 该参数值设置过小，会导致 InnoDB 低估磁盘 I/O 能力，从而限制后台刷脏页的速度，使得脏页积累速度超过刷盘速度，最终引发 Redo Log 空间不足、Checkpoint 延迟、写入阻塞等问题。</p></li><li class="lvl-2"><p><code>innodb_max_dirty_pages_pct</code> 是 Buffer Pool 中脏页比例的“软上限”，默认值在 MySQL 5.6+ 是 75%，在 MySQL 8.0 中默认是 90%。当脏页比例达到或超过该值时，InnoDB 会主动加大刷盘力度，但不会完全禁止新脏页产生。</p></li><li class="lvl-2"><p>InnoDB 内部会根据当前脏页比例 M，结合 <code>innodb_max_dirty_pages_pct</code> 和 <code>innodb_max_dirty_pages_pct_lwm</code>（低水位线，默认 0），通过一个内部算法（非公开公式）计算出一个“刷盘压力因子”，用于动态调节 Page Cleaner 线程的刷盘速度。这个因子影响每秒刷多少页，但不是简单的 0~100 百分比映射。</p></li><li class="lvl-2"><p>页比例是监控指标，不是配置参数。通过查询 <code>Innodb_buffer_pool_pages_dirty / Innodb_buffer_pool_pages_total</code> 来监控当前脏页比例，但不能“通过它去设置”任何参数 —— 设置上限应使用 <code>innodb_max_dirty_pages_pct</code>。</p></li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 监控指标：</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;Innodb_buffer_pool_pages_dirty&#x27;</span>;</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;Innodb_checkpoint_age&#x27;</span>;</span><br><span class="line"><span class="comment">-- checkpoint_age 越大，说明刷盘越滞后</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看当前脏页比例</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    VARIABLE_VALUE <span class="keyword">AS</span> dirty_pages </span><br><span class="line"><span class="keyword">FROM</span> information_schema.GLOBAL_STATUS </span><br><span class="line"><span class="keyword">WHERE</span> VARIABLE_NAME <span class="operator">=</span> <span class="string">&#x27;Innodb_buffer_pool_pages_dirty&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    VARIABLE_VALUE <span class="keyword">AS</span> total_pages </span><br><span class="line"><span class="keyword">FROM</span> information_schema.GLOBAL_STATUS </span><br><span class="line"><span class="keyword">WHERE</span> VARIABLE_NAME <span class="operator">=</span> <span class="string">&#x27;Innodb_buffer_pool_pages_total&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 计算比例</span></span><br><span class="line"><span class="keyword">SELECT</span> ROUND(</span><br><span class="line">    (dirty_pages <span class="operator">/</span> total_pages) <span class="operator">*</span> <span class="number">100</span>, <span class="number">2</span></span><br><span class="line">) <span class="keyword">AS</span> dirty_pct</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">        (<span class="keyword">SELECT</span> VARIABLE_VALUE <span class="keyword">FROM</span> information_schema.GLOBAL_STATUS <span class="keyword">WHERE</span> VARIABLE_NAME <span class="operator">=</span> <span class="string">&#x27;Innodb_buffer_pool_pages_dirty&#x27;</span>) <span class="keyword">AS</span> dirty_pages,</span><br><span class="line">        (<span class="keyword">SELECT</span> VARIABLE_VALUE <span class="keyword">FROM</span> information_schema.GLOBAL_STATUS <span class="keyword">WHERE</span> VARIABLE_NAME <span class="operator">=</span> <span class="string">&#x27;Innodb_buffer_pool_pages_total&#x27;</span>) <span class="keyword">AS</span> total_pages</span><br><span class="line">) t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;Innodb_buffer_pool_pages_%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>脏页刷盘触发的条件：</p><table><thead><tr><th>触发条件</th><th>是否字段</th><th>是否阻塞用户线程</th><th>说明</th></tr></thead><tbody><tr><td>Checkpoint 推进</td><td>是</td><td>否（异步）</td><td>最主要机制，由 redo log 空间或脏页比例驱动</td></tr><tr><td>Buffer Pool 满（LRU淘汰）</td><td>是</td><td>是（可能等待）</td><td>高并发写 + 缓冲池小 → 性能瓶颈</td></tr><tr><td>脏页比例超阈值</td><td>是</td><td>否（异步）</td><td>由<code>innodb_max_dirty_pages_pct</code>控制</td></tr><tr><td>Page Cleaner 定时任务</td><td>是</td><td>否</td><td>每秒后台刷脏，受 I/O capacity 控制</td></tr><tr><td>实例关闭（SHUTDOWN）</td><td>是</td><td>是（阻塞）</td><td>Sharp Checkpoint，刷所有脏页</td></tr><tr><td>手动命令（FLUSH/OPTIMIZE）</td><td>否</td><td>是</td><td>运维操作，谨慎执行</td></tr><tr><td>Redo Log 空间不足</td><td>是</td><td>可能阻塞写入</td><td>强制推进 checkpoint，刷对应脏页</td></tr></tbody></table><blockquote><p>mysql <strong>连坐机制</strong>：如果要刷盘的脏页相邻的数据页恰好也是脏页，就一起写入磁盘，如果邻居的邻居也是如此。</p><p>在机械硬盘时代这个策略可以减少随机IO，但如果使用固态硬盘的话随机IO的性能往往比较高，所以使用这个策略反而拖累了查询性能。因此可以通过 <code>innodb_flush_neighbors</code> 关闭这个“连坐”的策略。</p></blockquote><h4 id="连接与线程">连接与线程</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据业务调整</span></span><br><span class="line"><span class="attr">max_connections</span> = <span class="number">500</span></span><br><span class="line"><span class="comment"># 缓存线程避免频繁创建</span></span><br><span class="line"><span class="attr">thread_cache_size</span> = <span class="number">50</span></span><br></pre></td></tr></table></figure><h4 id="临时表与排序">临时表与排序</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tmp_table_size</span> = <span class="number">64</span>M</span><br><span class="line"><span class="attr">max_heap_table_size</span> = <span class="number">64</span>M</span><br><span class="line"><span class="comment"># 每连接分配，不宜过大</span></span><br><span class="line"><span class="attr">sort_buffer_size</span> = <span class="number">2</span>M</span><br></pre></td></tr></table></figure><p>修改后重启或 <code>SET GLOBAL</code> 生效，建议压测验证。</p><h3 id="监控与慢查询优化（手段穷极）">监控与慢查询优化（手段穷极）</h3><ol><li class="lvl-3"><p>开启慢查询日志</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">slow_query_log</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">slow_query_log_file</span> = /var/log/mysql/slow.log</span><br><span class="line"><span class="attr">long_query_time</span> = <span class="number">1</span>                  <span class="comment"># 超过1秒记录</span></span><br><span class="line"><span class="attr">log_queries_not_using_indexes</span> = <span class="number">1</span>    <span class="comment"># 记录未用索引的查询</span></span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p>使用工具分析慢查询</p><blockquote><ul class="lvl-3"><li class="lvl-2"><code>mysqldumpslow</code>（MySQL自带）</li><li class="lvl-2"><code>pt-query-digest</code>（Percona Toolkit，推荐）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pt<span class="operator">-</span>query<span class="operator">-</span>digest <span class="operator">/</span>var<span class="operator">/</span>log<span class="operator">/</span>mysql<span class="operator">/</span>slow.log</span><br></pre></td></tr></table></figure></blockquote></li><li class="lvl-3"><p>监控工具</p><blockquote><ul class="lvl-3"><li class="lvl-2"><strong>实时监控</strong>：<code>SHOW PROCESSLIST</code>, <code>SHOW STATUS</code>, <code>SHOW ENGINE INNODB STATUS</code></li><li class="lvl-2">可视化监控：<ul class="lvl-5"><li class="lvl-4">Prometheus + Grafana + mysqld_exporter</li><li class="lvl-4">Percona PMM（推荐）</li><li class="lvl-4">MySQL Workbench Performance Dashboard</li></ul></li></ul></blockquote></li></ol><h3 id="架构层优化（高并发-大数据）">架构层优化（高并发/大数据）</h3><ol><li class="lvl-3"><p><strong>读写分离</strong></p><p>主库写，多个从库读（通过 ProxySQL / MaxScale / 中间件路由）</p></li><li class="lvl-3"><p><strong>分库分表</strong></p><ul class="lvl-2"><li class="lvl-5">使用 ShardingSphere / MyCat / Vitess 等中间件</li><li class="lvl-5">按用户ID、时间等维度拆分</li></ul></li><li class="lvl-3"><p><strong>引入缓存层</strong></p><ul class="lvl-2"><li class="lvl-5">Redis / Memcached 缓存热点数据</li><li class="lvl-5">缓存查询结果或对象，减轻数据库压力</li></ul></li><li class="lvl-4"><p><strong>异步化与队列</strong></p></li></ol><ul class="lvl-0"><li class="lvl-5"><p>非核心写操作走消息队列（如 Kafka、RabbitMQ）</p></li><li class="lvl-5"><p>延迟写、批量写优化吞吐</p></li></ul><ol start="5"><li class="lvl-4"><p><strong>数据归档与冷热分离</strong></p></li></ol><ul class="lvl-0"><li class="lvl-5"><p>历史数据迁移到归档库或数仓（ClickHouse / Hive）</p></li><li class="lvl-5"><p>在线库只保留热数据</p></li></ul><h2 id="实用的优化方案">实用的优化方案</h2><p>实际中经常碰到的问题和优化方案。</p><h3 id="如何提高数据插入效率">如何提高数据插入效率</h3><ul class="lvl-0"><li class="lvl-2"><p>合并insert语句（批量插入）。日志量减少（binlog、undolog），日志刷盘数量和频率就减少，SQL解析也减少。</p></li><li class="lvl-2"><p>适当调高缓冲区参数值  <code>bulk_insert_buffer_size</code>。批量插入时支持更多数据。</p></li><li class="lvl-2"><p>设置 事务日志刷盘策略  <code>innodb_flush_log_at_trx_commit = 0</code>，默认为1。</p><blockquote><p>=1：每个事务提交都会刷新日志（buffer -&gt; file），和文件同步磁盘。<br>=0：每秒执行一次刷新，和文件到磁盘同步。<br>=2：每个事务会刷新日志（buffer -&gt; file），但不会立即同步磁盘。文件到磁盘同步，是每秒一次</p></blockquote></li><li class="lvl-2"><p>手动提交事务（执行完成后，统一提交事务）。</p></li></ul><h3 id="频繁更新数据的优化方案">频繁更新数据的优化方案</h3><p>频繁更新数据库可通过<strong>索引、减少锁定时间、使用批量更新、优化SQL查询、分区表和分布式数据库</strong>等手段提高性能和效率。</p><blockquote><p>其中，优化索引是一个最为基础且有效的方法，通过对数据库表进行适当的索引设计，可以显著减少查询和更新操作的时间。</p><p>索引优化不仅能加快查询速度，还能减少数据库的负载。选择合适的索引类型（如B-树索引、哈希索引等）以及正确地为表中的关键字段设置索引，可以使数据库在处理频繁更新操作时更加高效。特别是对于主键和外键的索引优化，能极大地提高数据访问和修改的速度。</p></blockquote><p><strong>优化索引</strong></p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>选择合适的索引类型</strong></p><ul class="lvl-3"><li class="lvl-4"><strong>B-树索引</strong>：适用于大多数查询操作，特别是在范围查询和排序操作中表现优异。</li><li class="lvl-4"><strong>哈希索引</strong>：适用于等值查询，但不适用于范围查询。</li><li class="lvl-4"><strong>全文索引</strong>：适用于文本搜索操作，如在文章中搜索关键词。</li></ul></li><li class="lvl-2"><p><strong>为关键字段设置索引</strong></p><p>对于主键和外键字段，设置索引可以极大地提高数据的访问和修改速度。</p><ul class="lvl-3"><li class="lvl-4"><p><strong>主键索引</strong>：主键通常是唯一的，可以显著加快数据查询和更新操作。</p></li><li class="lvl-4"><p><strong>外键索引</strong>：外键索引可以加快表之间的关联查询操作，提高数据一致性。</p></li></ul></li></ul></blockquote><p><strong>减少锁定时间</strong></p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>使用行级锁</strong>：只锁定被修改的行，减少锁定冲突，锁定时间越短，数据库并发性能就越高。</p></li><li class="lvl-2"><p><strong>使用乐观锁</strong>：乐观锁是一种减少锁定时间的策略，它假设数据冲突的概率较低，在提交数据时才进行冲突检测。</p></li></ul></blockquote><p><strong>使用批量更新</strong></p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>批量插入和更新</strong>：将多条插入操作合并为一条，可以减少数据库的I/O操作，可以显著提高数据库的性能。</p></li><li class="lvl-2"><p><strong>使用事务控制</strong>：使用事务控制可以确保数据的完整性和一致性，同时可以减少锁定时间，提高数据库的性能。</p></li></ul></blockquote><p><strong>优化SQL查询</strong></p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>避免使用复杂的嵌套查询</strong>：复杂的嵌套查询会导致数据库性能下降，尽量避免使用复杂的嵌套查询。</p></li><li class="lvl-2"><p><strong>使用查询缓存</strong>：查询缓存是一种提高数据库性能的有效方法，它将查询结果缓存到内存中，减少数据库I/O操作。</p></li></ul></blockquote><p><strong>分区表和分布式数据库</strong></p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>分区表</strong>：分区表是一种将大表拆分为多个小表的策略，减少查询和更新操作的时间，提高数据库的性能。</p></li><li class="lvl-2"><p><strong>分布式数据库</strong>：分布式数据库是一种将数据分布到多个节点上的策略，可以显著提高数据库的性能和可扩展性。</p></li></ul></blockquote><p><strong>使用缓存</strong></p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>应用层缓存</strong>：在应用层使用缓存可以减少对数据库的访问，提高系统的性能。</p></li><li class="lvl-2"><p><strong>数据库层缓存</strong>：在数据库层使用缓存可以减少数据库的I/O操作，提高数据库的性能。</p></li></ul></blockquote><p><strong>数据库集群和负载均衡</strong></p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>数据库集群</strong>：数据库集群是一种将多个数据库服务器组合在一起的策略，可以显著提高数据库的性能和可用性。</p></li><li class="lvl-2"><p><strong>负载均衡</strong>：负载均衡是一种将请求分发到多个服务器上的策略，可以显著提高系统的性能和可用性。</p></li></ul></blockquote><p><strong>数据库监控和调优</strong></p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>数据库监控</strong>：数据库监控是一种实时监控数据库性能的策略，可以及时发现和解决性能问题。</p></li><li class="lvl-2"><p><strong>数据库调优</strong>：数据库调优是一种通过调整数据库配置和参数来提高性能的策略。</p></li></ul></blockquote><p><strong>使用高效的存储引擎</strong></p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>选择合适的存储引擎</strong>：不同的存储引擎适用于不同的应用场景，选择合适的存储引擎可以显著提高数据库的性能。</p></li><li class="lvl-2"><p><strong>优化存储引擎配置</strong>：优化存储引擎的配置可以提高数据库的性能和稳定性。</p></li></ul></blockquote><p><strong>数据归档和清理</strong></p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>定期归档数据</strong>：定期归档不常用的数据，可以减少数据库的负载，提高数据库的性能。</p></li><li class="lvl-2"><p><strong>定期清理数据</strong>：定期清理无用的数据，可以减少数据库的存储空间，提高数据库的性能。</p></li></ul></blockquote><p><strong>数据库设计优化</strong></p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>规范化数据库设计</strong>：通过规范化数据库设计，可以减少数据冗余，提高数据库的性能和一致性。</p></li><li class="lvl-2"><p><strong>反规范化设计</strong>：在某些情况下，通过反规范化设计可以提高数据库的查询性能。</p></li></ul></blockquote><h3 id="内存碎片的优化方案">内存碎片的优化方案</h3><p>MySQL碎片指的是MySQL数据文件中一些不连续的空白空间，这些空间无法再被全部利用，久而久之越来越多越来越零碎。</p><p>MySQL 碎片的本质是“空间分配与回收不同步”或“空间利用率下降”。</p><h4 id="碎片产生的原因">碎片产生的原因</h4><p>MySQL 中的“碎片”通常是指由于数据的频繁增删改操作，导致存储空间未能被高效利用，从而在磁盘或内存中产生不连续、空闲但无法被有效重用的空间。碎片主要影响性能和存储效率。</p><blockquote><p>当执行插入操作时，MySQL会尝试使用空白空间，如果插入的数据刚好按照索引排序落在被删除数据的区间，可能会复用这个位置，但如果某个空白空间一直没有被大小合适的数据占用，仍然无法将其彻底占用，就形成了碎片；</p><p>【MySQL的几种删除情况】</p><blockquote><ul class="lvl-2"><li class="lvl-2"><p>drop、truncate    不管是InnoDB还是MyISAM都立刻释放磁盘空间</p></li><li class="lvl-2"><p>delete from table_name  删除全部表数据，MyISAM立刻释放磁盘空间，InnoDB不会立刻释放磁盘空间</p></li><li class="lvl-2"><p>delete from table_name where xxx     带条件的删除不管是InnoDB还是MyISAM都不会立刻释放</p></li><li class="lvl-2"><p>delete from table_name     虽然未立刻释放磁盘空间，但下次插入的时候仍然可以使用这部分空间</p></li></ul></blockquote></blockquote><p>以下是 MySQL 碎片产生的主要原因：</p><p>一、<strong>数据删除操作</strong>（DELETE）</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>删除记录后，原数据页中的空间并不会立即归还给操作系统，而是标记为“可重用”。磁盘的文件大小不会收缩。InnoDB的Purge线程会异步的来清理这些没用的索引键和行。</p></li><li class="lvl-2"><p>如果后续插入的数据大小不匹配或插入位置不连续，就会形成“空洞”，即碎片。</p></li><li class="lvl-2"><p>大量 DELETE 操作后未进行优化，碎片会持续累积。</p></li></ul></blockquote><p>二、<strong>数据更新导致行变长</strong>（UPDATE）</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>当 UPDATE 操作使某行数据长度增加（如 VARCHAR 字段内容变长），原位置空间不足时，MySQL 会将该行迁移到新的数据页，原位置留下空洞。</p></li><li class="lvl-2"><p>尤其在 InnoDB 中，行溢出或页分裂会加剧碎片。</p></li></ul><p>Innodb的最小物理存储分配单位是页(page)，而UPDATE也可能导致页分裂，频繁的页分裂，页会变得稀疏，并且被不规则的填充，所以最终数据会有碎片。例如原始数据长度varchar(100)，大规模更新数据长度为50，这样的话，有50的空间被空白了，新入库的数据不能完全利用剩余的50，这就会产生碎片。</p></blockquote><p>三、<strong>频繁的插入和删除交替操作</strong>（INSERT/DELETE）</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>高频的写入和删除会导致数据页中留下大量不连续的小块空闲空间。</p></li><li class="lvl-2"><p>这些空间可能因为太小或位置分散，无法容纳新插入的行，造成空间浪费。</p></li></ul></blockquote><p>四、<strong>自增主键中断或非顺序插入</strong></p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>按顺序写入可以减少碎片，但如果中间有删除或使用 UUID、随机主键等无序插入，会导致页内或页间数据不连续。</p></li><li class="lvl-2"><p>非顺序插入容易引发页分裂（Page Split），进而产生碎片。</p></li></ul></blockquote><p>五、<strong>页分裂</strong>（Page Split） —— InnoDB 特有</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>当一个数据页已满，而新数据需要插入到该页的中间位置时，InnoDB 会将该页一分为二（页分裂），腾出空间。</p></li><li class="lvl-2"><p>分裂后两个页可能都未填满，形成内部碎片。</p></li><li class="lvl-2"><p>频繁分裂会加剧碎片化并影响查询性能。</p></li></ul></blockquote><p>六、<strong>表结构变更</strong>（如 ALTER TABLE）</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>某些 ALTER 操作（如添加字段、修改类型）可能导致表重建或行格式变化，产生临时碎片。</p></li><li class="lvl-2"><p>在线 DDL 操作过程中也可能因中间状态产生碎片。</p></li></ul></blockquote><p>七、<strong>未及时重建表</strong></p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>MySQL 不会自动整理碎片，长期运行的表若未定期优化，碎片会持续积累。</p></li><li class="lvl-2"><p>OPTIMIZE TABLE 或 ALTER TABLE … ENGINE=InnoDB 可重建表、整理碎片，但需手动或定时执行。</p></li></ul></blockquote><p>八、<strong>存储引擎特性</strong>（如 MyISAM vs InnoDB）</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>MyISAM：删除记录后留下空洞，碎片明显，需定期执行 OPTIMIZE。</p></li><li class="lvl-2"><p>InnoDB：虽然有“插入缓冲”和“页合并”机制，但高并发写入或大量更新仍会产生碎片，尤其在独立表空间（file-per-table）模式下。</p></li></ul></blockquote><p>九、<strong>大对象字段的存储和更新</strong>（BLOB/TEXT）</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>大字段可能导致行溢出（off-page storage），更新时容易造成原页空间浪费。</p></li><li class="lvl-2"><p>频繁更新大字段会加剧碎片问题。</p></li></ul></blockquote><p>十、<strong>事务回滚或 MVCC 机制残留</strong></p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>InnoDB 的多版本并发控制（MVCC）会保留旧版本数据，直到无事务引用。</p></li><li class="lvl-2"><p>回滚段或 undo log 中旧数据占用空间，若清理不及时，也可能形成逻辑碎片（不影响数据页，但占用存储）。</p></li></ul></blockquote><h4 id="碎片会带来什么问题">碎片会带来什么问题</h4><p>MySQL 中的“碎片”虽然不会直接导致数据丢失或系统崩溃，但会带来一系列<strong>性能下降、资源浪费和运维复杂性增加</strong>的问题。</p><p>以下是碎片带来的主要负面影响：</p><p>一、<strong>性能下降</strong>（最核心问题）</p><blockquote><ol><li class="lvl-3"><p><strong>查询性能降低</strong></p><ul class="lvl-3"><li class="lvl-5"><p>碎片导致数据在磁盘或内存中<strong>物理不连续</strong>，查询时需要读取更多数据页才能获取完整结果。</p></li><li class="lvl-5"><p>尤其影响范围查询（<code>BETWEEN</code>、<code>&gt;</code>、<code>&lt;</code>）和全表扫描，I/O 次数增加，响应时间变长。</p></li></ul></li><li class="lvl-3"><p><strong>索引效率降低</strong></p><ul class="lvl-3"><li class="lvl-5"><p>索引结构（如 B+ 树）若因碎片导致节点分散，会增加树的高度或节点访问次数。</p></li><li class="lvl-5"><p>查询时需要加载更多索引页到内存，缓存命中率下降，执行计划变慢。</p></li></ul></li><li class="lvl-3"><p><strong>缓冲池利用率下降</strong>（Buffer Pool）</p><ul class="lvl-3"><li class="lvl-5"><p>InnoDB 缓冲池缓存的是数据页。碎片页中有效数据少，大量缓存空间被“空洞”占用。</p></li><li class="lvl-5"><p>导致真正需要的数据页无法被缓存，频繁从磁盘读取，拖慢整体性能。</p></li></ul></li></ol></blockquote><p>二、<strong>存储空间浪费</strong></p><blockquote><ol><li class="lvl-3"><p><strong>占用额外磁盘空间</strong></p><ul class="lvl-3"><li class="lvl-5"><p><code>Data_free</code>（表中未使用但未释放的空间）持续增长，实际数据量远小于表文件大小。</p></li><li class="lvl-5"><p>举例：一个 10GB 的表，可能只有 6GB 是真实数据，其余 4GB 是碎片空洞。</p></li></ul></li><li class="lvl-3"><p><strong>备份/迁移成本增加</strong></p><ul class="lvl-3"><li class="lvl-5"><p>备份工具（如 mysqldump、xtrabackup）会备份整个表文件（含碎片），导致备份文件更大、耗时更长。</p></li><li class="lvl-5"><p>数据迁移、复制、同步也会因体积膨胀而效率降低。</p></li></ul></li></ol></blockquote><p>三、<strong>写入性能受影响</strong></p><blockquote><ol><li class="lvl-3"><p><strong>插入效率降低</strong></p><ul class="lvl-3"><li class="lvl-5"><p>当新数据无法填入现有碎片空洞时，MySQL 需分配新页，增加 I/O 和页管理开销。</p></li><li class="lvl-5"><p>频繁页分裂（Page Split）也会拖慢 INSERT/UPDATE 操作。</p></li></ul></li><li class="lvl-3"><p><strong>更新操作成本上升</strong>：如果更新导致行迁移（Migration），需要写入新页 + 维护指针 + 清理旧位置，开销更大。</p></li></ol></blockquote><p>四、<strong>维护成本增加</strong></p><blockquote><ol><li class="lvl-3"><p><strong>需要定期人工干预</strong></p><ul class="lvl-3"><li class="lvl-5"><p>必须定期执行 <code>OPTIMIZE TABLE</code> 或重建表，否则碎片持续累积。</p></li><li class="lvl-5"><p>大表优化耗时长、锁表风险高（尤其 MyISAM），影响业务可用性。</p></li></ul></li><li class="lvl-3"><p><strong>监控和诊断复杂化</strong></p><ul class="lvl-3"><li class="lvl-5"><p>需监控 <code>information_schema.TABLES.Data_free</code>、表大小增长率、查询执行时间变化等指标。</p></li><li class="lvl-5"><p>性能问题排查时，碎片可能成为“隐藏元凶”，增加诊断难度。</p></li></ul></li></ol></blockquote><p>五、<strong>扩展性和高可用受影响</strong></p><blockquote><ol><li class="lvl-3"><p><strong>主从复制延迟可能加剧</strong>：大量碎片表在主库执行 <code>OPTIMIZE </code>会产生大量 binlog，从库重放时会造成复制延迟。</p></li><li class="lvl-3"><p><strong>云数据库/容器环境成本上升</strong></p></li></ol><ul class="lvl-1"><li class="lvl-2"><p>在按存储计费的云环境（如 AWS RDS、阿里云 RDS）中，碎片导致“虚胖”表，多花冤枉钱。</p></li><li class="lvl-2"><p>容器存储卷空间被无效占用，影响弹性扩缩容。</p></li></ul></blockquote><p>六、极端情况：<strong>系统稳定性风险</strong></p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>表空间文件（如 ibdata1 或 .ibd 文件）过度膨胀，可能占满磁盘，导致数据库写入失败或服务中断。</p></li><li class="lvl-2"><p>自动扩容机制若未配置，可能引发严重生产事故。</p></li></ul></blockquote><h4 id="如何清理碎片">如何清理碎片</h4><p>清理 MySQL 中的碎片是数据库日常维护的重要任务，目的是<strong>回收无效空间、提升查询性能、减少存储占用、优化缓存效率</strong>。</p><p>不同存储引擎（如 InnoDB、MyISAM）清理方式略有不同，以下是完整、实用的碎片清理方案：</p><p><strong>一、OPTIMIZE TABLE</strong>（通用方法）</p><p>推荐用于 MyISAM 和部分 InnoDB，Optimize语句可以<strong>重新组织表和索引</strong>的物理存储，减少存储空间，提高访问的IO效率</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">OPTIMIZE <span class="keyword">TABLE</span> table_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 示例：</span></span><br><span class="line">OPTIMIZE <span class="keyword">TABLE</span> orders;</span><br><span class="line"><span class="comment">-- +----------------+----------+----------+---------------------------------------------------+</span></span><br><span class="line"><span class="comment">-- | Table          | Op       | Msg_type | Msg_text                                              </span></span><br><span class="line"><span class="comment">-- +----------------+----------+----------+---------------------------------------------------+</span></span><br><span class="line"><span class="comment">-- | test.orders    | optimize | status   | OK                                 </span></span><br><span class="line"><span class="comment">-- +----------------+----------+----------+---------------------------------------------------+</span></span><br></pre></td></tr></table></figure><blockquote><ul class="lvl-1"><li class="lvl-2"><p>重建表结构、整理碎片、回收未使用空间。</p></li><li class="lvl-2"><p>对 MyISAM：效果显著，会重建索引和数据文件。</p></li><li class="lvl-2"><p>对 InnoDB（独立表空间模式 innodb_file_per_table=1）才有作用：等价于 <code>ALTER TABLE ... FORCE</code>，重建表和索引。</p></li></ul></blockquote><p><strong>注意事项</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>锁表操作</strong>：执行期间表会被锁定（MyISAM 全锁，InnoDB 可能短暂锁）。数据量越大的表，优化耗时越长，百万条数据大约耗时30s(约25000-30000行/秒)。在磁盘优化时，所有的增删操作将受限。</p></li><li class="lvl-2"><p><strong>空间要求</strong>：需要额外磁盘空间存放临时表（约等于原表大小）。剩余空间必须 &gt; 被optimize的表大小</p></li><li class="lvl-2"><p><strong>权限要求</strong>：使用这个语句需要对目标表具有select、insert权限</p></li><li class="lvl-2"><p><strong>主从复制</strong>：会记录到 binlog，在从库重放，可能引起复制延迟。</p></li><li class="lvl-2"><p><strong>大表慎用</strong>：建议在业务低峰期执行。</p></li></ul></blockquote><p><strong>二、重建表</strong>（InnoDB 专用方法）</p><p>更灵活、推荐用于生产环境</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 使用 ALTER TABLE 重建，本质上是recreate，期间支持DML查询和更新操作</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> table_name ENGINE<span class="operator">=</span>InnoDB;</span><br><span class="line"><span class="comment">-- MySQL 5.7+ 支持的语法，明确表示强制重建表，等价于更改引擎为当前引擎</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> table_name FORCE;</span><br><span class="line"></span><br><span class="line"><span class="comment">----------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用在线 DDL（MySQL 5.6+，推荐）</span></span><br><span class="line"><span class="comment">-- ALGORITHM=INPLACE：原地重建，减少空间占用。LOCK=NONE：尽量不锁表（取决于操作类型和版本）。</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> table_name ENGINE<span class="operator">=</span>InnoDB, ALGORITHM<span class="operator">=</span>INPLACE, LOCK<span class="operator">=</span><span class="keyword">NONE</span>;</span><br></pre></td></tr></table></figure><blockquote><ul class="lvl-1"><li class="lvl-2"><p>更可控，支持在线操作（部分场景）。</p></li><li class="lvl-2"><p>可结合其他 DDL 一起执行（如加索引、改字段）。</p></li></ul></blockquote><p><strong>操作过程</strong>：</p><blockquote><ol><li class="lvl-3"><p>获取MDL（meta data lock）写锁，innodb内部创建与原表结构相同的临时文件</p></li><li class="lvl-3"><p>拷贝数据前，MDL写锁退化成读锁，支持DML更新操作</p></li><li class="lvl-3"><p>根据主键递增顺序，将数据读出并写到临时文件，直到全部写入，并且拷贝期间的DML更新操作会记录到Row log中</p></li><li class="lvl-3"><p>上锁，再将Row log中的数据应用到临时文件</p></li><li class="lvl-3"><p>互换原表和临时表的名字</p></li><li class="lvl-3"><p>删除临时表</p></li></ol></blockquote><p><strong>三、分区表碎片清理</strong>（针对 RANGE/LIST 分区）</p><p>如果表是分区表，可以<strong>只优化特定碎片严重的分区</strong>，减少影响：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> table_name OPTIMIZE <span class="keyword">PARTITION</span> partition_name;</span><br><span class="line"><span class="comment">-- 或</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> table_name REBUILD <span class="keyword">PARTITION</span> partition_name;</span><br></pre></td></tr></table></figure><blockquote><p>适用于日志表、时间分表等场景，按月/日分区，只清理历史分区。</p></blockquote><p><strong>四、批量清理多个表的碎片</strong></p><p>方法1：SQL 脚本自动生成优化语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;OPTIMIZE TABLE &#x27;</span>, table_schema, <span class="string">&#x27;.&#x27;</span>, table_name, <span class="string">&#x27;;&#x27;</span>) <span class="keyword">AS</span> sql_stmt</span><br><span class="line"><span class="keyword">FROM</span> information_schema.tables</span><br><span class="line"><span class="keyword">WHERE</span> table_schema <span class="operator">=</span> <span class="string">&#x27;your_database&#x27;</span></span><br><span class="line">  <span class="keyword">AND</span> data_free <span class="operator">&gt;</span> <span class="number">1024</span> <span class="operator">*</span> <span class="number">1024</span> <span class="operator">*</span> <span class="number">100</span>  <span class="comment">-- 碎片大于100MB的表</span></span><br><span class="line">  <span class="keyword">AND</span> engine <span class="keyword">IN</span> (<span class="string">&#x27;InnoDB&#x27;</span>, <span class="string">&#x27;MyISAM&#x27;</span>);</span><br></pre></td></tr></table></figure><p>方法2：Shell 脚本 + MySQL 命令行（定时任务）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">DB_USER=<span class="string">&quot;root&quot;</span></span><br><span class="line">DB_PASS=<span class="string">&quot;password&quot;</span></span><br><span class="line">DB_NAME=<span class="string">&quot;your_db&quot;</span></span><br><span class="line"></span><br><span class="line">mysql -u<span class="variable">$DB_USER</span> -p<span class="variable">$DB_PASS</span> -Nse <span class="string">&quot;</span></span><br><span class="line"><span class="string">SELECT CONCAT(&#x27;OPTIMIZE TABLE &#x27;, table_schema, &#x27;.&#x27;, table_name, &#x27;;&#x27;)</span></span><br><span class="line"><span class="string">FROM information_schema.tables</span></span><br><span class="line"><span class="string">WHERE table_schema = &#x27;<span class="variable">$DB_NAME</span>&#x27;</span></span><br><span class="line"><span class="string">  AND data_free &gt; 100*1024*1024</span></span><br><span class="line"><span class="string">  AND engine IN (&#x27;InnoDB&#x27;,&#x27;MyISAM&#x27;);</span></span><br><span class="line"><span class="string">&quot;</span> | mysql -u<span class="variable">$DB_USER</span> -p<span class="variable">$DB_PASS</span></span><br></pre></td></tr></table></figure><blockquote><p>建议每周或每月低峰期执行一次。</p></blockquote><p><strong>五、监控碎片程度</strong>（执行前判断是否需要清理）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看表碎片大小（Data_free）：</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    table_name,</span><br><span class="line">    engine,</span><br><span class="line">    data_length,</span><br><span class="line">    index_length,</span><br><span class="line">    data_free,</span><br><span class="line">    ROUND(data_free <span class="operator">/</span> (data_length <span class="operator">+</span> index_length) <span class="operator">*</span> <span class="number">100</span>, <span class="number">2</span>) <span class="keyword">AS</span> frag_percent</span><br><span class="line"><span class="keyword">FROM</span> information_schema.tables</span><br><span class="line"><span class="keyword">WHERE</span> table_schema <span class="operator">=</span> <span class="string">&#x27;your_database&#x27;</span></span><br><span class="line">  <span class="keyword">AND</span> data_free <span class="operator">&gt;</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> data_free <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 通过 `show table status like &#x27;表名&#x27;` 查看表的状态，如果data_free字段不为0则表示有碎片存在</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    CONCAT( <span class="keyword">TRUNCATE</span> ( <span class="built_in">SUM</span>( data_length ) <span class="operator">/</span> <span class="number">1024</span> <span class="operator">/</span> <span class="number">1024</span>, <span class="number">2</span> ), <span class="string">&#x27;MB&#x27;</span> ) <span class="keyword">AS</span> data_size,</span><br><span class="line">    CONCAT( <span class="keyword">TRUNCATE</span> ( <span class="built_in">SUM</span>( data_free ) <span class="operator">/</span> <span class="number">1024</span> <span class="operator">/</span> <span class="number">1024</span>, <span class="number">2</span> ), <span class="string">&#x27;MB&#x27;</span> ) <span class="keyword">AS</span> data_free,</span><br><span class="line">    CONCAT( <span class="keyword">TRUNCATE</span> ( <span class="built_in">SUM</span>( index_length ) <span class="operator">/</span> <span class="number">1024</span> <span class="operator">/</span> <span class="number">1024</span>, <span class="number">2</span> ), <span class="string">&#x27;MB&#x27;</span> ) <span class="keyword">AS</span> index_size </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    information_schema.TABLES </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    TABLE_NAME <span class="operator">=</span> <span class="string">&#x27;tableName&#x27;</span>; </span><br></pre></td></tr></table></figure><blockquote><p>建议：碎片率 &gt; 10% 或碎片大小 &gt; 1GB 的表优先优化。</p></blockquote><p>六、特殊情况处理</p><ol><li class="lvl-3"><p><strong>共享表空间碎片</strong>（ibdata1）</p><blockquote><p>此操作风险高，仅建议在维护窗口或新系统部署时进行。</p><ul class="lvl-3"><li class="lvl-2"><p>如果使用系统表空间（innodb_file_per_table=OFF），所有表数据存在 ibdata1，碎片无法单独清理。</p></li><li class="lvl-2"><p>解决方案：</p><ol><li class="lvl-5">备份所有数据（mysqldump）</li><li class="lvl-5">停止 MySQL，删除 ibdata1、ib_logfile*</li><li class="lvl-5">启用 <code>innodb_file_per_table=ON</code></li><li class="lvl-5">恢复数据 → 每个表独立 .ibd 文件，可单独优化</li></ol></li></ul></blockquote></li><li class="lvl-3"><p>大表优化太慢？</p><p>使用 <strong>pt-online-schema-change</strong>（Percona Toolkit）工具在线重建表，几乎无锁：支持大表在线优化，不影响业务读写。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pt<span class="operator">-</span>online<span class="operator">-</span>schema<span class="operator">-</span>change <span class="comment">--alter &quot;ENGINE=InnoDB&quot; D=your_db,t=your_table --execute</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>预防碎片的最佳实践</strong>（治本之策）</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><strong>使用自增主键</strong></td><td>保证数据顺序插入，减少页分裂</td></tr><tr><td><strong>避免频繁 UPDATE 大字段</strong></td><td>如 TEXT/BLOB，更新易导致行迁移</td></tr><tr><td><strong>定期归档历史数据</strong></td><td>减少活跃数据量，降低碎片产生速度</td></tr><tr><td><strong>合理设置页填充因子</strong></td><td>InnoDB 默认已优化，一般无需调整</td></tr><tr><td><strong>使用 SSD + 合理 buffer pool</strong></td><td>减轻碎片对 I/O 的影响</td></tr><tr><td><strong>监控 + 自动化脚本</strong></td><td>定期检查碎片，自动触发优化</td></tr></tbody></table><p><strong>碎片清理操作速查表</strong></p><table><thead><tr><th>场景</th><th>推荐命令</th><th>说明</th></tr></thead><tbody><tr><td>小表 / MyISAM 表</td><td><code>OPTIMIZE TABLE t;</code></td><td>简单直接，会锁表</td></tr><tr><td>InnoDB 表重建</td><td><code>ALTER TABLE t ENGINE=InnoDB;</code></td><td>更灵活，支持在线选项</td></tr><tr><td>在线无锁优化</td><td><code>ALTER TABLE t ENGINE=InnoDB, ALGORITHM=INPLACE, LOCK=NONE;</code></td><td>MySQL 5.6+</td></tr><tr><td>分区表优化</td><td><code>ALTER TABLE t OPTIMIZE PARTITION p0;</code></td><td>针对性清理</td></tr><tr><td>批量清理</td><td>用 SQL 生成脚本 + 定时任务</td><td>自动化运维</td></tr><tr><td>超大表在线优化</td><td><code>pt-online-schema-change</code></td><td>第三方工具，推荐生产环境</td></tr></tbody></table><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>监控先行</strong>：不要盲目优化，先查碎片率和大小。</p></li><li class="lvl-2"><p><strong>低峰操作</strong>：选择业务低谷期执行，避免影响线上服务。</p></li><li class="lvl-2"><p><strong>备份保障</strong>：重要表优化前做备份。</p></li><li class="lvl-2"><p><strong>自动化 + 预防</strong>：建立定期维护机制 + 优化表设计，从源头减少碎片。</p></li></ul></blockquote><h3 id="其他实用技巧">其他实用技巧</h3><ul class="lvl-0"><li class="lvl-2"><p><strong>使用连接池</strong>：避免频繁创建/销毁连接（HikariCP、Druid）</p></li><li class="lvl-2"><p><strong>避免大事务</strong>：拆分成小事务，减少锁竞争和回滚段压力</p></li><li class="lvl-2"><p><strong>合理使用锁</strong>：避免 <code>SELECT ... FOR UPDATE</code> 滥用</p></li><li class="lvl-2"><p><strong>批量操作</strong>：INSERT/UPDATE 使用批量语句，减少交互次数</p></li></ul>]]></content>
    
    
    <summary type="html">MySQL 数据库性能优化是系统性工程，涉及SQL语句、表结构、索引、配置、磁盘IO、架构设计等多层面</summary>
    
    
    
    <category term="DB" scheme="https://pengline.github.io/categories/DB/"/>
    
    <category term="MySQL" scheme="https://pengline.github.io/categories/DB/MySQL/"/>
    
    
    <category term="MySQL性能优化" scheme="https://pengline.github.io/tags/MySQL%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    <category term="MySQL索引" scheme="https://pengline.github.io/tags/MySQL%E7%B4%A2%E5%BC%95/"/>
    
    <category term="刷盘策略" scheme="https://pengline.github.io/tags/%E5%88%B7%E7%9B%98%E7%AD%96%E7%95%A5/"/>
    
    <category term="内存碎片" scheme="https://pengline.github.io/tags/%E5%86%85%E5%AD%98%E7%A2%8E%E7%89%87/"/>
    
    <category term="批量插入" scheme="https://pengline.github.io/tags/%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5/"/>
    
    <category term="频繁更新" scheme="https://pengline.github.io/tags/%E9%A2%91%E7%B9%81%E6%9B%B4%E6%96%B0/"/>
    
    <category term="慢查询" scheme="https://pengline.github.io/tags/%E6%85%A2%E6%9F%A5%E8%AF%A2/"/>
    
  </entry>
  
  <entry>
    <title>分库分表之跨表分页查询解决方案</title>
    <link href="https://pengline.github.io/2025/09/05/351e0f653b484f3cb3ed3c71e3c1bb5a/"/>
    <id>https://pengline.github.io/2025/09/05/351e0f653b484f3cb3ed3c71e3c1bb5a/</id>
    <published>2025-09-05T08:00:46.191Z</published>
    <updated>2025-09-06T13:56:06.870Z</updated>
    
    <content type="html"><![CDATA[<p>分库与分表的目的在于，减小数据库的单库单表负担，提高查询性能，缩短查询时间。</p><blockquote><p>热数据：使用MySQL进行存储，分库分表；</p><p>冷数据：ES 或 TiDB或Hive存储；</p></blockquote><h2 id="分库分表的基本概念">分库分表的基本概念</h2><h3 id="分库">分库</h3><p>数据表分布到不同库中，减轻单一库的压力，提高数据性能和安全性。</p><p>分库带来的问题和挑战：</p><blockquote><p><strong>数据迁移与扩容问题</strong>：一般做法是通过程序先读出数据，然后按照指定的分表策略再将数据写入到各个分表中。<br><strong>分页与排序问题</strong>：需要在不同的分表中将数据进行排序并返回，并将不同分表返回结果集进行汇总和再次排序，最后再返回给用户。<br><strong>分布式全局唯一ID</strong>：UUID、GUID等</p></blockquote><h3 id="分表（水平-垂直）">分表（水平+垂直）</h3><p>分表可以减少数据库的单表负担，将压力分散到不同的表上，减少单表数据量，提高查询性能，缩短查询时间和缓解表锁的问题。</p><p><strong>水平分表（同列拆数据）</strong>：Hash取模分表就属于随机水平分表，而时间维度分表则属于连续水平分表（车辆轨迹）。</p><p><strong>垂直分表（不同列拆列）</strong>：将不常用的字段单独拆分到另外一张扩展表. 将大文本的字段单独拆分到另外一张扩展表, 将不经常修改的字段放在同一张表中，将经常改变的字段放在另一张表中，将列表的共用字段放一起（车辆、摄像头、果壳箱告警）。</p><blockquote><p>对于海量用户场景，可以考虑hash取模分表，数据相对比较均匀，不容易出现热点和并发访问的瓶颈。</p><p>库内分表仅仅是解决了单表数据过大的问题，但并没有把单表的数据分散到不同的物理机上，因此并不能减轻 MySQL 服务器的压力，仍然存在同一个物理机上的资源竞争和瓶颈，包括 CPU、内存、磁盘 IO、网络带宽等。</p></blockquote><p>一张表分很多表后，每一个小表都是完整的一张表，对应三个文件（MyISAM引擎：.MYD数据文件，.MYI索引文件，.frm表结构文件）。</p><h3 id="分片（跨库-水平分表）">分片（跨库-水平分表）</h3><p>分片是将一个逻辑上的数据库或表切分成多个物理上的数据库或表，每个分片都包含一部分数据。分片可以跨多个数据库服务器，甚至跨多个数据中心。分片通常基于某种策略（如哈希、范围等）将数据分散到不同的分片中。</p><p>MySQL5以后支持分区，但是不支持二级分区，并且单机MySQL的性能远远不如Oracle，所以分区并不能解决性能问题。</p><p>分片就是分库+分表，属于水平切分，将表中数据按照某种规则放到多个库中，既分表又分库。</p><p>分片关注于跨多个数据库服务器的水平扩展和数据隔离</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>水平扩展</strong>：通过增加数据库服务器数量，实现水平扩展，提高系统的整体性能。</p></li><li class="lvl-2"><p><strong>数据隔离</strong>：不同的分片可以部署在不同的地理位置，实现数据的物理隔离和容灾备份。</p></li><li class="lvl-2"><p><strong>降低单点故障风险</strong>：由于数据被分散到多个分片中，单个分片的故障不会影响整个系统的运行。</p></li></ul></blockquote><p>常见的分片策略有：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>范围分片</strong>：根据数据的某个字段（如时间戳、用户ID等）的值范围将数据分散到不同的分片中。这种方法适用于连续增长的数据，但可能导致数据倾斜。</p></li><li class="lvl-2"><p><strong>哈希分片</strong>：使用哈希函数将数据分散到不同的分片中。这种方法可以确保数据的均匀分布，但可能导致跨分片查询的性能问题。</p></li><li class="lvl-2"><p><strong>目录分片</strong>：使用一个额外的目录表来记录数据在不同分片中的分布情况。这种方法可以提供更灵活的分片策略，但增加了查询的复杂度。</p></li></ul></blockquote><p>在实现分片时，可以使用中间件（如MyCAT、Sharding-JDBC等）或自定义代码来管理数据的路由和分片。中间件通常提供了丰富的分片策略和配置选项，可以方便地实现分片功能。</p><h3 id="分区（单库-水平分表）">分区（单库-水平分表）</h3><p>MySQL分区表是将一个表物理上分割成多个较小的、更易于管理的片段，这些片段称为分区。</p><p>分区主要关注于单个数据库服务器的性能提升和管理效率</p><p>MySQL支持多种分区类型，如RANGE、LIST、HASH、KEY等。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>性能提升</strong>：通过减少I/O操作、提高查询缓存效率等方式，提升查询性能。</p></li><li class="lvl-2"><p><strong>管理方便</strong>：可以单独对分区进行备份、恢复、删除等操作，提高管理效率。</p></li><li class="lvl-2"><p><strong>减少锁争用</strong>：在并发查询时，不同的分区可以并行处理，减少锁争用。</p></li></ul></blockquote><p>应用</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>日志表</strong>：如MySQL的慢查询日志表，可以按时间范围进行分区，便于管理和查询。</p></li><li class="lvl-2"><p><strong>历史数据表</strong>：对于按时间存储的历史数据，可以使用RANGE分区，将不同时间段的数据存储在不同的分区中。</p></li><li class="lvl-2"><p><strong>大数据表</strong>：对于数据量非常大的表，可以使用HASH或KEY分区，将数据分散到多个分区中，提高查询性能。</p></li></ul></blockquote><h2 id="分库分表的挑战">分库分表的挑战</h2><p>引入分库分表之后，会给系统带来什么挑战呢？</p><ul class="lvl-0"><li class="lvl-2"><p><strong>分页查询</strong>：数据分布到多个表中，导致分页查询受限，需要扫描各个分表再聚合结果。还涉及到深度分页问题。</p></li><li class="lvl-2"><p><strong>join 操作</strong>：同一个数据库中的表分布在了不同的数据库中，导致无法使用 join 操作。这样就导致我们需要手动进行数据的封装，比如你在一个数据库中查询到一个数据之后，再根据这个数据去另外一个数据库中找对应的数据。</p><blockquote><p>建议尽量不使用 join 操作。因为效率低，并且会对分库分表造成影响。对于需要用到 join 操作的地方，可以采用多次查询业务层进行数据组装的方法。不过，这种方法需要考虑业务上多次查询的事务性的容忍度。</p></blockquote></li><li class="lvl-2"><p><strong>事务问题</strong>：同一个数据库中的表分布在了不同的库中，操作涉及到多个数据库，数据库自带的事务就无法满足我们的要求了。这个时候，我们就需要引入分布式事务了。</p></li><li class="lvl-2"><p><strong>分布式 ID</strong>：分库之后， 数据遍布在不同服务器上的数据库，数据库的自增主键已经没办法满足生成的主键唯一了。</p></li><li class="lvl-2"><p><strong>跨库聚合查询</strong>：分库分表会导致常规聚合查询操作，如 group by，order by 等变得异常复杂。这是因为这些操作需要在多个分片上进行数据汇总和排序。为了实现这些操作，需要编写复杂的业务代码，或者使用中间件来协调分片间的通信和数据传输。这样会增加开发和维护的成本，以及影响查询的性能和可扩展性。</p></li></ul><h2 id="分库分表的建议">分库分表的建议</h2><p>遇到下面几种场景可以考虑分库分表：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>单表的数据达到千万级别以上，数据库读写速度比较缓慢。</p></li><li class="lvl-2"><p>数据库中的数据占用的空间越来越大，备份时间越来越长。</p></li><li class="lvl-2"><p>应用的并发量太大（应该优先考虑其他性能优化方法，而非分库分表）。</p></li></ul></blockquote><p>不过，分库分表的成本太高，如非必要尽量不要采用。而且，并不一定是单表千万级数据量就要分表。</p><h3 id="分页方案选型建议">分页方案选型建议</h3><table><thead><tr><th>业务场景</th><th>推荐方案</th><th>说明</th></tr></thead><tbody><tr><td>移动端下拉加载</td><td>游标分页 or 禁止跳页</td><td>性能最佳，用户体验好</td></tr><tr><td>后台管理系统（需跳页）</td><td>二次查询法 + 限制最大页码</td><td>平衡功能与性能</td></tr><tr><td>企业级复杂分页</td><td>ShardingSphere / MyCat</td><td>透明化，减少开发成本</td></tr><tr><td>海量数据实时排序</td><td>优先队列流式合并</td><td>适合推荐、排行榜场景</td></tr><tr><td>数据分析/报表</td><td>异步导出 or 预计算</td><td>避免在线分页，改用离线处理</td></tr></tbody></table><blockquote><ol><li class="lvl-3"><p><strong>避免深分页</strong>：前端限制最大页码（如 ≤ 100页），或引导用户用筛选条件缩小范围。</p></li><li class="lvl-3"><p><strong>索引优化</strong>：确保排序字段、分片键有联合索引。</p></li><li class="lvl-3"><p><strong>缓存分页结果</strong>：对前几页数据缓存到 Redis（尤其热门查询）。</p></li><li class="lvl-3"><p><strong>异步预加载</strong>：用户浏览第1页时，后台预加载第2页。</p></li><li class="lvl-3"><p><strong>数据归档</strong>：历史数据迁移到冷库，减少分片数据量。</p></li></ol></blockquote><h2 id="分库分表的解决方案">分库分表的解决方案</h2><p>常见分页查询方案对比</p><table><thead><tr><th>方案</th><th>适用场景</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>1. 全局有序ID + 游标分页</td><td>主键/时间戳有序</td><td>性能好、无跳页</td><td>不支持跳页、需有序字段</td></tr><tr><td>2. 二次查询法（排序归并）</td><td>任意排序字段</td><td>支持任意排序、跳页</td><td>性能较差、内存压力大</td></tr><tr><td>3. 禁止跳页 + 页码缓存</td><td>App/小程序下拉场景</td><td>用户体验好、性能高</td><td>不支持传统页码跳转</td></tr><tr><td>4. 全局汇总中间件</td><td>复杂聚合分页</td><td>功能强大</td><td>架构复杂、成本高</td></tr><tr><td>5. 并行查询 + 优先队列</td><td>大数据量排序分页</td><td>实时性好</td><td>实现复杂、资源消耗大</td></tr></tbody></table><h3 id="方案1：游标分页（推荐）">方案1：游标分页（推荐）</h3><p>适用于：主键自增、时间戳、全局唯一有序字段（如订单号、创建时间）</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>不使用 <code>OFFSET</code>，而是记录上一页最后一条记录的排序值（如 <code>id &gt; 1000</code>）。</p></li><li class="lvl-2"><p>下一页从该值之后开始查，每页固定大小。</p></li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 第一页</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> order_shard_01 </span><br><span class="line"><span class="keyword">WHERE</span> create_time <span class="operator">&gt;=</span> <span class="string">&#x27;2024-01-01&#x27;</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> create_time <span class="keyword">DESC</span>, id <span class="keyword">DESC</span> </span><br><span class="line">LIMIT <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 假设最后一条记录是 create_time=&#x27;2024-06-01 10:00:00&#x27;, id=5000</span></span><br><span class="line"><span class="comment">-- 第二页</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> order_shard_01 </span><br><span class="line"><span class="keyword">WHERE</span> (create_time <span class="operator">&lt;</span> <span class="string">&#x27;2024-06-01 10:00:00&#x27;</span>) </span><br><span class="line">   <span class="keyword">OR</span> (create_time <span class="operator">=</span> <span class="string">&#x27;2024-06-01 10:00:00&#x27;</span> <span class="keyword">AND</span> id <span class="operator">&lt;</span> <span class="number">5000</span>)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> create_time <span class="keyword">DESC</span>, id <span class="keyword">DESC</span> </span><br><span class="line">LIMIT <span class="number">20</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求参数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PageRequest</span> &#123;</span><br><span class="line">    Long lastId;      <span class="comment">// 上一页最后一条ID（游标）</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">pageSize</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PageResult</span> &#123;</span><br><span class="line">    List&lt;Order&gt; data;</span><br><span class="line">    Long nextCursor;  <span class="comment">// 下一页游标（最后一条ID）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务层</span></span><br><span class="line"><span class="keyword">public</span> PageResult <span class="title function_">listOrders</span><span class="params">(PageRequest req)</span> &#123;</span><br><span class="line">    List&lt;Order&gt; allResults = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 并行查询所有分片</span></span><br><span class="line">    <span class="keyword">for</span> (String shardTable : getShardTables()) &#123;</span><br><span class="line">        List&lt;Order&gt; shardData = jdbcTemplate.query(</span><br><span class="line">            <span class="string">&quot;SELECT * FROM &quot;</span> + shardTable + </span><br><span class="line">            <span class="string">&quot; WHERE id &lt; ? ORDER BY id DESC LIMIT ?&quot;</span>,</span><br><span class="line">            req.lastId == <span class="literal">null</span> ? Long.MAX_VALUE : req.lastId,</span><br><span class="line">            req.pageSize + <span class="number">1</span>,  <span class="comment">// 多查1条用于判断是否有下一页</span></span><br><span class="line">            orderRowMapper</span><br><span class="line">        );</span><br><span class="line">        allResults.addAll(shardData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 全局排序</span></span><br><span class="line">    allResults.sort((a, b) -&gt; Long.compare(b.getId(), a.getId()));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 截取分页</span></span><br><span class="line">    List&lt;Order&gt; pageData = allResults.stream()</span><br><span class="line">        .limit(req.pageSize)</span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算下一页游标</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">nextCursor</span> <span class="operator">=</span> pageData.size() &gt;= req.pageSize ? </span><br><span class="line">                      pageData.get(pageData.size() - <span class="number">1</span>).getId() : <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageResult</span>(pageData, nextCursor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优点</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>性能极佳（走索引，无 OFFSET）</p></li><li class="lvl-2"><p>天然避免数据重复/遗漏</p></li><li class="lvl-2"><p>支持无限下拉（App/小程序常用）</p></li></ul></blockquote><p><strong>缺点</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>不支持“跳到第100页”</p></li><li class="lvl-2"><p>要求排序字段全局唯一或组合唯一（避免边界重复，如 <code>create_time + id</code>），确保唯一性。</p></li><li class="lvl-2"><p>要求客户端传入上一页最后一条的完整排序字段值。</p></li></ul></blockquote><h3 id="方案2：二次查询法（排序归并分页）">方案2：二次查询法（排序归并分页）</h3><p>适用于：必须支持“跳页”、排序字段无序或非全局唯一</p><blockquote><ol><li class="lvl-3"><p>第一轮：每个分片查“可能相关”的数据（带冗余）</p><ul class="lvl-3"><li class="lvl-5">比如要第3页（每页10条），则每个分片查前 30+10=40 条（offset=0, limit=40）</li></ul></li><li class="lvl-3"><p>第二轮：内存中合并排序，取全局第21~30条</p></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Step 1: 并行查询每个分片的前 N 条（N = offset + limit）</span></span><br><span class="line">List&lt;Future&lt;List&lt;Record&gt;&gt;&gt; futures = shards.stream()</span><br><span class="line">    .map(shard -&gt; executor.submit(() -&gt; </span><br><span class="line">        query(<span class="string">&quot;SELECT * FROM &quot;</span> + shard + <span class="string">&quot; ORDER BY score DESC LIMIT &quot;</span> + (offset + limit))</span><br><span class="line">    )).collect(toList());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step 2: 合并所有结果，全局排序</span></span><br><span class="line">List&lt;Record&gt; allRecords = mergeAndSort(futures.get());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step 3: 截取最终分页</span></span><br><span class="line"><span class="keyword">return</span> allRecords.subList(offset, offset + limit);</span><br></pre></td></tr></table></figure><p><strong>优点</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>支持任意跳页</p></li><li class="lvl-2"><p>适用任意排序字段</p></li></ul></blockquote><p><strong>缺点</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>性能随页码增大急剧下降（深分页问题），可设置最大可跳页数（如最多100页），避免恶意深分页。</p></li><li class="lvl-2"><p>内存压力大（需缓存 offset+limit 条记录），使用缓存中间页结果（如 Redis 缓存第1~10页数据）。</p></li><li class="lvl-2"><p>数据量大时可能 OOM</p></li></ul></blockquote><h3 id="方案3：禁止跳页-页码缓存（App常用）">方案3：禁止跳页 + 页码缓存（App常用）</h3><p>适用于：移动端、信息流、下拉加载场景</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>前端不提供“跳页”按钮，只提供“加载更多”。</p></li><li class="lvl-2"><p>后端使用游标分页（方案1）。</p></li><li class="lvl-2"><p>可选：缓存前N页数据到 Redis，加速重复访问。</p></li></ul></blockquote><p><strong>优点</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>性能最优</p></li><li class="lvl-2"><p>用户体验流畅</p></li><li class="lvl-2"><p>实现简单</p></li></ul></blockquote><p><strong>缺点</strong>：不满足传统“跳页”需求（如后台管理系统）</p><h3 id="方案4：全局汇总中间件（企业级方案）">方案4：全局汇总中间件（企业级方案）</h3><p>适用于：复杂业务、需透明分页、不想自己实现逻辑 。如ShardingSphere、MyCat</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>中间件自动路由查询到各分片。</p></li><li class="lvl-2"><p>自动合并、排序、分页（通常采用“二次查询法”）。</p></li><li class="lvl-2"><p>对应用透明，SQL 仍写 <code>LIMIT 100, 10</code>。</p></li></ul></blockquote><p><strong>优点</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>开发无感知，SQL 兼容性好</p></li><li class="lvl-2"><p>支持复杂聚合、排序、分页</p></li></ul></blockquote><p><strong>缺点</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>中间件有性能开销</p></li><li class="lvl-2"><p>深分页仍慢</p></li><li class="lvl-2"><p>需维护中间件集群</p></li></ul></blockquote><p>ShardingSphere 示例配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="type">!SHARDING</span></span><br><span class="line">  <span class="attr">tables:</span></span><br><span class="line">    <span class="attr">t_order:</span></span><br><span class="line">      <span class="attr">actualDataNodes:</span> <span class="string">ds_$&#123;0..1&#125;.t_order_$&#123;0..3&#125;</span></span><br><span class="line">      <span class="attr">tableStrategy:</span></span><br><span class="line">        <span class="attr">standard:</span></span><br><span class="line">          <span class="attr">shardingColumn:</span> <span class="string">user_id</span></span><br><span class="line">          <span class="attr">shardingAlgorithmName:</span> <span class="string">table_inline</span></span><br><span class="line">  <span class="attr">shardingAlgorithms:</span></span><br><span class="line">    <span class="attr">table_inline:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">INLINE</span></span><br><span class="line">      <span class="attr">props:</span></span><br><span class="line">        <span class="attr">algorithm-expression:</span> <span class="string">t_order_$&#123;user_id</span> <span class="string">%</span> <span class="number">4</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 应用层 SQL：</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_order <span class="keyword">ORDER</span> <span class="keyword">BY</span> create_time <span class="keyword">DESC</span> LIMIT <span class="number">100</span>, <span class="number">10</span>;</span><br><span class="line"><span class="comment">-- ShardingSphere 自动分发+归并</span></span><br></pre></td></tr></table></figure><h3 id="方案5：并行查询-优先队列（高性能方案）">方案5：并行查询 + 优先队列（高性能方案）</h3><p>通过大数据量实时分页，适用于：海量数据、实时排序分页（如推荐系统、排行榜）</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>每个分片返回一个“排序迭代器”。</p></li><li class="lvl-2"><p>使用堆（优先队列）动态合并各分片TopK数据。</p></li><li class="lvl-2"><p>类似“外排序”思想，内存占用可控。</p></li></ul></blockquote><p><strong>优点</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>内存占用稳定（只缓存 heap.size = limit）</p></li><li class="lvl-2"><p>支持深分页（性能不随 offset 增大而剧降）</p></li><li class="lvl-2"><p>实时性好</p></li></ul></blockquote><p><strong>缺点</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>实现复杂（需自研或使用高级中间件）</p></li><li class="lvl-2"><p>对数据库连接数压力大</p></li></ul></blockquote><p><strong>开源参考</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>Apache ShardingSphere 的 <code>StreamMerge</code> 模式</p></li><li class="lvl-2"><p>Elasticsearch 的 <code>search_after</code></p></li></ul></blockquote><h2 id="分库分表查询案例（订单）">分库分表查询案例（订单）</h2><p>案例：订单表根据 userId 分表（userId % 1024）后</p><h3 id="如何根据-orderId-快速查询订单信息？">如何根据 orderId 快速查询订单信息？</h3><ul class="lvl-0"><li class="lvl-2"><p>方案一：扫描所有分表（效率最差）</p></li><li class="lvl-2"><p>方案二：建立中间路由表（数据冗余）</p><p>维护 分片 和 orderId 的映射，首先查询该表来确认分表，再查询数据（需要两次查询，且数据冗余，可能出现不一致的情况）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line"><span class="type">Long</span> <span class="variable">orderId</span> <span class="operator">=</span> <span class="number">10086L</span>;</span><br><span class="line"><span class="type">Route</span> <span class="variable">route</span> <span class="operator">=</span> routeMapper.selectByOrderId(orderId); <span class="comment">// 查路由表</span></span><br><span class="line"><span class="type">String</span> <span class="variable">targetTable</span> <span class="operator">=</span> <span class="string">&quot;order_&quot;</span> + route.getTableIndex();</span><br><span class="line"><span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderMapper.selectByIdFromTable(orderId, targetTable); <span class="comment">// 精准查询</span></span><br></pre></td></tr></table></figure><blockquote><ul class="lvl-3"><li class="lvl-2"><p>多一次查询（可缓存优化）</p></li><li class="lvl-2"><p>路由表需与订单表事务一致（写入订单时同时写路由）</p></li></ul></blockquote></li><li class="lvl-2"><p><strong>方案三</strong>（推荐）：重新维护 orderId，跟 userId 关联</p><p>最后4位数据拼接 userId 的二进制 前四位，然后可以对 orderId % 1024 来确定分表（需要保证分表数量为 2的次方个，且重写雪花算法，向其借四位）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1bit | 41bit时间戳 | 10bit机器/分片ID | 12bit序列号</span></span><br><span class="line"><span class="keyword">public</span> ShardInfo <span class="title function_">parseFromSnowflake</span><span class="params">(<span class="type">long</span> orderId)</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">shardBits</span> <span class="operator">=</span> (orderId &gt;&gt; <span class="number">12</span>) &amp; <span class="number">0x3FF</span>; <span class="comment">// 取中间10位</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">dbIndex</span> <span class="operator">=</span> (<span class="type">int</span>) (shardBits / <span class="number">16</span>);     <span class="comment">// 假设每库16表</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">tableIndex</span> <span class="operator">=</span> (<span class="type">int</span>) (shardBits % <span class="number">16</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ShardInfo</span>(dbIndex, tableIndex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul class="lvl-3"><li class="lvl-2"><p>无需路由表，直接计算</p></li><li class="lvl-2"><p>ID全局唯一、趋势递增、包含分片信息</p></li></ul></blockquote></li><li class="lvl-2"><p>方案四（推荐）：让 orderId 本身包含分片信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DD20250405_03_000000001</span><br><span class="line">  │    │    │    └── 自增序列（保证唯一）</span><br><span class="line">  │    │    └────── 分库分表标识（如 03 表示 db0.table3）</span><br><span class="line">  │    └─────────── 日期（可选，用于归档）</span><br><span class="line">  └────────────── 业务前缀（如 DD=订单）</span><br><span class="line"></span><br><span class="line">或更简洁：</span><br><span class="line">2025040503000000001</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderIdParser</span> &#123;</span><br><span class="line">    <span class="comment">// orderId = &quot;DD20250405_03_000000001&quot;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ShardInfo <span class="title function_">parse</span><span class="params">(String orderId)</span> &#123;</span><br><span class="line">        String[] parts = orderId.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">shardPart</span> <span class="operator">=</span> parts[<span class="number">1</span>]; <span class="comment">// &quot;03&quot;</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">dbIndex</span> <span class="operator">=</span> Integer.parseInt(shardPart) / <span class="number">4</span>;  <span class="comment">// 假设每库4表</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">tableIndex</span> <span class="operator">=</span> Integer.parseInt(shardPart) % <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ShardInfo</span>(dbIndex, tableIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>方案五：使用分库分表中间件（推荐）</p><p>使用 ShardingSphere，配置分片规则后，应用直接写 SQL，中间件自动路由：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ShardingSphere 根据 order_id 值自动计算分片，只查询目标表。</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="type">!SHARDING</span></span><br><span class="line">  <span class="attr">tables:</span></span><br><span class="line">    <span class="attr">t_order:</span></span><br><span class="line">      <span class="attr">actualDataNodes:</span> <span class="string">ds_$&#123;0..1&#125;.t_order_$&#123;0..3&#125;</span></span><br><span class="line">      <span class="attr">databaseStrategy:</span></span><br><span class="line">        <span class="attr">standard:</span></span><br><span class="line">          <span class="attr">shardingColumn:</span> <span class="string">order_id</span></span><br><span class="line">          <span class="attr">shardingAlgorithmName:</span> <span class="string">db_inline</span></span><br><span class="line">      <span class="attr">tableStrategy:</span></span><br><span class="line">        <span class="attr">standard:</span></span><br><span class="line">          <span class="attr">shardingColumn:</span> <span class="string">order_id</span></span><br><span class="line">          <span class="attr">shardingAlgorithmName:</span> <span class="string">table_inline</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">shardingAlgorithms:</span></span><br><span class="line">    <span class="attr">db_inline:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">INLINE</span></span><br><span class="line">      <span class="attr">props:</span></span><br><span class="line">        <span class="attr">algorithm-expression:</span> <span class="string">ds_$&#123;order_id.substring(10,11).toInteger()</span> <span class="string">/</span> <span class="number">2</span><span class="string">&#125;</span> <span class="comment"># 示例：从第10位取1位算库</span></span><br><span class="line">    <span class="attr">table_inline:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">INLINE</span></span><br><span class="line">      <span class="attr">props:</span></span><br><span class="line">        <span class="attr">algorithm-expression:</span> <span class="string">t_order_$&#123;order_id.substring(10,11).toInteger()</span> <span class="string">%</span> <span class="number">4</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="如何分页查询所有订单？"><strong>如何分页查询所有订单</strong>？</h3><p>根据条件扫描所有分表中前面的所有数据，再代码过滤聚合（需要查大量无效数据，且性能低，涉及深度分页）</p><ul class="lvl-0"><li class="lvl-2"><p>全局表查询：维护一个涉及查询参数的全局表，数据列少（包含分表信息），查询后再二次检索原数据。</p></li><li class="lvl-2"><p>最值限制过滤（可行）：根据上页最大值做过滤，如：ID或日期，扫描每个分表范围内数据，当客户端拉取不到任何数据的时候，即可停止分页。缺点是不能跳页查询，只能倒序排序。</p></li><li class="lvl-2"><p>大数据集成法（推荐）：ES或其它大数据组件。缺点是引入新的组件，会涉及数据同步的挑战。</p></li><li class="lvl-2"><p>三方分库分表组件（可行）：自动完成分表分页查询，只需要做好配置（如：ShardingSphere，其原理也是拆分查询 ）</p></li><li class="lvl-2"><p>分布式数据库（推荐）：既有关系数据库的优点又可无限扩表，支持数据库间无障碍迁移，如国产TiDB。</p></li><li class="lvl-2"><p><strong>按日期的二次查询法</strong>（常用）：通过两次查询来确保分页查询的精度和性能，特别适用于数据量大且需要精确分页的场景。</p><blockquote><p>二次查询法的基本思想是：将全局分页查询拆分为多个子查询，并通过两次查询来获取所需的数据。</p><ul class="lvl-3"><li class="lvl-2"><strong>第一次查询</strong>：将全局分页查询改写为多个子查询，每个子查询在各个分库中执行。例如，假设有三个分库，查询第200页的数据，每页5条记录，原始SQL为：<code>SELECT * FROM T ORDER BY time OFFSET 1000 LIMIT 5;</code></li><li class="lvl-2"><strong>找到最小时间戳</strong>：比较所有分库返回结果集中的最小时间戳，作为二次查询的起点。例如，假设三个分库返回的最小时间戳分别为1487501123、1487501133和1487501143，则最小时间戳为1487501123。</li><li class="lvl-2"><strong>第二次查询</strong>：根据最小时间戳和各分库返回结果集的最大时间戳，构造新的查询条件。例如，第一个分库返回的最大时间戳为1487501523，则新的查询条件为：<code>SELECT * FROM T WHERE time BETWEEN 1487501123 AND 1487501523;</code></li><li class="lvl-2"><strong>合并结果集</strong>：将所有分库的查询结果合并，并根据全局偏移量计算最终的分页结果。</li></ul><p><strong>优点</strong>：</p><ul class="lvl-3"><li class="lvl-2"><p><strong>精确分页</strong>：能够精确返回所需的分页数据。</p></li><li class="lvl-2"><p><strong>高性能</strong>：每次查询的数据量较小，不会随着翻页增加而显著增加。</p></li></ul><p><strong>缺点</strong>：</p><ul class="lvl-3"><li class="lvl-2"><p><strong>两次查询</strong>：需要进行两次数据库查询，增加了查询的复杂度。</p></li><li class="lvl-2"><p><strong>适用场景有限</strong>：适用于数据量大且需要精确分页的场景，不适用于所有情况</p></li></ul></blockquote></li></ul>]]></content>
    
    
    <summary type="html">分库、分表、分片、分区的区别，以及如何实现跨表的分页查询</summary>
    
    
    
    <category term="DB" scheme="https://pengline.github.io/categories/DB/"/>
    
    <category term="分库分表" scheme="https://pengline.github.io/categories/DB/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/"/>
    
    
    <category term="分库分表" scheme="https://pengline.github.io/tags/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/"/>
    
    <category term="分布式数据库" scheme="https://pengline.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="二次查询法" scheme="https://pengline.github.io/tags/%E4%BA%8C%E6%AC%A1%E6%9F%A5%E8%AF%A2%E6%B3%95/"/>
    
    <category term="TiDB" scheme="https://pengline.github.io/tags/TiDB/"/>
    
    <category term="ShardingSphere" scheme="https://pengline.github.io/tags/ShardingSphere/"/>
    
    <category term="跨表分页查询" scheme="https://pengline.github.io/tags/%E8%B7%A8%E8%A1%A8%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/"/>
    
  </entry>
  
  <entry>
    <title>海量数据的深度分页查询解决方案</title>
    <link href="https://pengline.github.io/2025/09/05/b35492bf2a96482e86fe1e77b2bc7812/"/>
    <id>https://pengline.github.io/2025/09/05/b35492bf2a96482e86fe1e77b2bc7812/</id>
    <published>2025-09-05T07:58:48.639Z</published>
    <updated>2025-09-18T08:41:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="深度分页的概念和场景">深度分页的概念和场景</h2><p><strong>深度分页</strong>指的是在数据库或搜索引擎中，当需要访问结果集中非常靠后的数据页时（例如第 1000 页，每页 10 条，即第 10000 条记录之后），系统性能会显著下降的现象。</p><p><strong>核心问题在于：</strong> 大多数数据库的实现方式并不是直接跳到第 N 页，而是需要先获取并跳过前 (N-1) * SIZE 条记录，这会导致巨大的资源消耗。</p><p>以MySQL的LIMIT偏移查询为例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查询第 <span class="number">1000</span> 页的<span class="number">10</span>条数据</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test <span class="keyword">ORDER</span> <span class="keyword">BY</span> created_at <span class="keyword">DESC</span> LIMIT <span class="number">10000</span>, <span class="number">10</span>;</span><br></pre></td></tr></table></figure><blockquote><ol><li class="lvl-3"><p>数据库需要先读取 <code>10000 + 10</code> 条记录的索引和数据（可能涉及回表）。</p></li><li class="lvl-3"><p>然后丢弃前 10000 条记录。</p></li><li class="lvl-3"><p>最后返回剩下的 10 条。</p></li></ol><p><code>OFFSET</code> 越大，需要读取和丢弃的数据就越多，计算和I/O成本就越高，性能自然急剧下降。</p></blockquote><h2 id="深度分页常用解决方案">深度分页常用解决方案</h2><p>以Mysql 为例说明</p><table><thead><tr><th style="text-align:left">方案</th><th style="text-align:left">原理</th><th style="text-align:left">优点</th><th style="text-align:left">缺点</th><th style="text-align:left">适用场景</th></tr></thead><tbody><tr><td style="text-align:left"><strong>游标分页</strong></td><td style="text-align:left">记录上一页末尾的位置作为起点</td><td style="text-align:left"><strong>性能最好</strong>，数据一致</td><td style="text-align:left">无法跳页</td><td style="text-align:left"><strong>无限滚动、流式数据</strong></td></tr><tr><td style="text-align:left"><strong>子查询</strong></td><td style="text-align:left">覆盖索引的优化，不需要二次查询</td><td style="text-align:left">简单高效</td><td style="text-align:left">连表查询，不稳定</td><td style="text-align:left">数据量少的简单可跳页查询</td></tr><tr><td style="text-align:left"><strong>覆盖索引</strong></td><td style="text-align:left">通过索引避免回表，减少I/O</td><td style="text-align:left">比纯<code>LIMIT</code>快</td><td style="text-align:left">优化有限，需两次查询</td><td style="text-align:left">查询数据少的简单分页</td></tr><tr><td style="text-align:left"><strong>限制深度</strong></td><td style="text-align:left">业务上不允许访问太深的页</td><td style="text-align:left">简单有效</td><td style="text-align:left">功能受限</td><td style="text-align:left">搜索引擎、后台管理系统</td></tr><tr><td style="text-align:left"><strong>ES <code>search_after</code></strong></td><td style="text-align:left">类似游标分页</td><td style="text-align:left">专业引擎原生支持</td><td style="text-align:left">引擎特定</td><td style="text-align:left">Elasticsearch/Solr</td></tr></tbody></table><blockquote><p>对于新项目或需要高性能的场景，<strong>强烈推荐使用游标分页</strong>。虽然牺牲了直接跳转页码的功能，但换来了稳定且高效的性能，非常适合现代应用（如手机APP）的交互方式。如果必须支持页码跳转，可以考虑将<strong>游标分页与限制最大分页深度</strong>结合使用。</p></blockquote><h3 id="游标分页（推荐）">游标分页（推荐）</h3><p>游标分页（Cursor-based Pagination），也叫“键集分页”，是解决深度分页最有效的方法。它不记录页码，而是记录上一页最后一条记录的位置，并以此为起点获取下一页。</p><p>比如数据根据ID倒序排列，点击下一页时，携带上一页中最小的ID，作为下一页最大值的过滤值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> user_order </span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">&lt;</span> #&#123;minId&#125; <span class="keyword">AND</span> create_time<span class="operator">&gt;</span><span class="string">&#x27;2020-8-5 00:00:00&#x27;</span> </span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> id LIMIT <span class="number">10</span>;</span><br></pre></td></tr></table></figure><blockquote><p>minId就是上一页中的最小主键Id。所以采用此方式的前提：</p><ul class="lvl-1"><li class="lvl-2">主键必须自增，不能是UUID。并且前端还需要传递上一页的最小Id</li><li class="lvl-2">不支持随机跳页，只能上下顺序翻页。</li></ul></blockquote><p><strong>优点：</strong></p><ul class="lvl-0"><li class="lvl-2"><p><strong>性能极佳</strong>：无论翻到第几页，查询速度都一样快，因为 <code>WHERE id &lt; 1000</code> 可以利用索引快速定位，无需扫描和跳过之前的记录。</p></li><li class="lvl-2"><p><strong>数据一致性</strong>：适合实时性高的数据流（如社交媒体动态），在分页过程中即使有新增或删除数据，也不会出现重复或丢失记录的问题（传统 LIMIT 分页可能会）。</p></li></ul><p><strong>缺点：</strong></p><ul class="lvl-0"><li class="lvl-2"><p><strong>无法直接跳转到指定页码</strong>：用户只能“上一页”或“下一页”地浏览，不能直接跳到第 100 页。</p></li><li class="lvl-2"><p><strong>需要客户端配合</strong>：客户端需要维护 <code>cursor</code> 状态。</p></li></ul><p><strong>适用场景：</strong> 无限滚动（Infinite Scroll）的列表、新闻流、时间线等。</p><h3 id="直接覆盖索引（可用）">直接覆盖索引（可用）</h3><p>确保分页查询的数据都包含在索引里，这样只需要查询索引即可，而无需回表，从而减少磁盘 I/O。</p><blockquote><p>除非要查询的数据量很少，且都符合建立索引的条件下可以使用。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, order_id, create_time <span class="keyword">FROM</span> user_order </span><br><span class="line"><span class="keyword">WHERE</span> create_time<span class="operator">&gt;</span><span class="string">&#x27;2020-8-5 00:00:00&#x27;</span> </span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> id LIMIT <span class="number">10000</span>, <span class="number">10</span>;</span><br></pre></td></tr></table></figure></blockquote><p><strong>优点：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>在一定程度上减轻了深度分页的压力。</p></li></ul><p><strong>缺点：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>优化有限，<code>OFFSET</code> 非常大时，索引扫描范围依然很大。</p></li><li class="lvl-2"><p>只能查询有限的数据列，且需要创建大量索引，占据磁盘。</p></li></ul><h3 id="间接覆盖索引（可用）">间接覆盖索引（可用）</h3><p>让查询只需要扫描索引，而无需回表，从而减少磁盘 I/O。</p><p>通过以下两步查询完成：</p><ol><li class="lvl-3"><p>先从覆盖索引中获取目标记录的主键</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id <span class="keyword">FROM</span> user_order </span><br><span class="line"><span class="keyword">WHERE</span> create_time<span class="operator">&gt;</span><span class="string">&#x27;2020-8-5 00:00:00&#x27;</span> </span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> id LIMIT <span class="number">10000</span>, <span class="number">10</span>;</span><br></pre></td></tr></table></figure><blockquote><p>假设 <code>(create_time, id)</code> 是一个联合索引，这个查询可以完全在索引上完成，速度较快</p></blockquote></li><li class="lvl-3"><p>再根据这些主键ID，回表查询获取完整数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">    <span class="keyword">FROM</span> user_order </span><br><span class="line"><span class="keyword">WHERE</span> id <span class="keyword">IN</span> (<span class="number">10001</span>, <span class="number">10002</span>, ..., <span class="number">10020</span>); <span class="comment">-- 上一步得到的主键ID </span></span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> id</span><br></pre></td></tr></table></figure></li></ol><p><strong>优点：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>在一定程度上减轻了深度分页的压力。</p></li></ul><p><strong>缺点：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>优化有限，<code>OFFSET</code> 非常大时，索引扫描范围依然很大。</p></li><li class="lvl-2"><p>仅适用于查询数据较少的情况，否则回表时会有大量ID集合数据需要过滤。</p></li><li class="lvl-2"><p>需要需要两次查询，占据IO 和 长事务问题。</p></li></ul><h3 id="子查询（常用）">子查询（常用）</h3><p>先根据条件分页查询出id（覆盖索引），再根据id连表查询出所需数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line">    <span class="keyword">FROM</span> user_order d <span class="keyword">join</span> </span><br><span class="line">        (<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> user_order <span class="keyword">WHERE</span> d.order_time<span class="operator">&gt;</span><span class="string">&#x27;2020-8-5 00:00:00&#x27;</span> </span><br><span class="line">         <span class="keyword">ORDER</span> <span class="keyword">BY</span> d.order_time LIMIT <span class="number">6</span>, <span class="number">100</span></span><br><span class="line">        ) dd </span><br><span class="line">    <span class="keyword">on</span> d.id <span class="operator">=</span> dd.id</span><br></pre></td></tr></table></figure><blockquote><p>查询ID直接是通过索引查询，速度较快</p><p>效果不如游标分页稳定。</p></blockquote><h3 id="限制分页深度">限制分页深度</h3><p>业务层面可以限制分页深度，这是一种“防患于未然”的策略，从产品设计上避免用户进入深度分页。</p><ul class="lvl-0"><li class="lvl-2"><p><strong>提供精确的搜索和筛选功能</strong>：让用户通过条件（如时间范围、标签、关键词）来缩小结果集，而不是无脑地翻页。</p></li><li class="lvl-2"><p><strong>限制最大可访问页码</strong>：例如，搜索引擎通常只允许查看前 100 页的结果。直接在前端或后端限制 <code>offset</code> 的最大值（如 <code>max_offset = 2000</code>）。</p></li></ul><blockquote><p><strong>优点：</strong></p><ul class="lvl-1"><li class="lvl-2">简单有效，从根本上避免了性能问题。</li><li class="lvl-2">提升用户体验，用户通常也不愿意翻上百页。</li></ul><p>**缺点：**是一种限制，而非技术解决。</p></blockquote><h3 id="利用-Redis-扩展">利用 Redis 扩展</h3><p>利用其内存和对应的数据结构。</p><ul class="lvl-0"><li class="lvl-2"><p>使用 <strong>zset</strong> 结构，将数据的 id 作为 value，将数据的排序依据（比如时间、热度、评分等）作为 score，然后根据用户的分页请求，使用 <code>ZRANGE</code> 或者 <code>ZREVRANGE</code> 命令来获取指定范围的 value，再根据 value 获取具体数据。</p><blockquote><p>优点：减轻数据库压力，提高查询效率，保证数据一致性，动态地添加或删除数据，可以控制 zset 长度，防止一直增长。</p><p>缺点：需要维护额外的 zset 数据结构，可能占用更多的内存空间，并且需要注意数据同步和更新的问题。</p></blockquote></li><li class="lvl-2"><p>使用 <strong>hash</strong> 结构，将数据以 id 为 key 缓存，然后把数据 id 和排序存到 redis 的 zset 里；当查找数据时，先从 redis 里的 skip list 取出对应的分页数据，得到 id 列表；用 multi get 从 redis 上一次性把 id 列表里的所有数据都取出。</p><blockquote><p>优点：可以利用 hash 的高效存储和查询特性，减少内存开销，利用 zset 的排序和范围查询特性，提高分页效率。缺点：需要维护两个数据结构，可能增加复杂度，并且需要注意数据同步和更新的问题。</p></blockquote></li><li class="lvl-2"><p>使用 <strong>list</strong> 结构，将数据按照顺序存储到 list，根据用户分页请求，使用 <code>LINDEX</code> 或者 <code>LRANGE</code> 命令来获取指定范围的数据。</p><blockquote><p>优点：简单易实现，并且可以利用 list 的有序和可变特性，动态地添加或删除数据。缺点：需要扫描所有的数据，查询效率低下，并且不能支持多种排序方式。</p></blockquote></li></ul><h2 id="ES-深度分页解决方案">ES 深度分页解决方案</h2><p>ES 提供三种分页查询，其中以下两种为深度分页的解决方案：</p><table><thead><tr><th style="text-align:left">特性</th><th style="text-align:left"><code>search_after</code></th><th style="text-align:left"><code>scroll</code></th></tr></thead><tbody><tr><td style="text-align:left"><strong>设计目的</strong></td><td style="text-align:left"><strong>实时、高效的深度分页</strong></td><td style="text-align:left"><strong>大批量数据的离线检索和导出</strong></td></tr><tr><td style="text-align:left"><strong>数据一致性</strong></td><td style="text-align:left"><strong>实时当前索引状态</strong>（Point-in-Time 可增强）</td><td style="text-align:left"><strong>快照</strong>（Snapshot in Time）</td></tr><tr><td style="text-align:left"><strong>资源占用</strong></td><td style="text-align:left">低（无状态，每次查询独立）</td><td style="text-align:left">高（在上下文存活期间占用资源）</td></tr><tr><td style="text-align:left"><strong>生命周期</strong></td><td style="text-align:left">无状态，无需维护</td><td style="text-align:left">有状态，需要显式创建和销毁</td></tr><tr><td style="text-align:left"><strong>性能</strong></td><td style="text-align:left">每次查询开销类似常规搜索</td><td style="text-align:left">首次创建开销大，后续遍历非常快</td></tr><tr><td style="text-align:left"><strong>客户端</strong></td><td style="text-align:left">需要维护排序值（sort values）</td><td style="text-align:left">需要维护 <code>scroll_id</code></td></tr><tr><td style="text-align:left"><strong>返回结果</strong></td><td style="text-align:left">返回一页数据</td><td style="text-align:left">返回一批数据和一个新的 <code>scroll_id</code></td></tr></tbody></table><h3 id="from-size（浅分页）">from + size（浅分页）</h3><p><code>from + size</code> 分页方式的原理相对简单。当执行一个搜索查询并指定了 <code>from</code> 和 <code>size</code> 参数时，Elasticsearch 会进行以下步骤：</p><blockquote><ol><li class="lvl-3"><p><strong>分发查询</strong>：Elasticsearch会将查询请求分发到所有相关的分片上。</p></li><li class="lvl-3"><p><strong>查询分片</strong>：每个分片都会执行查询，并返回前 <code>from + size</code> 条符合条件的文档（但实际上只会用到最后的 <code>size</code> 条）。</p></li><li class="lvl-3"><p><strong>合并和排序</strong>：协调节点（通常是执行搜索的Elasticsearch节点）会收集所有分片返回的结果，将它们合并成一个全局的结果集，并根据查询中指定的排序规则进行排序。</p></li><li class="lvl-3"><p><strong>截断和返回</strong>：协调节点会从排序后的结果集中截取从 <code>from</code> 位置开始的 <code>size</code> 条记录，并将它们返回给客户端。</p></li></ol></blockquote><p>由于 <code>from + size</code> 需要合并和排序所有分片返回的结果，因此当 <code>from</code> 值很大时，这个过程可能变得非常慢，因为需要处理大量数据。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET /products/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;apple&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">,</span>  <span class="comment">// 注意，索引从0开始，所以第10条记录的索引是9</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asc&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>存在不足</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>性能问题</strong>：当<code>from</code>值很大时，Elasticsearch需要遍历大量数据才能找到起始位置，然后返回<code>size</code>条记录。这会导致查询性能下降，尤其是在数据量很大的情况下。</p></li><li class="lvl-2"><p><strong>资源消耗</strong>：深度分页会消耗大量CPU和内存资源，对集群性能造成压力。</p></li></ul></blockquote><p>**使用场景：**适用于数据量不大、实时性要求高、不需要深度分页的场景。</p><h3 id="scroll（游标-非实时）">scroll（游标-非实时）</h3><p>一种基于游标的分页方式，它允许我们遍历大量数据而不需要在每次请求时重新计算整个搜索。</p><blockquote><p>对某次查询生成一个游标 scroll_id ， 后续的查询只需要根据这个游标去取数据，直到结果集中返回的 hits 字段为空，就表示遍历结束。scroll_id 的生成可以理解为建立了一个临时的历史快照，在此之后的增删改查等操作不会影响到这个快照的结果。</p></blockquote><p><strong>实现原理</strong></p><p><code>scroll</code> 会为第一次搜索创建一个<strong>快照（snapshot）</strong> 和一个<strong>搜索上下文（search context）</strong>。后续请求使用返回的 <code>scroll_id</code> 来从这个固定的快照中获取下一批结果。它本质上是一个<strong>有状态的游标</strong>。</p><blockquote><p>当你执行一个带有 <code>scroll</code> 参数的搜索查询时：</p><ol><li class="lvl-3"><strong>初始化搜索上下文</strong>：Elasticsearch会为这次搜索创建一个快照（snapshot），并存储相关的搜索上下文（search context）。这个上下文包括查询本身、排序方式、聚合等所有与搜索相关的信息。</li><li class="lvl-3"><strong>返回初始结果</strong>：Elasticsearch会像普通搜索一样返回第一批结果，并附带一个 <code>scroll_id</code>。这个 <code>scroll_id</code> 是唯一标识这次搜索上下文的。</li><li class="lvl-3"><strong>使用 scroll_id 获取更多结果</strong>：客户端可以使用这个 <code>scroll_id</code> 来请求更多的结果。Elasticsearch会基于之前存储的搜索上下文，从快照中检索更多的结果，并返回给客户端。这个过程可以重复多次，直到所有的结果都被检索完或搜索上下文过期。</li></ol></blockquote><p>由于 <code>scroll</code> 只需要在开始时计算一次搜索上下文，并在之后基于这个上下文来获取结果，因此它在处理大量数据时通常比 <code>from + size</code> 更快。但是，它也会消耗更多的服务器资源来维护搜索上下文和快照。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始搜索</span></span><br><span class="line">POST /_search/scroll</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">100</span><span class="punctuation">,</span>           <span class="comment">// 每次返回的文档数量</span></span><br><span class="line">    <span class="attr">&quot;scroll&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1m&quot;</span><span class="punctuation">,</span>        <span class="comment">// 保持scroll上下文的活动时间，这里是1分钟</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span>    <span class="comment">// 可替换为任何需要的查询条件</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 二次搜索</span></span><br><span class="line">POST /_search/scroll</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;scroll&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1m&quot;</span><span class="punctuation">,</span>                <span class="comment">// 保持与第一次请求相同的scroll上下文时间</span></span><br><span class="line">    <span class="attr">&quot;scroll_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你的scroll_id&quot;</span> <span class="comment">// 第一次请求返回的scroll_id</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>优点：</strong></p><blockquote><ol><li class="lvl-3"><p><strong>极高的遍历效率</strong>：一旦上下文创建，后续的滚动请求非常快，因为是从快照中获取，无需再次排序和计算排名（如果不需要评分，可设置 <code>&quot;sort&quot;: [&quot;_doc&quot;]</code> 达到最大速度）。</p></li><li class="lvl-3"><p><strong>数据一致性</strong>：看到的是查询发起时刻的<strong>数据快照</strong>，在整个滚动过程中，结果集不会改变，不会受新数据写入影响。</p></li></ol></blockquote><p><strong>缺点：</strong></p><p>默认情况下，scroll请求会保持一段时间（如1分钟）的上下文，如果在这段时间内没有新的请求，上下文将被自动清除。</p><blockquote><ol><li class="lvl-3"><p><strong>非实时（Stale Data）</strong>：由于<code>scroll</code>是基于数据快照的，看到的是历史数据，无法获取滚动开始后新写入的文档。</p></li><li class="lvl-3"><p><strong>资源消耗大</strong>：<code>scroll</code>会消耗大量的服务器资源来维护游标和数据快照，搜索上下文会占用大量的堆内存和文件句柄，直到超时被自动清除。同时处理大量滚动查询会消耗集群大量资源。</p></li><li class="lvl-3"><p><strong>非随机性</strong>：不支持随机访问页面，只能顺序获取数据。</p></li><li class="lvl-3"><p><strong>有状态</strong>：需要服务器和客户端共同维护 <code>scroll_id</code> 和上下文生命周期，如果忘记清理，会导致资源泄漏。</p></li></ol></blockquote><p><strong>适用场景：</strong>.</p><p>适用于需要遍历大量数据、实时性要求不高的场景，如日志导出、数据迁移等。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>离线数据处理和大批量数据导出</strong>（例如将整个索引或大量查询结果导出到文件或数据库）。</p></li><li class="lvl-2"><p><strong>索引重建（reindex）</strong> 等后台任务。</p></li><li class="lvl-2"><p><strong>需要对大量数据进行全量分析</strong>（不关心最新数据，只关心某一时刻的状态）。</p></li></ul></blockquote><h3 id="search-after（推荐-排序值唯一）">search_after（推荐-排序值唯一）</h3><p>一种基于排序值的分页方式，它允许我们根据上一页的最后一条数据的排序值来获取下一页的数据。需要配合<code>sort</code>字段使用。</p><p><strong>实现原理</strong></p><p><code>search_after</code> 分页方式的原理是基于上一次查询的结果来确定下一次查询的起始位置。当你执行一个带有 <code>search_after</code> 参数的搜索查询时，Elasticsearch 会：</p><blockquote><ol><li class="lvl-3"><p><strong>排序和返回结果</strong>：首先，Elasticsearch会像普通搜索一样执行查询，并根据指定的排序字段对结果进行排序。然后，它会返回第一批结果。</p></li><li class="lvl-3"><p><strong>确定下一次查询的起始位置</strong>：客户端可以选择结果集中的任意一条记录作为下一次查询的起始位置。这通常是通过记录该条记录的排序字段值来实现的。</p></li><li class="lvl-3"><p><strong>使用 search_after 获取更多结果</strong>：在下一次查询时，客户端会指定 <code>search_after</code> 参数，并将上一次查询的起始位置（即排序字段值）作为该参数的值。Elasticsearch会基于这个值来确定下一次查询的起始位置，并返回该位置之后的结果。</p></li></ol></blockquote><p>由于 <code>search_after</code> 不需要像 <code>from + size</code> 那样合并和排序所有分片返回的结果，也不需要像 <code>scroll</code> 那样维护搜索上下文和快照，因此它在深度分页时通常比这两种方式更高效。但它要求排序字段的值必须是唯一的，以确保能够准确地确定下一次查询的起始位置。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始查询</span></span><br><span class="line">GET /products/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span>  <span class="comment">// 或者你可以添加具体的查询条件</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;desc&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span>        <span class="comment">// 排序</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;created_at&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asc&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span>    <span class="comment">// 排序</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 二次查询</span></span><br><span class="line">GET /products/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span>  <span class="comment">// 保持与初始查询相同的查询条件</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="comment">// 保持与初始查询相同的排序字段和顺序</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;desc&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;created_at&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asc&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span>  </span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;search_after&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="number">129.99</span><span class="punctuation">,</span>                  <span class="comment">// 上一页最后一个产品的price值</span></span><br><span class="line">        <span class="string">&quot;2023-10-23T12:00:00Z&quot;</span>  <span class="comment">// 上一页最后一个产品的created_at值</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>优点：</strong></p><blockquote><ol><li class="lvl-3"><p><strong>实时性 (Real-time)</strong>：默认查询的是最新的索引状态，比<code>scroll</code>更具实时性。</p></li><li class="lvl-3"><p><strong>无状态 (Stateless)</strong>：服务端不保存任何上下文。每次查询都是独立的，资源占用低，易于扩展。</p></li><li class="lvl-3"><p><strong>适用于实时分页</strong>：是替代 <code>from + size</code>（深度分页）的理想方案，用户可前后翻页（需客户端缓存多组 <code>search_after</code> 值）。</p></li></ol></blockquote><p><strong>缺点：</strong></p><blockquote><ol><li class="lvl-3"><p><strong>无法跳页</strong>：和所有游标分页一样，只能一页一页顺序往下走，不能直接跳到任意页码。</p></li><li class="lvl-3"><p><strong>需要稳定的排序</strong>：排序字段必须能够唯一确定文档顺序（通常需要至少一个唯一字段如 <code>_id</code> 作为第二排序条件），需要依赖一个或多个排序字段确定下一页的位置。否则可能导致分页结果重复或丢失。</p><blockquote><ul class="lvl-4"><li class="lvl-2">如果排序字段的值不是唯一的，可能导致查询结果不准确。</li><li class="lvl-2">如果排序字段的值发生更改（如文档被更新或删除），可能会导致结果不一致。</li></ul></blockquote></li><li class="lvl-3"><p><strong>实时性</strong>：虽然<code>search_after</code>比<code>scroll</code>更实时，但它可能仍然无法获取到查询发起后的最新数据。这取决于刷新机制，</p><blockquote><ul class="lvl-4"><li class="lvl-2">Elasticsearch 默认每 <strong>1秒</strong> 自动刷新一次索引（可配置 <code>refresh_interval</code>）。</li><li class="lvl-2">只有被 <strong>refresh</strong> 后的文档，才能被搜索到。</li><li class="lvl-2"><code>search_after</code> 查询的是 <strong>当前已 refresh 的数据快照</strong>，不是实时写入的文档。</li></ul></blockquote><p>如果你在查询发起后，有新文档写入（<code>index</code> 或 <code>update</code>），但在下一次 <code>refresh</code> 之前，这些数据 不会出现在 <code>search_after</code> 查询结果中。一旦索引刷新，后续的 <code>search_after</code> 查询就有可能查到这些新数据，</p></li><li class="lvl-3"><p><strong>客户端逻辑稍复杂</strong>：客户端需要存储和传递每页的排序值。</p></li></ol></blockquote><p><strong>适用场景：</strong></p><blockquote><p>适用于需要深度分页、实时性要求相对较高、且排序字段唯一，支持顺序向后翻页访问的场景。</p><ul class="lvl-1"><li class="lvl-2">用户界面的无限滚动（Infinite Scroll）</li><li class="lvl-2">需要实时反映数据变化的深度分页需求</li><li class="lvl-2">任何需要替代 <code>from + size</code>（特别是当 <code>from &gt; 10,000</code> 时）的高性能分页</li></ul></blockquote><h3 id="关于随机翻页">关于随机翻页</h3><p>如果你有随机跳页的需求（例如，用户直接在界面上输入页码并跳转），正确的解决方案是 扩展**<code>search_after</code>**。</p><p><strong><code>scroll</code> API 完全不支持随机访问或跳页。</strong> 这是由其核心设计理念和工作机制决定的。</p><h4 id="为什么-Scroll-不支持随机跳页？">为什么 Scroll 不支持随机跳页？</h4><ol><li class="lvl-3"><p><strong>顺序遍历器</strong>，而非随机存取器<br><code>scroll</code> 被设计成一个<strong>单向的、顺序的流式读取器</strong>。你可以把它想象成一个只能从前往后读的磁带，或者一个只能调用 <code>next()</code> 方法的迭代器 (Iterator)。</p><blockquote><p>它唯一的操作是 <strong>“获取下一批（next batch）”</strong>。系统内部维护着一个指针，指向下一批要返回的数据的起始位置。你无法让这个指针突然跳到任意位置。</p></blockquote></li><li class="lvl-3"><p><strong>基于快照的上下文</strong><br>当你初始化一个 <code>scroll</code> 请求时，Elasticsearch 会为当时的查询条件创建一个<strong>数据快照（snapshot）</strong> 和<strong>搜索上下文（search context）</strong>，这个快照是固定的。后续所有的 <code>scroll</code> 请求都是用同一个 <code>scroll_id</code>，在这个固定的快照上顺序地获取下一批数据。它没有为“跳到第 N 页”这种操作建立任何索引或映射。</p></li><li class="lvl-3"><p><strong><code>scroll_id</code> 的含义</strong><br><code>scroll_id</code> 不是一个指向页码的标记，而是一个<strong>包含了整个查询状态、排序顺序和当前读取位置</strong>的上下文句柄。服务器根据这个句柄知道“你已经拿到前 1000 条了，下一次应该从第 1001 条开始”。</p></li></ol><p><strong>举例说明</strong></p><blockquote><p>假设你有一个 10000 条结果的 <code>scroll</code> 查询，每次返回 100 条。</p><ul class="lvl-1"><li class="lvl-2"><strong>第一次请求 (<code>scroll=1m</code>)</strong>: 你得到结果 1-100 和一个 <code>scroll_id: ABC</code>。</li><li class="lvl-2"><strong>第二次请求 (带上 <code>scroll_id: ABC</code>)</strong>: 你得到结果 101-200。</li><li class="lvl-2">…</li><li class="lvl-2"><strong>你想直接拿到第 50 页（结果 4901-5000）</strong>: <strong>这是不可能的</strong>。你没有任何一个 <code>scroll_id</code> 能让你直接从 4901 开始。你唯一的办法是从头开始，顺序地进行大约 49 次 <code>scroll</code> 请求，丢弃掉前 4900 条结果，才能拿到你想要的那一页。这不仅完全失去了 <code>scroll</code> 的性能优势，其性能甚至会比深度分页更差，因为你还额外维护了一个沉重的上下文。</li></ul></blockquote><h4 id="基于-search-after-的随机翻页设计">基于 <strong><code>search_after</code></strong> 的随机翻页设计</h4><p><code>search_after</code> 的核心也不完全支持随机翻页，但通过巧妙的设计，可以实现“有限度的”随机分页。 它无法像传统数据库 <code>LIMIT offset, size</code> 那样直接跳到任意页码，但比 <code>scroll</code> 灵活得多。</p><blockquote><p>和 <code>scroll</code> 一样，<code>search_after</code> 的核心也是一个<strong>顺序遍历器</strong>。它的参数是上一页最后一条记录的<strong>排序值</strong>。Elasticsearch 利用这些值在排序索引中快速定位，并获取“接下来”的一批数据。</p><p>它没有也不维护任何关于“页码”的概念。要跳到第 N 页，系统必须知道第 (N-1) 页最后一条记录的排序值是什么。而获取这个值，恰恰就是深度分页要解决的难题本身。</p></blockquote><h5 id="策略一：客户端缓存（最实用、最常用）">策略一：客户端缓存（最实用、最常用）</h5><p>这是实现“前后翻页”和“跳回已浏览页”的最主流方案。</p><blockquote><ol><li class="lvl-3"><p>客户端（浏览器、APP）或服务端会话（Session）在用户浏览过程中，<strong>缓存每一页的“页边界”</strong>（即每一页最后一条记录的排序值）。</p></li><li class="lvl-3"><p>当用户点击“下一页”时，使用当前页的排序值。</p></li><li class="lvl-3"><p>当用户点击“上一页”或想跳回之前看过的某一页（例如第3页）时，从缓存中取出第2页的排序值，作为 <code>search_after</code> 参数去查询，得到的就是第3页的结果。</p></li></ol></blockquote><p><strong>优点：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>性能极佳，每次查询都是高效的。</p></li><li class="lvl-2"><p>可以实现完美的前后导航和跳回已浏览页面。</p></li></ul><p><strong>缺点：</strong></p><ul class="lvl-0"><li class="lvl-2"><p><strong>无法跳转到未浏览的页面</strong>。你不能直接跳到第100页，除非你之前已经一页一页地浏览并缓存了第99页的排序值。</p></li><li class="lvl-2"><p>需要客户端逻辑来管理这个缓存。</p></li></ul><h5 id="策略二：服务端预计算（复杂，有代价）">策略二：服务端预计算（复杂，有代价）</h5><p>如果需要支持跳转到未浏览的页面，需要一个更强大的服务端架构。</p><blockquote><ol><li class="lvl-3"><p><strong>构建“页索引”服务</strong>：有一个后台任务或服务，预先为常见的排序和查询条件计算好每一页的边界排序值，并将其存储起来（例如在Redis中）。</p></li><li class="lvl-3"><p><strong>查询流程</strong>：当用户请求跳转到第N页时，API先向这个“页索引”服务请求获取第(N-1)页的排序值，然后再用这个值去执行 <code>search_after</code> 查询。</p></li></ol></blockquote><p><strong>优点：</strong> 理论上可以实现真正的随机跳页。</p><p><strong>缺点：</strong></p><ul class="lvl-0"><li class="lvl-2"><p><strong>极其复杂</strong>：引入了新的服务和系统复杂性。</p></li><li class="lvl-2"><p><strong>维护成本高</strong>：数据有任何增删改，都可能使预计算的页边界失效，需要重新计算，维护数据一致性挑战巨大。</p></li><li class="lvl-2"><p><strong>不灵活</strong>：只能针对少数几个固定的排序方式和查询条件做预计算。</p></li></ul><h5 id="策略三：近似跳页（牺牲精确度）">策略三：近似跳页（牺牲精确度）</h5><p>如果你的一个排序字段是均匀分布的（如自增ID、均匀分布的时间戳），你可以进行估算。例如，你想跳转到第50页（每页20条），你可以估算一个 <code>search_after</code> 值。然后让用户在这个大致的结果集里进行微调。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;search_after&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;2023-01-01T00:00:00Z&quot;</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 估算一个大概的时间点</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">20</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>**缺点：**结果不精确，用户体验差，适用场景有限。</p><h3 id="行业标准做法（强烈推荐）">行业标准做法（强烈推荐）</h3><p>像Google、Amazon、Netflix这样的大型互联网应用，<strong>它们直接从产品设计上规避了“深度随机跳页”的需求</strong>。</p><blockquote><ol><li class="lvl-3"><p><strong>提供强大的搜索和筛选器</strong>：让用户通过加条件（如时间范围、分类、标签）来缩小结果集，使其变得很少，无需深度分页。</p></li><li class="lvl-3"><p><strong>只提供“上一页/下一页”</strong>：这是无限滚动的标准模式，完美契合 <code>search_after</code> 的优势。</p></li><li class="lvl-3"><p><strong>限制最大可访问范围</strong>：即使提供了页码，通常也只显示前10页或前20页的页码选项，并提示“请优化搜索以查看更多结果”。</p></li></ol></blockquote>]]></content>
    
    
    <summary type="html">在海量数据表中，如何解决深度分页问题，提高查询效率</summary>
    
    
    
    <category term="DB" scheme="https://pengline.github.io/categories/DB/"/>
    
    <category term="深度分页" scheme="https://pengline.github.io/categories/DB/%E6%B7%B1%E5%BA%A6%E5%88%86%E9%A1%B5/"/>
    
    
    <category term="深度分页" scheme="https://pengline.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%88%86%E9%A1%B5/"/>
    
    <category term="scroll" scheme="https://pengline.github.io/tags/scroll/"/>
    
    <category term="游标分页" scheme="https://pengline.github.io/tags/%E6%B8%B8%E6%A0%87%E5%88%86%E9%A1%B5/"/>
    
    <category term="search_after" scheme="https://pengline.github.io/tags/search-after/"/>
    
  </entry>
  
  <entry>
    <title>基于 LangChain + RAG 构建医疗问答Agent</title>
    <link href="https://pengline.github.io/2025/09/04/92bb519d826e4443936d4cce27ceb524/"/>
    <id>https://pengline.github.io/2025/09/04/92bb519d826e4443936d4cce27ceb524/</id>
    <published>2025-09-04T03:16:03.664Z</published>
    <updated>2025-09-18T08:36:22.126Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于-LangChain"><a href="https://www.langchain.com.cn/docs">关于 LangChain</a></h2><p>LangChain 是一个用于构建基于大语言模型应用程序的开源框架，旨在帮助开发者更高效地开发、部署和管理 LLM 驱动的应用。</p><p>其核心价值在于模块化设计、标准化接口和丰富的工具链，简化从原型设计到生产部署的AI应用开发全流程。它不依赖特定模型，而是提供统一接口对接OpenAI、Hugging Face等主流LLM，并支持自定义模型集成，使开发者能聚焦业务逻辑而非底层技术细节。</p><blockquote><p>它提供了一系列模块化组件和工具，简化了与 LLM 交互、数据处理、工作流编排等任务。</p><ul class="lvl-1"><li class="lvl-2"><strong>LangChain</strong>：提供七大组件（Agent, Models, Chains, Tools, Memory, Callbacks, RAG）。</li><li class="lvl-2"><strong>LangGraph</strong>：在其之上编排复杂流程，解决两类问题：<ol><li class="lvl-5"><strong>线性链的局限</strong>：基础 Chain 难以处理循环/分支。</li><li class="lvl-5"><strong>Agent 的扩展</strong>：增强 Agent 的鲁棒性（如自动重试、状态回溯）。</li></ol></li></ul></blockquote><p>LangChain 主要解决以下问题：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>LLM 集成</strong>：支持多种大模型（如 OpenAI GPT、Anthropic、Llama2 等），统一接口调用。</p></li><li class="lvl-2"><p><strong>上下文管理</strong>：处理长文本、多轮对话的上下文限制（如分块、摘要、记忆机制）。</p></li><li class="lvl-2"><p><strong>数据增强</strong>：结合外部数据源（文档、数据库、API）进行检索增强生成（RAG）。</p></li><li class="lvl-2"><p><strong>工作流编排</strong>：通过链（Chain）将多个步骤组合成复杂流程（如问答、摘要、代码生成）。</p></li><li class="lvl-2"><p><strong>代理（Agent）</strong>：让 LLM 动态调用工具（如搜索、计算、自定义函数）完成复杂任务。</p></li></ul></blockquote><p>使用案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 翻译智能体</span></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> langchain_core.prompts <span class="keyword">import</span> ChatPromptTemplate</span><br><span class="line"><span class="keyword">from</span> langchain_core.output_parsers <span class="keyword">import</span> StrOutputParser</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"><span class="keyword">from</span> langserve <span class="keyword">import</span> add_routes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. Create prompt template</span></span><br><span class="line">system_template = <span class="string">&quot;Translate the following into &#123;language&#125;:&quot;</span></span><br><span class="line">prompt_template = ChatPromptTemplate.from_messages([</span><br><span class="line">    (<span class="string">&#x27;system&#x27;</span>, system_template),</span><br><span class="line">    (<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;&#123;text&#125;&#x27;</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. Create model</span></span><br><span class="line">model = ChatOpenAI()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. Create parser（输出转换，只过滤需要的内容）</span></span><br><span class="line">parser = StrOutputParser()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. Create chain</span></span><br><span class="line">chain = prompt_template | model | parser</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. App definition</span></span><br><span class="line">app = FastAPI(</span><br><span class="line">  title=<span class="string">&quot;LangChain Server&quot;</span>,</span><br><span class="line">  version=<span class="string">&quot;1.0&quot;</span>,</span><br><span class="line">  description=<span class="string">&quot;A simple API server using LangChain&#x27;s Runnable interfaces&quot;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. Adding chain route</span></span><br><span class="line">add_routes(</span><br><span class="line">    app,</span><br><span class="line">    chain,</span><br><span class="line">    path=<span class="string">&quot;/chain&quot;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">import</span> uvicorn</span><br><span class="line">    uvicorn.run(app, host=<span class="string">&quot;localhost&quot;</span>, port=<span class="number">8000</span>)</span><br></pre></td></tr></table></figure><h2 id="关于-Ollama"><a href="https://ollama.com/">关于 Ollama</a></h2><p>Ollama 是一个强大的运行框架，旨在使运行LLM尽可能简单。Ollama 简化了在本地机器或服务器上下载、运行和管理大型语言模型的整个过程。使用 Ollama 很简单，可以在不同的平台上完成安装。</p><p>Ollama的API具有许多基本功能，使其成为开发人员的重要选择之一，其主要功能如下：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>流支持：实时token生成，完全兼容OpenAI API，非常适合创建响应式应用程序。</p></li><li class="lvl-2"><p>多模型管理： 能够同时运行不同的模型，但有一个警告。 当 VRAM 有限时，Ollama 将停止一个模型来运行另一个模型，这需要仔细的资源规划。</p></li><li class="lvl-2"><p>参数控制： 通过 API 调用进行高度可定制的设置，它提供了很大的灵活性，但对于初学者和生产环境的服务器来说并不友好。</p></li><li class="lvl-2"><p>CPU 兼容性： 当 VRAM 不足时，智能资源管理可以自动将模型卸载到 CPU执行，使得在 GPU 内存有限的系统上也可以运行大模型服务。</p></li><li class="lvl-2"><p>语言无关性： 可以自由使用Python、 JavaScript、 Go等编程语言，以及其他任何具有 HTTP 功能的编程语言。</p></li></ul></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装模型</span></span><br><span class="line">ollama pull nomic-embed-text</span><br><span class="line">ollama pull qwen2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动ollama</span></span><br><span class="line">ollama server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入对话模式</span></span><br><span class="line">ollama run qwen2</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 调用 ollama 的接口</span></span><br><span class="line">curl --location --request POST <span class="string">&#x27;http://localhost:11434/api/generate&#x27;</span> \</span><br><span class="line">--header <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">--data-raw <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;model&quot;: &quot;qwen2&quot;,</span></span><br><span class="line"><span class="string">    &quot;prompt&quot;: &quot;Why is the sky blue?&quot;,</span></span><br><span class="line"><span class="string">    &quot;stream&quot;: false</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="关于-Chroma"><a href="https://github.com/chroma-core/chroma">关于 Chroma</a></h2><p>Chroma 是一种高效的开源向量数据库，专为存储和检索高维向量数据设计，广泛应用于文本嵌入管理和相似性搜索。它通过将文本转化为向量嵌入，支持语义搜索、推荐系统等功能，尤其适合大模型应用场景。</p><blockquote><p>Chroma 的核心基于 HNSW 算法，支持快速的近似最近邻搜索。其主要特点包括：</p><ul class="lvl-1"><li class="lvl-2"><strong>多存储后端</strong>：支持 DuckDB 和 ClickHouse 等存储选项。</li><li class="lvl-2"><strong>多语言支持</strong>：提供 Python 和 JavaScript SDK。</li><li class="lvl-2"><strong>简单易用</strong>：设计简洁，提升开发效率。</li><li class="lvl-2"><strong>高性能</strong>：支持快速相似性搜索和结果分析。</li></ul></blockquote><p>使用案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> chromadb</span><br><span class="line"><span class="comment"># 初始化客户端：</span></span><br><span class="line">client = chromadb.Client()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建集合：</span></span><br><span class="line">collection = client.create_collection(<span class="string">&quot;all-my-documents&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加数据：</span></span><br><span class="line">collection.add(</span><br><span class="line">    documents=[<span class="string">&quot;Document about AI&quot;</span>, <span class="string">&quot;Document about food&quot;</span>],</span><br><span class="line">    metadatas=[&#123;<span class="string">&quot;category&quot;</span>: <span class="string">&quot;technology&quot;</span>&#125;, &#123;<span class="string">&quot;category&quot;</span>: <span class="string">&quot;lifestyle&quot;</span>&#125;],</span><br><span class="line">    ids=[<span class="string">&quot;id1&quot;</span>, <span class="string">&quot;id2&quot;</span>]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询数据，支持通过元数据和文档内容进行过滤查询，按元数据过滤：</span></span><br><span class="line">results = collection.query(</span><br><span class="line">    query_texts=[<span class="string">&quot;AI&quot;</span>],</span><br><span class="line">    n_results=<span class="number">2</span>,</span><br><span class="line">    where=&#123;<span class="string">&quot;category&quot;</span>: &#123;<span class="string">&quot;$eq&quot;</span>: <span class="string">&quot;technology&quot;</span>&#125;&#125;</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(results)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 组合条件查询：按元数据过滤 + 按文档内容过滤</span></span><br><span class="line">results = collection.query(</span><br><span class="line">    query_texts=[<span class="string">&quot;AI&quot;</span>],</span><br><span class="line">    n_results=<span class="number">2</span>,</span><br><span class="line">    where=&#123;<span class="string">&quot;$and&quot;</span>: [&#123;<span class="string">&quot;category&quot;</span>: &#123;<span class="string">&quot;$eq&quot;</span>: <span class="string">&quot;technology&quot;</span>&#125;&#125;, &#123;<span class="string">&quot;year&quot;</span>: &#123;<span class="string">&quot;$gt&quot;</span>: <span class="number">2021</span>&#125;&#125;]&#125;</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(results)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新数据：</span></span><br><span class="line">collection.update(</span><br><span class="line">    ids=[<span class="string">&quot;id1&quot;</span>],</span><br><span class="line">    documents=[<span class="string">&quot;Updated document about AI&quot;</span>],</span><br><span class="line">    metadatas=[&#123;<span class="string">&quot;category&quot;</span>: <span class="string">&quot;updated technology&quot;</span>&#125;]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除数据：</span></span><br><span class="line">collection.delete(ids=[<span class="string">&quot;id1&quot;</span>])</span><br></pre></td></tr></table></figure><h2 id="医疗问答-Demo">医疗问答 Demo</h2><p>构建 医疗问答系统的样例。需要安装 Ollama 以及 相关依赖，添加指定数据集。可参考 <a href="https://github.com/haengood/ai-medical-agent">GitHub 源码</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain_core._api <span class="keyword">import</span> LangChainDeprecationWarning</span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>, category=LangChainDeprecationWarning)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain.agents <span class="keyword">import</span> initialize_agent, Tool</span><br><span class="line"><span class="keyword">from</span> langchain.chains <span class="keyword">import</span> RetrievalQA</span><br><span class="line"><span class="comment"># 按照最新的langchain导入规范，从langchain_community导入组件</span></span><br><span class="line"><span class="keyword">from</span> langchain_ollama <span class="keyword">import</span> ChatOllama</span><br><span class="line"><span class="keyword">from</span> langchain_chroma <span class="keyword">import</span> Chroma</span><br><span class="line"><span class="keyword">from</span> langchain_community.embeddings <span class="keyword">import</span> HuggingFaceEmbeddings</span><br><span class="line"><span class="keyword">from</span> langchain_community.document_loaders <span class="keyword">import</span> TextLoader</span><br><span class="line"><span class="keyword">from</span> langchain.text_splitter <span class="keyword">import</span> CharacterTextSplitter</span><br><span class="line"><span class="keyword">from</span> langchain_community.tools <span class="keyword">import</span> DuckDuckGoSearchRun</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加项目根目录到Python路径，以便导入tools模块</span></span><br><span class="line">sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), <span class="string">&#x27;../../&#x27;</span>)))</span><br><span class="line"><span class="comment"># 导入医疗专用工具</span></span><br><span class="line"><span class="keyword">from</span> tools.medical_tools <span class="keyword">import</span> MedicalTools</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MedicalAgent</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 初始化语言模型 - 使用Ollama并优化参数以提高响应速度</span></span><br><span class="line">        <span class="variable language_">self</span>.llm = ChatOllama(</span><br><span class="line">            model=<span class="string">&quot;gemma3:4b&quot;</span>,  <span class="comment"># Ollama中的模型名称，使用更通用的llama3</span></span><br><span class="line">            temperature=<span class="number">0</span>,</span><br><span class="line">            base_url=<span class="string">&quot;http://localhost:11434&quot;</span>,  <span class="comment"># Ollama默认API地址</span></span><br><span class="line">            <span class="comment"># 增加超时时间以解决连接问题</span></span><br><span class="line">            timeout=<span class="number">300</span>,</span><br><span class="line">            <span class="comment"># 移除JSON格式要求，某些模型可能不支持</span></span><br><span class="line">            <span class="comment"># format=&quot;json&quot;</span></span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 加载RAG数据</span></span><br><span class="line">        <span class="variable language_">self</span>.vectorstore = <span class="variable language_">self</span>.load_medical_knowledge()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建检索链 - 减少检索文档数量以提高速度</span></span><br><span class="line">        <span class="variable language_">self</span>.retrieval_chain = RetrievalQA.from_chain_type(</span><br><span class="line">            llm=<span class="variable language_">self</span>.llm,</span><br><span class="line">            chain_type=<span class="string">&quot;stuff&quot;</span>,</span><br><span class="line">            retriever=<span class="variable language_">self</span>.vectorstore.as_retriever(</span><br><span class="line">                search_kwargs=&#123;<span class="string">&quot;k&quot;</span>: <span class="number">2</span>&#125;  <span class="comment"># 从3减少到2，减少需要处理的文档数量</span></span><br><span class="line">            ),</span><br><span class="line">            return_source_documents=<span class="literal">True</span></span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建网络搜索工具</span></span><br><span class="line">        <span class="variable language_">self</span>.search = DuckDuckGoSearchRun()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 定义工具列表</span></span><br><span class="line">        <span class="variable language_">self</span>.tools = [</span><br><span class="line">            Tool(</span><br><span class="line">                name=<span class="string">&quot;Medical Knowledge Base&quot;</span>,</span><br><span class="line">                func=<span class="variable language_">self</span>.query_medical_knowledge,</span><br><span class="line">                description=<span class="string">&quot;适合用来回答医学知识相关的问题，包括疾病、药物、急救和健康生活方式等内容&quot;</span></span><br><span class="line">            ),</span><br><span class="line">            Tool(</span><br><span class="line">                name=<span class="string">&quot;Web Search&quot;</span>,</span><br><span class="line">                func=<span class="variable language_">self</span>.search.run,</span><br><span class="line">                description=<span class="string">&quot;适合用来搜索最新的医疗信息、研究进展和新闻等互联网信息&quot;</span></span><br><span class="line">            ),</span><br><span class="line">            Tool(</span><br><span class="line">                name=<span class="string">&quot;Symptom Extractor&quot;</span>,</span><br><span class="line">                func=<span class="variable language_">self</span>.extract_symptoms,</span><br><span class="line">                description=<span class="string">&quot;适合用来从文本中提取症状信息&quot;</span></span><br><span class="line">            ),</span><br><span class="line">            Tool(</span><br><span class="line">                name=<span class="string">&quot;Severity Assessment&quot;</span>,</span><br><span class="line">                func=<span class="variable language_">self</span>.assess_severity,</span><br><span class="line">                description=<span class="string">&quot;适合用来评估症状的严重程度&quot;</span></span><br><span class="line">            )</span><br><span class="line">        ]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 初始化智能体 - 关闭verbose输出以提高响应速度</span></span><br><span class="line">        <span class="variable language_">self</span>.agent = initialize_agent(</span><br><span class="line">            <span class="variable language_">self</span>.tools,</span><br><span class="line">            <span class="variable language_">self</span>.llm,</span><br><span class="line">            agent=<span class="string">&quot;zero-shot-react-description&quot;</span>,</span><br><span class="line">            verbose=<span class="literal">False</span>,  <span class="comment"># 从True改为False，减少输出信息</span></span><br><span class="line">            handle_parsing_errors=<span class="literal">True</span>,</span><br><span class="line">            max_iterations=<span class="number">3</span>,  <span class="comment"># 限制最大迭代次数</span></span><br><span class="line">            early_stopping_method=<span class="string">&quot;force&quot;</span></span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 初始化医疗工具</span></span><br><span class="line">        <span class="variable language_">self</span>.medical_tools = MedicalTools()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load_medical_knowledge</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;加载医疗知识库数据&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 获取data目录下的所有txt文件</span></span><br><span class="line">        data_dir = os.path.join(os.path.abspath(os.path.dirname(__file__)), <span class="string">&quot;../../data&quot;</span>)</span><br><span class="line">        files = glob.glob(os.path.join(data_dir, <span class="string">&quot;*.txt&quot;</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> files:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;警告: 未找到医疗知识库文件。将创建一个空的向量存储。&quot;</span>)</span><br><span class="line">            <span class="keyword">from</span> langchain_community.embeddings <span class="keyword">import</span> FakeEmbeddings</span><br><span class="line">            <span class="keyword">from</span> langchain_core.documents <span class="keyword">import</span> Document</span><br><span class="line">            <span class="comment"># 创建空文档列表并使用from_documents方法初始化Chroma</span></span><br><span class="line">            empty_docs = [Document(page_content=<span class="string">&quot;这是一个空的医疗知识库文档&quot;</span>, metadata=&#123;<span class="string">&quot;source&quot;</span>: <span class="string">&quot;empty&quot;</span>&#125;)]</span><br><span class="line">            <span class="keyword">return</span> Chroma.from_documents(empty_docs, FakeEmbeddings(size=<span class="number">768</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 加载文档</span></span><br><span class="line">        documents = []</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            loader = TextLoader(file, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">            documents.extend(loader.load())</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 分割文档</span></span><br><span class="line">        text_splitter = CharacterTextSplitter(chunk_size=<span class="number">1000</span>, chunk_overlap=<span class="number">200</span>)</span><br><span class="line">        texts = text_splitter.split_documents(documents)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建向量存储 - 使用FakeEmbeddings避免下载外部模型</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;使用FakeEmbeddings创建向量存储...&quot;</span>)</span><br><span class="line">        <span class="keyword">from</span> langchain_community.embeddings <span class="keyword">import</span> FakeEmbeddings</span><br><span class="line">        vectorstore = Chroma.from_documents(texts, FakeEmbeddings(size=<span class="number">768</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> vectorstore</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">query_medical_knowledge</span>(<span class="params">self, query</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;查询医疗知识库 - 优化查询逻辑以提高响应速度&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 快速查询</span></span><br><span class="line">            result = <span class="variable language_">self</span>.retrieval_chain.invoke(query)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 格式化回答，包含来源信息</span></span><br><span class="line">            answer = result[<span class="string">&quot;result&quot;</span>]</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 简化处理逻辑，减少不必要的操作</span></span><br><span class="line">            sources = <span class="built_in">set</span>()</span><br><span class="line">            <span class="keyword">for</span> doc <span class="keyword">in</span> result[<span class="string">&quot;source_documents&quot;</span>]:</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&quot;source&quot;</span> <span class="keyword">in</span> doc.metadata:</span><br><span class="line">                    sources.add(os.path.basename(doc.metadata[<span class="string">&quot;source&quot;</span>]))</span><br><span class="line">            </span><br><span class="line">            formatted_sources = <span class="string">&quot;\n来源: &quot;</span> + <span class="string">&quot;, &quot;</span>.join(sources) <span class="keyword">if</span> sources <span class="keyword">else</span> <span class="string">&quot;&quot;</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 直接返回回答，减少额外处理</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;answer&#125;</span><span class="subst">&#123;formatted_sources&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;知识库查询错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&quot;知识库查询失败: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extract_symptoms</span>(<span class="params">self, text</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;提取症状信息&quot;&quot;&quot;</span></span><br><span class="line">        symptoms = <span class="variable language_">self</span>.medical_tools.extract_symptoms(text)</span><br><span class="line">        <span class="keyword">if</span> symptoms:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&quot;提取到的症状: <span class="subst">&#123;<span class="string">&#x27;, &#x27;</span>.join(symptoms)&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;未提取到明显症状&quot;</span></span><br><span class="line">            </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">assess_severity</span>(<span class="params">self, symptoms_text</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;评估症状严重程度&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 先从文本中提取症状</span></span><br><span class="line">        symptoms = <span class="variable language_">self</span>.medical_tools.extract_symptoms(symptoms_text)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> symptoms:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;未提取到可评估的症状&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 评估严重程度</span></span><br><span class="line">        severity = <span class="variable language_">self</span>.medical_tools.assess_severity(symptoms)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;症状: <span class="subst">&#123;<span class="string">&#x27;, &#x27;</span>.join(symptoms)&#125;</span>\n<span class="subst">&#123;severity&#125;</span>&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self, question</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;运行智能体回答问题&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 验证医疗查询是否合适</span></span><br><span class="line">        is_valid, error_msg = <span class="variable language_">self</span>.medical_tools.validate_medical_query(question)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_valid:</span><br><span class="line">            <span class="keyword">return</span> error_msg</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 使用invoke方法替代已过时的run方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.agent.invoke(question)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 创建医疗智能体实例</span></span><br><span class="line">    medical_agent = MedicalAgent()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 示例问题</span></span><br><span class="line">    questions = [</span><br><span class="line">        <span class="string">&quot;什么是高血压？如何预防？&quot;</span>,</span><br><span class="line">        <span class="string">&quot;老年高血压患者有哪些注意事项？&quot;</span>,</span><br><span class="line">        <span class="string">&quot;脑血栓的高危因素有哪些？如何预防？&quot;</span>,</span><br><span class="line">        <span class="string">&quot;糖尿病的预防措施有哪些？&quot;</span>,</span><br><span class="line">        <span class="string">&quot;老年人如何保持健康的生活方式？&quot;</span>,</span><br><span class="line">        <span class="string">&quot;高血压、糖尿病和脑血栓之间有什么关系？&quot;</span>,</span><br><span class="line">        <span class="string">&quot;高危人群应该多久进行一次体检？&quot;</span></span><br><span class="line">    ]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 运行示例</span></span><br><span class="line">    <span class="keyword">for</span> q <span class="keyword">in</span> questions:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\n问题: <span class="subst">&#123;q&#125;</span>&quot;</span>)</span><br><span class="line">        result = medical_agent.run(q)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;回答: <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">该系统能够利用预设的医疗知识库和网络搜索功能，为用户提供专业、准确的医疗健康咨询服务。</summary>
    
    
    
    <category term="AI" scheme="https://pengline.github.io/categories/AI/"/>
    
    <category term="Agent" scheme="https://pengline.github.io/categories/AI/Agent/"/>
    
    
    <category term="AI" scheme="https://pengline.github.io/tags/AI/"/>
    
    <category term="LangChain" scheme="https://pengline.github.io/tags/LangChain/"/>
    
    <category term="LangGraph" scheme="https://pengline.github.io/tags/LangGraph/"/>
    
    <category term="Ollama" scheme="https://pengline.github.io/tags/Ollama/"/>
    
    <category term="医疗问答Agent" scheme="https://pengline.github.io/tags/%E5%8C%BB%E7%96%97%E9%97%AE%E7%AD%94Agent/"/>
    
  </entry>
  
  <entry>
    <title>Java 多线程之等待全部执行完成</title>
    <link href="https://pengline.github.io/2025/08/28/6d4b4511bd2443af994ec8e5982eb34a/"/>
    <id>https://pengline.github.io/2025/08/28/6d4b4511bd2443af994ec8e5982eb34a/</id>
    <published>2025-08-28T09:12:34.096Z</published>
    <updated>2025-09-08T23:49:05.411Z</updated>
    
    <content type="html"><![CDATA[<p>需求：多线程任务（查询、文件、API）同时执行，等所有线程执行完成后才能继续向下，执行其他任务</p><h2 id="submit-多线程">submit()  多线程</h2><p>底层通过实现 Future 接口实现返回值，获取 callable 接口。</p><p>只有等线程执行完成获取到结果后才能继续执行后面的流程，会阻塞直到结果返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原理</span></span><br><span class="line"><span class="keyword">public</span> Future&lt;?&gt; submit(Runnable task) &#123;</span><br><span class="line">    <span class="keyword">if</span> (task == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    RunnableFuture&lt;Void&gt; ftask = newTaskFor(task, <span class="literal">null</span>);</span><br><span class="line">    execute(ftask);</span><br><span class="line">    <span class="keyword">return</span> ftask;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RunnableAdapter 实现 Callable 接口的 call()</span></span><br><span class="line"><span class="keyword">protected</span> &lt;T&gt; RunnableFuture&lt;T&gt; <span class="title function_">newTaskFor</span><span class="params">(Runnable runnable, T value)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.callable = <span class="keyword">new</span> <span class="title class_">RunnableAdapter</span>&lt;T&gt;(runnable, value);</span><br><span class="line">    <span class="built_in">this</span>.state = NEW;       <span class="comment">// ensure visibility of callable</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Callable 的 get() 方法 ，通过运行状态 和 LockSupport 实现线程阻塞</span></span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt; 只有所有线程运行结束后才可以结束</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Haeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> haeng2030@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2025/1/14 18:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadOnlyAllBySubmit</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(RandomUtil.randomInt(n * <span class="number">2000</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;------thread = &#123;&#125;, num=&#123;&#125;, msg = &#123;&#125;&quot;</span>, Thread.currentThread().getName(), n, e.getLocalizedMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">5</span>, <span class="number">10</span>,</span><br><span class="line">                <span class="number">5L</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">ThreadOnlyAllBySubmit</span> <span class="variable">threadOnlyOne</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadOnlyAllBySubmit</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        submit 等待线程执行完成，返回值</span></span><br><span class="line">        Future&lt;Integer&gt; res1 = threadPool.submit(() -&gt; threadOnlyOne.test(<span class="number">1</span>));</span><br><span class="line">        Future&lt;Integer&gt; res2 = threadPool.submit(() -&gt; threadOnlyOne.test(<span class="number">4</span>));</span><br><span class="line">        Future&lt;Integer&gt; res3 = threadPool.submit(() -&gt; threadOnlyOne.test(<span class="number">7</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// get 方法等待线程执行完成后获取结果，超时后没有则抛出异常</span></span><br><span class="line">            log.warn(<span class="string">&quot;res1:: isDone=&#123;&#125;,   res=&#123;&#125;&quot;</span>, res1.isDone(), res1.get(<span class="number">5</span>, TimeUnit.SECONDS));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;+++++ meg1 = &#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;res2:: isDone=&#123;&#125;,   res=&#123;&#125;&quot;</span>, res2.isDone(), res2.get(<span class="number">5</span>, TimeUnit.SECONDS));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;+++++ meg2 = &#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;res3:: isDone=&#123;&#125;,   res=&#123;&#125;&quot;</span>, res3.isDone(), res3.get(<span class="number">5</span>, TimeUnit.SECONDS));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;+++++ meg3 = &#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Semaphore（信号量）">Semaphore（信号量）</h2><p>计数信号量用来控制同时访问某个特定资源的操作数量，或者同时执行某个指定操作的数量。计数信号量还可以用来实现某种资源池，或者对容器施加边界。</p><blockquote><p>Semaphore 中管理着一组虚拟的许可，通过  acquire 获取一个许可，如果没有许可则一直阻塞。其本质就是操作系统的P-V操作，当资源足够的时候线程获得资源并执行，资源不足时线程等待或者退出，当资源被释放时线程又可以获取竞争资源继续执行；</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt; 只有所有线程运行结束后才可以结束</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Haeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> haeng2030@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2025/1/14 18:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadOnlyAllBySemaphore</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Semaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n, <span class="keyword">final</span> AtomicInteger val)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(RandomUtil.randomInt(<span class="number">5000</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;------thread = &#123;&#125;, msg = &#123;&#125;&quot;</span>, Thread.currentThread().getName(), e.getLocalizedMessage());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        semaphore.release();</span><br><span class="line">        val.addAndGet(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">5</span>, <span class="number">10</span>,</span><br><span class="line">                <span class="number">5L</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">threadNum</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        <span class="type">ThreadOnlyAllBySemaphore</span> <span class="variable">threadOnlyOne</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadOnlyAllBySemaphore</span>();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">val</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">1</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">4</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">7</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">2</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">6</span>, val));</span><br><span class="line"></span><br><span class="line">        semaphore.acquire(threadNum);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;semaphore结果=&#123;&#125;&quot;</span>, val.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CountDownLatch（计数器）">CountDownLatch（计数器）</h2><p>一种同步工具类，可以延迟线程的进度直到其到达终止状态。可以用来确保某些活动直到其他活动都完成后才继续执行。</p><p>应用场景：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>确保某个计算在其需要的所有资源都被初始化之后才继续执行。</p></li><li class="lvl-2"><p>确保某个服务在其依赖的所有其他服务都已经启动之后才启动。</p></li><li class="lvl-2"><p>等待直到某个操作的所有参与者都就绪再继续执行。</p></li></ul></blockquote><p>实现原理：</p><blockquote><p>闭锁状态包括一个计数器，该计数器被初始化为一个正数，表示需要等待的事件数量。 countDown 方法用来递减计数器，表示有一个事件已经发生了， await 方法用来等待计数器达到零。如果计数器的值非零，那么 await 方法会一直阻塞直到计数器为零，或者等待中的线程中断、等待超时。当某个线程调用await()方法时，由于tryAcquireShared会判断state是否等于0，如果不等于，就会进入等待队列，直到countDown调用sync.releaseShared(1)使得sync的状态到0，await的线程才会继续执行；</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt; 只有所有线程运行结束后才可以结束</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Haeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> haeng2030@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2025/1/14 18:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadOnlyAllByCountDownLatch</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CountDownLatch countDownLatch;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ThreadOnlyAllByCountDownLatch</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.num = num;</span><br><span class="line">        countDownLatch = <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n, <span class="keyword">final</span> AtomicInteger val)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(RandomUtil.randomInt(<span class="number">5000</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;------thread = &#123;&#125;,  msg = &#123;&#125;&quot;</span>, Thread.currentThread().getName(), e.getLocalizedMessage());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.countDown();</span><br><span class="line"></span><br><span class="line">        val.addAndGet(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">5</span>, <span class="number">10</span>,</span><br><span class="line">                <span class="number">5L</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">threadNum</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        <span class="type">ThreadOnlyAllByCountDownLatch</span> <span class="variable">threadOnlyOne</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadOnlyAllByCountDownLatch</span>(threadNum);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">val</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">1</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">4</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">7</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">2</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">6</span>, val));</span><br><span class="line"></span><br><span class="line">        threadOnlyOne.countDownLatch.await();</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;countDownLatch结果=&#123;&#125;&quot;</span>, val.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">多线程如何实现“等待全部执行完成”，才能继续执行下一步。</summary>
    
    
    
    <category term="Java" scheme="https://pengline.github.io/categories/Java/"/>
    
    <category term="多线程" scheme="https://pengline.github.io/categories/Java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
    <category term="Java多线程" scheme="https://pengline.github.io/tags/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    <category term="Semaphore" scheme="https://pengline.github.io/tags/Semaphore/"/>
    
    <category term="ThreadPoolExecutor" scheme="https://pengline.github.io/tags/ThreadPoolExecutor/"/>
    
    <category term="Runnable" scheme="https://pengline.github.io/tags/Runnable/"/>
    
    <category term="Callable" scheme="https://pengline.github.io/tags/Callable/"/>
    
  </entry>
  
  <entry>
    <title>Java 多线程之等待至少一个执行完成</title>
    <link href="https://pengline.github.io/2025/08/28/ab60513384f74cac8ff0ab36a98cc1a6/"/>
    <id>https://pengline.github.io/2025/08/28/ab60513384f74cac8ff0ab36a98cc1a6/</id>
    <published>2025-08-28T09:11:42.868Z</published>
    <updated>2025-09-08T23:49:44.644Z</updated>
    
    <content type="html"><![CDATA[<p>需求：多个线程同时执行一个任务，只要一个成功就退出，其他线程任务可以取消或无视。</p><blockquote><p><strong>注意</strong>：如果要暂停线程池中其他未执行完成的线程，需要先记录下来，然后调用其打断方法。</p></blockquote><h2 id="CountDownLatch（计数器）">CountDownLatch（计数器）</h2><p>一种同步工具类，可以延迟线程的进度直到其到达终止状态。可以用来确保某些活动直到其他活动都完成后才继续执行。</p><p>应用场景：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>确保某个计算在其需要的所有资源都被初始化之后才继续执行。</p></li><li class="lvl-2"><p>确保某个服务在其依赖的所有其他服务都已经启动之后才启动。</p></li><li class="lvl-2"><p>等待直到某个操作的所有参与者都就绪再继续执行。</p></li></ul></blockquote><p>实现原理：</p><blockquote><p>闭锁状态包括一个计数器，该计数器被初始化为一个正数，表示需要等待的事件数量。 countDown 方法用来递减计数器，表示有一个事件已经发生了， await 方法用来等待计数器达到零。如果计数器的值非零，那么 await 方法会一直阻塞直到计数器为零，或者等待中的线程中断、等待超时。当某个线程调用await()方法时，由于tryAcquireShared会判断state是否等于0，如果不等于，就会进入等待队列，直到countDown调用sync.releaseShared(1)使得sync的状态到0，await的线程才会继续执行；</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt; 只要有一个线程运行结束后，就可以结束。忽视其他未完成线程</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; CountDownLatch</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Haeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> haeng2030@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2025/1/14 18:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadOnlyOneByCountDownLatch</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n, <span class="keyword">final</span> AtomicInteger val)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(RandomUtil.randomInt(<span class="number">5000</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;------thread = &#123;&#125;,  msg = &#123;&#125;&quot;</span>, Thread.currentThread().getName(), e.getLocalizedMessage());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.countDown();</span><br><span class="line"></span><br><span class="line">        val.compareAndSet(<span class="number">0</span>, n);</span><br><span class="line">        log.info(<span class="string">&quot;------thread = &#123;&#125;, num=&#123;&#125; &quot;</span>, Thread.currentThread().getName(), n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">5</span>, <span class="number">10</span>,</span><br><span class="line">                <span class="number">5L</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">ThreadOnlyOneByCountDownLatch</span> <span class="variable">threadOnlyOne</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadOnlyOneByCountDownLatch</span>();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">val</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">1</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">4</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">7</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">2</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">6</span>, val));</span><br><span class="line"></span><br><span class="line">        threadOnlyOne.countDownLatch.await();</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;countDownLatch结果=&#123;&#125;&quot;</span>, val.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CyclicBarrier（循环栅栏）">CyclicBarrier（循环栅栏）</h2><p>栅栏能阻塞一组线程直到某个事件发生，直到所有线程都到达栅栏点，栅栏才会打开。所以栅栏一般用于多个线程需要相互等待的情况</p><p><strong>闭锁用于等待事件，而栅栏用于等待其他线程。</strong></p><p>可以使一定数量的参与方（线程）<strong>反复地</strong>在栅栏位置汇集，<code>await</code>方法将阻塞直到所有线程都到达栅栏位置。</p><p><strong>原理实现:</strong></p><blockquote><p>CyclicBarrier 维护了一个计数器，和一个 generation 每次调用await都会有将计数器减一，并且产生一个新的 generation ，只要计数器不为零，所有前置线程都会触发  await(); 内部会调用 LockSupport.park(this); 方法将线程加入等待队列， 所有线程就绪，会调用 trip.signalAll(); 唤醒所有线程，同时执行一个用户自定义的 Runnable 策略</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt; 一个线程完成就继续，忽视其他未完成线程</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; CyclicBarrier  两个屏障</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Haeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> haeng2030@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2025/1/14 18:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadOnlyOneByCyclicBarrier</span> &#123;</span><br><span class="line"><span class="comment">//    建立两个屏障</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">CyclicBarrier</span> <span class="variable">cyclicBarrier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n, <span class="keyword">final</span> AtomicInteger val)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(RandomUtil.randomInt(<span class="number">5000</span>));</span><br><span class="line">            cyclicBarrier.await(); <span class="comment">//放开栅栏1</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;------thread = &#123;&#125;, num=&#123;&#125;, msg = &#123;&#125;&quot;</span>, Thread.currentThread().getName(), n, e.getLocalizedMessage());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        val.compareAndSet(<span class="number">0</span>, n);</span><br><span class="line">        log.info(<span class="string">&quot;------thread = &#123;&#125;, num=&#123;&#125; &quot;</span>, Thread.currentThread().getName(), n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, BrokenBarrierException &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">5</span>, <span class="number">10</span>,</span><br><span class="line">                <span class="number">5L</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">ThreadOnlyOneByCyclicBarrier</span> <span class="variable">threadOnlyOne</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadOnlyOneByCyclicBarrier</span>();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">val</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">1</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">4</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">7</span>, val));</span><br><span class="line"></span><br><span class="line">        threadOnlyOne.cyclicBarrier.await(); <span class="comment">//放开栅栏1</span></span><br><span class="line">        log.info(<span class="string">&quot;结果=&#123;&#125;&quot;</span>, val.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Semaphore（信号量）">Semaphore（信号量）</h2><p>计数信号量用来控制同时访问某个特定资源的操作数量，或者同时执行某个指定操作的数量。计数信号量还可以用来实现某种资源池，或者对容器施加边界。</p><blockquote><p>Semaphore 中管理着一组虚拟的许可，通过  acquire 获取一个许可，如果没有许可则一直阻塞。其本质就是操作系统的P-V操作，当资源足够的时候线程获得资源并执行，资源不足时线程等待或者退出，当资源被释放时线程又可以获取竞争资源继续执行；</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt; 一个线程完成就继续，忽视其他未完成线程</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Semaphore 信号量</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Haeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> haeng2030@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2025/1/14 18:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadOnlyOneBySemaphore</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Semaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n, <span class="keyword">final</span> AtomicInteger val)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(RandomUtil.randomInt(<span class="number">5000</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;------thread = &#123;&#125;, msg = &#123;&#125;&quot;</span>, Thread.currentThread().getName(), e.getLocalizedMessage());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        semaphore.release(); <span class="comment">// 释放信号量</span></span><br><span class="line">        val.compareAndSet(<span class="number">0</span>, n);</span><br><span class="line">        log.info(<span class="string">&quot;------thread = &#123;&#125;, num=&#123;&#125; &quot;</span>, Thread.currentThread().getName(), n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">5</span>, <span class="number">10</span>,</span><br><span class="line">                <span class="number">5L</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">ThreadOnlyOneBySemaphore</span> <span class="variable">threadOnlyOne</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadOnlyOneBySemaphore</span>();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">val</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">1</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">4</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">7</span>, val));</span><br><span class="line"></span><br><span class="line">        semaphore.acquire();</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;semaphore结果=&#123;&#125;&quot;</span>, val.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Queue（阻塞队列）">Queue（阻塞队列）</h2><p>通过队列的阻塞等待实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt; 其中一个线程运行结束后就可以结束，忽视其他未完成线程</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Haeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> haeng2030@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2025/1/14 18:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadOnlyOneByQueue</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> BlockingQueue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(RandomUtil.randomInt(<span class="number">5000</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;------thread = &#123;&#125;, msg = &#123;&#125;&quot;</span>, Thread.currentThread().getName(), e.getLocalizedMessage());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        queue.add(n);</span><br><span class="line">        log.info(<span class="string">&quot;------thread = &#123;&#125;, num=&#123;&#125; &quot;</span>, Thread.currentThread().getName(), n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">5</span>, <span class="number">10</span>,</span><br><span class="line">                <span class="number">5L</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">ThreadOnlyOneByQueue</span> <span class="variable">threadOnlyOne</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadOnlyOneByQueue</span>();</span><br><span class="line"></span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">1</span>));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">4</span>));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">7</span>));</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;结果=&#123;&#125;&quot;</span>, queue.take());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何打断其他线程">如何打断其他线程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt; 其中一个线程运行结束后就可以结束</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;  终止其他未结束的线程，需要先将所有线程记录下来，然后调用其打断方法。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Haeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> haeng2030@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2025/1/14 18:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadOnlyOneByQueueAndInterruptOther</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> BlockingQueue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n, Set&lt;Thread&gt; runThread)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">currentThread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        runThread.add(currentThread);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(n * RandomUtil.randomInt(<span class="number">1000</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;------thread = &#123;&#125;, msg = &#123;&#125;&quot;</span>, currentThread.getName(), e.getLocalizedMessage());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        queue.add(n);</span><br><span class="line">        runThread.remove(currentThread);</span><br><span class="line">        log.info(<span class="string">&quot;------thread = &#123;&#125;, num=&#123;&#125; &quot;</span>, currentThread.getName(), n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">5</span>, <span class="number">10</span>,</span><br><span class="line">                <span class="number">5L</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录此次运行的线程</span></span><br><span class="line">        <span class="keyword">final</span> Set&lt;Thread&gt; runThread = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        threadPool.execute(() -&gt; ThreadOnlyOneByQueueAndInterruptOther.test(<span class="number">411</span>, runThread));</span><br><span class="line">        threadPool.execute(() -&gt; ThreadOnlyOneByQueueAndInterruptOther.test(<span class="number">114</span>, runThread));</span><br><span class="line">        threadPool.execute(() -&gt; ThreadOnlyOneByQueueAndInterruptOther.test(<span class="number">70</span>, runThread));</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;结果=&#123;&#125;&quot;</span>, queue.take());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!runThread.isEmpty())<span class="comment">// 打断还在运行中的其他线程</span></span><br><span class="line">            runThread.parallelStream().forEach(Thread::interrupt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">多线程如何实现“等待至少一个执行完成”，就可执行下一步。</summary>
    
    
    
    <category term="Java" scheme="https://pengline.github.io/categories/Java/"/>
    
    <category term="多线程" scheme="https://pengline.github.io/categories/Java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
    <category term="Java多线程" scheme="https://pengline.github.io/tags/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    <category term="Semaphore" scheme="https://pengline.github.io/tags/Semaphore/"/>
    
    <category term="CountDownLatch" scheme="https://pengline.github.io/tags/CountDownLatch/"/>
    
    <category term="ThreadPoolExecutor" scheme="https://pengline.github.io/tags/ThreadPoolExecutor/"/>
    
    <category term="Runnable" scheme="https://pengline.github.io/tags/Runnable/"/>
    
  </entry>
  
</feed>
