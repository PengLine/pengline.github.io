<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>几种面向服务的模块化框架（OSGi）</title>
      <link href="/2025/10/40000ca1b2ef437d9c04406029b8a3f0/"/>
      <url>/2025/10/40000ca1b2ef437d9c04406029b8a3f0/</url>
      
        <content type="html"><![CDATA[<p>OSGi（Open Service Gateway initiative）是一个用于模块化 Java 应用程序的动态组件模型标准。旨在解决 Java 平台在模块化、动态性和服务管理方面的不足。</p><h2 id="OSGi">OSGi</h2><p>OSGi是一种<strong>面向服务的模块化框架</strong>，它将应用程序划分为多个独立的、可重用的模块，每个模块被称为一个bundle。每个bundle都有自己的生命周期、类加载器和依赖管理机制。</p><blockquote><p>OSGi框架提供了<strong>动态部署、服务导向、类加载隔离和生命周期管理</strong>等关键特性，使得应用程序更具灵活性和可维护性。</p><p>OSGi 的核心思想是将应用程序划分为多个<strong>模块（称为 Bundle）</strong>，这些模块可以在运行时动态安装、启动、停止、更新和卸载，同时支持服务的发布与发现机制。</p></blockquote><h3 id="特点">特点</h3><ol><li class="lvl-3"><p><strong>模块化（Modularity）</strong><br>OSGi 将应用程序划分为多个称为 <strong>Bundle</strong>（包）的模块。每个 Bundle 是一个 JAR 文件，包含代码、资源以及一个特殊的清单文件（<code>MANIFEST.MF</code>），用于声明模块的元数据，如：</p><blockquote><ul class="lvl-3"><li class="lvl-2">Bundle 名称、版本</li><li class="lvl-2">导出的包（Export-Package）</li><li class="lvl-2">依赖的包（Import-Package）</li><li class="lvl-2">所需的服务等</li></ul></blockquote><p>这种机制实现了清晰的模块边界和依赖管理，避免了传统 Java 应用中“类路径地狱”（classpath hell）的问题。</p></li><li class="lvl-3"><p><strong>动态性（Dynamism）</strong><br>OSGi 支持在运行时动态安装、启动、停止、更新和卸载 Bundle，而无需重启整个应用。这使得系统具备高度的灵活性和可维护性，特别适用于需要长期运行、持续更新的系统（如嵌入式设备、企业服务器等）。</p></li><li class="lvl-3"><p><strong>面向服务的架构（Service-Oriented Architecture）</strong><br>OSGi 提供了一个轻量级的服务注册与发现机制。Bundle 可以：</p><blockquote><ul class="lvl-3"><li class="lvl-2">注册服务（通过接口暴露功能）</li><li class="lvl-2">查找和绑定其他 Bundle 提供的服务</li><li class="lvl-2">监听服务的动态变化（如服务上线/下线）</li></ul></blockquote><p>服务以 Java 接口形式定义，实现了解耦和动态绑定。</p></li><li class="lvl-3"><p><strong>生命周期管理</strong><br>每个 Bundle 都有明确的生命周期状态（如 INSTALLED、RESOLVED、STARTING、ACTIVE、STOPPING、UNINSTALLED），并可通过 <code>BundleActivator</code> 或声明式服务（Declarative Services）等方式参与生命周期控制。</p></li></ol><h3 id="组成">组成</h3><p>OSGi 的组成可概括为三大核心层，通过这些机制，OSGi 实现了高度模块化、松耦合、可动态演进的 Java 应用架构。</p><h4 id="模块层（Module-Layer）">模块层（Module Layer）</h4><p>这是 OSGi 的基础，用于定义模块化单元。</p><ul class="lvl-0"><li class="lvl-2"><p><strong>Bundle（模块）</strong>：OSGi 中的基本部署单元，本质上是一个带有特殊元数据（<code>MANIFEST.MF</code> 文件）的 JAR 文件。</p></li><li class="lvl-2"><p><strong>元数据（Manifest）</strong>：通过 <code>MANIFEST.MF</code> 中的 OSGi 特定头（如 <code>Bundle-SymbolicName</code>、<code>Export-Package</code>、<code>Import-Package</code> 等）声明模块的依赖和导出内容。</p></li><li class="lvl-2"><p><strong>包级别的可见性控制</strong>：Bundle 可以精确控制哪些 Java 包对外可见（导出），哪些包仅内部使用（私有），从而实现强封装。</p></li></ul><blockquote><p>Bundle其实就是个jar包， 是OSGi特定描述的一个jar包，具体位置在<code>META-INF/MANIFEST.MF</code>文件，Bundle有很多中状态。很好的隔离了外部类和内部类，一个个的Bundle组成了基于OSGi的应用，Bundle是组件和服务的载体；</p><p>SOCM（Service-Oriented Component Model）是面向服务的组件模型（Component），任何一个普通的java对象都可以通过配置文件中的定义来得到，Component其实就是服务的载体，既可以提供对外使用的服务也可以使用外部服务；</p><img src="/imgs/java/8e4f9fa379283951bcde62fbf755fadb.png" alt="img" style="zoom:60%;" /></blockquote><h4 id="服务层（Service-Layer）">服务层（Service Layer）</h4><p>OSGi 的核心优势之一，支持面向服务的编程模型。</p><ul class="lvl-0"><li class="lvl-2"><p><strong>服务（Service）</strong>：普通 Java 对象（POJO），通过接口注册到 OSGi 服务注册表中。</p></li><li class="lvl-2"><p>服务注册与发现：</p><ul class="lvl-2"><li class="lvl-4">Bundle 可通过 <code>BundleContext.registerService()</code> 发布服务。</li><li class="lvl-4">其他 Bundle 可通过 <code>BundleContext.getServiceReference()</code> 或使用服务追踪器（ServiceTracker）或声明式服务（Declarative Services）来消费服务。</li></ul></li><li class="lvl-2"><p><strong>动态绑定</strong>：服务可以随时注册或注销，消费者能动态响应服务的变化（如服务上线/下线）。</p></li></ul><blockquote><p>一个OSGi Service就是一个注册到OSGi框架中的java对象，在注册的时候可以设置Service的属性，在获取Service的时候也可以根据属性进行过滤，具体交互过程如图：</p><img src="/imgs/java/9c26f64eb6e5c06b39b709fcb49cbafd.png" alt="img" style="zoom:50%;" /><p><strong>Declarative Service</strong> 简称DS，DS可以让我们在Bundle中定义Component,通过配置的方式发布服务和获取服务；</p></blockquote><h4 id="生命周期层">生命周期层</h4><p>提供对 Bundle 的动态管理能力。</p><ul class="lvl-0"><li class="lvl-2"><p><strong>BundleContext</strong>：每个 Bundle 在启动时获得一个 <code>BundleContext</code> 对象，用于与 OSGi 框架交互（如安装/卸载其他 Bundle、注册/查找服务等）。</p></li><li class="lvl-2"><p><strong>生命周期状态</strong>：Bundle 有明确的状态（INSTALLED、RESOLVED、STARTING、ACTIVE、STOPPING、UNINSTALLED）。</p></li><li class="lvl-2"><p><strong>动态性</strong>：支持在运行时安装、启动、停止、更新、卸载 Bundle，无需重启整个应用。</p></li></ul><h3 id="架构">架构</h3><p>OSGi就如同操作系统一样，为应用程序的运行提供运行环境，我们并不能直接感受到操作系统，但是他一直为我们服务，同样，OSGi我们感知不到他的存在，但是我们却每时每刻都在享受他带给我们的便利；</p><p>OSGi一共分三层，就如同网络分层结构一样，层次分明同时逐层依赖，顺序是万万不能颠倒的；</p><img src="/imgs/java/c48926cd311111c5d6ad63789aa2b99b.png" alt="img" style="zoom:60%;" /><ul class="lvl-0"><li class="lvl-2"><p>模块层：定义了OSGi的概念，称之为bundle，包含元数据、类文件和 相关资源的jar包，Bundle可以声明哪些包可以对外可见，以及声明可以依赖哪些外部包，也就是哪些包是可以导入的；</p></li><li class="lvl-2"><p>生命周期层： 生命周期层一个是在应用程序的外部定义了Bundle生命周期的操作（安装、卸载等），另一个就是在应用程序的内部定义了Bundle如何访问他们的执行环境；</p></li><li class="lvl-2"><p>服务层：工作原理与面向服务相似。实现的时候先定义一个接口再实现，用Bundle激活器完成服务注册和服务发现</p></li></ul><h2 id="框架">框架</h2><p>运行OSGi应用程序，我们需要OSGi容器，常见的OSGi容器有如下几种，都是基于OSGi标准实现的</p><h3 id="Apache-Felix（推荐）"><a href="https://felix.apache.org/documentation/index.html">Apache Felix</a>（推荐）</h3><p>Apache旗下的一个OSGi框架，项目本身非常成熟，提供的服务也是最全的，几乎涵盖了全部的OSGi 4.2的标准</p><p><strong>使用方法</strong>：</p><ol><li class="lvl-3"><p><a href="https://felix.apache.org/documentation/downloads.html">下载</a>，解压</p></li><li class="lvl-3"><p>启动 <code>java -jar bin/felix.jar &lt;cache-path&gt;</code>，此命令会安装bundle目录所有的bundles。默认的，bundle目录含有shell相关的用户界面来与框架交互。安装到框架的bundle会复制一份到缓存目录（felix-cache）。不指定目录就是本目录下</p></li><li class="lvl-3"><p>IDEA 安装OSGI插件，加入felix</p></li><li class="lvl-3"><p>新建一个OSGI项目：JBoss -&gt; OSGI</p></li><li class="lvl-3"><p>src 同级别下，创建目录和文件  META-INF/manifest.mf</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Bundle-Name</span>: <span class="string">Service listener example</span></span><br><span class="line"><span class="attr">Bundle-Description</span>: <span class="string">A bundle that displays messages at startup and when service events occur</span></span><br><span class="line"><span class="attr">Bundle-Vendor</span>: <span class="string">Apache Felix</span></span><br><span class="line"><span class="attr">Bundle-Version</span>: <span class="string">1.0.0</span></span><br><span class="line"><span class="attr">Bundle-Activator</span>: <span class="string">com.demo.osgi.felix.Activator</span></span><br><span class="line"><span class="attr">Import-Package</span>: <span class="string">org.osgi.framework</span></span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p>创建 Bundle-Activator 示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.osgi.felix;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.osgi.framework.BundleActivator;</span><br><span class="line"><span class="keyword">import</span> org.osgi.framework.BundleContext;</span><br><span class="line"><span class="keyword">import</span> org.osgi.framework.ServiceEvent;</span><br><span class="line"><span class="keyword">import</span> org.osgi.framework.ServiceListener;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This class implements a simple bundle that utilizes the OSGi</span></span><br><span class="line"><span class="comment"> * framework&#x27;s event mechanism to listen for service events. Upon</span></span><br><span class="line"><span class="comment"> * receiving a service event, it prints out the event&#x27;s details.</span></span><br><span class="line"><span class="comment"> 来自官网的案例：事件监听</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Activator</span> <span class="keyword">implements</span> <span class="title class_">BundleActivator</span>, ServiceListener &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(BundleContext context)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Starting to listen for service events.&quot;</span>);</span><br><span class="line">        context.addServiceListener(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">(BundleContext context)</span> &#123;</span><br><span class="line">        context.removeServiceListener(<span class="built_in">this</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Stopped listening for service events.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serviceChanged</span><span class="params">(ServiceEvent event)</span> &#123;</span><br><span class="line">        String[] objectClass = (String[])</span><br><span class="line">                event.getServiceReference().getProperty(<span class="string">&quot;objectClass&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (event.getType() == ServiceEvent.REGISTERED) &#123;</span><br><span class="line">            System.out.println(</span><br><span class="line">                    <span class="string">&quot;Ex1: Service of type &quot;</span> + objectClass[<span class="number">0</span>] + <span class="string">&quot; registered.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType() == ServiceEvent.UNREGISTERING) &#123;</span><br><span class="line">            System.out.println(</span><br><span class="line">                    <span class="string">&quot;Ex1: Service of type &quot;</span> + objectClass[<span class="number">0</span>] + <span class="string">&quot; unregistered.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType() == ServiceEvent.MODIFIED) &#123;</span><br><span class="line">            System.out.println(</span><br><span class="line">                    <span class="string">&quot;Ex1: Service of type &quot;</span> + objectClass[<span class="number">0</span>] + <span class="string">&quot; modified.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p>IDEA 配置运行</p><ol><li class="lvl-6">运行配置，选择osgi bundle 选择合适的osgi框架，并将当前module添加进来</li><li class="lvl-6">右键项目，open module settings，在mainfest generation 中 添加 bundle</li></ol></li><li class="lvl-3"><p>将项目打成jar，安装在Apache Felix中，使用以下命令来安装和启动bundle</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">install file:/path/to/demo.jar</span><br><span class="line">start &lt;bundle-id&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Eclipse-Equinox"><a href="http://www.eclipse.org/equinox/">Eclipse Equinox</a></h3><p>Eclipse旗下的OSGi框架，是Eclipse注明的PDE开发环境的底层，和Eclipse结合紧密，只要你安装了PDE，你就已经有了Equinox，可以方便的在Eclipse里设置你开发的Bundle，启动、部署等操作也异常简单</p><p>如果是基于Eclipse开发，Equinox无疑是好的选择</p><h3 id="Spring-DM"><a href="http://www.springsource.org/osgi">Spring DM</a></h3><p>Spring旗下的OSGi框架</p><p>除非有基于Spring项目的移植需求，否则不推荐其他情况下使用Spring DM。</p><h3 id="Knopflerfish"><a href="http://www.knopflerfish.org/">Knopflerfish</a></h3><p>是OSGi的先行者，它本身是一个相当标准OSGi框架，提供了绝大多数标准功能</p><p>但是无论在人气上，开发进度上，文档完善上都不如其他的三者</p><h2 id="Felix-示例">Felix 示例</h2><p>演示OSGi框架的使用，创建一个简单的示例，其中包含两个模块：一个模块提供Greeting服务，另一个模块使用该服务进行输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">GreetingService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现了GreetingService接口的模块GreetingModule</span></span><br><span class="line"><span class="comment">// BundleActivator是一个OSGi bundle的生命周期管理接口。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GreetingModule</span> <span class="keyword">implements</span> <span class="title class_">GreetingService</span>, BundleActivator &#123;</span><br><span class="line">    <span class="keyword">private</span> BundleContext context;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册了GreetingService服务，以便其他bundle可以使用它</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(BundleContext context)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.context = context;</span><br><span class="line">        System.out.println(<span class="string">&quot;GreetingModule started&quot;</span>);</span><br><span class="line">        context.registerService(GreetingService.class.getName(), <span class="built_in">this</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在bundle停止时进行清理工作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">(BundleContext context)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;GreetingModule stopped&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello from GreetingModule&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个使用GreetingService的模块ClientModule：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现了OSGi bundle生命周期管理接口BundleActivator</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClientModule</span> <span class="keyword">implements</span> <span class="title class_">BundleActivator</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> BundleContext context;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用BundleContext获取了GreetingService的引用，并调用其sayHello方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(BundleContext context)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.context = context;</span><br><span class="line">        System.out.println(<span class="string">&quot;ClientModule started&quot;</span>);</span><br><span class="line">        ServiceReference&lt;GreetingService&gt; serviceRef = context.getServiceReference(GreetingService.class);</span><br><span class="line">        <span class="type">GreetingService</span> <span class="variable">greetingService</span> <span class="operator">=</span> context.getService(serviceRef);</span><br><span class="line">        greetingService.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">(BundleContext context)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ClientModule stopped&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个包含上述两个模块的<code>META-INF/MANIFEST.MF</code>文件：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Bundle-SymbolicName</span>: <span class="string">com.example.osgi.demo</span></span><br><span class="line"><span class="attr">Bundle-Version</span>: <span class="string">1.0.0</span></span><br><span class="line"><span class="attr">Bundle-Activator</span>: <span class="string">com.demo.osgi.GreetingModule;com.demo.osgi.ClientModule</span></span><br></pre></td></tr></table></figure><p>运行OSGi应用程序，我们需要一个OSGi容器。常见的OSGi容器有Apache Felix和Eclipse Equinox</p><p>将上述代码编译成JAR文件，并将其放入Apache Felix的运行目录中。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动Apache Felix容器，执行以下命令：</span></span><br><span class="line">java -jar bin/felix.jar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在Apache Felix控制台中，使用以下命令来安装和启动bundle：</span></span><br><span class="line">install file:/path/to/demo.jar</span><br><span class="line">start &lt;bundle-id&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> OSGi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向服务 </tag>
            
            <tag> 模块化 </tag>
            
            <tag> Apache Felix </tag>
            
            <tag> Spring DM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>几种规则引擎系统的使用指南</title>
      <link href="/2025/10/e1f7c62a56da4173a8c13b2fcfd7f7b9/"/>
      <url>/2025/10/e1f7c62a56da4173a8c13b2fcfd7f7b9/</url>
      
        <content type="html"><![CDATA[<p>规则引擎，全称：业务规则管理系统，英文名为BRMS(Business Rule Management System)。</p><blockquote><p>规则引擎的主要思想是将应用程序中的业务决策部分分离出来，并使用预定义的语义模块编写业务决策（业务规则），由用户或开发者在需要时进行配置、管理。</p><p><strong>可降低组件业务逻辑复杂性、降低应用程序的维护和可扩展性成本的组件</strong></p></blockquote><h2 id="适用场景">适用场景</h2><p>业务规则经常变化，系统需依据业务的变化，实现快速、低成本的迭代更新。</p><p>规则系统特别适合以下场景：</p><ol><li class="lvl-3"><p><strong>业务规则频繁变化</strong> - 营销策略、风控规则等</p></li><li class="lvl-3"><p><strong>复杂决策逻辑</strong> - 需要多条件组合判断的场景</p></li><li class="lvl-3"><p><strong>需要业务人员参与</strong> - 非技术人员需要配置规则</p></li><li class="lvl-3"><p><strong>高可配置性要求</strong> - 不同客户需要不同的规则集</p></li><li class="lvl-3"><p><strong>审计和合规要求</strong> - 需要记录和追踪规则变更</p></li></ol><p>因此，为了快速、低成本的更新，我们需将逻辑代码和业务代码进行解耦：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>业务规则与系统代码分离，实现业务规则的集中管理</p></li><li class="lvl-2"><p>业务人员可直接管理这些业务规则，同时不需要研发人员的参与。</p></li><li class="lvl-2"><p>稳定层和变化层分离，是一种优秀的设计模式；</p></li><li class="lvl-2"><p>变化层支持可视化或配置化方式，快速进行业务规则的增删改操作，甚至支持热插拔和热更新。以减少冗长的开发和测试周期；</p></li><li class="lvl-2"><p>部分规则引擎甚至带有设计器（如drools），还可解决我们 “简式建模” 的需求。</p></li></ul></blockquote><p>对于一些存在比较复杂的业务规则并且业务规则会频繁变动的系统比较适合使用规则引擎，如下：</p><blockquote><p>1、风险控制系统----风险贷款、风险评估</p><p>2、反欺诈项目----银行贷款、征信验证</p><p>3、决策平台系统----财务计算</p><p>4、促销平台系统----满减、打折、加价购</p><p>…</p></blockquote><h3 id="风控与反欺诈系统">风控与反欺诈系统</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 金融风控规则</span></span><br><span class="line"><span class="meta">@Rule(name = &quot;高风险交易检测&quot;, priority = 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HighRiskTransactionRule</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Condition</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isHighRisk</span><span class="params">(<span class="meta">@Fact(&quot;transaction&quot;)</span> Transaction transaction)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> transaction.getAmount() &gt; <span class="number">10000</span> || </span><br><span class="line">               transaction.isInternational();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Action</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flagForReview</span><span class="params">(<span class="meta">@Fact(&quot;transaction&quot;)</span> Transaction transaction)</span> &#123;</span><br><span class="line">        transaction.setRiskLevel(RiskLevel.HIGH);</span><br><span class="line">        System.out.println(<span class="string">&quot;交易金额过大或跨境，需要人工审核&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Rule(name = &quot;可疑行为检测&quot;, priority = 2)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SuspiciousBehaviorRule</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Condition</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSuspicious</span><span class="params">(<span class="meta">@Fact(&quot;user&quot;)</span> User user, </span></span><br><span class="line"><span class="params">                               <span class="meta">@Fact(&quot;transaction&quot;)</span> Transaction transaction)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user.getLoginLocation().equals(<span class="string">&quot;异地&quot;</span>) &amp;&amp; </span><br><span class="line">               transaction.getAmount() &gt; <span class="number">5000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Action</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">triggerAlert</span><span class="params">()</span> &#123;</span><br><span class="line">        alertService.sendAlert(<span class="string">&quot;检测到可疑交易行为&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="营销与促销系统">营销与促销系统</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 电商促销规则</span></span><br><span class="line"><span class="meta">@Rule(name = &quot;新用户优惠&quot;, priority = 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NewUserDiscountRule</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Condition</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isNewUser</span><span class="params">(<span class="meta">@Fact(&quot;user&quot;)</span> User user, </span></span><br><span class="line"><span class="params">                            <span class="meta">@Fact(&quot;order&quot;)</span> Order order)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user.isNewUser() &amp;&amp; order.getAmount() &gt; <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Action</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">applyDiscount</span><span class="params">(<span class="meta">@Fact(&quot;order&quot;)</span> Order order)</span> &#123;</span><br><span class="line">        order.applyDiscount(<span class="number">0.1</span>); <span class="comment">// 新用户9折</span></span><br><span class="line">        System.out.println(<span class="string">&quot;新用户享受9折优惠&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Rule(name = &quot;会员日促销&quot;, priority = 2)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberDayRule</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Condition</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isMemberDay</span><span class="params">(<span class="meta">@Fact(&quot;date&quot;)</span> LocalDate date,</span></span><br><span class="line"><span class="params">                              <span class="meta">@Fact(&quot;user&quot;)</span> User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> date.getDayOfMonth() == <span class="number">8</span> &amp;&amp; <span class="comment">// 每月8号会员日</span></span><br><span class="line">               user.isVIP();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Action</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">applyMemberDiscount</span><span class="params">(<span class="meta">@Fact(&quot;order&quot;)</span> Order order)</span> &#123;</span><br><span class="line">        order.applyDiscount(<span class="number">0.15</span>); <span class="comment">// 会员日85折</span></span><br><span class="line">        System.out.println(<span class="string">&quot;会员日享受85折优惠&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="审批工作流系统">审批工作流系统</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 贷款审批规则集</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoanApprovalWorkflow</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Rule(name = &quot;基础资格检查&quot;, priority = 1)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasicEligibilityRule</span> &#123;</span><br><span class="line">        <span class="meta">@Condition</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkBasic</span><span class="params">(<span class="meta">@Fact(&quot;application&quot;)</span> LoanApplication app)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> app.getAge() &gt;= <span class="number">22</span> &amp;&amp; app.getAge() &lt;= <span class="number">60</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Action</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">markEligible</span><span class="params">(<span class="meta">@Fact(&quot;result&quot;)</span> ApprovalResult result)</span> &#123;</span><br><span class="line">            result.addQualification(<span class="string">&quot;年龄符合要求&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Rule(name = &quot;收入要求检查&quot;, priority = 2)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IncomeRequirementRule</span> &#123;</span><br><span class="line">        <span class="meta">@Condition</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkIncome</span><span class="params">(<span class="meta">@Fact(&quot;application&quot;)</span> LoanApplication app)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> app.getMonthlyIncome() &gt;= app.getLoanAmount() * <span class="number">0.3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Action</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">markIncomeQualified</span><span class="params">(<span class="meta">@Fact(&quot;result&quot;)</span> ApprovalResult result)</span> &#123;</span><br><span class="line">            result.addQualification(<span class="string">&quot;收入符合要求&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="智能路由与推荐系统">智能路由与推荐系统</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 客服工单路由规则</span></span><br><span class="line"><span class="meta">@Rule(name = &quot;技术问题路由&quot;, priority = 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TechnicalIssueRouteRule</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Condition</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isTechnicalIssue</span><span class="params">(<span class="meta">@Fact(&quot;ticket&quot;)</span> SupportTicket ticket)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ticket.getCategory().equals(<span class="string">&quot;技术问题&quot;</span>) || </span><br><span class="line">               ticket.getKeywords().contains(<span class="string">&quot;bug&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Action</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">routeToTechTeam</span><span class="params">(<span class="meta">@Fact(&quot;ticket&quot;)</span> SupportTicket ticket)</span> &#123;</span><br><span class="line">        ticket.assignTo(<span class="string">&quot;技术支持团队&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;技术问题已路由到技术支持团队&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Rule(name = &quot;VIP客户优先路由&quot;, priority = 2)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VIPCustomerRouteRule</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Condition</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isVIPCustomer</span><span class="params">(<span class="meta">@Fact(&quot;user&quot;)</span> User user,</span></span><br><span class="line"><span class="params">                                <span class="meta">@Fact(&quot;ticket&quot;)</span> SupportTicket ticket)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user.isVIP() &amp;&amp; ticket.getPriority() == Priority.HIGH;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Action</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">routeToSeniorStaff</span><span class="params">(<span class="meta">@Fact(&quot;ticket&quot;)</span> SupportTicket ticket)</span> &#123;</span><br><span class="line">        ticket.assignTo(<span class="string">&quot;高级客服专员&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;VIP客户问题已路由到高级专员&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据验证与清洗系统">数据验证与清洗系统</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据质量检查规则</span></span><br><span class="line"><span class="meta">@Rule(name = &quot;数据完整性检查&quot;, priority = 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataCompletenessRule</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Condition</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasMissingFields</span><span class="params">(<span class="meta">@Fact(&quot;data&quot;)</span> DataRecord record)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> record.getField(<span class="string">&quot;name&quot;</span>) == <span class="literal">null</span> || </span><br><span class="line">               record.getField(<span class="string">&quot;email&quot;</span>) == <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Action</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flagIncomplete</span><span class="params">(<span class="meta">@Fact(&quot;data&quot;)</span> DataRecord record)</span> &#123;</span><br><span class="line">        record.setStatus(DataStatus.INCOMPLETE);</span><br><span class="line">        System.out.println(<span class="string">&quot;数据记录缺少必填字段&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Rule(name = &quot;数据格式验证&quot;, priority = 2)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataFormatRule</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Condition</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasFormatIssues</span><span class="params">(<span class="meta">@Fact(&quot;data&quot;)</span> DataRecord record)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">email</span> <span class="operator">=</span> record.getField(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> email != <span class="literal">null</span> &amp;&amp; !isValidEmail(email);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Action</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flagFormatError</span><span class="params">(<span class="meta">@Fact(&quot;data&quot;)</span> DataRecord record)</span> &#123;</span><br><span class="line">        record.setStatus(DataStatus.FORMAT_ERROR);</span><br><span class="line">        System.out.println(<span class="string">&quot;邮箱格式不正确&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="物联网设备监控系统">物联网设备监控系统</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设备状态监控规则</span></span><br><span class="line"><span class="meta">@Rule(name = &quot;温度异常告警&quot;, priority = 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemperatureAlertRule</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Condition</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isTemperatureHigh</span><span class="params">(<span class="meta">@Fact(&quot;sensor&quot;)</span> SensorData sensor)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sensor.getTemperature() &gt; <span class="number">80</span>; <span class="comment">// 温度超过80度</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Action</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">triggerTemperatureAlert</span><span class="params">(<span class="meta">@Fact(&quot;sensor&quot;)</span> SensorData sensor)</span> &#123;</span><br><span class="line">        alertService.sendAlert(<span class="string">&quot;设备温度异常: &quot;</span> + sensor.getTemperature());</span><br><span class="line">        coolingSystem.activate(); <span class="comment">// 启动冷却系统</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Rule(name = &quot;设备离线检测&quot;, priority = 2)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeviceOfflineRule</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Condition</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isDeviceOffline</span><span class="params">(<span class="meta">@Fact(&quot;device&quot;)</span> Device device)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis() - device.getLastHeartbeat() &gt; <span class="number">300000</span>; <span class="comment">// 5分钟无心跳</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Action</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">triggerOfflineAlert</span><span class="params">(<span class="meta">@Fact(&quot;device&quot;)</span> Device device)</span> &#123;</span><br><span class="line">        alertService.sendAlert(<span class="string">&quot;设备离线: &quot;</span> + device.getId());</span><br><span class="line">        maintenanceTeam.notify(device);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="医疗诊断辅助系统">医疗诊断辅助系统</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 医疗诊断规则</span></span><br><span class="line"><span class="meta">@Rule(name = &quot;高血压风险评估&quot;, priority = 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HypertensionRiskRule</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Condition</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isHighRisk</span><span class="params">(<span class="meta">@Fact(&quot;patient&quot;)</span> Patient patient,</span></span><br><span class="line"><span class="params">                             <span class="meta">@Fact(&quot;exam&quot;)</span> MedicalExam exam)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> exam.getBloodPressure() &gt; <span class="number">140</span> &amp;&amp; </span><br><span class="line">               patient.getAge() &gt; <span class="number">50</span> &amp;&amp;</span><br><span class="line">               patient.hasFamilyHistory(<span class="string">&quot;高血压&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Action</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">recommendCheckup</span><span class="params">(<span class="meta">@Fact(&quot;patient&quot;)</span> Patient patient)</span> &#123;</span><br><span class="line">        recommendationService.addRecommendation(</span><br><span class="line">            patient, <span class="string">&quot;建议进行24小时动态血压监测&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="不适用场景">不适用场景</h2><ol><li class="lvl-3"><p><strong>规则极其简单且稳定</strong> - 简单的if-else足以应对</p></li><li class="lvl-3"><p><strong>性能要求极高</strong> - 规则引擎有一定性能开销</p></li><li class="lvl-3"><p><strong>规则间高度耦合</strong> - 难以拆分为独立规则的情况</p></li><li class="lvl-3"><p><strong>实时性要求极高</strong> - 纳秒级响应的场景</p></li></ol><h2 id="LiteFlow（推荐）"><a href="https://liteflow.cc/">LiteFlow</a>（推荐）</h2><p>将瀑布流式的代码，转变成以组件为核心概念的代码结构，这种结构的好处是可以任意编排，组件与组件之间是解耦的，组件可以用脚本来定义，组件之间的流转全靠规则来驱动。</p><p>LiteFlow只做基于逻辑的流转，而不做基于角色任务的流转（工作流引擎）</p><blockquote><p>LiteFlow适用于拥有复杂逻辑的业务，比如说价格引擎，下单流程等，这些业务往往都拥有很多步骤，这些步骤完全可以按照业务粒度拆分成一个个独立的组件，进行装配复用变更。使用LiteFlow，你会得到一个灵活度高，扩展性很强的系统。因为组件之间相互独立，也可以避免改一处而动全身的这样的风险。</p></blockquote><h3 id="特性">特性</h3><ul class="lvl-0"><li class="lvl-2"><p><strong>组件定义统一：</strong> 所有的逻辑都是组件，为所有的逻辑提供统一化的组件实现方式，小身材，大能量。</p></li><li class="lvl-2"><p><strong>规则轻量：</strong> 基于规则文件来编排流程，学习规则入门只需要5分钟，一看即懂。</p></li><li class="lvl-2"><p><strong>规则多样化：</strong> 规则支持xml、json、yml三种规则文件写法方式，喜欢哪种用哪个。</p></li><li class="lvl-2"><p><strong>任意编排：</strong> 再复杂的逻辑过程，利用LiteFlow的规则，都是很容易做到的，看规则文件就能知道逻辑是如何运转的。</p></li><li class="lvl-2"><p><strong>规则持久化：</strong> 框架原生支持把规则存储在标准结构化数据库，Nacos，Etcd，Zookeeper，Apollo，Redis。您也可以自己扩展，把规则存储在任何地方。</p></li><li class="lvl-2"><p><strong>优雅热刷新机制：</strong> 规则变化，无需重启您的应用，即时改变应用的规则。高并发下不会因为刷新规则导致正在执行的规则有任何错乱。</p></li><li class="lvl-2"><p><strong>支持广泛：</strong> 不管你的项目是不是基于Springboot，Spring还是任何其他java框架构建，LiteFlow都能游刃有余。</p></li><li class="lvl-2"><p><strong>Springboot支持全面：</strong> 支持Springboot 2.X到最新的Springboot 3.X。</p></li><li class="lvl-2"><p><strong>脚本语言支持：</strong> 可以定义脚本语言节点，支持Groovy，Java，Kotlin，Javascript，QLExpress，Python，Lua，Aviator。未来还会支持更多的脚本语言。</p></li><li class="lvl-2"><p><strong>脚本和Java全打通：</strong> 所有脚本语言均可调用Java方法，甚至于可以引用任意的实例，在脚本中调用RPC也是支持的。</p></li><li class="lvl-2"><p><strong>规则嵌套支持：</strong> 只要你想的出，你可以利用简单的表达式完成多重嵌套的复杂逻辑编排。</p></li><li class="lvl-2"><p><strong>组件重试支持：</strong> 组件可以支持重试，每个组件均可自定义重试配置和指定异常。</p></li><li class="lvl-2"><p><strong>上下文隔离机制：</strong> 可靠的上下文隔离机制，你无需担心高并发情况下的数据串流。</p></li><li class="lvl-2"><p><strong>声明式组件支持：</strong> 你可以让你的任意类秒变组件。</p></li><li class="lvl-2"><p><strong>详细的步骤信息：</strong> 你的链路如何执行的，每个组件耗时多少，报了什么错，一目了然。</p></li><li class="lvl-2"><p><strong>稳定可靠：</strong> 历时2年多的迭代，在各大公司的核心系统上稳定运行。</p></li><li class="lvl-2"><p><strong>性能卓越：</strong> 框架本身几乎不消耗额外性能，性能取决你的组件执行效率。</p></li><li class="lvl-2"><p><strong>自带简单监控：</strong> 框架内自带一个命令行的监控，能够知道每个组件的运行耗时排行。</p></li></ul><h3 id="规则">规则</h3><p>支持很多规则，可参考 <a href="https://liteflow.cc/pages/a590ee/#%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95">官网</a></p><ul class="lvl-0"><li class="lvl-2"><p>串行</p><ul class="lvl-2"><li class="lvl-4">THEN(a, b, c, d);</li><li class="lvl-4">SER(a, b, c, d);</li><li class="lvl-4">THEN(a, b, THEN(c, d));</li></ul></li><li class="lvl-2"><p>并行</p><ul class="lvl-2"><li class="lvl-4">WHEN(a, b, c);</li><li class="lvl-4">PAR(a, b, c);</li></ul></li><li class="lvl-2"><p>选择</p><ul class="lvl-2"><li class="lvl-4">SWITCH(a).to(b, c, d);    #组件a，来选择执行b,c,d中的一个</li><li class="lvl-4">SWITCH(x).TO(a, b, c).DEFAULT(y);    #添加默认执行</li></ul></li><li class="lvl-2"><p>条件</p><ul class="lvl-2"><li class="lvl-4">THEN(IF(x, a),b);    #x为条件节点，为真的情况下，执行链路就为x-&gt;a-&gt;b，为假链路就为x-&gt;b</li><li class="lvl-4">THEN(IF(x, a,b),c);     # 三元表达式：x为条件节点，为真的情况下，执行链路就为x-&gt;a-&gt;c，为假链路就为x-&gt;b-&gt;c</li><li class="lvl-4">IF(x, a).ELSE(b);  等于 IF(x, a, b);   # 如果a为真 x-&gt;a，否则 x-&gt;b</li></ul></li><li class="lvl-2"><p>循环</p><ul class="lvl-2"><li class="lvl-4">FOR(5).DO(THEN(a, b));    表示把a-&gt;b这个链路固定循环了5次</li><li class="lvl-4">WHILE(w).DO(THEN(a, b));</li><li class="lvl-4">ITERATOR(x).DO(THEN(a, b));</li><li class="lvl-4">FOR(f).DO(THEN(a, b)).BREAK©;    c这个节点需要为<code>布尔组件</code>，返回一个布尔值，为true则退出循环</li></ul></li><li class="lvl-2"><p>…</p></li></ul><h3 id="使用">使用</h3><p>引入依赖和配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.yomahub<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>liteflow-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># application.yml 中引入配置</span><br><span class="line">liteflow.rule-source=config/flow.el.xml</span><br></pre></td></tr></table></figure><p>编排规则：config/flow.el.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">flow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">chain</span> <span class="attr">name</span>=<span class="string">&quot;chain1&quot;</span>&gt;</span></span><br><span class="line">        THEN(a, b, c);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">chain</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">flow</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件</span></span><br><span class="line"><span class="meta">@Component(&quot;a&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ACmp</span> <span class="keyword">extends</span> <span class="title class_">NodeComponent</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//do your business</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Component(&quot;b&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BCmp</span> <span class="keyword">extends</span> <span class="title class_">NodeComponent</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//do your business</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Component(&quot;c&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CCmp</span> <span class="keyword">extends</span> <span class="title class_">NodeComponent</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//do your business</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YourClass</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> FlowExecutor flowExecutor;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testConfig</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">LiteflowResponse</span> <span class="variable">response</span> <span class="operator">=</span> flowExecutor.execute2Resp(<span class="string">&quot;chain1&quot;</span>, <span class="string">&quot;arg&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Drools"><a href="https://docs.drools.org/">Drools</a></h2><p>由JBoss组织提供的基于Java语言开发的开源规则引擎，可以将复杂且多变的业务规则从硬编码中解放出来，以规则脚本的形式存放在文件或特定的存储介质中(例如存放在数据库中)，使得业务规则的变更不需要修改项目代码、重启服务器就可以在线上环境立即生效。</p><p>Drools 是用Java语言编写的开放源码规则引擎，基于Apache协议，RETE算法。</p><p>Drools是一个绝对重量级的规则引擎，很多像金融行业、电信行业的大公司都在使用它作为规则引擎。</p><h3 id="特性-2">特性</h3><ul class="lvl-0"><li class="lvl-2"><p>最活跃的开源规则引擎, 非常活跃的社区支持</p></li><li class="lvl-2"><p>易用</p></li><li class="lvl-2"><p>快速的执行速度</p></li><li class="lvl-2"><p>基于java的规则引擎, 与 Java Rule Engine API（JSR 94）兼容</p></li><li class="lvl-2"><p>易于访问企业策略、易于调整以及易于管理</p></li><li class="lvl-2"><p>符合业内标准，速度快、效率高</p></li><li class="lvl-2"><p>简化系统架构，优化应用。</p></li><li class="lvl-2"><p>提高系统的可维护性和维护成本。</p></li><li class="lvl-2"><p>方便系统的整合。</p></li><li class="lvl-2"><p>减少编写“硬代码”业务规则的成本和风险。</p></li></ul><blockquote><ul class="lvl-1"><li class="lvl-2"><p>业务分析师无法独立完成规则配置：由于规则主体DSL是编程语言（Java, Groovy, Python），仍然需要开发工程师维护</p></li><li class="lvl-2"><p>规则规模变大以后也会变得不好维护，相对硬编码的优势便不复存在</p></li><li class="lvl-2"><p>规则的语法仅适合扁平的规则，对于嵌套条件语义（then里嵌套when…then子句）的规则只能将条件进行笛卡尔积组合以后进行配置，不利于维护。</p></li></ul></blockquote><h3 id="原理">原理</h3><p>drools规则引擎由以下三部分构成：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>Working Memory（<strong>工作内存</strong>）：从中获取数据并和规则文件中定义的规则进行模式匹配</p></li><li class="lvl-2"><p>Rule Base（<strong>规则库</strong>）：定义的规则都会被加载到规则库</p></li><li class="lvl-2"><p>Inference Engine（<strong>推理引擎</strong>）</p><ul class="lvl-3"><li class="lvl-4">Pattern Matcher（<strong>匹配器</strong>）：将Rule Base中的所有规则与Working Memory中的Fact对象（普通的JavaBean）进行模式匹配，匹配成功的规则将被激活并放入Agenda中。</li><li class="lvl-4">Agenda(<strong>议程</strong>)：存放通过匹配器进行模式匹配后被激活的规则</li><li class="lvl-4">Execution Engine（<strong>执行引擎</strong>）：执行Agenda中被激活的规则<img src="/imgs/java/41163a7995d557bdb0d2c9e88a90ff36.jpg" alt="img" style="zoom:50%;" /></li></ul></li></ul></blockquote><p>执行过程如下：</p><img src="/imgs/java/9016bcb41a5e459e93c52dfca0e3b733.jpg" alt="img" style="zoom:60%;" /><p>API 继承关系：</p><img src="/imgs/java/27564230c90f7603a824370c5cbafbca.jpg" alt="img" style="zoom:67%;" /><p>规则体语法结构规则体是规则文件内容中的重要组成部分，是进行业务规则判断、处理业务结果的部分。</p><blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rule <span class="string">&quot;ruleName&quot;</span></span><br><span class="line"> attributes</span><br><span class="line"> when</span><br><span class="line">     LHS</span><br><span class="line"> then</span><br><span class="line">     RHS</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>rule：关键字，表示规则开始，参数为规则的唯一名称。</p><p>attributes：规则属性，是rule与when之间的参数，为可选项。</p><p>when：关键字，后面跟规则的条件部分。</p><p>LHS(Left Hand Side)：是规则的条件部分的通用名称。它由零个或多个条件元素组成。如果LHS为空，则它将被视为始终为true的条件元素。</p><p>then：关键字，后面跟规则的结果部分。</p><p>RHS(Right Hand Side)：是规则的后果或行动部分的通用名称。</p><p>end：关键字，表示一个规则结束。</p></blockquote><h3 id="使用-2">使用</h3><p>业务场景：消费者在图书商城购买图书，下单后需要在支付页面显示订单优惠后的价格。具体优惠规则如下：</p><table><thead><tr><th style="text-align:left">规则编号</th><th style="text-align:left">规则名称</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">规则一</td><td style="text-align:left">所购图书总价在100元以下的没有优惠</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">规则二</td><td style="text-align:left">所购图书总价在100到200元的优惠20元</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">规则三</td><td style="text-align:left">所购图书总价在200到300元的优惠50元</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">规则四</td><td style="text-align:left">所购图书总价在300元以上的优惠100元</td></tr></tbody></table><p>引入jar和配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.drools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>drools-compiler<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.10.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--根据drools要求创建resources/META-INF/kmodule.xml 规则配置文件--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">kmodule</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.drools.org/xsd/kmodule&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        name:指定kbase的名称，可以任意，但是需要唯一</span></span><br><span class="line"><span class="comment">        packages:指定规则文件的目录，需要根据实际情况填写，否则无法加载到规则文件</span></span><br><span class="line"><span class="comment">        default:指定当前kbase是否为默认</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">kbase</span> <span class="attr">name</span>=<span class="string">&quot;myKbase1&quot;</span> <span class="attr">packages</span>=<span class="string">&quot;rules&quot;</span> <span class="attr">default</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            name:指定ksession名称，可以任意，但是需要唯一</span></span><br><span class="line"><span class="comment">            default:指定当前session是否为默认</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ksession</span> <span class="attr">name</span>=<span class="string">&quot;ksession-rule&quot;</span> <span class="attr">default</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">kbase</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">kmodule</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建规则文件resources/rules/bookDiscount.drl（新建 Order 类，添加属性 originalPrice和realPrice）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//图书优惠规则</span></span><br><span class="line">package book.discount</span><br><span class="line">import com.demo.framework.brms.entity.Order</span><br><span class="line"><span class="comment">//规则一：所购图书总价在100元以下的没有优惠</span></span><br><span class="line">rule <span class="string">&quot;book_discount_1&quot;</span></span><br><span class="line">    when</span><br><span class="line">        $order<span class="punctuation">:</span>Order(originalPrice &lt; <span class="number">100</span>)</span><br><span class="line">    then</span><br><span class="line">        $order.setRealPrice($order.getOriginalPrice());</span><br><span class="line">        System.out.println(<span class="string">&quot;成功匹配到规则一：所购图书总价在100元以下的没有优惠&quot;</span>);</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//规则二：所购图书总价在100到200元的优惠20元</span></span><br><span class="line">rule <span class="string">&quot;book_discount_2&quot;</span></span><br><span class="line">    when</span><br><span class="line">        $order<span class="punctuation">:</span>Order(originalPrice &lt; <span class="number">200</span> &amp;&amp; originalPrice &gt;= <span class="number">100</span>)</span><br><span class="line">    then</span><br><span class="line">        $order.setRealPrice($order.getOriginalPrice() - <span class="number">20</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;成功匹配到规则二：所购图书总价在100到200元的优惠20元&quot;</span>);</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//规则三：所购图书总价在200到300元的优惠50元</span></span><br><span class="line">rule <span class="string">&quot;book_discount_3&quot;</span></span><br><span class="line">    when</span><br><span class="line">        $order<span class="punctuation">:</span>Order(originalPrice &lt;= <span class="number">300</span> &amp;&amp; originalPrice &gt;= <span class="number">200</span>)</span><br><span class="line">    then</span><br><span class="line">        $order.setRealPrice($order.getOriginalPrice() - <span class="number">50</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;成功匹配到规则三：所购图书总价在200到300元的优惠50元&quot;</span>);</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//规则四：所购图书总价在300元以上的优惠100元</span></span><br><span class="line">rule <span class="string">&quot;book_discount_4&quot;</span></span><br><span class="line">    when</span><br><span class="line">        $order<span class="punctuation">:</span>Order(originalPrice &gt;= <span class="number">300</span>)</span><br><span class="line">    then</span><br><span class="line">        $order.setRealPrice($order.getOriginalPrice() - <span class="number">100</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;成功匹配到规则四：所购图书总价在300元以上的优惠100元&quot;</span>);</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定规则：所购图书都优惠100元</span></span><br><span class="line">rule <span class="string">&quot;book_discount_order&quot;</span></span><br><span class="line">    when</span><br><span class="line">        $order<span class="punctuation">:</span>Order(originalPrice &gt;= <span class="number">0</span>)</span><br><span class="line">    then</span><br><span class="line">        $order.setRealPrice($order.getOriginalPrice() - <span class="number">100</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;指定规则：所购图书都优惠100元&quot;</span>);</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>使用规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.framework.brms.entity;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Double originalPrice;<span class="comment">//订单原始价格，即优惠前价格</span></span><br><span class="line">    <span class="keyword">private</span> Double realPrice;<span class="comment">//订单真实价格，即优惠后价格</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">KieServices</span> <span class="variable">kieServices</span> <span class="operator">=</span> KieServices.Factory.get();</span><br><span class="line">    <span class="type">KieContainer</span> <span class="variable">kieClasspathContainer</span> <span class="operator">=</span> kieServices.getKieClasspathContainer();</span><br><span class="line">    <span class="comment">//会话对象，用于和规则引擎交互</span></span><br><span class="line">    <span class="type">KieSession</span> <span class="variable">kieSession</span> <span class="operator">=</span> kieClasspathContainer.newKieSession();</span><br><span class="line">    <span class="comment">//构造订单对象，设置原始价格，由规则引擎根据优惠规则计算优惠后的价格</span></span><br><span class="line">    <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">    order.setOriginalPrice(<span class="number">210D</span>);</span><br><span class="line">    <span class="comment">//将数据提供给规则引擎，规则引擎会根据提供的数据进行规则匹配</span></span><br><span class="line">    kieSession.insert(order);</span><br><span class="line">    <span class="comment">//激活规则引擎，如果规则匹配成功则执行规则</span></span><br><span class="line">    kieSession.fireAllRules();</span><br><span class="line">    <span class="comment">//通过规则过滤器实现只执行指定规则</span></span><br><span class="line">     <span class="comment">//   kieSession.fireAllRules(new RuleNameEqualsAgendaFilter(&quot;book_discount_order&quot;));</span></span><br><span class="line">    <span class="comment">//关闭会话</span></span><br><span class="line">    kieSession.dispose();</span><br><span class="line">    System.out.println(<span class="string">&quot;优惠前原始价格：&quot;</span> + order.getOriginalPrice() +</span><br><span class="line">            <span class="string">&quot;，优惠后价格：&quot;</span> + order.getRealPrice());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印结果（匹配到规则三）</span></span><br><span class="line"><span class="comment">// 优惠前原始价格：210.0，优惠后价格：160.0</span></span><br></pre></td></tr></table></figure><h2 id="EsayRule"><a href="https://github.com/j-easy/easy-rules">EsayRule</a></h2><p>一个轻量级的 Java 规则引擎，它提供了简单而强大的方式来定义和执行业务规则。它的设计理念是让规则管理变得简单直观。</p><h3 id="特性-3">特性</h3><ol><li class="lvl-3"><p><strong>轻量级</strong> - 不依赖其他框架，核心包很小</p></li><li class="lvl-3"><p><strong>简单易用</strong> - 基于注解的规则定义</p></li><li class="lvl-3"><p><strong>灵活</strong> - 支持多种规则定义方式</p></li><li class="lvl-3"><p><strong>可组合</strong> - 规则可以组合成规则集</p></li><li class="lvl-3"><p><strong>易于测试</strong> - 规则可以独立测试</p></li></ol><h3 id="原理-2">原理</h3><p>EasyRule 的实现原理可以分为几个关键部分：规则定义、规则引擎、事实管理和执行流程。</p><blockquote><ol><li class="lvl-3"><p><strong>策略模式</strong> - 不同的规则执行策略</p></li><li class="lvl-3"><p><strong>观察者模式</strong> - 监听器机制</p></li><li class="lvl-3"><p><strong>组合模式</strong> - 组合规则</p></li><li class="lvl-3"><p><strong>模板方法模式</strong> - 规则执行流程</p></li><li class="lvl-3"><p><strong>工厂模式</strong> - 规则创建</p></li></ol></blockquote><ul class="lvl-0"><li class="lvl-2"><p>注解规则解析</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// EasyRule 内部通过反射解析注解规则</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationRuleProxy</span> <span class="keyword">implements</span> <span class="title class_">Rule</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object rule;  <span class="comment">// 规则对象实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;ConditionMethod&gt; conditions;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;ActionMethod&gt; actions;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">evaluate</span><span class="params">(Facts facts)</span> &#123;</span><br><span class="line">        <span class="comment">// 通过反射调用 @Condition 方法</span></span><br><span class="line">        <span class="keyword">for</span> (ConditionMethod condition : conditions) &#123;</span><br><span class="line">            Object[] args = extractArguments(condition, facts);</span><br><span class="line">            <span class="type">Boolean</span> <span class="variable">result</span> <span class="operator">=</span> (Boolean) condition.getMethod().invoke(rule, args);</span><br><span class="line">            <span class="keyword">if</span> (!result) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Facts facts)</span> &#123;</span><br><span class="line">        <span class="comment">// 通过反射调用 @Action 方法</span></span><br><span class="line">        <span class="keyword">for</span> (ActionMethod action : actions) &#123;</span><br><span class="line">            Object[] args = extractArguments(action, facts);</span><br><span class="line">            action.getMethod().invoke(rule, args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>优先级调度原理</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 规则优先级比较器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RulePriorityComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;Rule&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Rule rule1, Rule rule2)</span> &#123;</span><br><span class="line">        <span class="comment">// 优先级数字越小，优先级越高</span></span><br><span class="line">        <span class="keyword">return</span> Integer.compare(rule1.getPriority(), rule2.getPriority());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在规则引擎中的使用</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Rule&gt; <span class="title function_">sort</span><span class="params">(Rules rules)</span> &#123;</span><br><span class="line">    List&lt;Rule&gt; ruleList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Rule rule : rules) &#123;</span><br><span class="line">        ruleList.add(rule);</span><br><span class="line">    &#125;</span><br><span class="line">    Collections.sort(ruleList, <span class="keyword">new</span> <span class="title class_">RulePriorityComparator</span>());</span><br><span class="line">    <span class="keyword">return</span> ruleList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>DefaultRulesEngine 核心逻辑</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultRulesEngine</span> <span class="keyword">implements</span> <span class="title class_">RulesEngine</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RulesEngineParameters parameters;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fire</span><span class="params">(Rules rules, Facts facts)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 规则排序（按优先级）</span></span><br><span class="line">        List&lt;Rule&gt; ruleList = sort(rules);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 应用规则引擎参数</span></span><br><span class="line">        ruleList = applyRulePriorityThreshold(ruleList);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 规则触发检查</span></span><br><span class="line">        <span class="keyword">for</span> (Rule rule : ruleList) &#123;</span><br><span class="line">            <span class="keyword">if</span> (parameters.isSkipOnFirstAppliedRule() &amp;&amp; triggered) &#123;</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// 跳过后续规则</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 4. 评估规则条件</span></span><br><span class="line">            <span class="keyword">if</span> (rule.evaluate(facts)) &#123;</span><br><span class="line">                <span class="comment">// 5. 执行规则动作</span></span><br><span class="line">                rule.execute(facts);</span><br><span class="line">                triggered = <span class="literal">true</span>;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (parameters.isSkipOnFirstAppliedRule()) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-3">使用</h3><p>引入依赖和配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jeasy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easy-rules-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>规则引擎配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置规则引擎</span></span><br><span class="line"><span class="type">RulesEngineParameters</span> <span class="variable">parameters</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RulesEngineParameters</span>()</span><br><span class="line">    .skipOnFirstAppliedRule(<span class="literal">true</span>)  <span class="comment">// 第一条规则执行后跳过</span></span><br><span class="line">    .skipOnFirstFailedRule(<span class="literal">false</span>)  <span class="comment">// 第一条失败规则后不跳过</span></span><br><span class="line">    .skipOnFirstNonTriggeredRule(<span class="literal">false</span>) <span class="comment">// 第一条未触发规则后不跳过</span></span><br><span class="line">    .rulePriorityThreshold(<span class="number">10</span>);    <span class="comment">// 规则优先级阈值</span></span><br><span class="line"></span><br><span class="line"><span class="type">RulesEngine</span> <span class="variable">rulesEngine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultRulesEngine</span>(parameters);</span><br></pre></td></tr></table></figure><p>定义多个规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 规则1</span></span><br><span class="line"><span class="meta">@Rule(name = &quot;Adult Rule&quot;, description = &quot;检查是否成年&quot;, priority = 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdultRule</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Condition</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAdult</span><span class="params">(<span class="meta">@Fact(&quot;age&quot;)</span> <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age &gt;= <span class="number">18</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Action</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printAdult</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;已成年，可以进入&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 规则2 </span></span><br><span class="line"><span class="meta">@Rule(name = &quot;Senior Rule&quot;, description = &quot;检查是否是老年人&quot;, priority = 2)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SeniorRule</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Condition</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSenior</span><span class="params">(<span class="meta">@Fact(&quot;age&quot;)</span> <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age &gt;= <span class="number">60</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Action</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printSenior</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;老年人，享受优惠&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 规则3</span></span><br><span class="line"><span class="meta">@Rule(name = &quot;Child Rule&quot;, description = &quot;检查是否是儿童&quot;, priority = 3)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChildRule</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Condition</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isChild</span><span class="params">(<span class="meta">@Fact(&quot;age&quot;)</span> <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age &lt; <span class="number">18</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Action</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printChild</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;未成年人，需要监护人陪同&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组合使用规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建规则引擎</span></span><br><span class="line">    <span class="type">RulesEngine</span> <span class="variable">rulesEngine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultRulesEngine</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册规则</span></span><br><span class="line">    <span class="type">Rules</span> <span class="variable">rules</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Rules</span>();</span><br><span class="line">    rules.register(<span class="keyword">new</span> <span class="title class_">AdultRule</span>());</span><br><span class="line">    rules.register(<span class="keyword">new</span> <span class="title class_">SeniorRule</span>());</span><br><span class="line">    rules.register(<span class="keyword">new</span> <span class="title class_">ChildRule</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 准备事实数据</span></span><br><span class="line">    <span class="type">Facts</span> <span class="variable">facts</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Facts</span>();</span><br><span class="line">    facts.put(<span class="string">&quot;age&quot;</span>, <span class="number">25</span>); <span class="comment">// 测试不同年龄：15, 25, 65</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行规则检查</span></span><br><span class="line">    rulesEngine.fire(rules, facts);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 规则引擎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 规则引擎 </tag>
            
            <tag> LiteFlow </tag>
            
            <tag> Drools </tag>
            
            <tag> esayRule </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 数据持久化策略和原理机制</title>
      <link href="/2025/10/d76bb55725a449d6bdd400ff4f058f00/"/>
      <url>/2025/10/d76bb55725a449d6bdd400ff4f058f00/</url>
      
        <content type="html"><![CDATA[<p>Redis 提供了两种主要的持久化机制，4.0 之后还引入了 <strong>混合持久化（RDB + AOF）</strong> 的方式，结合两者优点:</p><blockquote><ul class="lvl-1"><li class="lvl-2"><strong>RDB机制（Redis DataBase）</strong>（快照二进制）在<strong>指定时间间隔快照存储</strong>，将某一时刻的内存快照数据以二进制方式写入磁盘。</li><li class="lvl-2"><strong>AOF机制（Append Only File）</strong>（命令追加）<strong>记录每次对服务器写操作</strong>，将所有的操作命令按顺序记录下来，追加到特殊的文件中。当服务器重启的时候会重新执行这些命令来恢复原始的数据，以redis协议追加保存每次写的操作到文件末尾，Redis还能对AOF文件进行后台重写，使得AOF文件的体积不至于过大.</li><li class="lvl-2"><strong>混合机制</strong>: （同时开启两种持久化方式）将当前的数据以RDB方式写入文件，再将操作命令以AOF方式写入文件。 在这种情况下, 当redis重启的时候会优先载入AOF文件来恢复原始数据,因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整.</li></ul></blockquote><h2 id="RDB（Redis-DataBase）"><a href="https://cloud.tencent.com/developer/article/2392018">RDB</a>（Redis DataBase）</h2><p>RDB 持久化是指在指定的时间间隔内，将内存中的数据集<strong>快照</strong>写入磁盘。创建一个经过<strong>压缩的二进制文件</strong>（默认 <code>dump.rdb</code>）。</p><p>RDB 机制会生成全量rdb文件，可通过配置修改文件名和目录。</p><h3 id="优缺点和适用场景">优缺点和适用场景</h3><p><strong>优点</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>高性能</strong>：对 Redis 主进程影响极小。父进程除了 fork 子进程时有短暂阻塞外，其余时间可以继续处理请求。适合大规模数据恢复和备份。</p></li><li class="lvl-2"><p><strong>紧凑的文件</strong>：RDB 文件是压缩的二进制格式，文件体积小，非常适合用于灾难恢复、备份和不同环境之间的数据迁移。</p></li><li class="lvl-2"><p><strong>快速恢复</strong>：在数据量很大时，RDB 的恢复速度远快于 AOF。</p></li></ul></blockquote><p><strong>缺点</strong>：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>数据安全性低</strong>：RDB 是定时快照，在两次快照之间如果服务器宕机，会丢失最后一次快照之后的所有数据。</p><blockquote><p>在redis意外停止工作的情况下<strong>可能丢失数据</strong>，虽然你可以配置不同的save时间点(例如每隔5分钟并且对数据集有100个写的操作),是Redis要完整的保存整个数据集是一个比较繁重的工作,你通常会每隔5分钟或者更久做一次完整的保存,万一在Redis意外宕机,你可能会丢失几分钟的数据.</p></blockquote></li><li class="lvl-2"><p><strong>fork 可能阻塞</strong>：虽然 fork 操作本身很快，但如果数据量非常大，fork 过程可能会消耗较多 CPU，并且在内存写入压力大时，可能导致父进程短暂阻塞。在极端情况下，如果数据集巨大，fork 操作本身可能会很慢。</p><blockquote><p>RDB 需要经常fork子进程来保存数据集到硬盘上,当数据集比较大的时候**,fork的过程是非常耗时**,可能会导致Redis在一些毫秒级内不能响应客户端的请求.如果数据集巨大并且CPU性能不是很好的情况下,这种情况会持续1秒,AOF也需要fork,但是你可以调节重写日志文件的频率来提高数据集的耐久度.</p></blockquote></li></ul><p><strong>适用场景</strong>：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>适合备份</strong>，RDB是一个非常紧凑的文件,它保存了某个时间点得数据集,非常适用于数据集的备份,比如你可以在每个小时报保存一下过去24小时内的数据,同时每天保存过去30天的数据,这样即使出了问题你也可以根据需求恢复到不同版本的数据集.</p></li><li class="lvl-2"><p>RDB是一个<strong>紧凑的单一文件</strong>,很方便传送到另一个远端数据中心或者亚马逊的S3（可能加密），非常适用于<strong>灾难恢复</strong>.</p></li><li class="lvl-2"><p>RDB在保存RDB文件时父进程唯一需要做的就是fork出一个子进程,接下来的工作全部由子进程来做，父进程不需要再做其他IO操作，所以RDB持久化方式可以<strong>最大化redis的性能</strong>.</p></li><li class="lvl-2"><p>与AOF相比,在<strong>恢复大的数据集</strong>的时候，RDB方式会更快一些.</p></li></ul><h3 id="快照原理">快照原理</h3><p>在指定的时间间隔内将内存中的数据集快照写入磁盘，实际操作过程是fork一个子进程，先将数据集写入临时文件，写入成功后，再替换之前的文件，用二进制压缩存储。</p><p><img src="/imgs/db/388326-20170726161552843-904424952.png" alt="img"></p><p>Redis 借助了操作系统提供的<strong>写时复制技术</strong>（Copy-On-Write, COW），可以让在执行快照的同时，正常处理写操作。</p><p>Linux中<code>fork()</code>是使用写时复制的页实现的，所以它唯一的代价是：<strong>复制父进程的页表</strong>以及<strong>为子进程创建任务结构</strong>所需的时间和内存。</p><p><strong>具体流程</strong>：</p><ol><li class="lvl-3"><p><strong>触发机制</strong>：当满足配置条件（如 <code>save 900 1</code> 表示900秒内至少1个键变化）或手动执行 <code>SAVE</code>/<code>BGSAVE</code> 命令时，持久化开始。</p></li><li class="lvl-3"><p><strong>父进程 fork 子进程</strong>：Redis 主进程（父进程）会 <strong>fork 一个子进程</strong>。这个子进程会拥有与父进程完全相同的内存数据副本。</p></li><li class="lvl-3"><p><strong>子进程负责写入</strong>：子进程将内存中的数据写入一个临时的 RDB 文件。由于是副本，子进程的写入操作不会影响父进程继续处理客户端的命令。</p></li><li class="lvl-3"><p><strong>替换旧文件</strong>：当子进程完成对新 RDB 文件的写入后，它会用新文件<strong>原子地替换</strong>旧的 RDB 文件。</p></li></ol><blockquote><p>简单来说就是 <code>fork()</code>函数会复制父进程的地址空间到子进程中，<strong>复制的是指针，而不是数据</strong>，所以速度很快。</p><p>当没有发生写的时候，子进程和父进程指向地址是一样的，父子进程共享内存空间。直到发生写的时候，系统才会真正拷贝出一块新的内存区域，读操作和写操作在不同的内存空间，子进程所见到的最初资源仍然保持不变，从而实现父子进程隔离。</p><p>此做法的主要优点是如果期间没有写操作，就不会有副本被创建。</p><p>Redis 可以高效地执行 RDB 持久化操作，并且不会对 Redis 运行过程中的性能造成太大的影响。同时，这种方式也提供了一种简单有效的机制来保护 Redis 数据的一致性和可靠性。</p><img src="/imgs/db/uslsdfnep796.png" alt="Redis写时复制" style="zoom:60%;" /></blockquote><h4 id="写时复制">写时复制</h4><p><strong>写时复制 (Copy-On-Write, COW)</strong><br>在 fork 子进程的瞬间，父子进程共享同一片内存数据。当父进程要修改某一片数据时（比如执行了一个 SET 命令），操作系统会将被修改的<strong>内存页</strong>复制一份，确保子进程的数据不受影响。这使得 fork 操作非常快速，并且大部分情况下内存消耗不会翻倍。</p><blockquote><p>拓展：JDK的 <code>CopyOnWriteArrayList </code>和 <code>CopyOnWriteArraySet </code>容器也使用到了写时复制技术。</p></blockquote><h4 id="主动触发">主动触发</h4><p>**主动方式：**即手动触发，涉及两个操作命令：</p><ul class="lvl-0"><li class="lvl-2"><p><code>SAVE</code>：阻塞 Redis 直到 RDB 完成（不推荐生产使用）。</p></li><li class="lvl-2"><p><code>BGSAVE</code>：利用COW技术，创建子进程，由子进程负责RDB过程，主进程可以继续处理其他命令，后台异步执行（推荐）。</p></li></ul><img src="/imgs/db/70552dfgdd00.webp" alt="img" style="zoom:50%;" /><h4 id="自动触发">自动触发</h4><p><strong>自动方式</strong>：由配置文件来完成，自动触发 <code>BGSAVE</code>命令</p><p>在redis.conf配置文件中有如下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">save</span> <span class="number">900</span> <span class="number">1</span>     <span class="comment"># 900秒内至少有1个key发生变化</span></span><br><span class="line"><span class="string">save</span> <span class="number">300</span> <span class="number">10</span>    <span class="comment"># 300秒内至少有10个key发生变化</span></span><br><span class="line"><span class="string">save</span> <span class="number">60</span> <span class="number">10000</span>  <span class="comment"># 60秒内至少有10000个key发生变化</span></span><br></pre></td></tr></table></figure><h4 id="其他触发">其他触发</h4><ul class="lvl-0"><li class="lvl-2"><p>执行 <code>FLUSHALL</code>（会生成空 RDB 文件）</p></li><li class="lvl-2"><p>主从复制时，主节点自动执行 BGSAVE</p></li><li class="lvl-2"><p>关闭 Redis 时（若配置了 <code>save</code>）</p></li></ul><h3 id="RDB-阻塞">RDB 阻塞</h3><p>redis提供了两个命令来生成RDB文件，分别是<code>save</code>和<code>bgsave</code>。</p><ul class="lvl-0"><li class="lvl-2"><p><strong>save</strong>：在主线程中执行，会导致阻塞。</p></li><li class="lvl-2"><p><strong>bgsave</strong>：创建一个子进程，专门用于写入RDB文件，避免了主线程的阻塞，这也是Redis RDB文件生成的默认配置。</p></li></ul><blockquote><p>子进程需要通过fork操作，从主线程中创建出来。子进程在创建后不会再阻塞主线程，但是，<strong>fork这个创建过程本身会阻塞主线程</strong>，而且主线程内存越大，阻塞时间越长。</p><p>RDB 每次在 fork 子进程来执行 RDB 快照数据文件生成的时候，如果数据文件特别大，可能会导致对客户端提供的服务暂停数毫秒，或者甚至数秒。</p></blockquote><h3 id="持久化配置">持久化配置</h3><p>Redis会将数据集的快照dump到dump.rdb文件中。</p><p>通过配置文件来修改Redis服务器dump快照的频率和位置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">save</span> <span class="number">900</span> <span class="number">1</span>       <span class="comment">#在900秒(15分钟)内，如果至少有1个key发生变化，则dump内存快照。</span></span><br><span class="line"><span class="string">save</span> <span class="number">300</span> <span class="number">10</span>      <span class="comment">#在300秒(5分钟)内，如果至少有10个key发生变化，则dump内存快照。</span></span><br><span class="line"><span class="string">save</span> <span class="number">60</span> <span class="number">10000</span>    <span class="comment">#在60秒(1分钟)内，如果至少有10000个key发生变化，则dump内存快照。</span></span><br><span class="line"></span><br><span class="line"><span class="string">dbfilename</span> <span class="string">dump.rdb</span> <span class="comment"># 快照文件名</span></span><br><span class="line"><span class="string">dir</span> <span class="string">./</span>         <span class="comment"># 快照文件存放目录</span></span><br><span class="line"><span class="string">rdbcompression</span> <span class="literal">yes</span> <span class="comment"># 是否压缩</span></span><br></pre></td></tr></table></figure><h2 id="AOF（Append-Only-File）">AOF（Append Only File）</h2><p>AOF 持久化是以<strong>日志的形式</strong>记录每一个<strong>写操作</strong>命令。当 Redis 重启时，会重新执行 AOF 文件中的所有命令来重建内存中的数据。</p><p>A每一个写、删除操作，查询操作不会记录，以文本的方式追加记录</p><img src="/imgs/db/388326-20170726161604968-371688235.png" alt="img" style="zoom:67%;" /><h3 id="优缺点和适用场景-2">优缺点和适用场景</h3><p><strong>优点</strong>：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>数据安全高</strong>：根据 <code>appendfsync</code> 策略，可以提供非常好的持久化保证，最多丢失一秒数据。</p><blockquote><p>使用默认的每秒fsync策略，Redis的性能依然很好(fsync是由后台线程进行处理的,主线程会尽力处理客户端请求),一旦出现故障，你最多丢失1秒的数据</p></blockquote></li><li class="lvl-2"><p><strong>易于理解和解析</strong>：AOF 文件是纯文本协议格式，易于阅读和手动修复（不推荐）。</p></li><li class="lvl-2"><p><strong>容灾性好</strong>：即使 AOF 文件末尾有损坏（比如突然断电），可以使用 <code>redis-check-aof</code> 工具轻松修复。</p></li></ul><p><strong>缺点</strong>：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>文件体积大</strong>：通常 AOF 文件会比同数据集的 RDB 文件大。</p></li><li class="lvl-2"><p><strong>恢复速度慢</strong>：在数据集很大时，重新执行所有 AOF 命令来恢复数据会比加载 RDB 文件慢。</p><blockquote><p>在一般情况下， 每秒 fsync 的性能依然非常高， 而关闭 fsync 可以让 AOF 的速度和 RDB 一样快， 即使在高负荷之下也是如此。 不过在处理巨大的写入载入时，RDB 可以提供更有保证的最大延迟时间（latency）。</p></blockquote></li><li class="lvl-2"><p><strong>对性能影响相对较大</strong>：虽然 <code>everysec</code> 策略性能不错，但在写入负载极高的场景下，AOF 仍可能成为瓶颈。</p></li></ul><p><strong>适用场景</strong>：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>占用内存少</strong>，AOF文件是一个只进行追加的日志文件,所以不需要写入seek,即使由于某些原因(磁盘空间已满，写的过程中宕机等等)未执行完整的写入命令,你也也可使用redis-check-aof工具修复这些问题.</p></li><li class="lvl-2"><p><strong>重写压缩文件</strong>，Redis 可以在 AOF 文件体积变得过大时，自动地在后台对 AOF 进行重写： 重写后的新 AOF 文件包含了恢复当前数据集所需的最小命令集合。 整个重写操作是绝对安全的，因为 Redis 在创建新 AOF 文件的过程中，会继续将命令追加到现有的 AOF 文件里面，即使重写过程中发生停机，现有的 AOF 文件也不会丢失。 而一旦新 AOF 文件创建完毕，Redis 就会从旧 AOF 文件切换到新 AOF 文件，并开始对新 AOF 文件进行追加操作。</p></li><li class="lvl-2"><p>**容易阅读，**AOF 文件有序地保存了对数据库执行的所有写入操作， 这些写入操作以 Redis 协议的格式保存， 因此 AOF 文件的内容非常容易被人读懂， 对文件进行分析（parse）也很轻松。 导出（export） AOF 文件也非常简单： 举个例子， 如果你不小心执行了 FLUSHALL 命令， 但只要 AOF 文件未被重写， 那么只要停止服务器， 移除 AOF 文件末尾的 FLUSHALL 命令， 并重启 Redis ， 就可以将数据集恢复到 FLUSHALL 执行之前的状态。</p></li></ul><h3 id="追加原理">追加原理</h3><p>AOF 的工作流程可以概括为：<strong>命令追加、文件写入、文件同步</strong>。</p><ol><li class="lvl-3"><p><strong>命令记录</strong>：修改和新增命令执行后，都会以 Redis 协议格式追加到服务器内部的 <strong>AOF 缓冲区</strong>。</p></li><li class="lvl-3"><p><strong>写入与同步策略</strong>：根据配置的 <strong><code>appendfsync</code></strong> 策略，决定何时将缓冲区的内容写入并同步到 AOF 磁盘文件。</p><ul class="lvl-2"><li class="lvl-5"><strong><code>always</code></strong>：每次写命令都立即同步到磁盘。<strong>数据最安全，不会丢失任何命令，但性能最差</strong>。</li><li class="lvl-5"><strong><code>everysec</code></strong>：每秒同步一次。这是<strong>默认推荐</strong>的策略，是一种折中方案。在性能和数据安全之间取得了很好的平衡，最多丢失1秒钟的数据。</li><li class="lvl-5"><strong><code>no</code></strong>：由操作系统决定何时同步。性能最好，但数据丢失风险最高。</li></ul></li></ol><h4 id="重写机制">重写机制</h4><p>随着命令不断写入，AOF 文件会越来越大。为了解决这个问题，Redis 提供了 <strong>AOF 重写</strong> 机制。</p><ul class="lvl-0"><li class="lvl-2"><p><strong>目的</strong>：创建一个新的、更小的 AOF 文件，这个文件包含了恢复当前数据集所需的<strong>最小命令集合</strong>。例如，对一个键进行了100次 <code>INCR</code>，重写后只需要一条 <code>SET</code> 命令。</p></li><li class="lvl-2"><p><strong>过程</strong>：与 RDB 类似，也是 <strong>fork 一个子进程</strong> 在后台完成。子进程遍历数据库，将每个键值对用一条命令记录到新的 AOF 文件中。在重写期间，新的写命令会被同时记录到<strong>原有的 AOF 缓冲区</strong>和<strong>重写 AOF 缓冲区</strong>。当子进程完成重写后，会通知父进程，父进程会将重写 AOF 缓冲区的内容追加到新的 AOF 文件中，然后原子地替换旧的 AOF 文件。</p></li></ul><h4 id="重写缓冲区">重写缓冲区</h4><p>子进程在AOF重写期间，父进程还是在继续接收和处理命令。</p><ul class="lvl-0"><li class="lvl-2"><p><strong>子进程</strong>：拥有 fork 创建时刻的内存数据副本，它基于这个&quot;过去&quot;的状态来生成新的 AOF 文件</p></li><li class="lvl-2"><p><strong>父进程</strong>：继续正常服务，接收并执行新的写命令，数据库状态在不断变化</p></li></ul><blockquote><p>新的命令可能会对现有的数据库状态进行修改，从而使得服务器当前的数据库状态和重写后的AOF文件所保存的数据库状态不一致。</p><p>为了解决这种数据不一致问题，Redis服务器设置了一个<strong>AOF重写缓冲区</strong>（aof_rewrite_buf_blocks）。</p><p>AOF重写缓存区在AOF重写时开始启用。</p></blockquote><p><strong>执行步骤</strong>：</p><img src="/imgs/db/ece3e71e6bf272521dbece0b2fba22b1.png" alt="img" style="zoom:67%;" /><ol><li class="lvl-3"><p>准备阶段，当开始执行 <code>BGREWRITEAOF</code> 或满足自动重写条件时：</p><ul class="lvl-2"><li class="lvl-5">父进程 fork 出子进程</li><li class="lvl-5"><strong>父进程</strong>会同时开启 <strong>AOF 重写缓冲区</strong></li></ul></li><li class="lvl-3"><p>重写期间的写命令处理</p><p>从这一刻开始，所有到达的写命令会<strong>同时</strong>进入两个缓冲区：</p><table><thead><tr><th style="text-align:left">缓冲区</th><th style="text-align:left">用途</th><th style="text-align:left">消费者</th></tr></thead><tbody><tr><td style="text-align:left"><strong>常规 AOF 缓冲区</strong></td><td style="text-align:left">用于正常的 AOF 持久化</td><td style="text-align:left">AOF 文件（根据 <code>appendfsync</code> 策略）</td></tr><tr><td style="text-align:left"><strong>AOF 重写缓冲区</strong></td><td style="text-align:left">专门用于保证重写一致性</td><td style="text-align:left">新的 AOF 文件（在重写完成后）</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">handle_write_command</span>(<span class="params">command</span>):</span><br><span class="line">    <span class="comment"># 1. 执行命令，更新内存数据库</span></span><br><span class="line">    execute_command(command)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 将命令追加到常规 AOF 缓冲区</span></span><br><span class="line">    aof_buf.append(command)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 同时追加到 AOF 重写缓冲区</span></span><br><span class="line">    aof_rewrite_buf.append(command)</span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p>子进程完成重写</p><ol><li class="lvl-6">子进程向父进程发送信号</li><li class="lvl-6">父进程收到信号后，将 <strong>AOF 重写缓冲区中的所有命令</strong> 追加到子进程生成的新 AOF 文件中</li><li class="lvl-6"><strong>原子性地</strong>用新的 AOF 文件替换旧的 AOF 文件，这样重写后数据库状态就和服务器当前的数据库状态一致</li></ol></li></ol><blockquote><p><strong>AOF重写缓存区同步至AOF文件中，这个过程是同步的，会阻塞父进程，在其他时候，AOF后台重写都不会阻塞父进程</strong>。</p></blockquote><h3 id="AOF-阻塞">AOF 阻塞</h3><p>AOF日志是在主线程中执行的，采用<strong>先存数据再写日志</strong>的方式，可以避免对当前命令的阻塞，但可能会给下一个操作带来阻塞风险。这是因为如果把日志文件写入磁盘时，磁盘写压力大，就会导致写盘很慢，进而阻塞后续操作。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>Always</strong>，同步写回：每个写命令执行完，立马同步地将日志写回磁盘；</p></li><li class="lvl-2"><p><strong>Everysec</strong>，每秒写回：每个写命令执行完，只是先把日志写到AOF文件的内存缓冲区，每隔一秒把缓冲区内容写入磁盘。</p></li><li class="lvl-2"><p><strong>No</strong>，操作系统控制写回：每个写命令执行完，只是先把日志写到AOF文件的内存缓冲区，由操作系统决定何时将缓冲区内容写回磁盘。</p></li></ul></blockquote><h3 id="持久化配置-2">持久化配置</h3><p>在Redis的配置文件中存在三种同步方式，通过 <code>appendfsync</code> 配置控制写入磁盘的频率：：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每个命令都同步（最安全，性能最差）</span></span><br><span class="line">appendfsync always</span><br><span class="line"><span class="comment"># 每秒同步一次（默认，平衡安全与性能）</span></span><br><span class="line">appendfsync everysec</span><br><span class="line"><span class="comment"># 由操作系统决定（性能最好，可能丢失较多数据）</span></span><br><span class="line">appendfsync no        </span><br></pre></td></tr></table></figure><h2 id="混合持久化（RDB-AOF）">混合持久化（RDB + AOF）</h2><p>为了解决 AOF 恢复慢的问题，同时保证数据安全，Redis 4.0 引入了混合持久化。</p><p>当开启混合持久化（<code>aof-use-rdb-preamble yes</code>）后，AOF 重写过程会发生变化，AOF 重写时不再使用纯命令日志，而是<strong>先写入 RDB 格式的全量数据</strong>，再追加重写期间的增量命令：</p><blockquote><ol><li class="lvl-3"><p>子进程进行重写时，不再是直接将数据以命令形式写入新 AOF 文件。</p></li><li class="lvl-3"><p>而是会先<strong>将当前内存中的数据做一次 RDB 快照，并写入新 AOF 文件的开头</strong>。</p></li><li class="lvl-3"><p>然后，在重写期间接收到的<strong>写命令，会以 AOF 格式（Redis 协议）追加到 RDB 数据之后</strong>。</p></li></ol><p><strong>“先拍一张快照，然后记录之后的指令”</strong></p></blockquote><p>最终生成的新的 AOF 文件是一个“<strong>RDB头部 + AOF尾部</strong>”的混合体。半部分是 RDB 二进制格式，后半部分是 AOF 命令文本。</p><ul class="lvl-0"><li class="lvl-2"><p><strong>结合了 RDB 和 AOF 的优点</strong>：</p><ul class="lvl-2"><li class="lvl-4"><strong>快速恢复</strong>：重启时，先加载 RDB 部分的内容，速度非常快，再重放少量 AOF 命令（精确）。文件大小比纯 AOF 小，恢复速度比纯 AOF 快。</li><li class="lvl-4"><strong>数据安全</strong>：再重放尾部 AOF 格式的增量命令，保证数据不丢失。</li></ul></li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启 AOF</span></span><br><span class="line">appendonly yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用混合持久化</span></span><br><span class="line">aof-use-rdb-preamble yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># AOF 同步策略使用每秒一次</span></span><br><span class="line">appendfsync everysec</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选的 RDB 备份，作为多一重保障</span></span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br></pre></td></tr></table></figure><h2 id="比较和建议">比较和建议</h2><p>如果两个都配了优先加载<strong>AOF</strong></p><ul class="lvl-0"><li class="lvl-2"><p><strong>RDB</strong> 像是一次<strong>全量拍照</strong>，速度快，文件小，但可能会丢数据。</p></li><li class="lvl-2"><p><strong>AOF</strong> 像是<strong>记录所有操作指令的日志</strong>，数据安全，但文件大，恢复慢。</p></li><li class="lvl-2"><p><strong>AOF</strong>比<strong>RDB</strong>更安全也更大</p></li><li class="lvl-2"><p><strong>RDB</strong>性能比<strong>AOF</strong>好</p></li></ul><table><thead><tr><th style="text-align:left">特性</th><th style="text-align:left">RDB</th><th style="text-align:left">AOF</th><th style="text-align:left">混合持久化 (推荐)</th></tr></thead><tbody><tr><td style="text-align:left"><strong>数据安全</strong></td><td style="text-align:left">低，可能丢失分钟级数据</td><td style="text-align:left">高，最多丢失秒级数据</td><td style="text-align:left">高，同 AOF</td></tr><tr><td style="text-align:left"><strong>文件大小</strong></td><td style="text-align:left">小，压缩二进制</td><td style="text-align:left">大，文本协议</td><td style="text-align:left">比纯 AOF 小</td></tr><tr><td style="text-align:left"><strong>恢复速度</strong></td><td style="text-align:left"><strong>快</strong></td><td style="text-align:left">慢</td><td style="text-align:left"><strong>非常快</strong> (先RDB，后增量AOF)</td></tr><tr><td style="text-align:left"><strong>对性能影响</strong></td><td style="text-align:left">fork 时可能阻塞，写入压力小</td><td style="text-align:left">写入压力取决于 <code>appendfsync</code></td><td style="text-align:left">同 AOF</td></tr><tr><td style="text-align:left"><strong>适用场景</strong></td><td style="text-align:left">容灾备份，允许分钟级数据丢失</td><td style="text-align:left">对数据安全要求高，如金融业务</td><td style="text-align:left"><strong>绝大多数生产环境</strong></td></tr></tbody></table><p>如何选择持久化策略？</p><table><thead><tr><th>场景</th><th>推荐方案</th></tr></thead><tbody><tr><td>要求高性能，可容忍少量数据丢失</td><td>仅 RDB</td></tr><tr><td>要求高数据安全性，不能容忍丢失</td><td>AOF（<code>everysec</code>或<code>always</code>）</td></tr><tr><td>既要快速恢复，又要高安全性</td><td><strong>混合持久化（推荐）</strong></td></tr><tr><td>仅用作缓存，无需持久化</td><td>关闭 RDB 和 AOF</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> DB </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Redis持久化 </tag>
            
            <tag> RDB持久化 </tag>
            
            <tag> AOF持久化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>物联网 MQTT 协议详解及使用场景</title>
      <link href="/2025/10/1cd851cd23aa40929133d1d020c76d0c/"/>
      <url>/2025/10/1cd851cd23aa40929133d1d020c76d0c/</url>
      
        <content type="html"><![CDATA[<p>应用层协议则主要是运行在传统互联网 TCP/IP 协议之上的设备通讯协议，这类协议通过互联网，支撑设备到云端平台的数据交换及通信，常见的有 HTTP、MQTT、CoAP、LwM2M 以及 XMPP 等协议。</p><blockquote><p>从协议在物联网系统中的应用角度来看，我们可以将协议划分为云端协议和网关协议。</p><ul class="lvl-1"><li class="lvl-2"><strong>云端协议</strong>是建立在 TCP/IP 上的协议，传感器、控制设备等物联网数据通常都需要传输上云，通过云端连通用户并与企业系统进行集成。支持 TCP/IP 的物联网设备，可以通过 WIFI、蜂窝网络以及以太网，使用 HTTP、MQTT、CoAP、LwM2M 以及 XMPP 等应用层协议协议接入云端。</li><li class="lvl-2"><strong>网关协议</strong>是适用于短距通信无法直接上云的协议，比如蓝牙、ZigBee、LoRa 等。此类设备需要接入网关转换之后，通过 TCP/IP 协议进行上云。</li></ul></blockquote><h2 id="MQTT-特性">MQTT 特性</h2><ul class="lvl-0"><li class="lvl-2"><p><a href="https://www.emqx.com/zh/blog/mqtt-5-introduction-to-publish-subscribe-model">发布-订阅模型</a>：MQTT 基于发布-订阅模型运作，非常适合物联网应用场景。发布者将消息发送至特定主题，而所有订阅该主题的客户端均能接收到该消息。</p></li><li class="lvl-2"><p><strong>轻量化设计</strong>：得益于其极小的数据包尺寸，MQTT 极为轻量化，适合在网络带宽十分宝贵的情况下使用。</p></li><li class="lvl-2"><p><a href="https://www.emqx.com/zh/blog/introduction-to-mqtt-qos">服务质量等级</a>：MQTT 提供三种服务质量（QoS）等级，从“最多一次”，至少一次，到“精确一次”（确保消息准确无误地仅送达一次，严禁重复消息）。</p></li><li class="lvl-2"><p><a href="https://www.emqx.com/zh/blog/mqtt5-features-retain-message">保留消息</a>：MQTT 允许在特定主题上保留消息。对于任何订阅该主题的客户端，都会存储并提供该主题的最新消息。</p></li><li class="lvl-2"><p><a href="https://www.emqx.com/zh/blog/use-of-mqtt-will-message"><strong>遗嘱机制</strong></a>：若 MQTT 客户端非正常断开连接，系统将向所有订阅者发送预设的“遗嘱”消息（在连接时在服务端中注册一个遗嘱消息，与普通消息类似，可以设置遗嘱消息的主题、有效载荷等等。当该客户端意外断开连接，服务端就会向其他订阅了相应主题的客户端发送此遗嘱消息）。</p></li><li class="lvl-2"><p><a href="https://www.emqx.com/zh/blog/mqtt5-new-feature-clean-start-and-session-expiry-interval"><strong>会话管理能力</strong></a>：MQTT 具备内置的会话管理机制。这意味着即使连接中断，也能够在不丢失任何消息的情况下，重新建立会话。</p></li></ul><p>特点和适用场景：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>特别适合于网络代价昂贵、带宽低、不可靠的环境。</p></li><li class="lvl-2"><p>能在处理和内存资源有限的嵌入式设备中运行。</p></li><li class="lvl-2"><p>使用发布/订阅消息模式，提供一对多的消息发布，从而解除应用程序耦合。</p></li><li class="lvl-2"><p>使用TCP/IP提供网络连接，</p></li><li class="lvl-2"><p>提供3种消息的QoS（Quality of Service）：至多一次、最少一次、只有一次</p></li><li class="lvl-2"><p>收发消息都是异步的，发送方不需要等待接收方应答</p></li><li class="lvl-2"><p>提供Last Will 和 Testament特性通知有关各方客户端异常中断的机制。</p></li></ul></blockquote><h2 id="MQTT-协议"><a href="https://www.mqtt.cn/">MQTT 协议</a></h2><p>mqtt 消息队里遥感勘测传输（MQ Telemetry Transport，简称MQTT）是一个基于TCP协议、发布/订阅模式的应用层传输协议。</p><p>MQTT是一种轻量级的消息协议，非常适合智能城市依赖的物联网应用。它提供<strong>低带宽消耗、高可靠性</strong>和安全的数据传输。</p><p>由EMQ开源的跨平台MQTT 5.0**客户端工具 **<a href="https://mqttx.app/zh">MQTTX</a></p><h3 id="组成">组成</h3><p>在MQTT协议中，一个MQTT数据包由：固定头（Fixed header）、 可变头（Variable header）、 消息体（payload）三部分构成。</p><ul class="lvl-0"><li class="lvl-2"><p><strong>固定头</strong>（Fixed header），所有数据包中都有固定头，包含数据包类型及数据包的分组标识。</p></li><li class="lvl-2"><p><strong>可变头</strong>（Variable header），部分数据包类型中有可变头。</p></li><li class="lvl-2"><p><strong>内容消息体</strong>（Payload），存在于部分数据包类，是客户端收到的具体消息内容。</p></li></ul><blockquote><p>微消息队列 MQTT 版相当于一个具备无限扩展能力的连接网关，不仅提供了自闭环的消息收发和存储能力，还提供了规则转入转出能力。可以通过配置规则搭配其他产品，例如传统服务端消息中间件（消息队列 RocketMQ）来实现云和端的数据双向互通。</p><p>微消息队列 MQTT 版系统采用分布式理念进行设计，无单点瓶颈，各组件之间均可以<strong>无限水平扩展</strong>，保证容量可以随着您的在线使用量进行调整，并且对用户完全透明。</p></blockquote><h3 id="通信过程">通信过程</h3><ul class="lvl-0"><li class="lvl-2"><p><strong>MQTT连接服务器</strong></p><p>客户端到服务器的网络连接建立后，客户端发送给服务器的第一个报文必须是CONNECT报文</p><blockquote><p>在一个网络连接上，客户端<strong>只能发送一次CONNECT报文</strong>，如果出现第二个CONNECT 报文，按照协议标准，服务器会将第二个CONNECT报文当作协议违规处理并断开客户端的连接。</p><p>对于正常的连接请求，服务器必须产生应答报文，如果无法建立会话，服务器应该在应答报文中报告对应的错误代码。</p><img src="/imgs/iot/0fb6f2f14abe107705e4587758cdbdfa.png" alt="mqtt007" style="zoom:67%;" /></blockquote></li><li class="lvl-2"><p><strong>MQTT订阅主题</strong></p><p>客户端向服务器发送SUBSCRIBE报文用于创建一个或多个订阅。</p><p>在服务器中，会记录这个客户关注的一个或者多个主题，当服务器收到这些主题的PUBLISH报文的时候，将分发应用消息到与之匹配的客户端中。</p><blockquote><p>SUBSCRIBE报文支持通配符，也为每个订阅指定了最大的QoS等级，服务器根据这些信息分发应用消息给客户端。</p><p>SUBSCRIBE报文拥有固定报头、可变报头、有效载荷。</p><p>当服务器收到客户端发送的一个SUBSCRIBE报文时，必须向客户端发送一个SUBACK报文响应，同时SUBACK报文必须和等待确认的SUBSCRIBE报文有相同的报文标识符。</p><p>如果服务器收到一个SUBSCRIBE报文，报文的主题过滤器与一个现存订阅的主题过滤器相同，那么必须使用新的订阅彻底替换现存的订阅。新订阅的主题过滤器和之前订阅的相同，但是它的最大QoS值可以不同。与这个主题过滤器匹配的任何现存的保留消息必须被重发，但是发布流程不能中断。</p><img src="/imgs/iot/image-20250715182842243.png" alt="image-20250715182842243" style="zoom:47%;" /></blockquote></li><li class="lvl-2"><p><strong>MQTT发布消息</strong></p><p>PUBLISH报文是指从客户端向服务器或者服务器向客户端发送一个应用消息。</p><p>其实从服务器分发的报文给订阅者，也是属于PUBLISH控制报文。</p><blockquote><p>MQTT按照服务质量 (QoS) 等级分发应用消息。分发应用消息给多个客户端（订阅者）时，每个客户端独立处理。从发布者发布消息到接受者，分发的消息服务质量可能是不同的，这取决于订阅者订阅主题时指定的服务质量等级。而对于发布者而言，发布消息时就指定了服务质量等级。</p></blockquote><ul class="lvl-2"><li class="lvl-4"><p><strong>QoS=0</strong>（最多分发一次：不响应不重试）</p><blockquote><p>消息的分发依赖于底层网络的能力。发布者必须发送QoS等于0，DUP等于0的PUBLISH报文。</p><p>服务器不会发送响应，发布者也不会重试，它在发出这个消息的时候就立马将消息丢弃，这个消息可能送达一次也可能没送达。</p><p>服务器接受PUBLISH报文时要将消息分发给订阅该主题的订阅者。</p></blockquote></li><li class="lvl-4"><p><strong>QoS=1</strong>（至少分发一次：一次响应）</p><blockquote><p>确保消息至少送达一次，可能被多次处理。</p><p>发送的PUBLISH报文的报头中必须包含一个<strong>报文标识符</strong>，且QoS等于1，DUP等于0。</p><ol><li class="lvl-3"><p>新的应用消息都必须分配一个未使用的报文标识符，在发布消息的同时将消息存储起来，等待服务器的应答。</p></li><li class="lvl-3"><p>服务器回应 PUBACK报文，必须包含发布者的报文标识符。</p></li></ol><p>发布者收到来自服务器的PUBACK报文后，这个报文标识符就可重复使用</p><p>在发送了PUBACK报文之后，接收者必须将任何包含相同报文标识符的PUBLISH报文当作一个新的消息，并忽略DUP标志的值。</p><img src="/imgs/iot/image-20250715184334437.png" alt="image-20250715184334437" style="zoom:60%;" /></blockquote></li><li class="lvl-4"><p><strong>QoS=2</strong>（仅分发一次：两次确认并存储）</p><p>最高等级的服务质量，这个服务质量等级会有额外的开销。消息可变报头中有报文标识符。</p><blockquote><p>接收者使用<strong>两步确认过程</strong>来确认收到。发送者必须给消息分配一个未使用的<strong>报文标识符</strong>，且报文的QoS等于2,DUP等于0。</p><ol><li class="lvl-3"><p>发布者发送一个未确认的报文消息，并将消息存储。</p></li><li class="lvl-3"><p>服务器响应PUBREC报文，并存储报文标识符和消息。</p></li><li class="lvl-3"><p>发布者丢弃消息，存储报文标识符，并发送一个PUBREL报文。必须包含与原始PUBLISH报文相同的报文标识符。</p></li><li class="lvl-3"><p>服务器发送对应的PUBCOMP报文（一旦发送了对应的PUBREL报文就不能重发这个PUBLISH报文）。</p></li><li class="lvl-3"><p>发布者丢弃存储的报文标识符。</p></li></ol><img src="/imgs/iot/image-20250715185705230.jpg" alt="image-20250715185705230" style="zoom:67%;" /></blockquote></li></ul></li><li class="lvl-2"><p><strong>取消订阅</strong>：客户端发送UNSUBSCRIBE报文给服务器，用于取消订阅主题（主题存在且被订阅，需保证已存在的消息分发完成）。</p><blockquote><p>UNSUBSCRIBE报文固定报头的第3,2,1,0位是保留位且必须分别设置为0,0,1,0。否则服务器必须认为任何其它的值都是不合法的并关闭网络连。具体的描述可以看协议文档。</p><p>即使没有删除任何主题订阅（客户端取消订阅的主题未被订阅），服务器也必须发送一个UNSUBACK响应。</p></blockquote></li><li class="lvl-2"><p><strong>断开连接</strong>：DISCONNECT报文是客户端发给服务端的最后一个控制报文。表示客户端正常断开连接。</p><p>DISCONNECT报文的固定报头保留位必须全为0。必须丢弃任何与当前连接关联的未发布的遗嘱消息。</p></li></ul><h3 id="Demo">Demo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MqttDemo</span> &#123;</span><br><span class="line">    <span class="comment">// MQTT 服务器地址</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MQTT_BROKER</span> <span class="operator">=</span> <span class="string">&quot;tcp://iot.modbus.cn:1883&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// MQTT 客户端 ID</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MQTT_CLIENT_ID</span> <span class="operator">=</span> <span class="string">&quot;4QR8TZ9ThuL4G&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// MQTT 用户名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MQTT_USERNAME</span> <span class="operator">=</span> <span class="string">&quot;ceshi&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// MQTT 密码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MQTT_PASSWORD</span> <span class="operator">=</span> <span class="string">&quot;Abc123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 订阅的主题</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MQTT_TOPIC_SUBSCRIBE</span> <span class="operator">=</span> <span class="string">&quot;/server/coo/4QR8TZ9ThuL4G&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发布的主题</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MQTT_TOPIC_PUBLISH</span> <span class="operator">=</span> <span class="string">&quot;/dev/coo/4QR8TZ9ThuL4G&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 心跳间隔，单位为秒</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MQTT_KEEP_ALIVE_INTERVAL</span> <span class="operator">=</span> <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MqttException &#123;</span><br><span class="line">        <span class="comment">// 创建 MQTT 客户端</span></span><br><span class="line">        <span class="type">MqttClient</span> <span class="variable">mqttClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MqttClient</span>(MQTT_BROKER, MQTT_CLIENT_ID, <span class="keyword">new</span> <span class="title class_">MemoryPersistence</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置 MQTT 连接选项</span></span><br><span class="line">        <span class="type">MqttConnectOptions</span> <span class="variable">options</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MqttConnectOptions</span>();</span><br><span class="line">        options.setUserName(MQTT_USERNAME);</span><br><span class="line">        options.setPassword(MQTT_PASSWORD.toCharArray());</span><br><span class="line">        options.setCleanSession(<span class="literal">true</span>);</span><br><span class="line">        options.setKeepAliveInterval(MQTT_KEEP_ALIVE_INTERVAL);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置回调</span></span><br><span class="line">        mqttClient.setCallback(<span class="keyword">new</span> <span class="title class_">MqttCallback</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connectionLost</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;连接断开&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">messageArrived</span><span class="params">(String topic, MqttMessage message)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;收到消息。主题: &quot;</span> + topic);</span><br><span class="line">                System.out.println(<span class="string">&quot;消息: &quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(message.getPayload()));</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 将消息转换为字符串</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(message.getPayload());</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 使用 JSON 工具解析字符串</span></span><br><span class="line">                <span class="type">JSONArray</span> <span class="variable">jsonArray</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONArray</span>(msg);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; jsonArray.length(); i++) &#123;</span><br><span class="line">                    <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> jsonArray.getJSONObject(i);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">device_id</span> <span class="operator">=</span> jsonObject.getInt(<span class="string">&quot;sensor_device_id&quot;</span>);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">port_id</span> <span class="operator">=</span> jsonObject.getInt(<span class="string">&quot;port_id&quot;</span>);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">sdata</span> <span class="operator">=</span> jsonObject.getInt(<span class="string">&quot;sdata&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    System.out.println(<span class="string">&quot;设备ID: &quot;</span> + device_id + <span class="string">&quot;, 端口ID: &quot;</span> + port_id + <span class="string">&quot;, 数据: &quot;</span> + sdata);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deliveryComplete</span><span class="params">(IMqttDeliveryToken token)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;消息发布完成&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 连接到 MQTT 服务器</span></span><br><span class="line">        mqttClient.connect(options);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 订阅主题</span></span><br><span class="line">        mqttClient.subscribe(MQTT_TOPIC_SUBSCRIBE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建消息</span></span><br><span class="line">        <span class="type">MqttMessage</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MqttMessage</span>();</span><br><span class="line">        message.setPayload(<span class="string">&quot;[&#123;\&quot;sensor_device_id\&quot;: 1, \&quot;port_id\&quot;: 1, \&quot;sdata\&quot;: 98.633&#125;]&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发布消息</span></span><br><span class="line">        mqttClient.publish(MQTT_TOPIC_PUBLISH, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RabbitMQ-支持"><a href="https://www.rabbitmq.com/blog/2023/03/21/native-mqtt">RabbitMQ</a> 支持</h3><p>RabbitMQ 是基于 AMQP 0.9.1 协议实现的广泛使用的开源消息队列产品，RabbitMQ 以插件的形式支持了 MQTT 协议，可以在 RabbitMQ 集群上方便的支持 MQTT 协议，实现对物联网等业务场景的支持</p><p>通过在集群节点执行以下命令开启MQTT插件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_mqtt</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--mqtt依赖包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.integration<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-integration-mqtt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.paho<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>org.eclipse.paho.client.mqttv3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/imgs/iot/4ab12ad389aefdefb4667b24af03ca26.png" alt="img" style="zoom:37%;" /><blockquote><p>AMQP 端口（默认端口：5672）： 这是 RabbitMQ 使用的端口，用于 AMQP 协议。确保你的安全组允许来自需要访问 RabbitMQ 的客户端的流量通过这个端口。</p><p>管理界面端口（默认端口：15672）： 如果你需要访问 RabbitMQ 的 Web 管理界面，你需要开放这个端口。</p><p>MQTT 端口（默认端口：1883）： 这是 MQTT 服务使用的端口。确保这个端口也被安全组允许通过，以便 MQTT 客户端可以连接到 RabbitMQ 的 MQTT 服务。</p></blockquote><p>验证 RabbitMQ 和 MQTT 下行消息的互通性，可以 RabbitMQ 发送消息，MQTT 订阅到消息。</p><p>RabbitMQ 的 MQTT 插件，可以支持正常的 MQTT 消息收发，也可以支持 MQTT 上行消息到应用，也可以支持应用发送 MQTT 消息下行消息到订阅端，并且有完善的监控。</p><p><strong>注意事项</strong>:</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>MQTT 协议的 topic 使用&quot;/&quot;分割 topic， AMQP 协议的 Topic(Routingkey)使用 &quot;.&quot;分割 topic，所以在协议转换的时候会自动转换，应用使用的时候要注意这个差别。</p></li><li class="lvl-2"><p>不推荐 MQTT 使用匿名连接或“no login credentials”,因为 AMQP 协议会自动转换为默认用户 guest 或 mqtt.default_user，不方便做权限管控。</p></li><li class="lvl-2"><p>关于订阅持久性，注意 MQTT 和 AMQP 队列持久性的映射。</p><ul class="lvl-3"><li class="lvl-4">Transient clients that use transient (non-persistent) messages</li><li class="lvl-4">Stateful clients that use durable subscriptions (non-clean sessions, QoS1)。</li></ul></li><li class="lvl-2"><p>优先使用镜像队列，不要使用 Quorum Queues 特性，因为 Quorum 要求至少三节点，并且新特性稳定性待验证，不推荐用。</p></li></ul></blockquote><h3 id="RocketMQ-支持"><a href="https://rocketmq.apache.org/zh/docs/mqtt/01RocketMQMQTTOverview/">RocketMQ</a> 支持</h3><p>MQTT协议定义的是一个Pub/Sub的通信模型，这个与RocketMQ是类似的，不过其在订阅方式上比较灵活，可以支持多级Topic订阅（如 “/t/t1/t2”），甚至可以支持通配符订阅（如 “/t/t1/+”）。</p><p>架构模型：</p><img src="/imgs/iot/arch-800b401eaa9313a952d1f14d3e6729f9.jpg" alt="image" style="zoom:40%;" /><p>队列存储模型：</p><img src="/imgs/iot/cq-0346fd04c437e267721dca190f30c49d.jpg" alt="image" style="zoom:30%;" /><blockquote><p>由于RocketMQ-MQTT项目依赖RocketMQ底层的多队列分发，RocketMQ从4.9.3版本开始支持这一特性，因此您需要确认RocketMQ的版本升级到4.9.3或更高版本，并且确保以下配置项已开启：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">enableLmq</span> = <span class="string">true </span></span><br><span class="line"><span class="attr">enableMultiDispatch</span> = <span class="string">true</span></span><br></pre></td></tr></table></figure></blockquote><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RocketMQProducer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DefaultMQProducer producer;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">firstTopic</span> <span class="operator">=</span> System.getenv(<span class="string">&quot;firstTopic&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">recvClientId</span> <span class="operator">=</span> <span class="string">&quot;recv01&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//Instantiate with a producer group name.</span></span><br><span class="line">        producer = <span class="keyword">new</span> <span class="title class_">DefaultMQProducer</span>(<span class="string">&quot;PID_TEST&quot;</span>);</span><br><span class="line">        <span class="comment">// Specify name server addresses.</span></span><br><span class="line">        producer.setNamesrvAddr(System.getenv(<span class="string">&quot;namesrv&quot;</span>));</span><br><span class="line">        <span class="comment">//Launch the instance.</span></span><br><span class="line">        producer.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sendMessage(i);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                sendWithWildcardMessage(i);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        producer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setLmq</span><span class="params">(Message msg, Set&lt;String&gt; queues)</span> &#123;</span><br><span class="line">        msg.putUserProperty(MessageConst.PROPERTY_INNER_MULTI_DISPATCH,</span><br><span class="line">                StringUtils.join(</span><br><span class="line">                        queues.stream().map(s -&gt; StringUtils.replace(s, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;%&quot;</span>)).map(s -&gt; MixAll.LMQ_PREFIX + s).collect(Collectors.toSet()),</span><br><span class="line">                        MixAll.MULTI_DISPATCH_QUEUE_SPLITTER));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(<span class="type">int</span> i)</span> <span class="keyword">throws</span> MQBrokerException, RemotingException, InterruptedException, MQClientException &#123;</span><br><span class="line">        <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(firstTopic,</span><br><span class="line">                <span class="string">&quot;MQ2MQTT&quot;</span>,</span><br><span class="line">                (<span class="string">&quot;MQ_&quot;</span> + System.currentTimeMillis() + <span class="string">&quot;_&quot;</span> + i).getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        <span class="type">String</span> <span class="variable">secondTopic</span> <span class="operator">=</span> <span class="string">&quot;/r1&quot;</span>;</span><br><span class="line">        setLmq(msg, <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(Arrays.asList(TopicUtils.wrapLmq(firstTopic, secondTopic))));</span><br><span class="line">        <span class="type">SendResult</span> <span class="variable">sendResult</span> <span class="operator">=</span> producer.send(msg);</span><br><span class="line">        System.out.println(<span class="string">&quot;sendMessage: &quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(msg.getBody()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sendWithWildcardMessage</span><span class="params">(<span class="type">int</span> i)</span> <span class="keyword">throws</span> MQBrokerException, RemotingException, InterruptedException, MQClientException &#123;</span><br><span class="line">        <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(firstTopic,</span><br><span class="line">                <span class="string">&quot;MQ2MQTT&quot;</span>,</span><br><span class="line">                (<span class="string">&quot;MQwc_&quot;</span> + System.currentTimeMillis() + <span class="string">&quot;_&quot;</span> + i).getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        <span class="type">String</span> <span class="variable">secondTopic</span> <span class="operator">=</span> <span class="string">&quot;/r/wc&quot;</span>;</span><br><span class="line">        Set&lt;String&gt; lmqSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        lmqSet.add(TopicUtils.wrapLmq(firstTopic, secondTopic));</span><br><span class="line">        lmqSet.addAll(mapWildCardLmq(firstTopic, secondTopic));</span><br><span class="line">        setLmq(msg, lmqSet);</span><br><span class="line">        <span class="type">SendResult</span> <span class="variable">sendResult</span> <span class="operator">=</span> producer.send(msg);</span><br><span class="line">        System.out.println(() + <span class="string">&quot;sendWcMessage: &quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(msg.getBody()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Set&lt;String&gt; <span class="title function_">mapWildCardLmq</span><span class="params">(String firstTopic, String secondTopic)</span> &#123;</span><br><span class="line">        <span class="comment">// todo by yourself</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(Arrays.asList(TopicUtils.wrapLmq(firstTopic, <span class="string">&quot;/r/+&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RocketMQConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MQClientException &#123;</span><br><span class="line">        <span class="comment">// Instantiate with specified consumer group name.</span></span><br><span class="line">        <span class="type">DefaultMQPushConsumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultMQPushConsumer</span>(<span class="string">&quot;GID_test01&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Specify name server addresses.</span></span><br><span class="line">        consumer.setNamesrvAddr(System.getenv(<span class="string">&quot;namesrv&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Subscribe one more more topics to consume.</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">firstTopic</span> <span class="operator">=</span> System.getenv(<span class="string">&quot;firstTopic&quot;</span>);</span><br><span class="line">        consumer.subscribe(firstTopic, Constants.MQTT_TAG);</span><br><span class="line">        <span class="comment">// Register callback to execute on arrival of messages fetched from brokers.</span></span><br><span class="line">        consumer.registerMessageListener(<span class="keyword">new</span> <span class="title class_">MessageListenerConcurrently</span>() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title function_">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; msgs,</span></span><br><span class="line"><span class="params">                                                            ConsumeConcurrentlyContext context)</span> &#123;</span><br><span class="line">                <span class="type">MessageExt</span> <span class="variable">messageExt</span> <span class="operator">=</span> msgs.get(<span class="number">0</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;Receive: &quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(messageExt.getBody()));</span><br><span class="line">                <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        consumer.start();</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">&quot;Consumer Started.%n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="EMQX"><a href="https://docs.emqx.com/zh/emqx/latest/">EMQX</a></h2><p>EMQX 提供了高效可靠海量物联网设备连接，能够高性能实时移动与处理消息和事件流数据，以弹性伸缩、安全可靠的方式连接数以亿计的物联网设备</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><a href="https://www.emqx.com/zh/blog/reaching-100m-mqtt-connections-with-emqx-5-0"><strong>海量连接</strong></a>：单节点支持 500 万 MQTT 设备连接，集群可水平扩展至支持 1 亿并发的 MQTT 连接。</p></li><li class="lvl-2"><p><a href="https://docs.emqx.com/zh/emqx/latest/deploy/cluster/mria-introduction.html"><strong>高可靠</strong></a>：弹性伸缩，无单点故障。内置 RocksDB 可靠地持久化 MQTT 消息，确保无数据损失。</p></li><li class="lvl-2"><p><a href="https://www.emqx.com/zh/use-cases/mqtt-security"><strong>数据安全</strong></a>：端到端数据加密（支持国密），细粒度访问控制，保障数据安全，满足企业合规需求。</p></li><li class="lvl-2"><p><a href="https://www.emqx.com/zh/blog/iot-protocols-mqtt-coap-lwm2m"><strong>多协议</strong></a>：支持 MQTT、HTTP、QUIC、WebSocket、LwM2M/CoAP 或专有协议连接任何设备。</p></li><li class="lvl-2"><p><a href="https://www.emqx.com/zh/blog/introduction-to-mqtt-5"><strong>全面支持 MQTT 5.0 标准</strong></a>：100% 符合 MQTT 5.0 和 3.x 标准，具有更好的可扩展性、安全性和可靠性。</p></li><li class="lvl-2"><p><a href="https://www.emqx.com/en/blog/mqtt-performance-benchmark-testing-emqx-single-node-supports-2m-message-throughput"><strong>高性能</strong></a>：单节点支持每秒实时接收、处理与分发数百万条的 MQTT 消息。<a href="https://www.emqx.com/en/blog/mqtt-performance-benchmark-testing-emqx-single-node-message-latency-response-time">毫秒级</a>消息交付时延。</p></li><li class="lvl-2"><p><a href="https://docs.emqx.com/zh/emqx/latest/dashboard/introduction.html"><strong>易运维</strong></a>：图形化配置、操作与管理，实时监测运行状态。支持 MQTT 跟踪进行端到端问题分析。</p></li><li class="lvl-2"><p><a href="https://www.emqx.com/zh/emqx-kubernetes-operator"><strong>云原生</strong></a>：通过 Kubernetes Operator 和 Terraform，可以轻松地在企业内部和公共云中进行部署。</p></li></ul></blockquote><h3 id="原理">原理</h3><ul class="lvl-0"><li class="lvl-2"><p><strong>MQTT 客户端</strong></p><p>任何运行 <a href="https://www.emqx.com/zh/mqtt-client-sdk">MQTT 客户端库</a>的应用或设备都是 MQTT 客户端。例如，使用 MQTT 的即时通讯应用是客户端，使用 MQTT 上报数据的各种传感器是客户端，各种 <a href="https://www.emqx.com/zh/blog/mqtt-client-tools">MQTT 测试工具</a>也是客户端。</p></li><li class="lvl-2"><p><strong>MQTT Broker</strong></p><p>MQTT Broker 是负责处理客户端请求的关键组件，包括建立连接、断开连接、订阅和取消订阅等操作，同时还负责消息的转发。一个高效强大的 MQTT Broker 能够轻松应对海量连接和百万级消息吞吐量，从而帮助物联网服务提供商专注于业务发展，快速构建可靠的 MQTT 应用。</p></li><li class="lvl-2"><p><strong>发布-订阅模式</strong></p><p>发布-订阅模式与客户端-服务器模式的不同之处在于，它将发送消息的客户端（发布者）和接收消息的客户端（订阅者）进行了解耦。发布者和订阅者之间无需建立直接连接，而是通过 MQTT Broker 来负责消息的路由和分发。</p><blockquote><p>下图展示了 MQTT 发布/订阅过程。温度传感器作为客户端连接到 MQTT Broker，并通过发布操作将温度数据发布到一个特定主题（例如 <code>Temperature</code>）。MQTT Broker 接收到该消息后会负责将其转发给订阅了相应主题（<code>Temperature</code>）的订阅者客户端。</p><img src="/imgs/iot/1520x.jpg" alt="MQTT 发布-订阅模式" style="zoom:37%;" /></blockquote></li><li class="lvl-2"><p><strong>主题</strong></p><p>MQTT 协议根据主题来转发消息。主题通过 <code>/</code> 来区分层级，类似于 URL 路径，例如：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chat<span class="regexp">/room/</span><span class="number">1</span></span><br><span class="line"></span><br><span class="line">sensor<span class="regexp">/10/</span>temperature</span><br><span class="line"></span><br><span class="line">sensor<span class="regexp">/+/</span>temperature</span><br></pre></td></tr></table></figure><p>MQTT 主题支持以下两种通配符：<code>+</code> 和 <code>#</code>。</p><ul class="lvl-2"><li class="lvl-4"><p><code>+</code>：表示单层通配符，例如 <code>a/+</code> 匹配 <code>a/x</code> 或 <code>a/y</code>。</p></li><li class="lvl-4"><p><code>#</code>：表示多层通配符，例如 <code>a/#</code> 匹配 <code>a/x</code>、<code>a/b/c/d</code>。</p></li></ul><blockquote><p><strong>注意</strong>：通配符主题只能用于订阅，不能用于发布。</p></blockquote><p><strong>QoS</strong></p><p>MQTT 提供了三种服务质量（QoS），在不同网络环境下保证消息的可靠性。</p><blockquote><ul class="lvl-3"><li class="lvl-2"><p>QoS 0：消息最多传送一次。如果当前客户端不可用，它将丢失这条消息。</p></li><li class="lvl-2"><p>QoS 1：消息至少传送一次。</p></li><li class="lvl-2"><p>QoS 2：消息只传送一次。</p></li></ul></blockquote></li></ul><h3 id="发布-订阅">发布/订阅</h3><p>适用于复杂和高性能的消息应用程序。这些特性包括支持通配符主题、基于主题的消息过滤、消息持久化和消息质量等级（QoS）设置。</p><p>发布功能允许连接到 EMQX 的设备向特定主题发送消息。消息可以包含任何类型的数据，例如传感器读数、状态更新或命令。当设备发布消息到一个主题时，EMQX 接收该消息并将其转发给所有订阅了该主题的设备。</p><p>EMQX 中的订阅功能允许设备从特定主题接收消息。设备可以订阅一个或多个主题，并接收在这些主题上发布的所有消息。这使得设备能够实时监控特定事件或数据流，而无需不断轮询更新。</p><h3 id="延迟发布">延迟发布</h3><p>延迟发布是 EMQX 支持的 MQTT 扩展功能。当客户端使用特殊主题前缀 <code>$delayed/&#123;DelayInteval&#125;</code> 发布消息时，将触发延迟发布功能，可以实现按照用户配置的时间间隔延迟发布消息。</p><p>延迟发布主题的具体格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$delayed/&#123;DelayInterval&#125;/&#123;TopicName&#125;</span><br></pre></td></tr></table></figure><blockquote><ul class="lvl-1"><li class="lvl-2"><p><code>$delayed</code>：使用 <code>$delay</code> 作为主题前缀的消息都将被视为需要延迟发布的消息。延迟间隔由下一主题层级中的内容决定。</p></li><li class="lvl-2"><p><code>&#123;DelayInterval&#125;</code>：指定该 MQTT 消息延迟发布的时间间隔，单位是秒，允许的最大间隔是 4294967 秒。如果 <code>&#123;DelayInterval&#125;</code> 无法被解析为一个整型数字，EMQX 将丢弃该消息，客户端不会收到任何信息。</p></li><li class="lvl-2"><p><code>&#123;TopicName&#125;</code>：MQTT 消息的主题名称。</p></li></ul></blockquote><p>例如:</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><code>$delayed/15/x/y</code>：15 秒后将 MQTT 消息发布到主题 <code>x/y</code>。</p></li><li class="lvl-2"><p><code>$delayed/60/a/b</code>：1 分钟后将 MQTT 消息发布到 <code>a/b</code>。</p></li><li class="lvl-2"><p><code>$delayed/3600/$SYS/topic</code>：1 小时后将 MQTT 消息发布到 <code>$SYS/topic</code>。</p></li></ul></blockquote><h3 id="排它订阅">排它订阅</h3><p>排它订阅是 EMQX 支持的 MQTT 扩展功能。排它订阅<strong>允许对主题进行互斥订阅</strong>，一个主题同一时刻仅被允许存在一个订阅者，在当前订阅者未取消订阅前，其他订阅者都将无法订阅对应主题。</p><p>要进行排它订阅，您需要为主题名称添加前缀，如以下表格中的示例：</p><table><thead><tr><th style="text-align:left">示例</th><th style="text-align:left">前缀</th><th style="text-align:left">真实主题名</th></tr></thead><tbody><tr><td style="text-align:left">$exclusive/t/1</td><td style="text-align:left">$exclusive/</td><td style="text-align:left">t/1</td></tr></tbody></table><blockquote><p>当某个客户端 <strong>A</strong> 订阅 <code>$exclusive/t/1</code> 后，其他客户端再订阅 <code>$exclusive/t/1</code> 时都会失败，直到 <strong>A</strong> 取消了对 <code>$exclusive/t/1</code> 的订阅为止。</p></blockquote><p><strong>注意</strong>: 排它订阅必须使用 <code>$exclusive/</code> 前缀，在上面的示例中，其他客户端依然可以通过 <code>t/1</code> 成功进行订阅。</p><h3 id="持久化">持久化</h3><p>可以将会话和消息持久化存储到磁盘，并提供高可用副本以保证数据的冗余和一致性。通过会话持久化功能，可以实现有效的故障转移和恢复机制，确保服务的连续性和可用性，从而提高系统的可靠性。</p><h3 id="集成-RabbitMQ"><a href="https://docs.emqx.com/zh/emqx/latest/data-integration/data-bridge-rabbitmq.html">集成 RabbitMQ</a></h3><p>通过内置的<a href="https://docs.emqx.com/zh/emqx/latest/data-integration/rules.html">规则引擎</a>组件，该集成简化了 EMQX 与 RabbitMQ 之间的数据摄取过程，无需复杂编码。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>创建 RabbitMQ Sink 规则，通过配置的 Sink 将处理后的结果传输到 RabbitMQ 的队列 （MQTT 主题 <code>t/#</code>）</p><ul class="lvl-3"><li class="lvl-4"><p>规则 SQL：SELECT   payload as data ,  now_timestamp() as timestamp FROM   “t/#”</p></li><li class="lvl-4"><p>配置信息</p><ul class="lvl-5"><li class="lvl-6"><p><strong>交换机</strong>: 输入之前创建的 <code>test_exchange</code>， 消息将被发送到该交换机。</p></li><li class="lvl-6"><p><strong>路由键</strong>: 输入之前创建的 <code>test_routing_key</code>，用于将消息路由到 RabbitMQ 交换中的正确队列。</p></li><li class="lvl-6"><p>在 <strong>消息传递模式</strong>下拉框中选择 <code>non_persistent</code> 或 <code>persistent</code>：</p><ul class="lvl-7"><li class="lvl-8"><p><code>non_persistent</code> （默认选项）：消息不会持久化到磁盘，如果 RabbitMQ 重新启动或崩溃，消息可能会丢失。</p></li><li class="lvl-8"><p><code>persistent</code>：消息被持久化到磁盘，以确保在 RabbitMQ 重新启动或崩溃时的数据持久性。</p><p>TIP</p><p>如果需要在 RabbitMQ 重新启动时防止消息丢失，您可能还需要将 queue 和 exchange 设置为 <code>durable</code>。有关更多信息，请参阅 RabbitMQ 的<a href="https://www.rabbitmq.com/documentation.html">文档</a>。</p></li></ul></li><li class="lvl-6"><p><strong>有效载荷模版</strong>： 默认值为空字符串，意味着将被转发至 RabbitMQ 服务器的消息载荷是未经任何修改的 JSON 格式文本。</p></li><li class="lvl-6"><p><strong>等待发布确认</strong>: 默认开启以保证消息被成功发送至 RabbitMQ。</p></li></ul></li></ul></li><li class="lvl-2"><p>创建 RabbitMQ Source 规则，将 RabbitMQ 队列中的数据转发至EMQX本地</p><ul class="lvl-3"><li class="lvl-4"><p>规则 SQL：SELECT  * FROM   “$bridges/rabbitmq:my-rabbitmq-source”</p></li><li class="lvl-4"><p>配置信息</p><ul class="lvl-5"><li class="lvl-6"><strong>队列</strong>：RabbitMQ 中创建好的队列名称。</li><li class="lvl-6"><strong>No Ack</strong>：根据情况选择，指定从 RabbitMQ 消费消息时是否使用 <code>no_ack</code> 模式。使用 <code>no_ack</code> 模式表示消费者接收消息后不需要发送确认，消息会立刻从队列中移除。</li><li class="lvl-6"><strong>等待发布确认</strong>：使用消息发布者确认时，是否要等待 RabbitMQ 确认消息。</li></ul></li><li class="lvl-4"><p>创建消息重发布动作</p><ul class="lvl-5"><li class="lvl-6"><p><strong>主题</strong>：发布到 MQTT 的主题，此处填写 <code>t/1</code>。</p></li><li class="lvl-6"><p><strong>QoS</strong>：选择 <code>0</code>、 <code>1</code>、 <code>2</code>、或 <code>$&#123;qos&#125;</code>，也可以输入占位符从其他字段中设置 QoS，此处选择 <code>$&#123;qos&#125;</code> 表示跟随原始消息的 QoS。</p></li><li class="lvl-6"><p><strong>Retain</strong>：选择 <code>true</code> 或 <code>false</code>。</p><p>确认是否以保留消息方式发布消息，也可以输入占位符从其他字段中设置保留消息标志位，此处我们选择 <code>false</code>。</p></li><li class="lvl-6"><p><strong>消息模板</strong>：用于生成转发消息 Payload 的模板，默认留空表示转发规则输出结果。此处可以输入 <code>$&#123;payload&#125;</code> 表示仅转发 Payload。</p></li><li class="lvl-6"><p><strong>MQTT 5.0 消息属性</strong>：默认禁用</p></li></ul></li></ul></li><li class="lvl-2"><p>创建一个连接器，将 RabbitMQ Sink 或 Source 连接到 RabbitMQ 服务器（Dashboard -&gt; 创建连接器 -&gt; 选择rmq，输入连接信息）。</p></li></ul></blockquote><p><a href="https://www.emqx.com/zh/downloads-and-install/broker?os=Ubuntu">下载 EMQX 开源版</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://docker.aityp.com/image/docker.io/emqx/emqx:5.8.1</span></span><br><span class="line"></span><br><span class="line">docker pull swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/emqx/emqx:5.8.1</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">docker tag  swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/emqx/emqx:5.8.1  docker.io/emqx/emqx:5.8.1</span><br><span class="line"><span class="comment"># 修改镜像名称</span></span><br><span class="line">docker tag 0526464d2e3a emqx/emqx</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">docker run -d --name emqx -p 1883:1883 -p 8083:8083 -p 8084:8084 -p 8883:8883 -p 18083:18083 emqx/emqx</span><br><span class="line"><span class="comment"># 访问emqx（默认账号admin / public）</span></span><br><span class="line">http://localhost:18083/</span><br></pre></td></tr></table></figure><p>java客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMqttClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">MqttClient</span> <span class="variable">mqttClient</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">MemoryPersistence</span> <span class="variable">memoryPersistence</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">MqttConnectOptions</span> <span class="variable">mqttConnectOptions</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">ClientName</span> <span class="operator">=</span> <span class="string">&quot;test-mqtt&quot;</span>;                <span class="comment">//待填    将在服务端出现的名字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">IP</span> <span class="operator">=</span> <span class="string">&quot;127.0.0.1&quot;</span>;                        <span class="comment">//待填  服务器IP</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(String clientId)</span> &#123;</span><br><span class="line">        <span class="comment">//初始化连接设置对象</span></span><br><span class="line">        mqttConnectOptions = <span class="keyword">new</span> <span class="title class_">MqttConnectOptions</span>();</span><br><span class="line">        <span class="comment">//设置是否清空session,这里如果设置为false表示服务器会保留客户端的连接记录，</span></span><br><span class="line">        <span class="comment">//这里设置为true表示每次连接到服务器都以新的身份连接</span></span><br><span class="line">        mqttConnectOptions.setCleanSession(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//设置连接超时时间，单位是秒</span></span><br><span class="line">        mqttConnectOptions.setConnectionTimeout(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//设置持久化方式</span></span><br><span class="line">        memoryPersistence = <span class="keyword">new</span> <span class="title class_">MemoryPersistence</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != clientId) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                mqttClient = <span class="keyword">new</span> <span class="title class_">MqttClient</span>(<span class="string">&quot;tcp://&quot;</span> + IP + <span class="string">&quot;:1883&quot;</span>, clientId, memoryPersistence);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (MqttException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设置连接和回调</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != mqttClient) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!mqttClient.isConnected()) &#123;</span><br><span class="line">                <span class="comment">//创建回调函数对象</span></span><br><span class="line">                <span class="type">MQTTReceiveCallback</span> <span class="variable">MQTTReceiveCallback</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MQTTReceiveCallback</span>();</span><br><span class="line">                <span class="comment">//客户端添加回调函数</span></span><br><span class="line">                mqttClient.setCallback(MQTTReceiveCallback);</span><br><span class="line">                <span class="comment">//创建连接</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;创建连接&quot;</span>);</span><br><span class="line">                    mqttClient.connect(mqttConnectOptions);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (MqttException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;mqttClient为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;连接状态&quot;</span> + mqttClient.isConnected());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    关闭连接</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">closeConnect</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//关闭存储方式</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != memoryPersistence) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                memoryPersistence.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (MqttPersistenceException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;memoryPersistence is null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != mqttClient) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mqttClient.isConnected()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    mqttClient.disconnect();</span><br><span class="line">                    mqttClient.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (MqttException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;mqttClient is not connect&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;mqttClient is null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    发布消息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">publishMessage</span><span class="params">(String pubTopic, String message, <span class="type">int</span> qos)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != mqttClient &amp;&amp; mqttClient.isConnected()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;发布消息，id:&quot;</span> + mqttClient.getClientId());</span><br><span class="line">            <span class="type">MqttMessage</span> <span class="variable">mqttMessage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MqttMessage</span>();</span><br><span class="line">            mqttMessage.setQos(qos);</span><br><span class="line">            mqttMessage.setPayload(message.getBytes());</span><br><span class="line"></span><br><span class="line">            <span class="type">MqttTopic</span> <span class="variable">topic</span> <span class="operator">=</span> mqttClient.getTopic(pubTopic);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> != topic) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">MqttDeliveryToken</span> <span class="variable">publish</span> <span class="operator">=</span> topic.publish(mqttMessage);</span><br><span class="line">                    <span class="keyword">if</span> (!publish.isComplete()) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;消息发布成功&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (MqttException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            reConnect();</span><br><span class="line"></span><br><span class="line">            publishMessage(pubTopic, message, qos);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    重新连接</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reConnect</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != mqttClient) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!mqttClient.isConnected()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> != mqttConnectOptions) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        mqttClient.connect(mqttConnectOptions);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (MqttException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;mqttConnectOptions is null&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;mqttClient is null or connect&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            start(ClientName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    订阅主题</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">subTopic</span><span class="params">(String topic)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != mqttClient &amp;&amp; mqttClient.isConnected()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                mqttClient.subscribe(topic, <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (MqttException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;mqttClient is error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    清空主题</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cleanTopic</span><span class="params">(String topic)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != mqttClient &amp;&amp; !mqttClient.isConnected()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                mqttClient.unsubscribe(topic);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (MqttException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;mqttClient is error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发布消息的回调类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MQTTReceiveCallback</span> <span class="keyword">implements</span> <span class="title class_">MqttCallback</span> &#123;</span><br><span class="line">     <span class="comment">// 连接丢失后，一般在这里面进行重连</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connectionLost</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;连接断开，可以做重连&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收到已经发布的 QoS 1 或 QoS 2 消息的传递令牌时调用。由 MqttClient.connect 激活此回调。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deliveryComplete</span><span class="params">(IMqttDeliveryToken token)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;deliveryComplete---------&quot;</span> + token.isComplete());</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="comment">// subscribe后得到的消息会执行到这里面</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">messageArrived</span><span class="params">(String topic, MqttMessage message)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;接收消息主题 : &quot;</span> + topic);</span><br><span class="line">        System.out.println(<span class="string">&quot;接收消息Qos : &quot;</span> + message.getQos());</span><br><span class="line">        System.out.println(<span class="string">&quot;接收消息内容 : &quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(message.getPayload()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HiveMQ"><a href="https://www.mqtt.cn/mqtt-tutorial/hivemq">HiveMQ</a></h2><p>HiveMQ通过提供强大的安全协议、可扩展架构和事件驱动通信等功能，增强了MQTT的能力，使其成为智能城市中关键基础设施和服务的理想选择。</p><h2 id="与-MQ-的关联和区别">与 MQ 的关联和区别</h2><p>在物联网 IoT 场景中，成千上万（甚至数百万）规模的设备传感器可使用微消息队列 MQTT 版上传数据，需做数据分析的服务端（即部署在服务器上的应用）则可以通过消息队列 RocketMQ 版完成数据的分析与处理</p><table><thead><tr><th>产品名</th><th>适用场景</th></tr></thead><tbody><tr><td>微消息队列 MQTT 版</td><td>面向移动端场景，移动端场景一般都具备海量设备，单设备数据较少的特点。<br />微消息队列 MQTT 适用于拥有大量在线客户端（过万，甚至上百万），但每个客户端消息较少的场景。</td></tr><tr><td>消息队列 RocketMQ 版</td><td>面向服务端的消息引擎，主要用于服务组件之间的解耦、异步通知、削峰填谷等，服务器规模较小，但需要大量的消息处理，吞吐量要求高。<br />消息队列 RocketMQ 版适用于服务端进行大批量的数据处理和分析的场景。</td></tr></tbody></table><p>功能对比：</p><table><thead><tr><th>功能特性</th><th>微消息队列 MQTT 版</th><th>消息队列 RocketMQ 版</th></tr></thead><tbody><tr><td>客户端连接数</td><td>客户端规模庞大，百万甚至千万级。</td><td>一般服务器规模较小，极少数万级。</td></tr><tr><td>单客户端消息量</td><td>单个客户端需要处理的消息少，一般定时收发消息。</td><td>单个客户端处理消息量大，注重吞吐量。</td></tr><tr><td>部署场景</td><td>移动设备、App 软件、H5 页面等。</td><td>服务端应用。</td></tr><tr><td>消费模式</td><td>支持广播模式。</td><td>支持集群消费和广播消费。</td></tr><tr><td>顺序支持</td><td>只支持上行顺序，不支持下行顺序（后续开放）。</td><td>支持上行和下行顺序。</td></tr><tr><td>多语言/系统支持（TCP 协议）</td><td>支持 Java、C、C++、.NET、Android、iOS、Python、JS、Go 等多种语言和系统。</td><td>支持 Java、C++、.NET。</td></tr><tr><td>访问凭证</td><td>支持 RAM 主子账号授权和 MQTT Token 的临时访问模式，详情请参见鉴权概述。</td><td>支持 RAM 主子账号授权和 跨云账号授权（STS 临时授权访问）。</td></tr></tbody></table><p>选型推荐：</p><table><thead><tr><th>场景</th><th>部署端</th><th>微消息队列 MQTT 版</th><th>消息队列 RocketMQ 版</th></tr></thead><tbody><tr><td>设备端上报状态数据</td><td>移动终端</td><td>√</td><td>×</td></tr><tr><td>接收并处理分析设备的上报数据</td><td>移动终端</td><td>×</td><td>√</td></tr><tr><td>对多个设备下发控制指令</td><td>服务器</td><td>×</td><td>√</td></tr><tr><td>直播、弹幕、聊天 App 收发消息</td><td>应用</td><td>√</td><td>×</td></tr><tr><td>服务端接收并分析聊天消息</td><td>服务器</td><td>×</td><td>√</td></tr></tbody></table><p>MQTT协议广泛应用场景也是非常非常多，下边列举一些：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>物联网M2M通信，物联网大数据采集</p></li><li class="lvl-2"><p>Android消息推送，WEB消息推送</p></li><li class="lvl-2"><p>移动即时消息，例如Facebook Messenger</p></li><li class="lvl-2"><p>智能硬件、智能家具、智能电器</p></li><li class="lvl-2"><p>车联网通信，电动车站桩采集</p></li><li class="lvl-2"><p>智慧城市、远程医疗、远程教育</p></li><li class="lvl-2"><p>电力、石油与能源等行业市场</p></li></ul></blockquote><p><strong>如何关联</strong>：将 MQTT 数据传输到 RabbitMQ</p><p>RabbitMQ 数据集成是 EMQX 中的开箱即用功能，结合了 EMQX 的设备接入、消息传输能力与 RabbitMQ 强大的消息队列处理能力。</p><img src="/imgs/iot/emqx-integration-rabbitmq.nn846amc.jpg" alt="EMQX-RabbitMQ 集成" style="zoom:27%;" /><p>EMQX 支持与 RabbitMQ 的数据集成，能够让您将 MQTT 消息和事件转发至 RabbitMQ，还能够实现从 RabbitMQ Server 中消费数据，并发布到 EMQX 特定主题中，实现 RabbitMQ 到 MQTT 的消息下发。</p><p>MQTT 数据摄取到 RabbitMQ 的工作流程如下：</p><blockquote><ol><li class="lvl-3"><p><strong>消息发布和接收</strong>：工业物联网设备通过 MQTT 协议与 EMQX 建立成功连接，并向 EMQX 发布实时 MQTT 数据。EMQX 收到这些消息后，将启动其规则引擎中的匹配过程。</p></li><li class="lvl-3"><p><strong>消息数据处理</strong>：消息到达后，它将通过规则引擎进行处理，然后由 EMQX 中定义的规则处理。根据预定义的标准，规则将决定哪些消息需要路由到 RabbitMQ。如果任何规则指定了载荷转换，则将应用这些转换，例如转换数据格式、过滤特定信息或用额外的上下文丰富载荷。</p></li><li class="lvl-3"><p><strong>消息传入到 RabbitMQ</strong>：规则处理完消息后，它将触发一个动作，将消息转发到 RabbitMQ。处理过的消息将无缝写入 RabbitMQ。</p></li><li class="lvl-3"><p><strong>数据持久化和利用</strong>：RabbitMQ 将消息存储在队列中，并将它们传递给适当的消费者。消息可以被其他应用程序或服务消费以进行进一步处理，如数据分析、可视化和存储。</p></li></ol></blockquote><h2 id="对比-CoAP-协议">对比 CoAP 协议</h2><p><strong>CoAP 的关键特性包括</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>基于 UDP</strong>：不同于运行在 TCP 之上的 MQTT，CoAP 设计为使用 UDP，更适合于网络和资源受限的环境。</p></li><li class="lvl-2"><p><strong>类 HTTP 语义</strong>：CoAP 采用了类似 HTTP 的语义，使用 GET、POST、PUT 和 DELETE 等方法进行交云。这使得熟悉 HTTP 的开发者可以轻松地采用 CoAP。</p></li><li class="lvl-2"><p><strong>确认消息</strong>：CoAP 提供了确保消息送达接收方的确认消息机制。如果没有收到确认回复，消息将会被重新发送。</p></li><li class="lvl-2"><p><strong>资源观察</strong>：CoAP 允许客户端“观察”资源，这样当资源状态发生变化时，客户端可以自动接收更新。</p></li><li class="lvl-2"><p><strong>分块传输</strong>：CoAP 支持将大型负载分割成小块进行传输，这对数据包大小敏感的受限网络来说非常有用。</p></li></ul></blockquote><table><thead><tr><th style="text-align:left">特性</th><th style="text-align:left"><strong>MQTT</strong></th><th style="text-align:left"><strong>CoAP</strong></th></tr></thead><tbody><tr><td style="text-align:left">传输层</td><td style="text-align:left">TCP（开销大）</td><td style="text-align:left">UDP（开销小）</td></tr><tr><td style="text-align:left">头部大小</td><td style="text-align:left">2 字节（灵活头部）</td><td style="text-align:left">4 字节（固定头部）</td></tr><tr><td style="text-align:left">资源开销</td><td style="text-align:left">低</td><td style="text-align:left">非常低</td></tr><tr><td style="text-align:left">消息模型</td><td style="text-align:left">发布/订阅</td><td style="text-align:left">请求/响应 RESTful</td></tr><tr><td style="text-align:left">消息可靠性</td><td style="text-align:left">非常高</td><td style="text-align:left">较低</td></tr><tr><td style="text-align:left">功能多样性</td><td style="text-align:left">丰富</td><td style="text-align:left">较少</td></tr><tr><td style="text-align:left">扩展性</td><td style="text-align:left">高度的可扩展性</td><td style="text-align:left">适合资源受限的环境，高并发场景下可能会遇到挑战</td></tr><tr><td style="text-align:left">安全性</td><td style="text-align:left">SSL/TLS</td><td style="text-align:left">DTLS（数据报传输层安全）</td></tr><tr><td style="text-align:left">应用场景</td><td style="text-align:left">油气管道监控、工业自动化、车联网、远程医疗</td><td style="text-align:left">低功耗传感器、农业、环境检测、智能计量</td></tr></tbody></table><p>在决定选用 MQTT 还是 CoAP 时，应考虑以下因素：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>网络环境</strong>：如果您的网络不稳定或带宽受限，MQTT 凭借其轻量级设计和处理高延迟的能力，可能是更佳的选择。</p></li><li class="lvl-2"><p><strong>设备能力</strong>：如果您的设备处理能力或存储空间有限，CoAP 的低开销特性可能使其成为更适合的选项。</p></li><li class="lvl-2"><p><strong>消息传递保证</strong>：如果您需要确保消息只传递一次，MQTT 提供的高级服务质量（QoS）可能更加有利。</p></li><li class="lvl-2"><p><strong>安全需求</strong>：MQTT 和 CoAP 都提供了安全特性，但它们的实现方式各不相同。根据您的具体安全需求选择合适的协议。</p></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> IOT </category>
          
          <category> MQTT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MQTT协议 </tag>
            
            <tag> EMQX </tag>
            
            <tag> 遗嘱机制 </tag>
            
            <tag> 物联网协议 </tag>
            
            <tag> 服务质量等级（QoS） </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AI 模型的多种轻量化压缩技术</title>
      <link href="/2025/10/1332727d5b8a4fdc9cfbfd3661f009d4/"/>
      <url>/2025/10/1332727d5b8a4fdc9cfbfd3661f009d4/</url>
      
        <content type="html"><![CDATA[<p>模型轻量化是深度学习部署中的关键技术，旨在在保持模型性能（如准确率）的前提下，显著减少模型的参数量、计算量（FLOPs）、内存占用和推理延迟，使其适用于资源受限的设备（如移动端、嵌入式设备、IoT设备等）。</p><p>通过系统化实施，可在移动端实现 &lt;10ms 延迟、&lt;5MB 模型体积，同时保持 90%+ 原始精度。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>精度-效率权衡</strong>：轻量化必然带来精度损失，需根据业务容忍度调整。</p></li><li class="lvl-2"><p><strong>硬件适配</strong>：INT8在GPU/NPU上加速明显，但在CPU上可能收效甚微。</p></li><li class="lvl-2"><p><strong>端到端延迟</strong>：不仅看FLOPs，还要考虑内存带宽、缓存命中率。</p></li><li class="lvl-2"><p><strong>动态输入</strong>：部分轻量化方法（如通道剪枝）不支持动态shape。</p></li></ul></blockquote><p>（内容逐步完善中）</p><h2 id="技术手段与路线">技术手段与路线</h2><h3 id="网络结构设计">网络结构设计</h3><p>从源头设计轻量级网络结构。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>MobileNet（V1/V2/V3）：使用深度可分离卷积（Depthwise Separable Convolution）</p></li><li class="lvl-2"><p>ShuffleNet（V1/V2）：使用通道混洗（Channel Shuffle）和分组卷积</p></li><li class="lvl-2"><p>EfficientNet：通过复合缩放（Compound Scaling）平衡深度、宽度和分辨率</p></li><li class="lvl-2"><p>GhostNet：通过廉价操作生成“幻影”特征图</p></li></ul></blockquote><p><strong>实施步骤</strong>：</p><ol><li class="lvl-3"><p><strong>需求分析</strong>：明确目标设备（如手机、嵌入式芯片）、延迟/功耗/精度要求。</p></li><li class="lvl-3"><p><strong>选择基线架构</strong>：根据任务（图像分类、目标检测等）选择合适的轻量网络（如MobileNetV2用于分类）。</p></li><li class="lvl-3"><p><strong>调整超参数</strong>：调节宽度乘子（width multiplier）、分辨率等控制模型大小。</p></li><li class="lvl-3"><p><strong>训练与验证</strong>：在目标任务数据集上训练，并验证精度与速度的平衡。</p></li></ol><h3 id="模型剪枝（Pruning）"><a href="https://github.com/HengLine/ai-model-lightweighting/tree/main/Pruning">模型剪枝</a>（Pruning）</h3><p><strong>模型剪枝</strong>是一种模型压缩技术，通过移除神经网络中不重要的参数（权重、神经元、通道等）来减少模型大小和计算量，同时尽量保持模型性能。</p><blockquote><p>移除冗余的权重、通道或层。</p><ul class="lvl-1"><li class="lvl-2"><strong>权重剪枝</strong>（Unstructured Pruning）：移除绝对值小的权重，形成稀疏矩阵。需要稀疏计算支持（如专用硬件或库）。</li><li class="lvl-2"><strong>通道/结构化剪枝</strong>（Structured Pruning）：移除整个卷积核或通道，保持稠密结构，兼容通用硬件。</li></ul><p>原始模型 → 识别重要参数 → 移除不重要参数 → 微调 → 剪枝后模型</p></blockquote><p>剪枝的粒度级别</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>“权重级”: “移除单个权重参数”,</p></li><li class="lvl-2"><p>“神经元级”: “移除整个神经元”,</p></li><li class="lvl-2"><p>“通道级”: “移除整个特征通道”,</p></li><li class="lvl-2"><p>“层级”: “移除整个网络层”,</p></li><li class="lvl-2"><p>“块级”: “移除网络块（如ResNet块）”</p></li></ul></blockquote><h4 id="剪枝技术和类别">剪枝技术和类别</h4><ul class="lvl-0"><li class="lvl-2"><p>结构剪枝</p><ul class="lvl-2"><li class="lvl-4"><p>非结构化剪枝 - 移除单个权重</p></li><li class="lvl-4"><p>结构化剪枝 - 移除整个通道/神经元</p></li></ul></li><li class="lvl-2"><p>剪枝技术</p><ul class="lvl-2"><li class="lvl-4"><strong>迭代剪枝</strong> - 逐步剪枝并微调</li><li class="lvl-4">基于<strong>正则化</strong>的剪枝<ul class="lvl-4"><li class="lvl-6">L1正则化损失 - 促进稀疏性</li><li class="lvl-6">组Lasso损失 - 促进结构化稀疏性</li><li class="lvl-6">组合损失函数</li></ul></li></ul></li></ul><h4 id="核心算法">核心算法</h4><p>基于<strong>幅度</strong> 和 <strong>梯度</strong> 算法的剪枝</p><ul class="lvl-0"><li class="lvl-2"><p>基于幅度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MagnitudeBasedPruning</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;基于权重大小的剪枝方法&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, pruning_rate=<span class="number">0.2</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.pruning_rate = pruning_rate</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">global_magnitude_prune</span>(<span class="params">self, model</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;全局幅度剪枝&quot;&quot;&quot;</span></span><br><span class="line">        all_weights = []</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 收集所有权重</span></span><br><span class="line">        <span class="keyword">for</span> name, param <span class="keyword">in</span> model.named_parameters():</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;weight&#x27;</span> <span class="keyword">in</span> name <span class="keyword">and</span> <span class="built_in">len</span>(param.shape) &gt; <span class="number">1</span>:  <span class="comment"># 只处理权重矩阵</span></span><br><span class="line">                all_weights.append(param.data.<span class="built_in">abs</span>().view(-<span class="number">1</span>))</span><br><span class="line">        </span><br><span class="line">        all_weights = torch.cat(all_weights)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 计算全局阈值</span></span><br><span class="line">        threshold = torch.quantile(all_weights, <span class="variable language_">self</span>.pruning_rate)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 应用剪枝</span></span><br><span class="line">        masks = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> name, param <span class="keyword">in</span> model.named_parameters():</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;weight&#x27;</span> <span class="keyword">in</span> name <span class="keyword">and</span> <span class="built_in">len</span>(param.shape) &gt; <span class="number">1</span>:</span><br><span class="line">                mask = param.data.<span class="built_in">abs</span>() &gt; threshold</span><br><span class="line">                masks[name] = mask</span><br><span class="line">                param.data *= mask.<span class="built_in">float</span>()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> masks</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">layer_wise_magnitude_prune</span>(<span class="params">self, model</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;逐层幅度剪枝&quot;&quot;&quot;</span></span><br><span class="line">        masks = &#123;&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> name, module <span class="keyword">in</span> model.named_modules():</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(module, (nn.Linear, nn.Conv2d)):</span><br><span class="line">                <span class="comment"># 计算该层的阈值</span></span><br><span class="line">                weights = module.weight.data.<span class="built_in">abs</span>().view(-<span class="number">1</span>)</span><br><span class="line">                threshold = torch.quantile(weights, <span class="variable language_">self</span>.pruning_rate)</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 创建掩码</span></span><br><span class="line">                mask = module.weight.data.<span class="built_in">abs</span>() &gt; threshold</span><br><span class="line">                masks[name] = mask</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 应用剪枝</span></span><br><span class="line">                module.weight.data *= mask.<span class="built_in">float</span>()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> masks</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>基于梯度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GradientBasedPruning</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;基于梯度信息的剪枝方法&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, pruning_rate=<span class="number">0.2</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.pruning_rate = pruning_rate</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">compute_weight_importance</span>(<span class="params">self, model, dataloader, criterion</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;计算权重重要性（基于梯度）&quot;&quot;&quot;</span></span><br><span class="line">        model.train()</span><br><span class="line">        importance_scores = &#123;&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 初始化重要性分数</span></span><br><span class="line">        <span class="keyword">for</span> name, param <span class="keyword">in</span> model.named_parameters():</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;weight&#x27;</span> <span class="keyword">in</span> name:</span><br><span class="line">                importance_scores[name] = torch.zeros_like(param.data)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 计算梯度并累积重要性</span></span><br><span class="line">        <span class="keyword">for</span> batch_idx, (data, target) <span class="keyword">in</span> <span class="built_in">enumerate</span>(dataloader):</span><br><span class="line">            model.zero_grad()</span><br><span class="line">            output = model(data)</span><br><span class="line">            loss = criterion(output, target)</span><br><span class="line">            loss.backward()</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 累积梯度信息</span></span><br><span class="line">            <span class="keyword">for</span> name, param <span class="keyword">in</span> model.named_parameters():</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27;weight&#x27;</span> <span class="keyword">in</span> name <span class="keyword">and</span> param.grad <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                    <span class="comment"># 使用梯度×权重作为重要性指标</span></span><br><span class="line">                    importance_scores[name] += (param.data * param.grad).<span class="built_in">abs</span>()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> importance_scores</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gradient_based_prune</span>(<span class="params">self, model, dataloader, criterion</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;基于梯度的剪枝&quot;&quot;&quot;</span></span><br><span class="line">        importance_scores = <span class="variable language_">self</span>.compute_weight_importance(model, dataloader, criterion)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 计算全局阈值</span></span><br><span class="line">        all_scores = torch.cat([score.view(-<span class="number">1</span>) <span class="keyword">for</span> score <span class="keyword">in</span> importance_scores.values()])</span><br><span class="line">        threshold = torch.quantile(all_scores, <span class="variable language_">self</span>.pruning_rate)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 应用剪枝</span></span><br><span class="line">        masks = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> name, param <span class="keyword">in</span> model.named_parameters():</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;weight&#x27;</span> <span class="keyword">in</span> name:</span><br><span class="line">                mask = importance_scores[name] &gt; threshold</span><br><span class="line">                masks[name] = mask</span><br><span class="line">                param.data *= mask.<span class="built_in">float</span>()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> masks</span><br></pre></td></tr></table></figure></li></ul><h4 id="实施步骤">实施步骤</h4><ol><li class="lvl-3"><p><strong>预训练模型</strong>：在目标任务上训练一个完整模型。</p></li><li class="lvl-3"><p>重要性评估：</p><ul class="lvl-2"><li class="lvl-5">L1/L2范数：通道权重的L1范数越小越不重要。</li><li class="lvl-5">梯度信息：使用泰勒展开估计移除某通道对损失的影响。</li><li class="lvl-5">注意力机制：如使用BN层的γ系数作为通道重要性指标。</li></ul></li><li class="lvl-3"><p>剪枝策略：</p><ul class="lvl-2"><li class="lvl-5">一次性剪枝（One-shot）：直接剪掉一定比例。</li><li class="lvl-5">迭代剪枝（Iterative）：逐步剪枝 + 微调，效果更好。</li></ul></li><li class="lvl-3"><p><strong>微调（Fine-tuning）</strong>：恢复因剪枝导致的精度下降。</p></li><li class="lvl-3"><p><strong>导出剪枝后模型</strong>：移除冗余参数，生成紧凑模型。</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AutoPruner</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;自动剪枝框架&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, model, dataloader, criterion</span>):</span><br><span class="line">        <span class="variable language_">self</span>.model = model</span><br><span class="line">        <span class="variable language_">self</span>.dataloader = dataloader</span><br><span class="line">        <span class="variable language_">self</span>.criterion = criterion</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sensitivity_analysis</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;敏感性分析 - 确定各层对剪枝的敏感度&quot;&quot;&quot;</span></span><br><span class="line">        sensitivity_scores = &#123;&#125;</span><br><span class="line">        original_accuracy = <span class="variable language_">self</span>.evaluate_model()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> name, module <span class="keyword">in</span> <span class="variable language_">self</span>.model.named_modules():</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(module, (nn.Linear, nn.Conv2d)):</span><br><span class="line">                <span class="comment"># 测试不同剪枝比例的影响</span></span><br><span class="line">                sensitivities = []</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">for</span> amount <span class="keyword">in</span> [<span class="number">0.1</span>, <span class="number">0.3</span>, <span class="number">0.5</span>, <span class="number">0.7</span>]:</span><br><span class="line">                    <span class="comment"># 创建临时副本</span></span><br><span class="line">                    temp_model = copy.deepcopy(<span class="variable language_">self</span>.model)</span><br><span class="line">                    temp_module = <span class="built_in">dict</span>(temp_model.named_modules())[name]</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment"># 应用剪枝</span></span><br><span class="line">                    prune.l1_unstructured(temp_module, name=<span class="string">&#x27;weight&#x27;</span>, amount=amount)</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment"># 评估性能</span></span><br><span class="line">                    accuracy = <span class="variable language_">self</span>.evaluate_model(temp_model)</span><br><span class="line">                    accuracy_drop = original_accuracy - accuracy</span><br><span class="line">                    sensitivities.append(accuracy_drop)</span><br><span class="line">                </span><br><span class="line">                sensitivity_scores[name] = &#123;</span><br><span class="line">                    <span class="string">&#x27;sensitivities&#x27;</span>: sensitivities,</span><br><span class="line">                    <span class="string">&#x27;avg_drop&#x27;</span>: <span class="built_in">sum</span>(sensitivities) / <span class="built_in">len</span>(sensitivities)</span><br><span class="line">                &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> sensitivity_scores</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">evaluate_model</span>(<span class="params">self, model=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;评估模型性能&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> model <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            model = <span class="variable language_">self</span>.model</span><br><span class="line">        </span><br><span class="line">        model.<span class="built_in">eval</span>()</span><br><span class="line">        correct = <span class="number">0</span></span><br><span class="line">        total = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            <span class="keyword">for</span> data, target <span class="keyword">in</span> <span class="variable language_">self</span>.dataloader:</span><br><span class="line">                output = model(data)</span><br><span class="line">                pred = output.argmax(dim=<span class="number">1</span>, keepdim=<span class="literal">True</span>)</span><br><span class="line">                correct += pred.eq(target.view_as(pred)).<span class="built_in">sum</span>().item()</span><br><span class="line">                total += target.size(<span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> correct / total</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">auto_prune</span>(<span class="params">self, target_sparsity=<span class="number">0.7</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;自动剪枝&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 敏感性分析</span></span><br><span class="line">        sensitivity_scores = <span class="variable language_">self</span>.sensitivity_analysis()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 根据敏感度分配剪枝比例</span></span><br><span class="line">        pruning_plan = <span class="variable language_">self</span>.create_pruning_plan(sensitivity_scores, target_sparsity)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 应用剪枝</span></span><br><span class="line">        pruner = ComprehensivePruner(<span class="variable language_">self</span>.model)</span><br><span class="line">        pruner.apply_pruning(pruning_plan)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> pruning_plan</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_pruning_plan</span>(<span class="params">self, sensitivity_scores, target_sparsity</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;创建剪枝计划&quot;&quot;&quot;</span></span><br><span class="line">        pruning_plan = &#123;&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 按敏感度排序（敏感度低的层可以剪枝更多）</span></span><br><span class="line">        sorted_layers = <span class="built_in">sorted</span>(sensitivity_scores.items(), </span><br><span class="line">                             key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>][<span class="string">&#x27;avg_drop&#x27;</span>])</span><br><span class="line">        </span><br><span class="line">        total_layers = <span class="built_in">len</span>(sorted_layers)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i, (layer_name, scores) <span class="keyword">in</span> <span class="built_in">enumerate</span>(sorted_layers):</span><br><span class="line">            <span class="comment"># 敏感度低的层分配更高的剪枝比例</span></span><br><span class="line">            base_amount = target_sparsity * (<span class="number">1</span> - i / total_layers)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 根据具体敏感度调整</span></span><br><span class="line">            sensitivity_factor = <span class="number">1</span> - <span class="built_in">min</span>(scores[<span class="string">&#x27;avg_drop&#x27;</span>] * <span class="number">10</span>, <span class="number">0.8</span>)</span><br><span class="line">            final_amount = base_amount * sensitivity_factor</span><br><span class="line">            </span><br><span class="line">            pruning_plan[layer_name] = &#123;</span><br><span class="line">                <span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;l1_unstructured&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;amount&#x27;</span>: final_amount</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> pruning_plan</span><br></pre></td></tr></table></figure><h3 id="量化感知（Quantization）"><a href="https://github.com/HengLine/ai-model-lightweighting/tree/main/Quantization">量化感知</a>（Quantization）</h3><p>将浮点数（FP32）转换为低比特整数（INT8/INT4）或浮点（FP16）。需校准确定量化范围（min/max或scale/zero-point）</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>训练后量化（PTQ, Post-Training Quantization）</strong>：无需重新训练，速度快。</p></li><li class="lvl-2"><p><strong>量化感知训练（QAT, Quantization-Aware Training）</strong>：在训练中模拟量化误差，精度更高。</p></li></ul></blockquote><table><thead><tr><th style="text-align:left">指标</th><th style="text-align:left">FP32模型</th><th style="text-align:left">INT8量化后</th><th style="text-align:left">INT4量化后</th></tr></thead><tbody><tr><td style="text-align:left">模型大小（7B参数）</td><td style="text-align:left">~28GB</td><td style="text-align:left">~7GB</td><td style="text-align:left">~3.5GB</td></tr><tr><td style="text-align:left">显存占用（推理）</td><td style="text-align:left">14GB</td><td style="text-align:left">7GB</td><td style="text-align:left">3.5GB</td></tr><tr><td style="text-align:left">推理速度</td><td style="text-align:left">基准1x</td><td style="text-align:left">1.5-2x更快</td><td style="text-align:left">2-3x更快</td></tr><tr><td style="text-align:left">精度损失</td><td style="text-align:left">无</td><td style="text-align:left">&lt;1% (通常可接受)</td><td style="text-align:left">1-3% (可能需调优)</td></tr></tbody></table><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>原始精度</strong>：模型训练时通常使用FP32（32位浮点数），每个参数占用4字节。</p></li><li class="lvl-2"><p><strong>量化后</strong>：将参数转换为低精度格式（如INT8、INT4），每个参数仅占1字节甚至0.5字节。</p><ul class="lvl-3"><li class="lvl-4">例如：将权重从 <code>0.8732</code>（FP32）近似为 <code>0.875</code>（INT8）。</li></ul></li></ul></blockquote><p><strong>量化的主要类型</strong></p><table><thead><tr><th style="text-align:left">类型</th><th style="text-align:left">说明</th><th style="text-align:left">典型应用场景</th></tr></thead><tbody><tr><td style="text-align:left"><strong>训练后量化</strong></td><td style="text-align:left">对已训练好的模型直接量化（无需重新训练）</td><td style="text-align:left">快速部署，资源有限环境</td></tr><tr><td style="text-align:left"><strong>量化感知训练</strong></td><td style="text-align:left">在训练过程中模拟量化误差，使模型适应低精度</td><td style="text-align:left">高精度要求的微调场景</td></tr><tr><td style="text-align:left"><strong>动态量化</strong></td><td style="text-align:left">推理时动态量化权重和激活值</td><td style="text-align:left">实时性要求高的场景</td></tr><tr><td style="text-align:left"><strong>静态量化</strong></td><td style="text-align:left">预先校准量化参数（如缩放因子），推理时固定</td><td style="text-align:left">移动端/嵌入式设备</td></tr></tbody></table><p><strong>量化的实现技术</strong></p><table><thead><tr><th style="text-align:left">方法路径</th><th style="text-align:left">核心思路</th><th style="text-align:left">适用场景</th></tr></thead><tbody><tr><td style="text-align:left"><strong>GPTQ量化</strong></td><td style="text-align:left">一种训练后量化方法，尤其适合降低大语言模型的显存占用和提升推理速度。</td><td style="text-align:left">希望获得极致性能，对精度损失有一定容忍度。</td></tr><tr><td style="text-align:left"><strong>PyTorch原生量化</strong></td><td style="text-align:left">使用<code>torch.ao.quantization</code>等PyTorch内置模块，支持动态和静态量化。</td><td style="text-align:left">需要官方支持，与PyTorch生态紧密结合。</td></tr><tr><td style="text-align:left"><strong>TensorRT集成</strong></td><td style="text-align:left">通过转换模型至ONNX格式，再利用TensorRT进行优化和量化，能显著提升推理速度。</td><td style="text-align:left">生产环境部署，追求NVIDIA硬件上的最高推理性能。</td></tr></tbody></table><h4 id="GPTQ-量化">GPTQ 量化</h4><h4 id="PyTorch-量化">PyTorch 量化</h4><h4 id="TensorRT-集成">TensorRT 集成</h4><h4 id="具体实施">具体实施</h4><p><strong>实施步骤（以QAT为例）</strong>：</p><ol><li class="lvl-3"><p><strong>插入伪量化节点</strong>：在训练图中插入FakeQuant操作，模拟量化过程。</p></li><li class="lvl-3"><p><strong>使用量化感知损失函数</strong>：保持梯度可传。</p></li><li class="lvl-3"><p><strong>训练/微调模型</strong>：通常只需少量epoch。</p></li><li class="lvl-3"><p><strong>转换为实际量化模型</strong>：将FakeQuant替换为真实INT8操作。</p></li><li class="lvl-3"><p><strong>部署</strong>：使用支持INT8的推理引擎（如TensorRT、ONNX Runtime、TFLite）。</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">from</span> Quantization.data <span class="keyword">import</span> get_sample_input</span><br><span class="line"><span class="keyword">from</span> torch.ao.quantization <span class="keyword">import</span> (</span><br><span class="line">    get_default_qconfig_mapping,</span><br><span class="line">    prepare,</span><br><span class="line">    convert,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">quantize_model_fp32_to_int8</span>(<span class="params">model_fp32: nn.Module, calib_data</span>) -&gt; torch.nn.Module:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用训练后量化（PTQ）将 FP32 模型转为 INT8（仅 CPU 支持）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        model_fp32: 原始 FP32 模型（必须是 eval 模式）</span></span><br><span class="line"><span class="string">        calib_data: 校准数据，用于确定量化范围（min/max）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        量化后的 INT8 模型</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># Step 1: 设置量化配置（仅支持 CPU 后端）</span></span><br><span class="line">    qconfig_mapping = get_default_qconfig_mapping(<span class="string">&quot;x86&quot;</span>)  <span class="comment"># 或 &quot;fbgemm&quot;（Linux）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Step 2: 准备模型（插入 observer）</span></span><br><span class="line">    example_inputs = (calib_data[<span class="number">0</span>], calib_data[<span class="number">1</span>])</span><br><span class="line">    model_prepared = prepare(model_fp32, qconfig_mapping, example_inputs)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Step 3: 校准（用少量数据统计激活值范围）</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正在校准模型...&quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):  <span class="comment"># 10 个 batch 足够</span></span><br><span class="line">            x, x_lens = get_sample_input()</span><br><span class="line">            model_prepared(x, x_lens)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Step 4: 转换为量化模型</span></span><br><span class="line">    model_int8 = convert(model_prepared)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;量化完成！&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> model_int8</span><br></pre></td></tr></table></figure><blockquote><p>为什么量化后模型大小没变？</p><p>原因：<code>state_dict()</code> 保存的是 <strong>量化参数（scale/zero_point）+ 量化权重（int8）</strong>，但 <strong>PyTorch 默认以 float32 格式序列化所有张量</strong>！即使权重是 <code>int8</code>，当你调用 <code>torch.save(model.state_dict())</code> 时：</p><ul class="lvl-1"><li class="lvl-2"><p>PyTorch 会把 <code>int8</code> 张量<strong>自动转换为 <code>float32</code></strong> 存储（为了兼容性）；</p></li><li class="lvl-2"><p>同时还保存了 <code>scale</code>、<code>zero_point</code> 等额外参数；</p></li></ul><p><strong>最终文件大小 ≈ 原始 FP32 模型</strong>，甚至更大！</p><p><strong>量化的核心收益在运行时，不在存储文件</strong>。部署时应使用 <strong>TorchScript / ONNX</strong> 格式。</p></blockquote><h3 id="知识蒸馏（Distillation）"><a href="https://github.com/HengLine/ai-model-lightweighting/tree/main/Knowledge">知识蒸馏</a>（Distillation）</h3><p><strong>知识蒸馏</strong>（Knowledge Distillation）是一种模型压缩技术，其核心思想是将一个庞大、复杂但性能优异的模型（教师模型）的知识转移到一个更小、更高效的模型（学生模型）中。</p><blockquote><p>用大模型（Teacher）指导小模型（Student）学习。</p><p>教师模型 (大而复杂) → 知识转移 → 学生模型 (小而高效)。</p><p><strong>知识蒸馏的成功， 80% 取决于训练数据质量</strong> ，且<strong>Teacher 和 Student 差距不宜过大</strong></p></blockquote><p><strong>优势</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>模型压缩</strong>：大幅减少参数量和计算量</p></li><li class="lvl-2"><p><strong>性能保持</strong>：学生模型性能接近教师模型</p></li><li class="lvl-2"><p><strong>推理加速</strong>：更快的推理速度</p></li><li class="lvl-2"><p><strong>部署友好</strong>：适合资源受限环境</p></li></ul></blockquote><p><strong>挑战</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>教师模型质量依赖</strong>：教师模型质量直接影响蒸馏效果</p></li><li class="lvl-2"><p><strong>超参数敏感</strong>：温度、权重系数等需要仔细调优</p></li><li class="lvl-2"><p><strong>训练复杂度</strong>：需要同时训练教师和学生模型</p></li><li class="lvl-2"><p><strong>知识损失</strong>：不可避免会损失部分知识</p></li></ul></blockquote><h4 id="核心原理">核心原理</h4><ul class="lvl-0"><li class="lvl-2"><p><strong>软标签</strong>：教师模型输出的概率分布包含更多信息</p></li><li class="lvl-2"><p><strong>暗知识</strong>：类别之间的关系等隐含知识</p></li><li class="lvl-2"><p><strong>温度参数</strong>：控制概率分布的平滑程度</p></li></ul><p>软标签与硬标签</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"><span class="comment"># 硬标签 vs 软标签示例</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">demonstrate_labels</span>():</span><br><span class="line">    <span class="comment"># 硬标签: [0, 0, 1, 0, 0]</span></span><br><span class="line">    hard_labels = torch.tensor([<span class="number">2</span>])  <span class="comment"># 只是类别索引</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 软标签: [0.1, 0.2, 0.5, 0.15, 0.05]</span></span><br><span class="line">    soft_labels = torch.tensor([<span class="number">0.1</span>, <span class="number">0.2</span>, <span class="number">0.5</span>, <span class="number">0.15</span>, <span class="number">0.05</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> hard_labels, soft_labels</span><br></pre></td></tr></table></figure><p>温度缩放：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">KnowledgeDistillationLoss</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, temperature=<span class="number">3.0</span>, alpha=<span class="number">0.7</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.temperature = temperature</span><br><span class="line">        <span class="variable language_">self</span>.alpha = alpha</span><br><span class="line">        <span class="variable language_">self</span>.kl_loss = nn.KLDivLoss(reduction=<span class="string">&quot;batchmean&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.ce_loss = nn.CrossEntropyLoss()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, student_logits, teacher_logits, labels</span>):</span><br><span class="line">        <span class="comment"># 应用温度缩放</span></span><br><span class="line">        student_soft = F.log_softmax(student_logits / <span class="variable language_">self</span>.temperature, dim=<span class="number">1</span>)</span><br><span class="line">        teacher_soft = F.softmax(teacher_logits / <span class="variable language_">self</span>.temperature, dim=<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 蒸馏损失</span></span><br><span class="line">        distillation_loss = <span class="variable language_">self</span>.kl_loss(student_soft, teacher_soft) * (<span class="variable language_">self</span>.temperature ** <span class="number">2</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 学生损失</span></span><br><span class="line">        student_loss = <span class="variable language_">self</span>.ce_loss(student_logits, labels)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 总损失</span></span><br><span class="line">        total_loss = <span class="variable language_">self</span>.alpha * distillation_loss + (<span class="number">1</span> - <span class="variable language_">self</span>.alpha) * student_loss</span><br><span class="line">        <span class="keyword">return</span> total_loss</span><br></pre></td></tr></table></figure><h4 id="训练策略">训练策略</h4><p>渐进式蒸馏</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ProgressiveDistillation</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;渐进式知识蒸馏&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, total_epochs</span>):</span><br><span class="line">        <span class="variable language_">self</span>.total_epochs = total_epochs</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_distillation_weights</span>(<span class="params">self, current_epoch</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;动态调整蒸馏权重&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 早期更依赖教师，后期更依赖真实标签</span></span><br><span class="line">        alpha = <span class="built_in">max</span>(<span class="number">0.1</span>, <span class="number">0.7</span> * (<span class="number">1</span> - current_epoch / <span class="variable language_">self</span>.total_epochs))</span><br><span class="line">        temperature = <span class="built_in">max</span>(<span class="number">1.0</span>, <span class="number">3.0</span> * (<span class="number">1</span> - current_epoch / <span class="variable language_">self</span>.total_epochs))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> alpha, temperature</span><br></pre></td></tr></table></figure><p>注意力转移</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AttentionDistillation</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;注意力机制蒸馏&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.mse_loss = nn.MSELoss()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">compute_attention_loss</span>(<span class="params">self, student_attentions, teacher_attentions</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;计算注意力蒸馏损失&quot;&quot;&quot;</span></span><br><span class="line">        attention_loss = <span class="number">0</span></span><br><span class="line">        num_layers = <span class="built_in">min</span>(<span class="built_in">len</span>(student_attentions), <span class="built_in">len</span>(teacher_attentions))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_layers):</span><br><span class="line">            s_attn = student_attentions[i]  <span class="comment"># [batch, heads, seq_len, seq_len]</span></span><br><span class="line">            t_attn = teacher_attentions[i]</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 确保头数匹配</span></span><br><span class="line">            <span class="keyword">if</span> s_attn.shape[<span class="number">1</span>] != t_attn.shape[<span class="number">1</span>]:</span><br><span class="line">                <span class="comment"># 平均池化调整头数</span></span><br><span class="line">                <span class="keyword">if</span> s_attn.shape[<span class="number">1</span>] &lt; t_attn.shape[<span class="number">1</span>]:</span><br><span class="line">                    <span class="comment"># 学生头数少，对教师注意力求平均</span></span><br><span class="line">                    t_attn = t_attn.mean(dim=<span class="number">1</span>, keepdim=<span class="literal">True</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># 学生头数多，复制教师注意力</span></span><br><span class="line">                    t_attn = t_attn.repeat(<span class="number">1</span>, s_attn.shape[<span class="number">1</span>] // t_attn.shape[<span class="number">1</span>], <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">            </span><br><span class="line">            layer_loss = <span class="variable language_">self</span>.mse_loss(s_attn, t_attn)</span><br><span class="line">            attention_loss += layer_loss</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> attention_loss / num_layers</span><br></pre></td></tr></table></figure><h4 id="实施步骤-2">实施步骤</h4><ol><li class="lvl-3"><p><strong>训练Teacher模型</strong>：高精度但复杂的大模型。</p></li><li class="lvl-3"><p><strong>设计Student模型</strong>：结构更轻量（如层数更少、通道更窄）。</p></li><li class="lvl-3"><p>定义蒸馏损失：</p><ul class="lvl-2"><li class="lvl-5"><strong>软标签损失</strong>（Soft Target）：使用Teacher输出的softmax logits（温度缩放）。</li><li class="lvl-5"><strong>特征图对齐</strong>：中间层特征的L2或注意力对齐。</li></ul></li><li class="lvl-3"><p><strong>联合训练</strong>：Student同时学习真实标签和Teacher的输出。</p></li><li class="lvl-3"><p><strong>部署Student模型</strong>：独立使用，无需Teacher。</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> GPT2Config, GPT2LMHeadModel</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TeacherStudentDistillation</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;完整的知识蒸馏实现&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, teacher_model, student_model, temperature=<span class="number">3.0</span>, alpha=<span class="number">0.7</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.teacher_model = teacher_model</span><br><span class="line">        <span class="variable language_">self</span>.student_model = student_model</span><br><span class="line">        <span class="variable language_">self</span>.temperature = temperature</span><br><span class="line">        <span class="variable language_">self</span>.alpha = alpha</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 冻结教师模型参数</span></span><br><span class="line">        <span class="keyword">for</span> param <span class="keyword">in</span> <span class="variable language_">self</span>.teacher_model.parameters():</span><br><span class="line">            param.requires_grad = <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 损失函数</span></span><br><span class="line">        <span class="variable language_">self</span>.kl_loss = nn.KLDivLoss(reduction=<span class="string">&quot;batchmean&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.ce_loss = nn.CrossEntropyLoss()</span><br><span class="line">        <span class="variable language_">self</span>.mse_loss = nn.MSELoss()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_models</span>():</span><br><span class="line">        <span class="string">&quot;&quot;&quot;创建教师和学生模型&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 教师模型 (大模型)</span></span><br><span class="line">        teacher_config = GPT2Config(</span><br><span class="line">            n_layer=<span class="number">12</span>,  <span class="comment"># 12层</span></span><br><span class="line">            n_head=<span class="number">12</span>,   <span class="comment"># 12个注意力头</span></span><br><span class="line">            n_embd=<span class="number">768</span>   <span class="comment"># 768维嵌入</span></span><br><span class="line">        )</span><br><span class="line">        teacher_model = GPT2LMHeadModel(teacher_config)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 学生模型 (小模型)</span></span><br><span class="line">        student_config = GPT2Config(</span><br><span class="line">            n_layer=<span class="number">6</span>,   <span class="comment"># 6层</span></span><br><span class="line">            n_head=<span class="number">6</span>,    <span class="comment"># 6个注意力头  </span></span><br><span class="line">            n_embd=<span class="number">384</span>   <span class="comment"># 384维嵌入</span></span><br><span class="line">        )</span><br><span class="line">        student_model = GPT2LMHeadModel(student_config)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> teacher_model, student_model</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">compute_distillation_loss</span>(<span class="params">self, student_logits, teacher_logits, labels</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;计算蒸馏损失&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 响应式知识蒸馏</span></span><br><span class="line">        student_soft = F.log_softmax(student_logits / <span class="variable language_">self</span>.temperature, dim=-<span class="number">1</span>)</span><br><span class="line">        teacher_soft = F.softmax(teacher_logits / <span class="variable language_">self</span>.temperature, dim=-<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        distillation_loss = <span class="variable language_">self</span>.kl_loss(student_soft, teacher_soft) * (<span class="variable language_">self</span>.temperature ** <span class="number">2</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 学生任务损失</span></span><br><span class="line">        task_loss = <span class="variable language_">self</span>.ce_loss(student_logits.view(-<span class="number">1</span>, student_logits.size(-<span class="number">1</span>)), </span><br><span class="line">                               labels.view(-<span class="number">1</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 组合损失</span></span><br><span class="line">        total_loss = <span class="variable language_">self</span>.alpha * distillation_loss + (<span class="number">1</span> - <span class="variable language_">self</span>.alpha) * task_loss</span><br><span class="line">        <span class="keyword">return</span> total_loss</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">train_step</span>(<span class="params">self, input_ids, attention_mask, labels</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;训练步骤&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 教师模型前向传播</span></span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            teacher_outputs = <span class="variable language_">self</span>.teacher_model(</span><br><span class="line">                input_ids=input_ids,</span><br><span class="line">                attention_mask=attention_mask,</span><br><span class="line">                labels=labels</span><br><span class="line">            )</span><br><span class="line">            teacher_logits = teacher_outputs.logits</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 学生模型前向传播</span></span><br><span class="line">        student_outputs = <span class="variable language_">self</span>.student_model(</span><br><span class="line">            input_ids=input_ids,</span><br><span class="line">            attention_mask=attention_mask,</span><br><span class="line">            labels=labels</span><br><span class="line">        )</span><br><span class="line">        student_logits = student_outputs.logits</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 计算蒸馏损失</span></span><br><span class="line">        loss = <span class="variable language_">self</span>.compute_distillation_loss(student_logits, teacher_logits, labels)</span><br><span class="line">        <span class="keyword">return</span> loss</span><br></pre></td></tr></table></figure><h4 id="Token-循环问题">Token 循环问题</h4><p>这是<strong>知识蒸馏失败的典型症状</strong>，模型陷入<strong>重复 token 循环</strong>。</p><blockquote><p>Student (原始): The future of AI is the real question.<br>One of the first things I learned about AI is that it’s almost impossible to write algorithms in this way. It’s also a bit difficult to understand how any algorithm can perform any task. For example, in one of</p><p>Student (蒸馏后): The future of AI is and and and and and and and（大量重复token，也可能是其他符号或字符）</p></blockquote><p>出现此种问题的可能原因为：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>训练数据不足/质量差</strong></p><p>模型无法学习通用语言模式，只能记住训练数据中的模式。如果训练数据中 <code>,</code> 出现频率高，模型会过度生成。</p><p>尽量使用<strong>真实训练数据</strong></p></li><li class="lvl-2"><p><strong>蒸馏参数不当</strong></p><ul class="lvl-2"><li class="lvl-4"><strong><code>alpha=0.7</code> 过高</strong>：Student 过度依赖 Teacher 的软标签。可以适当增加硬标签权重（0.3~0.5）</li><li class="lvl-4"><strong><code>temperature=2.0</code> 过高</strong>：Teacher 分布过于平滑，失去区分度。可以减少平滑（1.0~2.0）</li></ul></li><li class="lvl-2"><p><strong>无真实标签监督</strong></p><p>硬标签损失（CE）权重仅 30%，模型未充分学习基本语言建模能力。</p><p>可以适当增加硬标签损失权重</p></li><li class="lvl-2"><p><strong>Teacher 和 Student 差距过大</strong></p><p><code>gpt2-medium</code> (355M) → <code>gpt2</code> (124M)，小模型难以模仿大模型的复杂行为。</p><p>可以使用更小的 Teacher</p></li></ul><p>同时可添加惩罚重复属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">outputs = model.generate(</span><br><span class="line">            **inputs,</span><br><span class="line">            max_new_tokens=max_length,</span><br><span class="line">            repetition_penalty=<span class="number">1.2</span>,  <span class="comment"># 惩罚重复 token</span></span><br><span class="line">            do_sample=<span class="literal">True</span>,</span><br><span class="line">            temperature=<span class="number">0.7</span>,</span><br><span class="line">            pad_token_id=tokenizer.eos_token_id</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><h3 id="低秩分解（Low-Rank）"><a href="https://github.com/HengLine/ai-model-lightweighting/tree/main/Low-Rank">低秩分解</a>（Low-Rank）</h3><p>将一个大权重矩阵/张量近似分解为多个小矩阵/张量的乘积，从而<strong>减少参数量和计算量</strong>。</p><ul class="lvl-0"><li class="lvl-2"><p>将卷积核 分解为两个更小的卷积。<br>$$<br>W∈R<br>C<br>out​×C<br>in​×k×k<br>$$</p></li><li class="lvl-2"><p>使用SVD分解全连接层。</p></li></ul><blockquote><p>想象一个复杂的变换需要1000个输入和1000个输出，那么它的权重矩阵 <code>W</code> 的大小是 1000×1000，共有100万个参数。</p><p>低秩分解发现，这个变换的内在“自由度”或“信息量”其实没那么高（即它是<strong>低秩</strong>的）。</p><ol><li class="lvl-3"><p>先将1000维输入<strong>投影</strong>到一个低维空间（比如50维）。这对应一个矩阵 <code>A</code> (1000×50)。</p></li><li class="lvl-3"><p>再从这个50维空间<strong>恢复</strong>到1000维输出。这对应一个矩阵 <code>B</code> (50×1000)。</p></li></ol><p>于是：<code>W ≈ B × A</code></p><p><strong>参数总量从：</strong> 1000 × 1000 = 1,000,000<br><strong>减少到：</strong> 1000 × 50 + 50 × 1000 = 100,000<br><strong>压缩率高达90%。</strong></p></blockquote><p><strong>实施步骤</strong>：</p><ol><li class="lvl-3"><p>对预训练模型的权重进行SVD或CP/Tucker分解。</p></li><li class="lvl-3"><p>替换原层为分解后的多层结构。</p></li><li class="lvl-3"><p>微调模型恢复精度。</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decompose_linear_svd</span>(<span class="params">linear_layer: nn.Linear, rank_ratio=<span class="number">0.5</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用 SVD 对 Linear 层进行低秩分解</span></span><br><span class="line"><span class="string">    输入: Linear(in_features=n, out_features=m)</span></span><br><span class="line"><span class="string">    输出: (Linear(n, r), Linear(r, m))</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(linear_layer, nn.Linear):</span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">f&quot;Expected nn.Linear, got <span class="subst">&#123;<span class="built_in">type</span>(linear_layer)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    W = linear_layer.weight.data  <span class="comment"># [m, n] = [256, 2560]</span></span><br><span class="line">    m, n = W.shape</span><br><span class="line"></span><br><span class="line">    max_rank = <span class="built_in">min</span>(m, n)  <span class="comment"># = 256</span></span><br><span class="line">    r = <span class="built_in">int</span>(rank_ratio * max_rank)</span><br><span class="line">    r = <span class="built_in">max</span>(<span class="number">1</span>, <span class="built_in">min</span>(r, max_rank - <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    U, S, Vh = torch.linalg.svd(W, full_matrices=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># print(f&quot;  U shape: &#123;U.shape&#125;&quot;)  # [256, 256]</span></span><br><span class="line">    <span class="comment"># print(f&quot;  S shape: &#123;S.shape&#125;&quot;)  # [256]</span></span><br><span class="line">    <span class="comment"># print(f&quot;  Vh shape: &#123;Vh.shape&#125;&quot;)  # [256, 2560] ← 必须是这个！</span></span><br><span class="line"></span><br><span class="line">    U_r = U[:, :r]  <span class="comment"># [256, r]</span></span><br><span class="line">    S_r = S[:r]  <span class="comment"># [r]</span></span><br><span class="line">    Vh_r = Vh[:r, :]  <span class="comment"># [r, 2560] ← 关键！</span></span><br><span class="line"></span><br><span class="line">    sqrt_S = torch.sqrt(S_r)</span><br><span class="line">    B = sqrt_S.unsqueeze(<span class="number">1</span>) * Vh_r  <span class="comment"># [r, 2560]</span></span><br><span class="line">    A = U_r * sqrt_S.unsqueeze(<span class="number">0</span>)  <span class="comment"># [256, r]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(f&quot;  B shape: &#123;B.shape&#125;&quot;)  # 应为 [r, 2560]</span></span><br><span class="line">    <span class="comment"># print(f&quot;  A shape: &#123;A.shape&#125;&quot;)  # 应为 [256, r]</span></span><br><span class="line"></span><br><span class="line">    fc1 = nn.Linear(n, r, bias=<span class="literal">False</span>)</span><br><span class="line">    fc2 = nn.Linear(r, m, bias=linear_layer.bias <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        fc1.weight.copy_(B)  <span class="comment"># [r, n] = [r, 2560]</span></span><br><span class="line">        fc2.weight.copy_(A)  <span class="comment"># [m, r] = [256, r]</span></span><br><span class="line">        <span class="keyword">if</span> linear_layer.bias <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            fc2.bias.copy_(linear_layer.bias.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fc1, fc2</span><br></pre></td></tr></table></figure><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>Linear 层</strong>：<em>W</em>∈R<em>m</em>×<em>n</em>≈<em>U</em>⋅<em>V</em> ，其中 <em>U</em>∈R<em>m</em>×<em>r</em>,<em>V</em>∈R<em>r</em>×<em>n</em> ，<em>r</em>≪min(<em>m</em>,<em>n</em>)</p></li><li class="lvl-2"><p><strong>Conv2d 层</strong>：将卷积核张量分解为多个低秩张量（如 CP 分解、Tucker 分解）</p></li></ul></blockquote><h4 id="核心参数">核心参数</h4><table><thead><tr><th>关键参数</th><th>说明</th><th>取值范围</th><th>改变的影响</th></tr></thead><tbody><tr><td>1. 秩（Rank）<code>r</code></td><td>分解后的中间维度</td><td>1 \leq r &lt; \min(m, n)</td><td>最核心参数！<br>• r ↑ → 精度 ↑，压缩率 ↓<br>• r ↓ → 压缩率 ↑，精度 ↓（可能崩溃）</td></tr><tr><td>2. 秩比例（Rank Ratio）<code>α</code></td><td>r = \alpha \cdot \min(m, n)</td><td>0.1 \sim 0.9</td><td>• α=0.3：高压缩（~70%），高精度损失<br>• α=0.7：中压缩（~30%），低精度损失<br>•  α&gt;0.8：几乎无压缩</td></tr><tr><td>3. 分解目标层</td><td>选择哪些层分解</td><td>大矩阵优先</td><td>• FFN/Linear 层：高收益（参数多）<br>• 小卷积层（3×3）：可能增参<br>• Embedding/LM  Head：通常不分解</td></tr><tr><td>4. 分解方式</td><td>SVD / CP / Tucker 等</td><td>SVD（主流）</td><td>• SVD：理论最优，适合 Linear<br>• CP/Tucker：适合卷积核张量<br>•  NMF：非负约束，适合特定场景</td></tr><tr><td>5. 是否微调（Fine-tuning）</td><td>分解后是否训练</td><td>是 / 否</td><td>• 无微调：精度损失大（尤其 α&lt;0.5）<br>• 有微调：可恢复 80%+ 性能</td></tr></tbody></table><h4 id="秩">秩</h4><p>改变秩 <code>r</code> 会直接引发一个典型的 <strong>“精度-效率”权衡</strong>。值过低压缩率越好，但是分解后的模型输出大量重复 token</p><table><thead><tr><th style="text-align:left">关键指标</th><th style="text-align:left"><code>r</code> 增大（更接近原始矩阵）</th><th style="text-align:left"><code>r</code> 减小（更激进压缩）</th></tr></thead><tbody><tr><td style="text-align:left"><strong>模型精度</strong></td><td style="text-align:left"><strong>↑ 提升</strong> • 重建误差小，更接近原始模型性能。 • 保留更多任务相关特征。</td><td style="text-align:left"><strong>↓ 下降</strong> • 重建误差大，信息丢失严重。 • 可能导致模型准确率显著降低。</td></tr><tr><td style="text-align:left"><strong>参数量</strong></td><td style="text-align:left"><strong>↑ 增加</strong> • 分解后的矩阵更大。</td><td style="text-align:left"><strong>↓ 减少</strong> • 分解后的矩阵更小，压缩率更高。</td></tr><tr><td style="text-align:left"><strong>计算量（FLOPs）</strong></td><td style="text-align:left"><strong>↑ 增加</strong> • 需要进行更多次矩阵乘法。</td><td style="text-align:left"><strong>↓ 减少</strong> • 计算量显著降低，加速效果更明显。</td></tr><tr><td style="text-align:left"><strong>内存占用</strong></td><td style="text-align:left"><strong>↑ 增加</strong> • 需要存储更多的参数。</td><td style="text-align:left"><strong>↓ 减少</strong> • 内存占用显著降低。</td></tr><tr><td style="text-align:left"><strong>过拟合风险</strong></td><td style="text-align:left"><strong>↑ 增加</strong> • 模型容量相对较大，在小型数据集上可能过拟合。</td><td style="text-align:left"><strong>↓ 减少</strong> • 模型容量小，起到正则化作用，可能缓解过拟合。</td></tr><tr><td style="text-align:left"><strong>适用场景</strong></td><td style="text-align:left">• 对精度要求高的任务。 <br />• 原始模型冗余度较低。</td><td style="text-align:left">• 极度资源受限的边缘设备。 <br />• 对延迟要求极高的场景。 <br />• 原始模型冗余度极高。</td></tr></tbody></table><h4 id="秩比例">秩比例</h4><table><thead><tr><th>rank_ratio</th><th>r (c_fc)</th><th>生成质量</th><th>参数压缩率</th></tr></thead><tbody><tr><td>0.3</td><td>230</td><td>重复</td><td>68%</td></tr><tr><td>0.5</td><td>384</td><td>可用</td><td>50%</td></tr><tr><td>0.7</td><td>537</td><td>接近原始</td><td>30%</td></tr></tbody></table><p>建议的配置策略：</p><table><thead><tr><th>策略</th><th>rank_ratio</th><th>是否微调</th><th>生成质量</th><th>压缩率</th></tr></thead><tbody><tr><td>仅分解 c_proj</td><td>0.5</td><td>否</td><td>良好</td><td>25%</td></tr><tr><td>分解全部 + 微调</td><td>0.5</td><td>是</td><td>接近原始</td><td>50%</td></tr><tr><td>分解全部（无微调）</td><td>0.5</td><td>否</td><td>轻微重复</td><td>50%</td></tr><tr><td>分解全部（无微调）</td><td>0.3</td><td>否</td><td>严重重复</td><td>68%</td></tr></tbody></table><h4 id="目标层">目标层</h4><table><thead><tr><th>层类型</th><th>示例</th><th>是否推荐分解</th><th>原因</th></tr></thead><tbody><tr><td>FFN 中间层</td><td>GPT-2 c_fc (768→3072)</td><td>谨慎</td><td>需高容量编码语义，r 必须大</td></tr><tr><td>FFN 投影层</td><td>GPT-2 c_proj (3072→768)</td><td>推荐</td><td>信息已压缩，可安全分解</td></tr><tr><td>Attention QKV</td><td>W_q, W_k, W_v</td><td>谨慎</td><td>影响注意力质量，需高秩</td></tr><tr><td>分类头</td><td>Linear(768→1000)</td><td>可分解</td><td>任务特定，冗余度高</td></tr><tr><td>Embedding</td><td>Token Embedding</td><td>不推荐</td><td>稀疏激活，分解收益低</td></tr></tbody></table><h3 id="二值化-三值化"><a href="https://github.com/HengLine/ai-model-lightweighting/tree/main/Binarization">二值化/三值化</a></h3><p>二值化（Binarization）和三值化（Ternarization）是<strong>极致模型压缩技术</strong>，将权重从 FP32 压缩到 <strong>1-bit（±1）或 2-bit（-1, 0, +1）</strong>，适用于<strong>超低功耗边缘设备</strong>（如 MCU、IoT 传感器）。</p><blockquote><p><strong>二值化/三值化是“空间换精度”的极致压缩</strong>：</p><ul class="lvl-1"><li class="lvl-2"><strong>优势</strong>：模型 &lt;100KB，功耗极低</li><li class="lvl-2"><strong>代价</strong>：精度损失，训练复杂</li><li class="lvl-2"><strong>适用</strong>：简单任务 + 超低功耗设备</li></ul></blockquote><ol><li class="lvl-3"><p><strong>二值化（Binary Weight Networks, BWN）</strong></p><p>权重 <em>W</em>∈R<em>m</em>×<em>n</em> → <em>W**b</em>∈{−1,+1}<em>m</em>×<em>n</em>。前向计算：<em>y</em>=<em>W<strong>b</strong>x</em>≈<em>α</em>⋅<em>W<strong>b</strong>x</em> （<em>α</em> 为缩放因子）</p><p><strong>压缩率</strong>：32x（FP32 → 1-bit）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryQuantize</span>(torch.autograd.Function):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    二值化函数（带 STE）</span></span><br><span class="line"><span class="string">    前向: sign(x)</span></span><br><span class="line"><span class="string">    反向: 梯度直通（仅 |x|&lt;=1 时传递）</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">ctx, <span class="built_in">input</span></span>):</span><br><span class="line">        ctx.save_for_backward(<span class="built_in">input</span>)</span><br><span class="line">        <span class="comment"># 二值化: &gt;0 → +1, &lt;=0 → -1</span></span><br><span class="line">        out = torch.sign(<span class="built_in">input</span>)</span><br><span class="line">        <span class="comment"># 处理 0（PyTorch sign(0)=0，我们设为 +1）</span></span><br><span class="line">        out[out == <span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">backward</span>(<span class="params">ctx, grad_output</span>):</span><br><span class="line">        <span class="built_in">input</span>, = ctx.saved_tensors</span><br><span class="line">        <span class="comment"># STE: 梯度仅在 |input| &lt;= 1 时传递</span></span><br><span class="line">        grad_input = grad_output.clone()</span><br><span class="line">        grad_input[torch.<span class="built_in">abs</span>(<span class="built_in">input</span>) &gt; <span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> grad_input</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryConv2d</span>(nn.Module):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;二值化卷积层&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_channels, out_channels, kernel_size, stride=<span class="number">1</span>, padding=<span class="number">0</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.in_channels = in_channels</span><br><span class="line">        <span class="variable language_">self</span>.out_channels = out_channels</span><br><span class="line">        <span class="variable language_">self</span>.kernel_size = kernel_size</span><br><span class="line">        <span class="variable language_">self</span>.stride = stride</span><br><span class="line">        <span class="variable language_">self</span>.padding = padding</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 浮点权重（用于训练）</span></span><br><span class="line">        <span class="variable language_">self</span>.weight = nn.Parameter(torch.randn(out_channels, in_channels, kernel_size, kernel_size))</span><br><span class="line">        <span class="variable language_">self</span>.bias = nn.Parameter(torch.zeros(out_channels))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 缩放因子 α = mean(|W|)</span></span><br><span class="line">        <span class="variable language_">self</span>.alpha = nn.Parameter(torch.ones(out_channels, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="comment"># 1. 计算缩放因子 α</span></span><br><span class="line">        alpha = <span class="variable language_">self</span>.weight.<span class="built_in">abs</span>().mean(dim=(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), keepdim=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 二值化权重</span></span><br><span class="line">        weight_b = BinaryQuantize.apply(<span class="variable language_">self</span>.weight)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 前向计算: y = α * (x ⊗ W_b) + b</span></span><br><span class="line">        out = F.conv2d(x, weight_b, <span class="literal">None</span>, <span class="variable language_">self</span>.stride, <span class="variable language_">self</span>.padding)</span><br><span class="line">        out = out * alpha + <span class="variable language_">self</span>.bias.view(<span class="number">1</span>, -<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> out</span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p><strong>三值化（Ternary Weight Networks, TWN）</strong></p><p>权重 <em>W</em>∈R<em>m</em>×<em>n</em> → <em>W**t</em>∈{−1,0,+1}<em>m</em>×<em>n</em>。保留重要权重（非零），移除冗余（零）</p><p><strong>压缩率</strong>：16x（FP32 → 2-bit，含稀疏性）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TernaryQuantize</span>(torch.autograd.Function):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    三值化函数（带 STE）</span></span><br><span class="line"><span class="string">    阈值 δ = 0.7 * mean(|W|)</span></span><br><span class="line"><span class="string">    |W| &gt; δ → sign(W), 否则 → 0</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">ctx, <span class="built_in">input</span>, delta</span>):</span><br><span class="line">        ctx.save_for_backward(<span class="built_in">input</span>, delta)</span><br><span class="line">        out = torch.zeros_like(<span class="built_in">input</span>)</span><br><span class="line">        out[<span class="built_in">input</span> &gt; delta] = <span class="number">1</span></span><br><span class="line">        out[<span class="built_in">input</span> &lt; -delta] = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">backward</span>(<span class="params">ctx, grad_output</span>):</span><br><span class="line">        <span class="built_in">input</span>, delta = ctx.saved_tensors</span><br><span class="line">        grad_input = grad_output.clone()</span><br><span class="line">        <span class="comment"># 仅在 [-delta, delta] 外传递梯度</span></span><br><span class="line">        mask = (<span class="built_in">input</span>.<span class="built_in">abs</span>() &gt; delta)</span><br><span class="line">        grad_input[~mask] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> grad_input, <span class="literal">None</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TernaryConv2d</span>(nn.Module):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;三值化卷积层&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_channels, out_channels, kernel_size, stride=<span class="number">1</span>, padding=<span class="number">0</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.in_channels = in_channels</span><br><span class="line">        <span class="variable language_">self</span>.out_channels = out_channels</span><br><span class="line">        <span class="variable language_">self</span>.kernel_size = kernel_size</span><br><span class="line">        <span class="variable language_">self</span>.stride = stride</span><br><span class="line">        <span class="variable language_">self</span>.padding = padding</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.weight = nn.Parameter(torch.randn(out_channels, in_channels, kernel_size, kernel_size))</span><br><span class="line">        <span class="variable language_">self</span>.bias = nn.Parameter(torch.zeros(out_channels))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="comment"># 计算阈值 δ = 0.7 * mean(|W|)</span></span><br><span class="line">        delta = <span class="number">0.7</span> * <span class="variable language_">self</span>.weight.<span class="built_in">abs</span>().mean()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 三值化权重</span></span><br><span class="line">        weight_t = TernaryQuantize.apply(<span class="variable language_">self</span>.weight, delta)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 前向计算</span></span><br><span class="line">        out = F.conv2d(x, weight_t, <span class="variable language_">self</span>.bias, <span class="variable language_">self</span>.stride, <span class="variable language_">self</span>.padding)</span><br><span class="line">        <span class="keyword">return</span> out</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>执行结果，模型大小: 0.33 MB (原始 FP32 ~3MB)</p></blockquote><h3 id="自动轻量化（AutoML）">自动轻量化（AutoML）</h3><p>使用神经架构搜索（NAS）或强化学习自动寻找最优轻量结构。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>AMC（AutoML for Model Compression）</p></li><li class="lvl-2"><p>Once-for-All (OFA)：训练一个超网，可从中提取不同大小的子网。</p></li></ul></blockquote><p><strong>实施步骤</strong>：</p><ol><li class="lvl-3"><p>定义搜索空间（如通道数、层数、算子类型）。</p></li><li class="lvl-3"><p>设计奖励函数（精度 + 延迟约束）。</p></li><li class="lvl-3"><p>使用RL、进化算法或梯度方法搜索。</p></li><li class="lvl-3"><p>训练最优子网并部署。</p></li></ol><h2 id="端到端实施流程">端到端实施流程</h2><ol><li class="lvl-3"><p>基准建立</p><ul class="lvl-2"><li class="lvl-5">在目标任务上训练一个高精度模型（如ResNet50）。</li><li class="lvl-5">测量其参数量、FLOPs、推理延迟、内存占用。</li></ul></li><li class="lvl-3"><p><strong>选择轻量化策略组合</strong></p><ul class="lvl-2"><li class="lvl-5">优先考虑结构设计 + 量化（通用性强）。</li><li class="lvl-5">若精度要求高，加入知识蒸馏。</li><li class="lvl-5">若已有大模型，可尝试剪枝 + QAT。</li></ul></li><li class="lvl-3"><p><strong>迭代优化</strong></p><img src="/imgs/ai/image-20251012153208075.png" alt="image-20251012153208075" style="zoom:67%;" /></li><li class="lvl-3"><p><strong>部署验证</strong></p><ul class="lvl-2"><li class="lvl-5">使用目标硬件（如ARM CPU、NPU）测试实际延迟与功耗。</li><li class="lvl-5">使用TFLite、ONNX、TensorRT等格式转换工具。</li></ul></li></ol><h2 id="GPT2-轻量化实现">GPT2 轻量化实现</h2><p>通过以下技术对 gpt2 模型的轻量化 demo 实现。</p><p>微调恢复精度:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fine_tune_pruned</span>(<span class="params">model, tokenizer, num_steps=<span class="number">100</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;微调剪枝后模型（恢复精度）&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; 开始微调剪枝后模型...&quot;</span>)</span><br><span class="line">    model.train()</span><br><span class="line">    optimizer = torch.optim.Adam(model.parameters(), lr=<span class="number">1e-5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 简单文本用于微调</span></span><br><span class="line">    texts = [</span><br><span class="line">                <span class="string">&quot;Artificial intelligence is a wonderful field.&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Machine learning enables computers to learn from data.&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Natural language processing allows machines to understand human language.&quot;</span>,</span><br><span class="line">                <span class="string">&quot;The future of AI is bright and full of possibilities.&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Deep learning has revolutionized many areas of technology.&quot;</span></span><br><span class="line">            ] * <span class="number">20</span>  <span class="comment"># 重复以增加数据量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> step <span class="keyword">in</span> <span class="built_in">range</span>(num_steps):</span><br><span class="line">        text = texts[step % <span class="built_in">len</span>(texts)]</span><br><span class="line">        inputs = tokenizer(text, return_tensors=<span class="string">&quot;pt&quot;</span>, max_length=<span class="number">128</span>, truncation=<span class="literal">True</span>)</span><br><span class="line">        input_ids = inputs.input_ids.to(device)</span><br><span class="line"></span><br><span class="line">        outputs = model(input_ids, labels=input_ids)</span><br><span class="line">        loss = outputs.loss</span><br><span class="line"></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> step % <span class="number">20</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  Step <span class="subst">&#123;step&#125;</span>, Loss: <span class="subst">&#123;loss.item():<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line">    <span class="keyword">return</span> model</span><br></pre></td></tr></table></figure><h3 id="模型剪枝"><a href="https://github.com/HengLine/ai-model-lightweighting/tree/main/Pruning/gpt2">模型剪枝</a></h3><p>剪枝</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">prune_gpt2_mlp</span>(<span class="params">model: GPT2LMHeadModel, prune_ratio=<span class="number">0.3</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    对 GPT-2 的 MLP 层进行结构化剪枝</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    剪枝策略:</span></span><br><span class="line"><span class="string">    - 评估 c_fc 和 c_proj 的输出通道重要性</span></span><br><span class="line"><span class="string">    - 移除 L1 范数最小的 prune_ratio 比例通道</span></span><br><span class="line"><span class="string">    - 重建模型结构确保维度匹配</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot; 开始剪枝 GPT-2 MLP 层 (prune_ratio=<span class="subst">&#123;prune_ratio&#125;</span>)...&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> layer_idx, block <span class="keyword">in</span> <span class="built_in">enumerate</span>(model.transformer.h):</span><br><span class="line">        <span class="comment"># print(f&quot;  处理层 &#123;layer_idx&#125;...&quot;)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># === 1. 剪枝 c_fc (768 -&gt; 3072) ===</span></span><br><span class="line">        c_fc = block.mlp.c_fc</span><br><span class="line">        l1_norm_fc = get_conv1d_l1_norm(c_fc)</span><br><span class="line">        num_total_fc = <span class="built_in">len</span>(l1_norm_fc)</span><br><span class="line">        num_keep_fc = <span class="built_in">int</span>(num_total_fc * (<span class="number">1</span> - prune_ratio))</span><br><span class="line">        _, keep_indices_fc = torch.topk(l1_norm_fc, num_keep_fc, largest=<span class="literal">True</span>)</span><br><span class="line">        pruned_c_fc = prune_conv1d_layer(c_fc, keep_indices_fc)</span><br><span class="line">        block.mlp.c_fc = pruned_c_fc</span><br><span class="line"></span><br><span class="line">        <span class="comment"># === 2. 剪枝 c_proj 的 INPUT 通道（3072 -&gt; num_keep_fc）===</span></span><br><span class="line">        c_proj = block.mlp.c_proj</span><br><span class="line">        <span class="comment"># c_proj.weight.shape = [3072, 768] → 输入通道是第 0 维</span></span><br><span class="line">        weight_proj = c_proj.weight.data  <span class="comment"># [in=3072, out=768]</span></span><br><span class="line">        bias_proj = c_proj.bias.data <span class="keyword">if</span> c_proj.bias <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 剪枝输入通道：保留 keep_indices_fc 对应的行</span></span><br><span class="line">        pruned_weight_proj = weight_proj[keep_indices_fc, :]  <span class="comment"># [num_keep_fc, 768]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建新 c_proj: in=num_keep_fc, out=768</span></span><br><span class="line">        new_c_proj = Conv1D(<span class="number">768</span>, num_keep_fc)</span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            new_c_proj.weight.copy_(pruned_weight_proj)</span><br><span class="line">            <span class="keyword">if</span> bias_proj <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                new_c_proj.bias.copy_(bias_proj)  <span class="comment"># bias 不变（输出维度仍是 768）</span></span><br><span class="line"></span><br><span class="line">        block.mlp.c_proj = new_c_proj</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; GPT-2 MLP 剪枝完成！&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> model</span><br></pre></td></tr></table></figure><p>索引剪枝层：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">prune_conv1d_layer</span>(<span class="params">conv1d_layer: Conv1D, keep_indices: torch.Tensor</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    根据保留的输出通道索引剪枝 Conv1D 层</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        conv1d_layer: 原始 Conv1D 层</span></span><br><span class="line"><span class="string">        keep_indices: 要保留的输出通道索引 (shape=[num_keep])</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        新的 Conv1D 层（输出通道数 = num_keep）</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    weight = conv1d_layer.weight.data  <span class="comment"># [in, out]</span></span><br><span class="line">    bias = conv1d_layer.bias.data <span class="keyword">if</span> conv1d_layer.bias <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 剪枝权重: 保留 keep_indices 对应的输出通道</span></span><br><span class="line">    pruned_weight = weight[:, keep_indices]  <span class="comment"># [in, num_keep]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建新层</span></span><br><span class="line">    in_features = weight.shape[<span class="number">0</span>]</span><br><span class="line">    out_features = <span class="built_in">len</span>(keep_indices)</span><br><span class="line">    new_layer = Conv1D(out_features, in_features)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        new_layer.weight.copy_(pruned_weight)</span><br><span class="line">        <span class="keyword">if</span> bias <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            new_layer.bias.copy_(bias[keep_indices])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> new_layer</span><br></pre></td></tr></table></figure><h3 id="量化感知"><a href="https://github.com/HengLine/ai-model-lightweighting/tree/main/Quantization/gpt2">量化感知</a></h3><p>待完善</p><h3 id="知识蒸馏"><a href="https://github.com/HengLine/ai-model-lightweighting/tree/main/Distillation/gpt2">知识蒸馏</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Teacher: gpt2-medium (355M 参数)</span></span><br><span class="line">teacher = GPT2LMHeadModel.from_pretrained(<span class="string">&quot;openai-community/gpt2-medium&quot;</span>).to(device)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Student: gpt2 (124M 参数)</span></span><br><span class="line">student = GPT2LMHeadModel.from_pretrained(<span class="string">&quot;openai-community/gpt2&quot;</span>).to(device)</span><br></pre></td></tr></table></figure><p>蒸馏损失：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">compute_language_modeling_loss</span>(<span class="params">logits, labels</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;标准语言建模损失&quot;&quot;&quot;</span></span><br><span class="line">    shift_logits = logits[..., :-<span class="number">1</span>, :].contiguous()</span><br><span class="line">    shift_labels = labels[..., <span class="number">1</span>:].contiguous()</span><br><span class="line">    loss = fun.cross_entropy(</span><br><span class="line">        shift_logits.view(-<span class="number">1</span>, shift_logits.size(-<span class="number">1</span>)),</span><br><span class="line">        shift_labels.view(-<span class="number">1</span>),</span><br><span class="line">        ignore_index=-<span class="number">100</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> loss</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">distillation_loss</span>(<span class="params">student_logits, teacher_logits, labels,</span></span><br><span class="line"><span class="params">                      alpha=<span class="number">0.5</span>, temperature=<span class="number">1.5</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    知识蒸馏损失 = α * 软标签损失 + (1-α) * 硬标签损失</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        student_logits: Student 模型输出 [B, T, V]</span></span><br><span class="line"><span class="string">        teacher_logits: Teacher 模型输出 [B, T, V]</span></span><br><span class="line"><span class="string">        labels: 真实标签 [B, T]</span></span><br><span class="line"><span class="string">        alpha: 软标签损失权重（0.5~0.9）</span></span><br><span class="line"><span class="string">        temperature: 温度参数（&gt;1 平滑分布）</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># === 1. 软标签损失（KL 散度）===</span></span><br><span class="line">    <span class="comment"># Teacher 软化概率分布</span></span><br><span class="line">    teacher_probs = fun.log_softmax(teacher_logits / temperature, dim=-<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># Student 软化概率分布</span></span><br><span class="line">    student_probs = fun.log_softmax(student_logits / temperature, dim=-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># KL 散度损失</span></span><br><span class="line">    kl_loss = fun.kl_div(</span><br><span class="line">        student_probs,</span><br><span class="line">        teacher_probs,</span><br><span class="line">        reduction=<span class="string">&#x27;batchmean&#x27;</span></span><br><span class="line">    ) * (temperature ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 硬标签损失（高权重）</span></span><br><span class="line">    ce_loss = compute_language_modeling_loss(student_logits, labels)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 总损失：KL 权重更低</span></span><br><span class="line">    total_loss = alpha * kl_loss + (<span class="number">1</span> - alpha) * ce_loss</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> total_loss, kl_loss, ce_loss</span><br></pre></td></tr></table></figure><p>使用以上蒸馏技术后效果：</p><blockquote><p>Student (蒸馏后)：The future of AI is,（出现 Token 循环问题）</p><p>困惑度对比（500 样本）:</p><ul class="lvl-1"><li class="lvl-4"><p>Teacher (gpt2-medium): 40.44</p></li><li class="lvl-4"><p>Student (原始 gpt2):   54.64</p></li><li class="lvl-4"><p>Student (蒸馏后):      123638626614094164131840.00</p></li></ul></blockquote><p>通过调整参数（alpha、temperature、total_loss）后，效果甚微。</p><p>改用三阶段蒸馏后，效果如下：</p><blockquote><p>Student (蒸馏后): The future of AI is still a mystery.</p><p>困惑度对比（200 样本）:</p><ul class="lvl-1"><li class="lvl-4"><p>Teacher (gpt2-medium): 35.91</p></li><li class="lvl-4"><p>Student (原始 gpt2):   49.94</p></li><li class="lvl-4"><p>Student (蒸馏后):      36.26</p></li></ul></blockquote><h3 id="低秩分解"><a href="https://github.com/HengLine/ai-model-lightweighting/tree/main/Low-Rank/gpt2">低秩分解</a></h3><p>低秩分解的核心方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decompose_conv1d_svd</span>(<span class="params">conv1d_layer: Conv1D, rank_ratio=<span class="number">0.5</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用奇异值分解（SVD）对 Hugging Face 的 Conv1D 层进行低秩近似分解。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    背景说明：</span></span><br><span class="line"><span class="string">    - Hugging Face 的 GPT-2/Transformer 模型使用自定义 Conv1D 层（非标准 nn.Conv1d）</span></span><br><span class="line"><span class="string">    - Conv1D(out_features, in_features) 表示：输入 in_features 维，输出 out_features 维</span></span><br><span class="line"><span class="string">    - 其权重矩阵 W 的形状为 [in_features, out_features]（注意：与 nn.Linear 相反！）</span></span><br><span class="line"><span class="string">    - 前向计算公式：output = input @ W + bias （标准矩阵乘法，无需转置）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    分解目标：</span></span><br><span class="line"><span class="string">    将原始权重矩阵 W ∈ R^&#123;n×m&#125;（n=in_features, m=out_features）近似分解为：</span></span><br><span class="line"><span class="string">        W ≈ A @ B</span></span><br><span class="line"><span class="string">    其中：</span></span><br><span class="line"><span class="string">        A ∈ R^&#123;n×r&#125;  （第一层权重）</span></span><br><span class="line"><span class="string">        B ∈ R^&#123;r×m&#125;  （第二层权重）</span></span><br><span class="line"><span class="string">        r = rank_ratio * min(n, m)  （低秩近似秩）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    优势：</span></span><br><span class="line"><span class="string">    - 原始参数量：n × m</span></span><br><span class="line"><span class="string">    - 分解后参数量：n × r + r × m = r × (n + m)</span></span><br><span class="line"><span class="string">    - 当 r &lt;&lt; min(n, m) 时，显著减少参数量和计算量</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        conv1d_layer (Conv1D): 待分解的 Hugging Face Conv1D 层</span></span><br><span class="line"><span class="string">        rank_ratio (float): 保留的秩比例（0.0 ~ 1.0），值越小压缩率越高，但精度损失越大</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        nn.Sequential: 由两个 Conv1D 层组成的序列，功能等价于原始层（近似）</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># === 步骤 1: 提取原始权重和偏置 ===</span></span><br><span class="line">    <span class="comment"># Conv1D.weight 形状: [in_features, out_features]</span></span><br><span class="line">    W = conv1d_layer.weight.data  <span class="comment"># 获取权重张量（不计算梯度）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 提取偏置（如果存在）</span></span><br><span class="line">    <span class="comment"># Conv1D.bias 形状: [out_features]</span></span><br><span class="line">    bias = conv1d_layer.bias.data <span class="keyword">if</span> conv1d_layer.bias <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># === 步骤 2: 获取输入/输出维度 ===</span></span><br><span class="line">    <span class="comment"># W.shape = [in_features, out_features]</span></span><br><span class="line">    in_features, out_features = W.shape</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算最大可能秩（矩阵的秩不超过 min(行数, 列数)）</span></span><br><span class="line">    max_rank = <span class="built_in">min</span>(in_features, out_features)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 根据 rank_ratio 计算目标分解秩 r</span></span><br><span class="line">    r = <span class="built_in">int</span>(rank_ratio * max_rank)</span><br><span class="line">    <span class="comment"># 确保 r 至少为 1（避免秩为 0）</span></span><br><span class="line">    r = <span class="built_in">max</span>(<span class="number">1</span>, r)</span><br><span class="line">    <span class="comment"># 确保 r 不超过 max_rank - 1（避免数值不稳定，且 SVD 需要 r &lt; 秩）</span></span><br><span class="line">    r = <span class="built_in">min</span>(r, max_rank - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># === 步骤 3: 执行奇异值分解（SVD）===</span></span><br><span class="line">    <span class="comment"># 对权重矩阵 W 执行 SVD: W = U @ diag(S) @ Vh</span></span><br><span class="line">    <span class="comment"># - U: 左奇异向量矩阵，形状 [in_features, max_rank]</span></span><br><span class="line">    <span class="comment"># - S: 奇异值向量，形状 [max_rank]</span></span><br><span class="line">    <span class="comment"># - Vh: 右奇异向量矩阵的转置，形状 [max_rank, out_features]</span></span><br><span class="line">    <span class="comment"># 使用 full_matrices=False 以节省内存（只计算必要部分）</span></span><br><span class="line">    U, S, Vh = torch.linalg.svd(W, full_matrices=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># === 步骤 4: 提取前 r 个奇异分量 ===</span></span><br><span class="line">    <span class="comment"># 取前 r 列的左奇异向量: [in_features, r]</span></span><br><span class="line">    U_r = U[:, :r]</span><br><span class="line">    <span class="comment"># 取前 r 个奇异值: [r]</span></span><br><span class="line">    S_r = S[:r]</span><br><span class="line">    <span class="comment"># 取前 r 行的右奇异向量转置: [r, out_features]</span></span><br><span class="line">    Vh_r = Vh[:r, :]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># === 步骤 5: 构造低秩近似矩阵 ===</span></span><br><span class="line">    <span class="comment"># 数学原理：W ≈ U_r @ diag(S_r) @ Vh_r</span></span><br><span class="line">    <span class="comment"># 为数值稳定性和对称性，将奇异值平方根分配到两边：</span></span><br><span class="line">    <span class="comment">#   A = U_r @ diag(sqrt(S_r))  → [in_features, r]</span></span><br><span class="line">    <span class="comment">#   B = diag(sqrt(S_r)) @ Vh_r  → [r, out_features]</span></span><br><span class="line">    <span class="comment"># 这样 A @ B = U_r @ diag(S_r) @ Vh_r ≈ W</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算 sqrt(S_r) 并扩展维度以支持广播</span></span><br><span class="line">    sqrt_S = torch.sqrt(S_r)  <span class="comment"># [r]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造 A = U_r * sqrt(S_r)</span></span><br><span class="line">    <span class="comment"># 使用 unsqueeze(0) 将 sqrt_S 变为 [1, r]，与 U_r [in_features, r] 广播相乘</span></span><br><span class="line">    A = U_r * sqrt_S.unsqueeze(<span class="number">0</span>)  <span class="comment"># 结果形状: [in_features, r]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造 B = sqrt(S_r) * Vh_r</span></span><br><span class="line">    <span class="comment"># 使用 unsqueeze(1) 将 sqrt_S 变为 [r, 1]，与 Vh_r [r, out_features] 广播相乘</span></span><br><span class="line">    B = sqrt_S.unsqueeze(<span class="number">1</span>) * Vh_r  <span class="comment"># 结果形状: [r, out_features]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># === 步骤 6: 创建两个新的 Conv1D 层 ===</span></span><br><span class="line">    <span class="comment"># 第一层: 输入 in_features → 输出 r</span></span><br><span class="line">    <span class="comment"># Conv1D(out_features=r, in_features=in_features)</span></span><br><span class="line">    conv1 = Conv1D(r, in_features)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第二层: 输入 r → 输出 out_features</span></span><br><span class="line">    <span class="comment"># Conv1D(out_features=out_features, in_features=r)</span></span><br><span class="line">    <span class="comment"># 注意：偏置只加在最后一层（与原始层一致）</span></span><br><span class="line">    conv2 = Conv1D(out_features, r)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># === 步骤 7: 复制分解后的权重和偏置 ===</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():  <span class="comment"># 禁用梯度计算，避免影响优化器状态</span></span><br><span class="line">        <span class="comment"># 复制第一层权重 A ([in_features, r])</span></span><br><span class="line">        <span class="comment"># conv1.weight 形状应为 [in_features, r]</span></span><br><span class="line">        conv1.weight.copy_(A)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 复制第二层权重 B ([r, out_features])</span></span><br><span class="line">        <span class="comment"># conv2.weight 形状应为 [r, out_features]</span></span><br><span class="line">        conv2.weight.copy_(B)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 复制偏置（仅第二层需要，因为原始偏置作用于最终输出）</span></span><br><span class="line">        <span class="keyword">if</span> bias <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># conv2.bias 形状: [out_features]</span></span><br><span class="line">            conv2.bias.copy_(bias)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># === 步骤 8: 返回组合层 ===</span></span><br><span class="line">    <span class="comment"># 使用 nn.Sequential 将两个 Conv1D 层串联</span></span><br><span class="line">    <span class="comment"># 前向计算: input -&gt; conv1 -&gt; conv2 -&gt; output</span></span><br><span class="line">    <span class="comment"># 功能等价于: output = input @ W + bias （近似）</span></span><br><span class="line">    <span class="keyword">return</span> nn.Sequential(conv1, conv2)</span><br></pre></td></tr></table></figure><p>分解 + 生成对比</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    model_name = <span class="string">&quot;openai-community/gpt2&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. 加载原始 GPT-2</span></span><br><span class="line">    tokenizer = GPT2Tokenizer.from_pretrained(model_name)</span><br><span class="line">    model_orig = GPT2LMHeadModel.from_pretrained(model_name).to(device)</span><br><span class="line">    model_orig.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;原始模型参数量: <span class="subst">&#123;count_parameters(model_orig):<span class="number">.2</span>f&#125;</span> M&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 复制模型用于分解</span></span><br><span class="line">    model_decomp = GPT2LMHeadModel.from_pretrained(model_name).to(device)</span><br><span class="line">    model_decomp.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 低秩分解 0.3 重复; 0.5 可用; 0.6 较好; 0.7 接近原始</span></span><br><span class="line">    <span class="comment"># 分解全部 + 微调</span></span><br><span class="line">    <span class="comment"># model_decomp = decompose_gpt2_mlp(model_decomp, rank_ratio=0.5)</span></span><br><span class="line">    <span class="comment"># model_decomp = fine_tune_decomposed(model_decomp, tokenizer, num_steps=60)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 推荐：只分解 c_proj + rank_ratio=0.6</span></span><br><span class="line">    model_decomp = decompose_gpt2_mlp(model_decomp, rank_ratio=<span class="number">0.6</span>, decompose_c_fc=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;分解后模型参数量: <span class="subst">&#123;count_parameters(model_decomp):<span class="number">.2</span>f&#125;</span> M&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4. 文本生成对比</span></span><br><span class="line">    prompt = <span class="string">&quot;The future of AI is&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n 提示词: &#x27;<span class="subst">&#123;prompt&#125;</span>&#x27;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    text_orig = generate_text(model_orig, tokenizer, prompt)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n 原始模型:\n<span class="subst">&#123;text_orig&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    text_decomp = generate_text(model_decomp, tokenizer, prompt)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n 分解模型:\n<span class="subst">&#123;text_decomp&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5. 保存分解后模型</span></span><br><span class="line">    model_decomp.save_pretrained(<span class="string">&quot;../../data/gpt2_decomposed&quot;</span>)</span><br><span class="line">    tokenizer.save_pretrained(<span class="string">&quot;../../data/gpt2_decomposed&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="不同场景的轻量化">不同场景的轻量化</h2><p><strong>同一模型在不同场景下的轻量化策略应有所不同</strong>。轻量化不是“一刀切”的技术，而是需要根据<strong>部署硬件、应用场景、性能约束和业务需求</strong>进行定制化设计。</p><blockquote><p>轻量化的本质是在 <strong>精度（Accuracy）</strong>、<strong>速度（Latency）</strong>、<strong>体积（Size）</strong> 和 <strong>功耗（Power）</strong> 之间做权衡。不同场景对这些指标的优先级完全不同。</p></blockquote><table><thead><tr><th>场景</th><th>硬件平台</th><th>关键约束</th><th>推荐轻量化技术</th><th>原因</th></tr></thead><tbody><tr><td>1. 手机端实时语音助手</td><td>ARM CPU / NPU</td><td>低延迟（&lt;300ms）<br>中等精度</td><td>1.量化（INT8）<br>2.结构化剪枝<br>3.轻量架构（Squeezeformer）</td><td>- CPU/NPU 对 INT8 有硬件加速<br>- 延迟敏感，需移除冗余计算<br>- 精度可小幅牺牲（WER  +0.5% 可接受）</td></tr><tr><td>2. 智能音箱（离线唤醒）</td><td>MCU / DSP（&lt;100MHz）</td><td>极低功耗<br>模型 &lt;1MB<br>低精度</td><td>1.二值化/三值化<br>2.知识蒸馏（Tiny Student）<br>3.算子融合 + 固定点</td><td>- 内存极小，需极致压缩<br/>- 唤醒词任务简单，小模型足够<br/>- 浮点运算耗电，需定点</td></tr><tr><td>3. 车载语音系统</td><td>Automotive SoC（如 Qualcomm SA8155）</td><td>高可靠性<br>实时性（&lt;500ms）<br>中高精度</td><td>1.量化感知训练（QAT）<br>2.通道剪枝 + 微调<br>3.模型分割（CPU+NPU）</td><td>- 安全关键，精度损失需 &lt;0.3%<br/>- SoC 有专用 NPU，需 INT8 优化<br/>- 需支持多语言，模型不能太小</td></tr><tr><td>4. 服务器高并发 API</td><td>x86 CPU / GPU</td><td>高吞吐（QPS）<br>低延迟</td><td>1.TensorRT INT8（GPU）<br>2.ONNX + 并行推理<br>3.动态批处理</td><td>- GPU 用 TensorRT 效果远超 PTQ<br/>- CPU 用 OpenVINO / ONNX Runtime<br/>- 吞吐优先，可接受稍大模型</td></tr><tr><td>5. IoT 传感器（关键词检测）</td><td>Cortex-M 系列</td><td>&lt;100KB 模型<br>&lt;10mW 功耗</td><td>1.MCU 专用框架（TensorFlow）<br>2.手工设计 Tiny CNN<br>3.无浮点，全整型</td><td>- 无操作系统，需静态内存<br>- 模型必须 &lt;100KB<br>- 通常只检测 1~10 个关键词</td></tr></tbody></table><h3 id="场景-1：手机-App（Android）">场景 1：手机 App（Android）</h3><ul class="lvl-0"><li class="lvl-2"><p><strong>目标</strong>：实时转录，延迟 &lt;500ms</p></li><li class="lvl-2"><p>策略：</p><ul class="lvl-2"><li class="lvl-4">使用 <strong>WeNet + Squeezeformer</strong></li><li class="lvl-4"><strong>INT8 量化</strong>（TFLite + NNAPI）</li><li class="lvl-4"><strong>剪枝 30% 通道</strong></li><li class="lvl-4">模型大小：<strong>~5MB</strong></li><li class="lvl-4">WER：<strong>+0.8%</strong></li></ul></li></ul><h3 id="场景-2：智能手表（Wear-OS）">场景 2：智能手表（Wear OS）</h3><ul class="lvl-0"><li class="lvl-2"><p><strong>目标</strong>：离线命令识别，模型 &lt;2MB</p></li><li class="lvl-2"><p>策略：</p><ul class="lvl-2"><li class="lvl-4"><strong>知识蒸馏</strong>：Teacher=Conformer, Student=Tiny-Conformer（4 层）</li><li class="lvl-4"><strong>FP16 量化</strong>（无 INT8 支持）</li><li class="lvl-4">移除语言模型（仅 CTC）</li><li class="lvl-4">模型大小：<strong>~1.8MB</strong></li><li class="lvl-4">WER：<strong>+2.5%</strong>（可接受，因命令简单）</li></ul></li></ul><h3 id="场景-3：车载系统（Linux-NPU）">场景 3：车载系统（Linux + NPU）</h3><ul class="lvl-0"><li class="lvl-2"><p><strong>目标</strong>：多语言支持，高鲁棒性</p></li><li class="lvl-2"><p>策略：</p><ul class="lvl-2"><li class="lvl-4"><strong>QAT（量化感知训练）</strong></li><li class="lvl-4"><strong>仅剪枝 10%</strong>（保留精度）</li><li class="lvl-4"><strong>TensorRT 导出</strong></li><li class="lvl-4">模型大小：<strong>~8MB</strong></li><li class="lvl-4">WER：<strong>+0.2%</strong></li></ul></li></ul><table><thead><tr><th>技术</th><th>适用场景</th><th>不适用场景</th></tr></thead><tbody><tr><td>量化（PTQ/QAT）</td><td>手机、服务器、车载（有 INT8 支持）</td><td>MCU（无 SIMD 指令）</td></tr><tr><td>结构化剪枝</td><td>通用（CPU/GPU/NPU）</td><td>超小模型（剪枝收益低）</td></tr><tr><td>知识蒸馏</td><td>需要小模型 + 有大 Teacher</td><td>无预训练大模型</td></tr><tr><td>低秩分解</td><td>大 Linear 层（如 FFN）</td><td>小卷积层（如 3x3）</td></tr><tr><td>轻量架构设计</td><td>从零训练</td><td>已有大模型需压缩</td></tr><tr><td>二值化/三值化</td><td>MCU、超低功耗</td><td>高精度任务（如医疗 ASR）</td></tr></tbody></table><h2 id="常用工具与框架">常用工具与框架</h2><table><thead><tr><th>技术</th><th>工具/库</th></tr></thead><tbody><tr><td>剪枝</td><td>NNI, TorchPruner, TensorFlow Model Optimization</td></tr><tr><td>量化</td><td>PyTorch Quantization, TensorFlow Lite, TensorRT</td></tr><tr><td>蒸馏</td><td>HuggingFace Transformers (DistilBERT), TorchDistill</td></tr><tr><td>轻量网络</td><td>timm (PyTorch Image Models), torchvision</td></tr><tr><td>自动压缩</td><td>AutoKeras, OFA official repo</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> Model </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI模型轻量化 </tag>
            
            <tag> 模型剪枝 </tag>
            
            <tag> 量化感知 </tag>
            
            <tag> 知识蒸馏 </tag>
            
            <tag> 低秩分解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统架构技术选型之 MQ 篇</title>
      <link href="/2025/10/e957152912ce463aa001ac0dda36a695/"/>
      <url>/2025/10/e957152912ce463aa001ac0dda36a695/</url>
      
        <content type="html"><![CDATA[<p>在系统架构中，消息队列（Message Queue, MQ）是实现异步通信、解耦、削峰填谷、可靠投递等关键能力的核心中间件。</p><p>目前主流的 MQ 技术包括 <strong>Apache Kafka</strong>、<strong>RabbitMQ</strong> 和 <strong>RocketMQ</strong>。</p><blockquote><p>没有“最好”的 MQ，只有“最合适”的 MQ。选型应结合：</p><ul class="lvl-1"><li class="lvl-2">业务对<strong>吞吐、延迟、可靠性</strong>的要求</li><li class="lvl-2">是否需要<strong>事务、顺序、延迟</strong>等高级特性</li><li class="lvl-2">团队技术栈与运维能力</li><li class="lvl-2">未来扩展性与生态兼容性</li></ul></blockquote><p>建议在关键系统中进行 <strong>PoC（概念验证）</strong>，通过压测和故障演练验证选型是否满足 SLA。</p><h2 id="基本定位与设计哲学">基本定位与设计哲学</h2><p>从定位和设计层面的比较。</p><table><thead><tr><th>组件</th><th>定位</th><th>设计哲学</th></tr></thead><tbody><tr><td>Kafka</td><td>高吞吐、分布式日志系统</td><td>以日志为中心，强调顺序写、批量处理、持久化存储，适合大数据流式处理</td></tr><tr><td>RabbitMQ</td><td>通用消息中间件</td><td>基于 AMQP 协议，强调消息的可靠性、灵活性和丰富的路由模型</td></tr><tr><td>RocketMQ</td><td>金融级高可靠消息中间件</td><td>阿里自研，强调低延迟、高可靠、事务消息、顺序消息，适合电商、金融等强一致性场景</td></tr></tbody></table><h2 id="核心特性对比">核心特性对比</h2><p>从各大特性和功能层面的比较，以及其适用的各种场景。</p><h3 id="吞吐量与性能">吞吐量与性能</h3><ul class="lvl-0"><li class="lvl-2"><p>Kafka 通过顺序写磁盘 + 批量发送 + 零拷贝（zero-copy）实现超高吞吐；</p></li><li class="lvl-2"><p>RabbitMQ 基于 Erlang 虚拟机，单机性能受限；</p></li><li class="lvl-2"><p>RocketMQ 采用 Java 编写，优化了存储和刷盘策略，兼顾吞吐与延迟。</p></li></ul><table><thead><tr><th>组件</th><th>吞吐量</th><th>延迟</th><th>适用场景</th></tr></thead><tbody><tr><td><strong>Kafka</strong></td><td>极高（百万级/秒）</td><td>中等（毫秒级）</td><td>日志收集、流处理、大数据管道</td></tr><tr><td>RabbitMQ</td><td>中等（万级/秒）</td><td>低（亚毫秒~毫秒）</td><td>企业应用集成、任务队列、RPC</td></tr><tr><td>RocketMQ</td><td>高（十万~百万级/秒）</td><td>低（毫秒级）</td><td>电商交易、订单、支付、事务消息</td></tr></tbody></table><blockquote><p>吞吐量与性能，<mark>kafka</mark> 胜出</p></blockquote><h3 id="消息模型与协议">消息模型与协议</h3><ul class="lvl-0"><li class="lvl-2"><p>RabbitMQ 的路由能力最灵活，适合复杂消息分发逻辑；</p></li><li class="lvl-2"><p>Kafka 更适合“广播+分区消费”；</p></li><li class="lvl-2"><p>RocketMQ 在 Tag 过滤基础上支持 SQL 表达式过滤（高级特性）。</p></li></ul><table><thead><tr><th>组件</th><th>消息模型</th><th>协议支持</th><th>路由机制</th></tr></thead><tbody><tr><td>Kafka</td><td>发布/订阅（基于 Topic + Partition）</td><td>自定义二进制协议</td><td>无复杂路由，靠 Partition 分区</td></tr><tr><td>RabbitMQ</td><td>支持点对点、发布/订阅、RPC</td><td>AMQP（主流）、STOMP、MQTT、HTTP</td><td>强大的 Exchange + Binding + Routing Key 路由</td></tr><tr><td>RocketMQ</td><td>发布/订阅 + 点对点</td><td>自定义协议（兼容部分 JMS）</td><td>Tag + Key 过滤，支持顺序消息、延迟消息</td></tr></tbody></table><blockquote><p>消息模型与协议，<mark>RabbitMQ</mark> 略胜一筹，适合复杂消息分发场景</p></blockquote><h3 id="可靠性与一致性">可靠性与一致性</h3><ul class="lvl-0"><li class="lvl-2"><p>RocketMQ 的事务消息是其核心优势，适用于“下单+扣库存”等需要最终一致性的业务；</p></li><li class="lvl-2"><p>Kafka 的事务主要用于 Exactly-Once 语义；</p></li><li class="lvl-2"><p>RabbitMQ 更依赖应用层补偿。</p></li></ul><table><thead><tr><th>组件</th><th>消息可靠性</th><th>一致性保障</th><th>事务支持</th></tr></thead><tbody><tr><td>Kafka</td><td>高（可配置 acks=all）</td><td>最终一致性</td><td>0.11+ 支持事务（Producer 事务）</td></tr><tr><td>RabbitMQ</td><td>高（持久化 + Confirm + ACK）</td><td>强一致性（单队列内）</td><td>不支持分布式事务，但可通过 Publisher Confirm + 消费者 ACK 保证</td></tr><tr><td>RocketMQ</td><td>极高（同步刷盘 + 主从）</td><td>强顺序一致性（分区有序）</td><td>支持分布式事务消息（Half Message 机制）</td></tr></tbody></table><blockquote><p>可靠性与一致性，<mark>RocketMQ</mark> 胜出。</p></blockquote><h3 id="顺序消息支持">顺序消息支持</h3><p>电商场景中“订单状态变更”需严格顺序，RocketMQ 和 Kafka 均可满足，但 RocketMQ 对顺序语义控制更精细。</p><table><thead><tr><th>组件</th><th>是否支持顺序消息</th><th>说明</th></tr></thead><tbody><tr><td>Kafka</td><td>是（分区级别有序）</td><td>同一 Partition 内消息有序</td></tr><tr><td>RabbitMQ</td><td>否（天然无序，需自定义策略）</td><td>多消费者并发消费导致乱序（单队列 -&gt; 单线程消费）</td></tr><tr><td>RocketMQ</td><td>是（严格分区有序）</td><td>支持全局顺序（性能差）和分区顺序（推荐）</td></tr></tbody></table><blockquote><p>顺序消息中，<mark>RocketMQ</mark> 略胜出。</p><p>核心思想是：<strong>保证同一业务标识（如订单 ID）的消息，在发送、存储和消费三个阶段都严格按照发送顺序被处理</strong>。这是通过 <strong>“局部有序”</strong>（Partition/Queue 级别有序）来实现的，而非全局有序（全局有序性能极差，一般不推荐）。</p><p><strong>实现原理</strong>：</p><ol><li class="lvl-3"><p>发送阶段：消息路由到同一个 Queue（据业务 Key（如 <code>orderId</code>）选择固定的 MessageQueue）</p></li><li class="lvl-3"><p>存储阶段：Queue 内部 FIFO（每个 Queue 本质是一个<strong>顺序写入的日志文件</strong>，写入顺序存储，保证存储有序）</p></li><li class="lvl-3"><p>消费阶段：单线程顺序消费（PushConsumer 默认为每个 Queue 分配一个消费线程）</p></li></ol><p><strong>同一业务 Key → 同一 Queue → 单线程消费 = 顺序保证</strong> 。</p><p>RabbitMQ 也可以根据以上策略实现有序，原理相差无几，需要在代码和配置中控制（并发性能会受限）</p></blockquote><h3 id="延迟消息支持">延迟消息支持</h3><p>RocketMQ 的延迟消息是生产级特性，适合订单超时取消、定时提醒等场景。</p><table><thead><tr><th>组件</th><th>延迟消息支持</th><th>实现方式</th></tr></thead><tbody><tr><td>Kafka</td><td>原生不支持</td><td>需借助外部调度或自定义 Topic 分级</td></tr><tr><td>RabbitMQ</td><td>插件或 TTL+死信队列</td><td>rabbitmq-delayed-message-exchange</td></tr><tr><td>RocketMQ</td><td>支持</td><td>支持 18 个等级（1s~2h），可扩展</td></tr></tbody></table><blockquote><p>延迟消息，<mark>RocketMQ</mark> 胜出。</p><p>核心机制是通过<strong>预定义的延迟等级（Delay Level）</strong>，将消息投递到特殊的延迟主题（SCHEDULE_TOPIC_XXXX）中，并由后台定时任务在指定时间后将消息重新投递到真实的目标 Topic，从而实现延迟投递。</p><p>Broker 启动时会启动一个后台线程 <code>ScheduleMessageService</code>，它为每个延迟等级维护一个定时任务：</p><ul class="lvl-1"><li class="lvl-2"><p>每隔固定间隔（如 100ms）检查对应 Queue 中是否有到期的消息。</p></li><li class="lvl-2"><p>如果消息的“预期投递时间” ≤ 当前时间，则将其<strong>重新投递</strong>到原始的目标 Topic。</p></li></ul></blockquote><h3 id="扩展性与运维">扩展性与运维</h3><ul class="lvl-0"><li class="lvl-2"><p>Kafka 社区生态最成熟；</p></li><li class="lvl-2"><p>RocketMQ 在阿里云上有商业版（ONS）；</p></li><li class="lvl-2"><p>RabbitMQ 小集群简单，大集群运维挑战大。</p></li></ul><table><thead><tr><th>组件</th><th>集群模式</th><th>扩容难度</th><th>运维复杂度</th><th>监控生态</th></tr></thead><tbody><tr><td>Kafka</td><td>分布式（ZooKeeper/KRaft）</td><td>中等（需重平衡）</td><td>较高（依赖 ZooKeeper）</td><td>丰富（Prometheus + Kafka Manager）</td></tr><tr><td>RabbitMQ</td><td>镜像队列 / Quorum Queue</td><td>较难（队列绑定节点）</td><td>中等</td><td>有管理插件，但大规模集群运维复杂</td></tr><tr><td>RocketMQ</td><td>主从 + Dledger（自动选主）</td><td>容易（自动负载均衡）</td><td>中等</td><td>提供 RocketMQ Console，支持 Prometheus</td></tr></tbody></table><blockquote><p>扩展性与运维，<mark>RocketMQ</mark> 胜出。</p><p>基于 <strong>Topic 的 Queue 分片模型</strong> 实现自动负载均衡。</p></blockquote><h2 id="典型使用场景">典型使用场景</h2><h3 id="Kafka-适用场景">Kafka 适用场景</h3><ul class="lvl-0"><li class="lvl-2"><p>日志采集与聚合（如 ELK + Kafka）</p></li><li class="lvl-2"><p>实时流处理（Flink / Spark Streaming）</p></li><li class="lvl-2"><p>用户行为追踪（埋点数据）</p></li><li class="lvl-2"><p>大数据管道（CDC、ETL）</p></li><li class="lvl-2"><p>高吞吐、允许少量延迟的场景</p></li></ul><h3 id="RabbitMQ-适用场景">RabbitMQ 适用场景</h3><ul class="lvl-0"><li class="lvl-2"><p>企业内部系统解耦（如 CRM 与 ERP 集成）</p></li><li class="lvl-2"><p>任务队列（异步发送邮件、短信）</p></li><li class="lvl-2"><p>需要复杂路由规则的场景（如按地区、类型分发）</p></li><li class="lvl-2"><p>对消息可靠性要求高但吞吐量不极端的业务</p></li></ul><h3 id="RocketMQ-适用场景">RocketMQ 适用场景</h3><ul class="lvl-0"><li class="lvl-2"><p>电商交易系统（下单、支付、库存）</p></li><li class="lvl-2"><p>金融级业务（对账、风控）</p></li><li class="lvl-2"><p>需要事务消息保证最终一致性的场景</p></li><li class="lvl-2"><p>顺序消息（如状态机变更）</p></li><li class="lvl-2"><p>延迟消息（订单超时关闭）</p></li></ul><h2 id="语言与生态支持">语言与生态支持</h2><table><thead><tr><th>组件</th><th>客户端语言支持</th><th>社区活跃度</th><th>云服务支持</th></tr></thead><tbody><tr><td>Kafka</td><td>Java, Python, Go, C/C++, .NET 等</td><td>极高（Apache 顶级项目）</td><td>AWS MSK, Azure Event Hubs, 阿里云 Kafka</td></tr><tr><td>RabbitMQ</td><td>几乎所有主流语言</td><td>高（历史悠久）</td><td>AWS, Azure, 阿里云, 腾讯云均支持</td></tr><tr><td>RocketMQ</td><td>Java（官方）, Go/Python/C++（社区）</td><td>中高（Apache 项目，阿里主导）</td><td>阿里云 RocketMQ（商业版），开源版需自运维</td></tr></tbody></table><h2 id="选型建议总结">选型建议总结</h2><ul class="lvl-0"><li class="lvl-2"><p><strong>Kafka 并非传统 MQ</strong>：它本质是分布式日志系统，虽然能做 MQ，但不适合低延迟、复杂 ACK、延迟消息等传统 MQ 场景。</p></li><li class="lvl-2"><p><strong>RabbitMQ 性能瓶颈</strong>：单队列性能有限，高并发需拆分多个队列，且 Erlang 调优门槛高。</p></li><li class="lvl-2"><p><strong>RocketMQ 国产优势</strong>：中文文档完善，阿里背书，国内大厂（如滴滴、美团）广泛使用。</p></li></ul><table><thead><tr><th>需求维度</th><th>推荐选型</th></tr></thead><tbody><tr><td>超高吞吐 + 日志/流处理</td><td>Kafka</td></tr><tr><td>大数据生态集成</td><td>Kafka</td></tr><tr><td>复杂路由 + 企业集成 + 小规模可靠队列</td><td>RabbitMQ</td></tr><tr><td>快速上手 + 小团队运维</td><td>RabbitMQ</td></tr><tr><td>金融/电商 + 事务消息 + 顺序/延迟消息</td><td><strong>RocketMQ</strong></td></tr><tr><td>强一致性 + 分布式事务</td><td><strong>RocketMQ</strong></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
          <category> 技术选型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构设计 </tag>
            
            <tag> MQ技术选型 </tag>
            
            <tag> MQ特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SPI 的基本原理和使用场景（服务发现）</title>
      <link href="/2025/10/b1bbe3ca400841b7ad5fb441436b6fea/"/>
      <url>/2025/10/b1bbe3ca400841b7ad5fb441436b6fea/</url>
      
        <content type="html"><![CDATA[<p><strong>SPI（Service Provider Interface，服务提供者接口）</strong> 是一种服务发现机制，允许框架或库在运行时动态加载第三方实现，而无需在代码中硬编码具体的实现类。</p><blockquote><p>SPI 将服务接口和具体的服务实现分离开来，将服务调用方和服务实现者解耦，能够提升程序的扩展性、可维护性。修改或者替换服务实现并不需要修改调用方。</p><ul class="lvl-1"><li class="lvl-2"><strong>模块化</strong>：服务提供者的实现可以分布在不同的模块或 JAR 包中，SPI 机制使得这些实现能够轻松被发现和加载。</li><li class="lvl-2"><strong>扩展性</strong>：应用程序可以通过添加新的服务提供者来扩展现有功能，而无需修改客户端代码。</li><li class="lvl-2"><strong>解耦</strong>：服务接口和具体实现之间是完全解耦的，调用方只需要知道接口，而无需关心具体的实现类。</li><li class="lvl-2"><strong>动态性</strong>：通过 SPI 机制，服务实现可以在运行时动态加载，这使得应用程序可以灵活地应对变化或增加新功能。</li></ul><p>很多框架都使用了 Java 的 SPI 机制，比如：Spring 框架、数据库加载驱动、日志接口、以及 Dubbo 的扩展实现等等。</p></blockquote><h2 id="SPI-核心思想">SPI 核心思想</h2><ul class="lvl-0"><li class="lvl-2"><p><strong>定义接口（或抽象类）</strong>：由 API 提供方（如 JDK 或框架）定义。</p></li><li class="lvl-2"><p><strong>实现接口</strong>：由第三方（服务提供者）提供具体实现。</p></li><li class="lvl-2"><p><strong>自动发现并加载实现</strong>：运行时通过约定的配置文件自动发现并加载实现类，无需硬编码。</p><blockquote><ul class="lvl-3"><li class="lvl-2"><code>ServiceLoader.load(Class)</code> 会扫描 classpath 下所有 JAR 或目录中的 <code>META-INF/services/接口名</code> 文件。</li><li class="lvl-2">读取文件内容，通过反射实例化每一行指定的类。</li><li class="lvl-2">返回一个 <code>Iterable</code> 对象，可遍历所有实现。</li></ul><blockquote><ul class="lvl-4"><li class="lvl-2">实现类必须有<strong>无参 public 构造函数</strong>。</li><li class="lvl-2">配置文件路径和命名必须严格匹配。</li><li class="lvl-2">默认使用当前线程的上下文类加载器（ContextClassLoader），也可手动指定。</li></ul></blockquote></blockquote></li></ul><p>三者特点：</p><table><thead><tr><th>特性</th><th>Java 原生 SPI</th><th>Dubbo SPI</th><th>Spring Factories</th></tr></thead><tbody><tr><td>配置位置</td><td>META-INF/services/</td><td>META-INF/dubbo/</td><td>META-INF/spring.factories</td></tr><tr><td>按名称获取</td><td>不支持</td><td>支持</td><td>不支持（可通过 key 分组）</td></tr><tr><td>延迟加载</td><td>不支持（全加载）</td><td>支持</td><td>支持</td></tr><tr><td>IOC 支持</td><td>不支持</td><td>支持</td><td>支持（在 Spring 上下文中）</td></tr><tr><td>使用场景</td><td>JDK 标准扩展</td><td>Dubbo 插件体系</td><td>Spring Boot 自动配置</td></tr></tbody></table><h2 id="Java-SPI"><a href="https://www.baeldung.com/java-spi">Java SPI</a></h2><p>java SPI 通过 java.util.ServiceLoder 实现。实际上是“<strong>基于接口的编程＋策略模式＋配置文件</strong>”组合实现的动态加载机制。</p><p>优点：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>解耦</strong>：API 与实现分离，便于扩展。</p></li><li class="lvl-2"><p><strong>插件化</strong>：第三方可轻松提供实现，无需修改主程序。</p></li><li class="lvl-2"><p><strong>标准机制</strong>：JDK 原生支持，无需额外依赖。</p></li></ul></blockquote><p>缺点：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>一次性加载所有实现</strong>：即使只用一个，也会全部实例化（性能问题）。</p><p>不能按需加载，需要遍历所有的实现并实例化，在循环中才能找到需要的实现。如果不想用某些实现类，或者某些类实例化很耗时，它也被载入并实例化了，这就造成了浪费。</p></li><li class="lvl-2"><p><strong>无命名/优先级控制</strong>：无法按名称获取特定实现，也无法排序。</p><p>只能通过 Iterator 形式获取，不能根据某个参数来获取对应的实现类</p></li><li class="lvl-2"><p><strong>异常处理弱</strong>：某个实现类加载失败可能导致整个加载失败。</p></li><li class="lvl-2"><p><strong>不支持依赖注入</strong>：无法传参或注入 Spring Bean。</p></li><li class="lvl-2"><p><strong>线程不安全</strong>：多个并发多线程使用 ServiceLoader 类的实例是线程不安全的。</p></li></ul></blockquote><h3 id="实现原理">实现原理</h3><ol><li class="lvl-3"><p><code>ServiceLoader.load(Class)</code> 会扫描 classpath 下所有 JAR 或目录中的 <code>META-INF/services/接口名</code> 文件；</p></li><li class="lvl-3"><p>读取文件内容，通过 <code>InputStream</code> 流将文件具体实现类的全类名读取出来；</p></li><li class="lvl-3"><p>根据获取到的全类名，先判断跟 spi 接口是否为同一类型，如果是就通过反射的机制构造对应的实例对象；</p><p>通过反射方法<code>Class.forName()</code>加载类对象，并用<code>newInstance()</code>将类实例化，并把实例化后的类缓存到providers对象中，(LinkedHashMap&lt;String,S&gt;类型） 然后返回实例对象。</p></li><li class="lvl-3"><p>将构造出来的实例对象添加到 <code>Providers</code> 的列表中；</p></li><li class="lvl-3"><p>返回一个 <code>Iterable</code> 对象，可遍历所有实现。</p></li></ol><blockquote><p>解决第三方类加载的机制在 <code>ClassLoader cl = Thread.currentThread().getContextClassLoader();</code> 中，<code>cl</code> 就是<strong>线程上下文类加载器</strong>（Thread Context ClassLoader）。这是每个线程持有的类加载器，JDK 的设计允许应用程序或容器（如 Web 应用服务器）设置这个类加载器，以便核心类库能够通过它来加载应用程序类。</p><p>线程上下文类加载器默认情况下是应用程序类加载器（Application ClassLoader），它负责加载 classpath 上的类。当核心库需要加载应用程序提供的类时，它可以使用线程上下文类加载器来完成。这样，即使是由引导类加载器加载的核心库代码，也能够加载并使用由应用程序类加载器加载的类。</p></blockquote><h3 id="Demo-示例">Demo 示例</h3><p>定义服务接口，提供具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IShout</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">shout</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由不同厂商或模块提供</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">implements</span> <span class="title class_">IShout</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shout</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;miao miao&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">IShout</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shout</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;wang wang&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建配置文件：建立目录 <code>src/main/resources/META-INF/services</code>， 新增一个以接口命名的文件 (<code>org.foo.demo.IShout</code> 需包含包名)，内容是该接口的所有实现类全限定名（每行一个类）。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">org.foo.demo.animal.Dog</span></span><br><span class="line"><span class="attr">org.foo.demo.animal.Cat</span></span><br></pre></td></tr></table></figure><p>加载服务，获取实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 ServiceLoader 来加载配置文件中指定的实现</span></span><br><span class="line">ServiceLoader&lt;IShout&gt; shouts = ServiceLoader.load(IShout.class);</span><br><span class="line">shouts.forEach(shout -&gt; &#123; <span class="comment">// 遍历所有方法，输出（顺序不确定）</span></span><br><span class="line">    System.out.println(shout.shout());</span><br><span class="line">&#125;);    </span><br></pre></td></tr></table></figure><h3 id="经典案例">经典案例</h3><ul class="lvl-0"><li class="lvl-2"><p>JDBC 驱动加载</p><p>MySQL 驱动 JAR 包中包含：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">META-INF/services/java.sql.Driver</span><br><span class="line">内容：</span><br><span class="line">com.mysql.cj.jdbc.Driver</span><br></pre></td></tr></table></figure><p>应用启动时，<code>DriverManager</code> 通过 <code>ServiceLoader</code> 自动加载所有数据库驱动。</p></li><li class="lvl-2"><p>SLF4J 日志绑定</p><p>SLF4J 通过 SPI 机制绑定具体的日志实现（如 Logback、Log4j）。</p></li></ul><h2 id="SpringBoot-SPI">SpringBoot SPI</h2><p>Spring Boot使用 SPI 机制来实现其自动配置和插件化功能。</p><p>自动配置依赖 <code>spring.factories</code> 文件，该文件以 SPI 的方式声明了自动配置类，在服务运行时就能根据上下文环境自动装配合适的 Bean 和配置。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>模块化扩展</strong>：不同模块或库可通过 SPI 注册各自的自动配置类，Spring Boot 在启动时会根据条件加载相应模块的配置。</p></li><li class="lvl-2"><p><strong>自动配置</strong>：开发者可以通过 SPI 扩展自定义的自动配置模块，而无需修改 Spring Boot 的核心代码。</p></li><li class="lvl-2"><p><strong>插件机制</strong>：开发者可以通过 SPI 编写自己的插件和扩展模块，从而定制和扩展 Spring Boot 的默认行为。</p></li></ul></blockquote><h3 id="加载流程">加载流程</h3><ol><li class="lvl-3"><p>声明模块配置：模块（如自动配置类）在各自的 spring.factories 文件中注册，它们的类全限定名会被记录下来。</p></li><li class="lvl-3"><p>动态加载模块：在应用启动时，Spring Boot 会自动扫描类路径，加载所有模块的 spring.factories 文件，并根据条件加载相应的自动配置类。</p></li><li class="lvl-3"><p>解耦模块与核心应用：通过 SPI 机制，模块的自动配置类可以与核心应用代码解耦，开发者可以根据需求选择不同的模块。</p></li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自动配置类的声明</span></span><br><span class="line"><span class="attr">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">\</span></span><br><span class="line"><span class="string">com.example.MyAutoConfiguration,\</span></span><br><span class="line"><span class="string">com.example.OtherAutoConfiguration</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 应用监听器的声明</span></span><br><span class="line"><span class="attr">org.springframework.context.ApplicationListener</span>=<span class="string">\</span></span><br><span class="line"><span class="string">com.example.MyApplicationListener</span></span><br></pre></td></tr></table></figure><blockquote><p>解析流程：</p><ul class="lvl-1"><li class="lvl-2">扫描类路径：Spring Boot 在启动时会扫描所有 JAR 包中的 META-INF/spring.factories 文件。</li><li class="lvl-2">读取配置：Spring Boot 将所有的自动配置类和其他组件（如监听器、过滤器等）从文件中读取并注册到应用上下文中。</li><li class="lvl-2">条件加载：自动配置类的加载依赖于条件注解（如 @ConditionalOnClass），根据运行时环境决定是否加载这些配置。</li></ul></blockquote><h3 id="自动配置">自动配置</h3><p>Spring Boot 通过加载 <code>META-INF/spring.factories</code> 文件来实现模块化扩展</p><p>Spring Boot 自动配置的实现依赖于两个关键组件：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>@EnableAutoConfiguration 注解：当应用程序启动时，Spring Boot 会扫描所有被 @EnableAutoConfiguration 注解标记的配置类。这些类是在 spring.factories 文件中注册的。</p></li><li class="lvl-2"><p>spring.factories 文件：在每个包含自动配置的模块中，都有一个 META-INF/spring.factories 文件，用于声明该模块的自动配置类。Spring Boot 会根据该文件自动加载相应的配置。</p></li></ul></blockquote><p>自动配置的加载流程：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>配置声明</strong>：自动配置类通过 @Configuration 和 @Conditional 注解来声明条件化的 Bean 加载逻辑。</p></li><li class="lvl-2"><p><strong>条件加载</strong>：Spring Boot 在启动时会根据运行时环境和依赖情况决定是否加载某个自动配置类。这通过 @ConditionalOnClass、@ConditionalOnMissingBean 等注解来控制。</p></li><li class="lvl-2"><p><strong>自动配置加载</strong>：Spring Boot 扫描 spring.factories 文件中的自动配置类，并根据注解条件逐一判断是否需要加载这些配置。</p></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(DataSource.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceAutoConfiguration</span> &#123;</span><br><span class="line">    <span class="comment">// 根据 DataSource 类的存在自动配置数据源</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HikariDataSource</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Demo-示例-2">Demo 示例</h3><p>自定义 Starter 实现 SPI 扩展</p><p>一个自定义 Starter 是一个包含自动配置逻辑的库，它能够简化某种特定功能的配置。在 Spring Boot 中，创建自定义 Starter 通常会结合 SPI 机制来自动加载相应的配置类。</p><blockquote><ol><li class="lvl-3"><p>创建一个 Spring Boot 项目：定义一个包含自定义功能的模块。</p></li><li class="lvl-3"><p>定义自动配置类：该类使用 @Configuration 和 @Conditional 注解来实现自动化配置。</p></li><li class="lvl-3"><p>注册自动配置类到 spring.factories 文件中：使用 SPI 机制，让 Spring Boot 在启动时自动加载该配置。</p></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义服务接口和实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line">    String <span class="title function_">sayHello</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello from MyServiceImpl!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自动配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(MyService.class)</span>  <span class="comment">// 当 MyService 存在时才进行配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServiceAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span>  <span class="comment">// 如果没有手动配置 MyService，则自动配置它</span></span><br><span class="line">    <span class="keyword">public</span> MyService <span class="title function_">myService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyServiceImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>spring.factories 文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">\</span></span><br><span class="line"><span class="string">com.example.MyServiceAutoConfiguration</span></span><br></pre></td></tr></table></figure><h2 id="Dubbo-SPI"><a href="https://cn.dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/architecture/dubbo-spi/">Dubbo SPI</a></h2><p>Dubbo 中内置了一个轻量版本的 IoC 容器，用来管理框架内部的插件，实现包括插件实例化、生命周期、依赖关系自动注入等能力。</p><blockquote><p>Dubbo 对JAVA SPI做了一定的改造与加强：</p><ul class="lvl-1"><li class="lvl-2">JDK 标准的 SPI 会一次性实例化扩展点所有实现，如果有扩展实现初始化很耗时，但如果没用上也加载，会很浪费资源。</li><li class="lvl-2">如果扩展点加载失败，JDK SPI 没给出详细信息，不方便定位问题，Dubbo SPI 在失败时记录真正的失败原因，并打印出来</li><li class="lvl-2">增加 IOC、AOP 能力</li><li class="lvl-2">增加排序能力</li><li class="lvl-2">增加条件激活能力</li><li class="lvl-2">提供了一系列更灵活的 API，如获取所有 SPI 扩展实现、根据名称查询某个扩展实现、根据类型查询扩展实现、查询匹配条件的扩展实现等。</li></ul></blockquote><h3 id="加载流程-2">加载流程</h3><ul class="lvl-0"><li class="lvl-2"><p>使用 <code>@SPI</code> 注解标记接口。</p></li><li class="lvl-2"><p>配置文件放在 <code>META-INF/dubbo/</code> 或 <code>META-INF/dubbo/internal/</code>。</p></li><li class="lvl-2"><p>支持按名称获取实现（如 <code>ExtensionLoader.getExtension(&quot;redis&quot;)</code>）。</p></li><li class="lvl-2"><p>支持自适应扩展（<code>@Adaptive</code>）、自动包装（Wrapper）、依赖注入等。</p></li></ul><img src="/imgs/java/extension-load-1734853439272-3.png" alt="//imgs/v3/concepts/extension-load.png" style="zoom: 33%;" /><blockquote><ol><li class="lvl-3"><p>读取并解析配置文件</p></li><li class="lvl-3"><p>缓存所有扩展实现</p></li><li class="lvl-3"><p>基于用户执行的扩展名，实例化对应的扩展实现</p></li><li class="lvl-3"><p>进行扩展实例属性的 IOC 注入以及实例化扩展的包装类，实现 AOP 特性</p></li></ol></blockquote><h3 id="Demo-示例-3"><a href="https://cn.dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/extensibility/spi/">Demo 示例</a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.提供 SPI 插件实现类</span></span><br><span class="line"><span class="meta">@Activate</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomizedProtocol</span> <span class="keyword">implements</span> <span class="title class_">Protocol</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2.在指定文件配置实现类:resources/META-INF/services/ 目录下添加 org.apache.dubbo.rpc.Protocol 文件</span></span><br><span class="line"><span class="attr">customized</span>=<span class="string">com.spi.demo.CustomizedProtocol</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3. 通过配置启用自定义协议实现</span></span><br><span class="line">dubbo.protocol.name=customized   </span><br><span class="line"><span class="comment">// 或者代码配置</span></span><br><span class="line"><span class="type">ProtocolConfig</span> <span class="variable">protocol</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProtocolConfig</span>();</span><br><span class="line">protocol.setName(<span class="string">&quot;cutomized&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="SPI-与-API">SPI 与 API</h2><p>SPI与API区别：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>API是调用，并用于实现目标的类、接口、方法等的描述；</p></li><li class="lvl-2"><p>SPI是扩展和实现，以实现目标的类、接口、方法等的描述；</p></li></ul></blockquote><p>SPI和API的使用场景：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>API （Application Programming Interface）在大多数情况下，都是实现方制定接口并完成对接口的实现，调用方仅仅依赖接口调用，且无权选择不同实现。 从使用人员上来说，API 直接被应用开发人员使用。</p></li><li class="lvl-2"><p>SPI （Service Provider Interface）是调用方来制定接口规范，提供给外部来实现，调用方在调用时则选择自己需要的外部实现。  从使用人员上来说，SPI 被框架扩展人员使用。</p></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> SPI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SPI </tag>
            
            <tag> 服务发现机制 </tag>
            
            <tag> Dubbo SPI </tag>
            
            <tag> ServiceLoader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVCC 的实现机制与事务的关联</title>
      <link href="/2025/10/5f8f419bb4f8425abe2b4e895588d561/"/>
      <url>/2025/10/5f8f419bb4f8425abe2b4e895588d561/</url>
      
        <content type="html"><![CDATA[<p>MVCC（Multi-Version Concurrency Control，多版本并发控制）是一种用于实现数据库并发控制的机制，广泛应用于现代关系型数据库系统（如 PostgreSQL、Oracle、MySQL InnoDB 引擎等）。</p><p>其核心思想是通过维护数据的多个版本，使得读操作和写操作可以在不互相阻塞的情况下并发执行，从而提高数据库系统的并发性能和一致性。</p><h2 id="事务管理">事务管理</h2><p><strong>数据库事务是构成单一逻辑工作单元的操作集合</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BEGIN TRANSACTION  //事务开始</span><br><span class="line">    SQL1</span><br><span class="line">    SQL2</span><br><span class="line">COMMIT/ROLLBACK   //事务提交或回滚</span><br></pre></td></tr></table></figure><p>当有多个用户同时操作数据库时，数据库能够以事务为单位进行并发控制</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看当前隔离级别</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@transaction_isolation</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 设置隔离级别（会话级）</span></span><br><span class="line"><span class="keyword">SET</span> SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看当前事务 ID（需开启事务后）</span></span><br><span class="line"><span class="keyword">SELECT</span> trx_id <span class="keyword">FROM</span> information_schema.innodb_trx </span><br><span class="line"><span class="keyword">WHERE</span> trx_mysql_thread_id <span class="operator">=</span> CONNECTION_ID();</span><br></pre></td></tr></table></figure><h3 id="并发异常">并发异常</h3><p>事务并发可能导致数据异常问题，需要通过隔离级别+MVCC+锁保证。以下为并发导致的一些问题：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>脏写</strong>（锁机制）</p><p>指事务回滚了其他事务对数据项的已提交修改（写写并发）。</p><img src="/imgs/db/image-20210707175746735.png" alt="image-20210707175746735" style="zoom: 33%;" /><p>如图：事务1实际应该回滚到30，而不是10。</p></li><li class="lvl-2"><p><strong>丢失更新</strong>（锁机制）</p><p>事务覆盖了其他事务对数据的已提交修改，导致其他事务提交的数据丢失（写写并发）。</p><img src="/imgs/db/image-20210707180059499.png" alt="image-20210707180059499" style="zoom: 50%;" /><p>如图：事务1和事务2读取A的值都为10，事务2先将A加上10并提交修改。之后事务2将A减少10并提交修改，A的值最后为0，导致事务2对A的修改丢失</p></li><li class="lvl-2"><p><strong>脏读</strong>（读未提交）</p><p>指一个事务读取了另一个事务未提交的数据</p><img src="/imgs/db/image-20210707180243594.png" alt="image-20210707180243594" style="zoom:50%;" /><p>在事务1对A的处理过程中，事务2读取了A的值，但之后事务1回滚，导致事务2读取的A是未提交的脏数据。</p></li><li class="lvl-2"><p><strong>不可重复读</strong>（读已提交）</p><p>指一个事务对同一数据的读取结果前后不一致。</p><img src="/imgs/db/image-20210707180413531.png" alt="image-20210707180413531" style="zoom:50%;" /><p>读取的是事务已经提交的数据，只不过因为数据被其他事务修改过导致前后两次读取的结果不一样</p></li><li class="lvl-2"><p><strong>幻读</strong>（可重复读）</p><p>事务读取某个范围的数据时，因为其他事务的操作导致前后两次读取的结果不一致</p><p><u>幻读和不可重复读的区别在于，不可重复读是针对确定的某一行数据而言，而幻读是针对不确定的多行数据。因而幻读通常出现在带有查询条件的范围查询中，比如下面这种情况:</u></p><img src="/imgs/db/image-20210707184150129.png" alt="image-20210707184150129" style="zoom:50%;" /></li></ul><h3 id="隔离级别">隔离级别</h3><p>事务具有隔离性，理论上来说事务之间的执行不应该相互产生影响，其对数据库的影响应该和它们串行执行时一样。</p><p>然而完全的隔离性会导致系统并发性能很低，降低对资源的利用率，因而实际上对隔离性的要求会有所放宽，这也会一定程度造成对数据库一致性要求降低</p><img src="/imgs/db/1422237-20181122103221352-219869675.png" alt="img" style="zoom: 37%;" /><ul class="lvl-0"><li class="lvl-2"><p><strong>基于锁的控制</strong></p><p>申请锁的请求被发送给锁管理器。锁管理器根据当前数据项是否已经有锁以及申请的和持有的锁是否冲突决定是否为该请求授予锁</p><p>若锁被授予，则申请锁的事务可以继续执行;若被拒绝，则申请锁的事务将进行等待，直到锁被其他事务释放。</p><blockquote><ul class="lvl-3"><li class="lvl-2"><p><strong>乐观锁</strong>: 假定其不会发生冲突，允许并发执行，直到真正发生冲突时才去解决冲突，比如让事务回滚。</p></li><li class="lvl-2"><p><strong>悲观锁</strong>: 假定其必定发生冲突，通过让事务等待(锁)或者中止(时间戳排序)的方式使并行的操作串行执行。</p></li><li class="lvl-2"><p><strong>共享锁</strong>(S 读锁):    事务T对数据A加共享锁，其他事务只能对A加共享锁但不能加排他锁。</p></li><li class="lvl-2"><p><strong>排他锁</strong>(X 写锁):   事务T对数据A加排他锁，其他事务对A既不能加共享锁也不能加排他锁</p></li></ul></blockquote></li><li class="lvl-2"><p><strong>基于MVCC的控制</strong></p><p>快照隔离是多版本并发控制(mvcc)的一种实现方式。</p><p>数据库为每个数据项维护多个版本(快照)，每个事务只对属于自己的私有快照进行更新，在事务真正提交前进行有效性检查，使得事务正常提交更新或者失败回滚。</p><blockquote><p>由于快照隔离导致事务看不到其他事务对数据项的更新，为了避免出现丢失更新问题，可以采用以下两种方案避免：</p><ul class="lvl-3"><li class="lvl-2"><strong>先提交者获胜</strong>:对于执行该检查的事务T，判断是否有其他事务已经将更新写入数据库，是则T回滚，否则T正常提交。</li><li class="lvl-2"><strong>先更新者获胜</strong>:通过锁机制保证第一个获得锁的事务提交其更新，之后试图更新的事务中止。</li></ul><p>事务间的操作通过数据项不同版本的快照相互隔离，到真正要写入数据库时才进行冲突检测。这也是一种乐观并发控制。</p></blockquote></li></ul><h2 id="MVCC-特点与挑战">MVCC 特点与挑战</h2><ul class="lvl-0"><li class="lvl-2"><p><strong>高并发性</strong>：读操作无需加锁，读写不阻塞。</p></li><li class="lvl-2"><p><strong>避免脏读、不可重复读</strong>：通过快照隔离，天然避免这些问题（取决于隔离级别）。</p></li><li class="lvl-2"><p><strong>支持时间点查询</strong>：可以查询历史版本（如 PostgreSQL 的 <code>pg_snapshot</code> 或 Oracle 的 Flashback Query）。</p></li><li class="lvl-2"><p><strong>提升系统吞吐量</strong>：减少锁竞争，提高并发处理能力。</p></li><li class="lvl-2"><p><strong>回滚支持</strong>：若事务回滚，可通过 Undo Log 恢复旧版本。</p></li></ul><p>挑战与代价：</p><blockquote><ol><li class="lvl-3"><p><strong>存储开销</strong>：需要保存多个版本的数据，占用更多磁盘空间。</p></li><li class="lvl-3"><p><strong>垃圾回收</strong>（Vacuum / Purge）：旧版本数据不会立即删除，需后台进程清理（如 PostgreSQL 的 <code>VACUUM</code>，InnoDB 的 <code>Purge</code> 线程）。若清理不及时，可能导致“膨胀”（bloat）问题。</p></li><li class="lvl-3"><p><strong>写放大</strong>：每次更新都生成新版本，写入量增加。</p></li><li class="lvl-3"><p><strong>长事务问题</strong>：长时间运行的事务会阻止旧版本被回收，导致存储膨胀。</p></li><li class="lvl-3"><p><strong>写冲突</strong>：写写操作任然会冲突，需要开发者自己加锁实现（乐观、悲观锁）</p></li></ol></blockquote><h2 id="MVCC-的基本思想">MVCC 的基本思想</h2><p>在传统的锁机制中，读写操作通常需要加锁（读锁、写锁），这会导致读写之间互相阻塞，降低并发性能。</p><p>而 MVCC 通过以下方式解决这个问题：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>写操作不阻塞读操作</strong>：当一个事务修改数据时，不会直接覆盖原数据，而是将旧值写入 <strong>Undo Log</strong>（快照），并生成新版本。</p></li><li class="lvl-2"><p><strong>读操依赖“快照”</strong>：每个事务在开始时会获得一个“一致性视图”，只能看到在它开始之前已经提交的数据版本，而看不到其他事务未提交或在其开始之后提交的更改。</p></li></ul><p>这样，读操作无需加锁，写操作也不会被读操作阻塞，从而实现了<strong>读写不冲突</strong>。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>为了<strong>提高数据库并发性能</strong>，用更好的方式去处理<strong>读-写冲突</strong>，即使有读写冲突时，也能做到不加锁，读写可并发。</p></li><li class="lvl-2"><p>可以解决<strong>脏读</strong>，<strong>幻读</strong>（<strong>Next-Key Lock</strong>），<strong>不可重复读</strong>等事务隔离问题</p></li><li class="lvl-2"><p><strong><mark>不能解决更新丢失问题</mark></strong>（写-写事务并发），第一类更新丢失问题（A事务撤销时，把已经提交的B事务的更新数据覆盖了）、第二类更新丢失问题（A事务覆盖B事务已经提交的数据，造成B事务所做操作丢失），只能通过开发者自行加锁实现</p></li></ul></blockquote><h2 id="MVCC-的基础概念">MVCC 的基础概念</h2><p>1.<strong>redo log 物理日志（数据恢复）</strong>：记录数据页最后提交的物理修改数据（保证持久性）。</p><blockquote><p>数据库以<strong>循环写入</strong>的方式记录修改操作，而非语句级别的逻辑修改记录，它用来恢复提交后的物理数据页，且只能恢复到最后一次提交的位置 （保证事务的持久性、减少磁盘IO、数据库恢复和故障恢复）。</p></blockquote><p><strong>2.undo log 逻辑日志（并发控制）</strong>：记录了事务提交前对旧值的备份（保证原子性）。每行数据修改的记录，可以回滚行记录到某个版本。</p><blockquote><p>Bin log 记录的是逻辑日志，它以追加的方式记录数据库的修改操作，采用二进制格式进行存储（数据恢复、主从复制、数据备份）</p></blockquote><p><strong>3.当前读</strong>：读取的是记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，它会对读取的记录进行加锁（悲观锁）。如：select … lock in share mode (共享锁)， select … for update ; update, insert ,delete (排他锁) 的操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 共享读锁</span><br><span class="line">select...lock <span class="keyword">in</span> share mode </span><br><span class="line"># 悲观锁</span><br><span class="line">select...for <span class="keyword">update</span> 　</span><br><span class="line"></span><br><span class="line"># 以下都属于当前读，读取记录的最新版本。</span><br><span class="line"># 读取之后，还需要保证其他并发事务不能修改当前记录，对读取记录加锁。其中，除了第一条语句，对读取记录加S锁 (共享锁)外，其他的操作，都加的是X锁 (排它锁)</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> ? lock <span class="keyword">in</span> share mode;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> ? <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="keyword">insert into</span> <span class="keyword">table</span> <span class="keyword">values</span> (…);</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">table</span> <span class="keyword">set</span> ? <span class="keyword">where</span> ?;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> ?;</span><br></pre></td></tr></table></figure><p><strong>4.快照读</strong>：不加锁的非阻塞读，select * from t;（隔离级别不是串行级别）</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>MVCC + 悲观锁<br>MVCC解决读写冲突，悲观锁解决写写冲突</p></li><li class="lvl-2"><p>MVCC + 乐观锁<br>MVCC解决读写冲突，乐观锁解决写写冲突</p></li></ul><img src="/imgs/db/1363214-20210220163252994-963029706.png" alt="img" style="zoom:67%;" /></blockquote><h2 id="MVCC-的原理机制">MVCC 的原理机制</h2><p>MySQL InnoDB 中 MVCC 的实现机制：undo log版本链 + readview 快照读</p><h3 id="隐藏字段（每行包含）">隐藏字段（每行包含）</h3><p>InnoDB 为每行数据隐式添加三个系统列（用户不可见）：</p><ul class="lvl-0"><li class="lvl-2"><p><code>DB_TRX_ID</code>：创建该行的事务 ID（6 字节）。</p></li><li class="lvl-2"><p><code>DB_ROLL_PTR</code>（Undo Pointer）：指向 Undo Log 的指针（用于构建历史版本链）。</p></li><li class="lvl-2"><p><code>DB_ROW_ID</code>（隐藏主键）：如果数据表没有主键，InnoDB会自动以DB_ROW_ID产生一个聚簇索引（6byte）</p></li></ul><h3 id="Undo-Log（回滚日志）">Undo Log（回滚日志）</h3><ul class="lvl-0"><li class="lvl-2"><p>每次 UPDATE/DELETE 时，旧版本数据被写入 Undo Log。</p></li><li class="lvl-2"><p>形成 <strong>版本链（Version Chain）</strong>：从最新记录通过 <code>DB_ROLL_PTR</code> 一路回溯到最初版本。</p></li></ul><blockquote><p><strong>insert undo</strong> log：事务在insert时产生的undo log， 只在事务回滚时需要，并且在事务提交后可以被立即丢弃。<br><strong>update undo</strong> log：事务在update或delete时产生的undo log; 不仅在事务回滚时需要，在快照读时也需要。</p></blockquote><h3 id="Read-View（读视图）">Read View（读视图）</h3><p>事务在<strong>首次执行读操作时</strong>（或根据隔离级别在事务开始时）创建 Read View，包含：</p><ul class="lvl-0"><li class="lvl-2"><p><code>m_ids</code>：当前活跃（未提交）的事务 ID 列表。</p></li><li class="lvl-2"><p><code>min_trx_id</code>：<code>m_ids</code> 中最小的事务 ID。</p></li><li class="lvl-2"><p><code>max_trx_id</code>：下一个将要分配的事务 ID（系统当前最大事务 ID + 1）。</p></li><li class="lvl-2"><p><code>creator_trx_id</code>：创建该 Read View 的事务 ID（若为只读事务则为 0）。</p></li></ul><blockquote><p>读视图，可以控制事务能看到哪些版本。读取的是版本链中的数据，而非数据库的实时数据。</p></blockquote><h3 id="可见性判断规则">可见性判断规则</h3><p>对于某条记录的版本（其 <code>DB_TRX_ID = trx_id</code>），当前事务是否可见？通常基于以下规则：</p><table><thead><tr><th>条件</th><th>是否可见</th><th>说明</th></tr></thead><tbody><tr><td><code>trx_id == creator_trx_id</code></td><td>可见</td><td>自己修改的，当然可见</td></tr><tr><td><code>trx_id &lt; min_trx_id</code></td><td>可见</td><td>创建该版本的事务在 Read View 创建前已提交</td></tr><tr><td><code>trx_id &gt;= max_trx_id</code></td><td>不可见</td><td>该版本在 Read View 创建后才创建</td></tr><tr><td><code>trx_id ∈ m_ids</code></td><td>不可见</td><td>创建该版本的事务尚未提交（活跃中）</td></tr><tr><td><code>trx_id ∉ m_ids</code>且<code>min_trx_id ≤ trx_id &lt; max_trx_id</code></td><td>可见</td><td>该事务已提交（不在活跃列表中）</td></tr></tbody></table><blockquote><p>简单总结：<strong>只能看到在自己开始前已提交的数据</strong>。</p></blockquote><p>不同数据库中的 MVCC 实现：</p><table><thead><tr><th>数据库</th><th>MVCC 实现机制</th></tr></thead><tbody><tr><td><strong>PostgreSQL</strong></td><td>每行记录带<code>xmin</code>/<code>xmax</code>；使用 MVCC + Heap 表；依赖<code>VACUUM</code>清理死元组。</td></tr><tr><td><strong>MySQL (InnoDB)</strong></td><td>使用 Undo Log 存储旧版本；Read View 决定可见性；后台 Purge 线程清理。</td></tr><tr><td><strong>Oracle</strong></td><td>使用 Undo Segments；支持 Flashback Query；自动管理版本。</td></tr><tr><td><strong>SQL Server</strong></td><td>默认不启用 MVCC，但可通过“行版本控制隔离级别”（如 RCSI）启用。</td></tr></tbody></table><h2 id="MVCC-与隔离级别">MVCC 与隔离级别</h2><p>MVCC 主要服务于 <strong>隔离性</strong>，同时通过版本机制辅助实现 <strong>一致性</strong> 和 <strong>原子性</strong>（如回滚）。</p><p>MVCC 是实现<strong>快照隔离（Snapshot Isolation）</strong> 和 <strong>可重复读（Repeatable Read）</strong> 等高级隔离级别的基础。</p><ul class="lvl-0"><li class="lvl-2"><p><strong>读已提交（Read Committed）</strong>：每次语句开始时获取新快照。</p></li><li class="lvl-2"><p><strong>可重复读（Repeatable Read）</strong>：事务开始时获取一次快照，整个事务中复用。</p></li><li class="lvl-2"><p><strong>串行化（Serializable）</strong>：某些数据库（如 PostgreSQL）在 MVCC 基础上增加冲突检测，实现真正的串行化。</p></li></ul><blockquote><p>注意：MySQL InnoDB 的“可重复读”实际上提供了快照隔离语义，能避免幻读（在特定条件下）。</p></blockquote><p>MySQL 支持四种隔离级别，但 <strong>只有两种会使用 MVCC</strong>：</p><table><thead><tr><th>隔离级别</th><th>是否使用MVCC</th><th>READ VIEW 创建时机</th><th>特点</th></tr></thead><tbody><tr><td><strong>READ UNCOMMITTED</strong></td><td>否</td><td>—</td><td>直接读最新数据（包括未提交的），<strong>可能脏读</strong></td></tr><tr><td><strong>READ COMMITTED (RC)</strong></td><td>是</td><td><strong>每次 SELECT 语句开始时</strong>创建新 Read View</td><td>可避免脏读，但不可重复读，可能出现幻读</td></tr><tr><td><strong>REPEATABLE READ (RR)</strong></td><td>是</td><td><strong>事务首次 SELECT 时</strong>创建 Read View，并<strong>复用整个事务</strong></td><td>可重复读，InnoDB 下基本避免幻读。<br />InnoDB通过间隙锁（Gap Lock）和Next-Key Lock进一步防止幻读。</td></tr><tr><td><strong>SERIALIZABLE</strong></td><td>否（加锁）</td><td>—</td><td>所有 SELECT 自动转为<code>SELECT ... FOR SHARE</code>，加共享锁，完全串行化</td></tr></tbody></table><blockquote><p><strong>MySQL InnoDB 默认隔离级别是 REPEATABLE READ</strong>，其他数据库（如 Oracle、PostgreSQL 默认为 READ COMMITTED）不同。</p><ul class="lvl-1"><li class="lvl-2"><strong>读已提交（RC）</strong> 和 <strong>可重复读（RR）</strong> 是<strong>主要依赖MVCC</strong>来实现其特性的隔离级别。</li><li class="lvl-2">它们的核心区别在于<strong>快照的生成时机</strong>：<ul class="lvl-3"><li class="lvl-4"><strong>RC</strong>：语句级快照（每次<code>SELECT</code>都新生成）。</li><li class="lvl-4"><strong>RR</strong>：事务级快照（事务开始时生成，用到底）。</li></ul></li><li class="lvl-2"><strong>读未提交</strong> 不用MVCC，它直接读最新数据。</li><li class="lvl-2"><strong>串行化</strong> 主要依赖锁机制，或者使用比MVCC更复杂的算法来保证绝对的一致性。</li></ul></blockquote><h2 id="MVCC-与写写并发">MVCC 与写写并发</h2><p>MVCC不能解决写-写事务并发导致的更新丢失问题，需要借助锁机制（悲观锁或乐观锁）</p><p>在MVCC中写-写并发会导致其中一个失败</p><blockquote><p><strong>1、乐观锁解决写-写并发</strong></p><ul class="lvl-1"><li class="lvl-2"><p>通过增加版本号机制，利用CAS的思想来对比版本号更新。</p></li><li class="lvl-2"><p>如果更新失败报错回滚，或者自旋，新开启事务重新查询当前最新版本号，再重复利用CAS的思想来对比版本号更新。</p></li></ul><p><strong>自旋记得要开启新事务，因为MVCC读视图一旦成功，同一个事务就不会变，读取的数据永远是一样的</strong>。</p><p><strong>2、悲观锁解决写-写并发</strong></p><ul class="lvl-1"><li class="lvl-2"><p>使用select for update悲观锁，其他事务操作阻塞。</p></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> DB </category>
          
          <category> MVCC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MVCC </tag>
            
            <tag> 多版本并发控制 </tag>
            
            <tag> MySQL事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM 解释器和即时编译器的工作机制</title>
      <link href="/2025/10/13da62f295e44a4a8d67168a5fa03904/"/>
      <url>/2025/10/13da62f295e44a4a8d67168a5fa03904/</url>
      
        <content type="html"><![CDATA[<p>JVM（Java Virtual Machine）作为 Java 程序运行的核心，其执行引擎主要包括 <strong>解释器（Interpreter）</strong> 和 <strong>JIT（Just-In-Time）即时编译器</strong>。两者协同工作，兼顾 <strong>启动速度</strong> 与 <strong>运行性能</strong>，是 Java “一次编写，到处运行” 与 “高性能” 并存的关键。</p><h2 id="JVM-解释器">JVM 解释器</h2><p>解释器负责 <strong>逐条读取字节码指令</strong>，并将其 <strong>翻译成对应平台的机器码执行</strong>。它不进行任何优化，直接“边解释边执行”。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>JVM 加载 <code>.class</code> 文件后，得到字节码（bytecode）。</p></li><li class="lvl-2"><p>解释器从方法的字节码开始，<strong>一条一条地解释执行</strong>。</p></li><li class="lvl-2"><p>每条字节码指令（如 <code>iload</code>, <code>invokevirtual</code>, <code>iadd</code>）都会被映射为本地机器指令。</p></li></ul></blockquote><h3 id="核心职责">核心职责</h3><ul class="lvl-0"><li class="lvl-2"><p><strong>读取字节码</strong>：从 <code>.class</code> 文件加载的字节码指令流中逐条读取。</p></li><li class="lvl-2"><p><strong>解释执行</strong>：将每条字节码指令翻译成对应平台的本地机器操作。</p></li><li class="lvl-2"><p><strong>维护运行时状态</strong>：管理 Java 栈帧、局部变量表、操作数栈、程序计数器等。</p></li></ul><p>在Java的编译体系中，一个Java的源代码文件变成计算机可执行的机器指令的过程中，需要经过两段编译</p><ul class="lvl-0"><li class="lvl-2"><p>第一段：.java文件转换成.class文件（Jvm编译器javac）</p></li><li class="lvl-2"><p>第二段：.class转换成机器指令的过程（jvm解释器）</p></li></ul><p>在第二编译阶段，JVM 通过解释字节码将其翻译成对应的机器指令，逐条读入、解释翻译。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><em><strong>动态编译</strong></em>（dynamic compilation）指的是“在运行时进行编译”，与之相对的是事前编译，简称AOT，也叫<em>静态编译</em>。</p></li><li class="lvl-2"><p><strong><em>JIT</em>即时编译</strong>（just-in-time compilation） 当某段代码即将第一次被执行时进行编译，因而叫“即时编译”。</p></li><li class="lvl-2"><p><em><strong>自适应动态编译</strong></em>（adaptive dynamic compilation）也是一种动态编译，但它通常执行的时机比JIT编译迟，先让程序“以某种式”先运行起来，收集一些信息之后再做动态编译。这样的编译可以更加优化。</p></li></ul></blockquote><h3 id="工作原理">工作原理</h3><p>HotSpot JVM 的解释器主要由 <strong>模板解释器（Template Interpreter）</strong> 实现</p><blockquote><p>为每条字节码指令（如 <code>iload</code>, <code>invokevirtual</code>, <code>iadd</code>）预先生成一段<strong>本地机器码模板</strong>。运行时，解释器通过查表（dispatch table）跳转到对应模板执行。</p><p>相比传统的“switch-case 解释器”，性能更高（减少分支预测失败）。</p></blockquote><p>执行流程示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的字节码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iload_1   <span class="comment">// 将局部变量1（a）压入操作数栈</span></span><br><span class="line">iload_2   <span class="comment">// 将局部变量2（b）压入操作数栈</span></span><br><span class="line">iadd      <span class="comment">// 弹出两个int，相加，结果压栈</span></span><br><span class="line">ireturn   <span class="comment">// 返回栈顶值</span></span><br></pre></td></tr></table></figure><blockquote><p>解释器执行过程：</p><ol><li class="lvl-3">PC（程序计数器）指向 <code>iload_1</code></li><li class="lvl-3">查找 <code>iload_1</code> 对应的机器码模板，执行（将 a 压栈）</li><li class="lvl-3">PC 增加，指向下一条 <code>iload_2</code>，重复…</li><li class="lvl-3">直到 <code>ireturn</code>，方法返回。</li></ol></blockquote><p>整个过程<strong>无编译</strong>，纯解释执行。</p><h2 id="JIT-即时编译器">JIT 即时编译器</h2><p>JIT 编译器在程序 <strong>运行时</strong> 将 <strong>热点代码（Hot Spot）</strong> 编译为 <strong>本地机器码</strong>，并缓存起来，后续直接执行机器码，大幅提升性能。</p><blockquote><ol><li class="lvl-3"><p><strong>监控执行频率</strong>：JVM 内置计数器，统计方法或代码块的调用次数。</p></li><li class="lvl-3"><p><strong>识别热点代码</strong>：当某段代码执行次数超过阈值（如 10,000 次），被标记为“热点”。</p></li><li class="lvl-3"><p><strong>触发 JIT 编译</strong>：JIT 编译器将字节码编译为高度优化的本地机器码。</p></li><li class="lvl-3"><p><strong>替换执行入口</strong>：后续调用直接跳转到编译后的机器码，不再经过解释器。</p></li></ol></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-XX:+PrintCompilation        <span class="comment"># 打印 JIT 编译日志</span></span><br><span class="line">-XX:+UnlockDiagnosticVMOptions</span><br><span class="line">-XX:+PrintInlining           <span class="comment"># 打印内联决策</span></span><br><span class="line">-XX:+PrintAssembly           <span class="comment"># 打印生成的汇编代码（需 hsdis）</span></span><br><span class="line">-XX:+TraceClassLoading       <span class="comment"># 跟踪类加载</span></span><br></pre></td></tr></table></figure><p><strong>JIT 的核心优化技术</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>方法内联（Method Inlining）</strong>：消除方法调用开销。</p></li><li class="lvl-2"><p><strong>逃逸分析（Escape Analysis）</strong>：判断对象是否逃逸出方法，决定是否栈上分配。</p></li><li class="lvl-2"><p><strong>锁消除（Lock Elimination）</strong>：对不会被多线程访问的对象，去除同步。</p></li><li class="lvl-2"><p><strong>循环展开（Loop Unrolling）</strong>：减少循环控制开销。</p></li><li class="lvl-2"><p><strong>死代码消除（Dead Code Elimination）</strong>：移除无用代码。</p></li><li class="lvl-2"><p><strong>分支预测优化</strong>：基于运行时数据优化 if/else 路径。</p></li></ul></blockquote><table><thead><tr><th>优化类别</th><th>典型技术</th><th>目标</th></tr></thead><tbody><tr><td>调用优化</td><td>方法内联、去虚拟化</td><td>消除调用开销</td></tr><tr><td>内存优化</td><td>逃逸分析、栈分配、标量替换</td><td>减少 GC、提升缓存</td></tr><tr><td>同步优化</td><td>锁消除</td><td>提升并发性能</td></tr><tr><td>控制流优化</td><td>分支预测、死代码消除</td><td>精简执行路径</td></tr><tr><td>计算优化</td><td>常量折叠、循环展开</td><td>减少运行时计算</td></tr><tr><td>数据流优化</td><td>循环外提、寄存器分配</td><td>提升 CPU 利用率</td></tr></tbody></table><h3 id="热点检测">热点检测</h3><p><strong>热点检测（Hot Spot Detection）</strong> 是 JIT编译器决定“哪些代码值得优化”的核心机制。JVM 不会盲目编译所有代码，而是通过运行时监控，识别出<strong>执行频率高</strong>或<strong>占用 CPU 时间长</strong>的“热点代码”，然后交由 JIT 编译器进行深度优化。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>避免过度编译</strong>：只优化真正影响性能的代码。</p></li><li class="lvl-2"><p><strong>平衡启动速度与运行性能</strong>：冷代码用解释器快速执行，热代码用 JIT 提升效率。</p></li><li class="lvl-2"><p><strong>动态适应程序行为</strong>：根据实际运行负载调整优化策略。</p></li></ul></blockquote><p>目前主要的热点代码识别方式是热点探测（Hot Spot Detection），有以下两种：</p><ol><li class="lvl-3"><p>基于<strong>采样方式</strong>探测</p><p><strong><u>周期性检测各个线程的栈顶</u></strong>，发现某个方法经常出在栈顶，就认为是热点方法。</p><p>好处是实现简单，缺点是无法精确确认一个方法的热度。容易受线程阻塞或别的原因干扰热点探测。</p></li><li class="lvl-3"><p>基于<strong>计数器</strong>热点探测</p><p>采用这种方法的虚拟机会为每个方法、代码块建立计数器<u>，<strong>统计方法的执行次数</strong></u>，某个方法超过阀值就认为是热点方法，触发JIT编译。</p></li></ol><p>在HotSpot虚拟机中使用的是—基于计数器的热点探测方法，因此它为每个方法准备了两个计数器：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>方法调用计数器</strong>：就是记录一个方法被调用次数的计数器，当方法调用次数超过阈值，触发 JIT 编译。</p><p>该计数器具有 <strong>热度衰减（Counter Decay）</strong> 机制： 如果方法长时间未被调用，计数器会周期性衰减（防止“历史热点”长期占用编译资源）。</p></li><li class="lvl-2"><p><strong>回边计数器</strong>：是记录方法中的for或者while的运行次数的计数器。识别<strong>循环密集型</strong>的热点代码。</p><p>回边计数超过阈值，触发 <strong>OSR</strong></p></li></ul></blockquote><h3 id="方法内联">方法内联</h3><p>消除方法调用开销（栈帧创建、参数传递、返回值处理），并为后续优化（如常量传播、死代码消除）创造条件。</p><blockquote><p>将被调用方法的字节码直接“复制”到调用处。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123; <span class="keyword">return</span> a + b; &#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> add(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 内联后直接变成 result = 1 + 2;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>小方法（如 getter/setter）几乎总是内联。</p></li><li class="lvl-2"><p>虚方法（virtual）若运行时只有一种实现（monomorphic），也可内联。</p></li><li class="lvl-2"><p>支持多态内联（bimorphic/inline caching）：对 2 种类型做分支预测。</p></li></ul><h3 id="逃逸分析">逃逸分析</h3><p>分析对象的作用域，判断其是否“逃逸”出当前方法或线程，从而决定：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>是否可以在<strong>栈上分配</strong>（而非堆）</p></li><li class="lvl-2"><p>是否可以<strong>标量替换</strong>（拆解对象为局部变量）</p></li><li class="lvl-2"><p>是否可以<strong>消除同步锁</strong></p></li></ul></blockquote><p>优化的目的就是<strong>减少内存堆分配压力</strong>，可避免 GC 压力，提升性能。所以对象和数组并不是都在堆上分配内存的。</p><p>逃逸分析是Java虚拟机中比较前沿的优化技术。一种可以有效<u>减少程序中同步负载和堆内存分配压力</u>的跨函数全局数据流分析算法。</p><p>通过逃逸分析，Java Hotspot编译器能够分析出一个新的对象的引用的使用范围从而决定是否要将这个对象分配到堆上。</p><table><thead><tr><th>逃逸级别</th><th>含义</th><th>是否优化</th></tr></thead><tbody><tr><td><strong>NoEscape</strong></td><td>对象仅在方法内使用，未被外部引用</td><td>栈分配、标量替换</td></tr><tr><td><strong>ArgEscape</strong></td><td>作为参数传递给其他方法，但未被长期持有</td><td>可能部分优化</td></tr><tr><td><strong>GlobalEscape</strong></td><td>被全局变量引用或返回</td><td>无法优化，必须堆分配</td></tr></tbody></table><p>逃逸分析的基本行为就是<strong>分析对象动态作用域</strong>：</p><ul class="lvl-0"><li class="lvl-2"><p>当一个对象在方法中被定义后，它可能被外部方法所引用，例如作为调用参数传递到其他地方中，称为<strong>方法逃逸</strong>。</p></li><li class="lvl-2"><p>赋值给类变量或可以在其他线程中访问的实例变量，称为<strong>线程逃逸</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> StringBuffer <span class="title function_">craeteStringBuffer</span><span class="params">(String s1, String s2)</span> &#123;</span><br><span class="line">     <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">     sb.append(s1);</span><br><span class="line">     sb.append(s2);</span><br><span class="line">     <span class="keyword">return</span> sb; <span class="comment">// 直接返回对象，有可能被其他方法所改变，作用域就不只是在该方法内部了（方法逃逸）</span></span><br><span class="line">     <span class="keyword">return</span> sb.toString();  <span class="comment">// 不直接返回 StringBuffer对象，那么将不会逃逸出方法。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>通过JVM参数可指定是否开启逃逸分析，</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-XX:+DoEscapeAnalysis <span class="comment"># 表示开启逃逸分析</span></span><br><span class="line">-XX:-DoEscapeAnalysis <span class="comment"># 关闭逃避分析</span></span><br></pre></td></tr></table></figure><p>使用逃逸分析，编译器可以对代码做如下优化：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>同步省略</strong>。如果一个对象被发现只能被一个线程被访问到，那么对于这个对象的操作可以不考虑同步。</p></li><li class="lvl-2"><p><strong>将堆分配转化为栈分配</strong>。如果一个对象在子程序中被分配，要使指向该对象的指针永远不会逃逸，对象可能是栈分配的。</p></li><li class="lvl-2"><p><strong>分离对象或标量替换</strong>。有的对象可能不需要作为一个连续的内存结构存在也可以被访问到，那么对象的部分（或全部）可以不存储在内存，而是存储在CPU寄存器中。</p></li></ul></blockquote><h3 id="锁消除">锁消除</h3><p>动态编译同步块的时候，JIT编译器可以借助逃逸分析来判断同步块所使用的锁对象是否只能够被一个线程访问。</p><blockquote><p>结合逃逸分析：如果一个对象<strong>不会被多线程访问</strong>（如局部对象），则其上的 <code>synchronized</code> 锁可安全移除。</p><p>移除不必要的同步锁，提升并发性能。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">hollis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">synchronized</span>(hollis) &#123;</span><br><span class="line">        System.out.println(hollis);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 代码中对hollis这个对象进行加锁，但是hollis对象的生命周期只在f()方法中，并不会被其他线程所访问到，所以在JIT编译阶段就会被优化掉。优化成：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">hollis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    System.out.println(hollis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以，在使用synchronized的时候，如果JIT经过逃逸分析之后发现并无线程安全问题的话，就会做锁消除。</p><h3 id="循环优化">循环优化</h3><ul class="lvl-0"><li class="lvl-2"><p>循环展开</p><p>将循环体复制多次，减少循环控制（如 i++、条件判断）开销。</p><p>例如：<code>for (int i=0; i&lt;4; i++)</code> → 展开为 4 次独立语句。</p></li><li class="lvl-2"><p>循环不变量外提</p><p>将循环体内<strong>不随循环变化的计算</strong>移到循环外。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123; ... &#125;</span><br><span class="line"><span class="comment">// 优化为：</span></span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> list.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123; ... &#125;</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>死循环检测与消除</p><p>若循环无副作用且结果未被使用，可能被整个删除。</p></li></ul><h3 id="死代码消除">死代码消除</h3><p>移除永远不会执行或结果未被使用的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">    expensiveOperation(); <span class="comment">// 被完全删除</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 如果 x 后续未被使用，整行可能被删除</span></span><br></pre></td></tr></table></figure><blockquote><ul class="lvl-1"><li class="lvl-2"><p>常量折叠后出现不可达分支</p></li><li class="lvl-2"><p>变量未被读取（无副作用）</p></li></ul></blockquote><h3 id="常量传播与折叠">常量传播与折叠</h3><p>在编译期计算常量表达式，减少运行时计算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a + b; <span class="comment">// → JIT 直接替换为 int c = 5;</span></span><br></pre></td></tr></table></figure><blockquote><p>原本是变量的值变成常量。</p></blockquote><h3 id="分支预测与条件优化">分支预测与条件优化</h3><p>基于运行时数据，优化 if/else 或 switch 的执行路径。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>记录分支跳转频率（如 99% 走 if 分支）。</p></li><li class="lvl-2"><p>将<strong>高概率路径</strong>放在代码前面（CPU 分支预测更准）。</p></li><li class="lvl-2"><p>对低概率路径（如异常处理）做“冷代码”处理，甚至不编译。</p></li></ul></blockquote><h3 id="栈上分配">栈上分配</h3><p>在某个方法中定义一个对象，但是并没有在方法外部引用他。这个对象并不会逃逸到方法外部。经过JIT的逃逸分析之后，就可以对其内存分配进行优化，在栈上分配。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">    alloc(); <span class="comment">// 该对象没有逃逸出方法， User对象在栈上分配</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">alloc</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul class="lvl-1"><li class="lvl-2"><p>堆内存中分配的对象减少</p></li><li class="lvl-2"><p>GC次数减少</p></li></ul></blockquote><h3 id="标量替换">标量替换</h3><p>将对象“打散”为若干基本类型变量，避免对象分配。</p><blockquote><p>标量是指一个无法再分解成更小的数据的数据。Java中的原始数据类型就是标量。相对的，那些还可以分解的数据叫做聚合量（Aggregate），Java中的对象就是聚合量，因为他可以分解成其他聚合量和标量。</p><p>在JIT阶段，如果经过逃逸分析，发现一个对象不会被外界访问的话，那么经过JIT优化，就会把这个对象拆解成若干个其中包含的若干个成员变量来代替。这个过程就是标量替换。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// point对象并没有逃逸出alloc方法，并且point对象是可以拆解成标量的。</span></span><br><span class="line"><span class="comment">// 若 p 不逃逸，JIT 可能不创建 Point 对象，而是直接用两个局部变量 x 和 y。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">alloc</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="type">Point</span> <span class="variable">point</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Point</span>（<span class="number">1</span>,<span class="number">2</span>）;</span><br><span class="line">   System.out.println(<span class="string">&quot;point.x=&quot;</span>+point.x+<span class="string">&quot;; point.y=&quot;</span>+point.y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul class="lvl-1"><li class="lvl-2"><p>减少堆分配</p></li><li class="lvl-2"><p>提升缓存局部性</p></li><li class="lvl-2"><p>便于寄存器分配</p></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM解释器 </tag>
            
            <tag> JIT </tag>
            
            <tag> 即时编译器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM 垃圾收集的原理与过程分析</title>
      <link href="/2025/10/099db28b68ff4caeaaaaad53129a6b57/"/>
      <url>/2025/10/099db28b68ff4caeaaaaad53129a6b57/</url>
      
        <content type="html"><![CDATA[<p>JVM（Java Virtual Machine）垃圾收集是 Java 内存自动管理的核心机制，其目标是<strong>自动回收不再使用的对象所占用的堆内存</strong>，避免内存泄漏和手动管理内存的复杂性。</p><h2 id="JVM-内存模型">JVM 内存模型</h2><p>JVM主要分为5个核心区域（6个子区域）：</p><blockquote><ol><li class="lvl-3"><p><strong>程序计数器</strong>（线程私有）</p></li><li class="lvl-3"><p><strong>Java虚拟机栈</strong>（线程私有）</p></li><li class="lvl-3"><p><strong>本地方法栈</strong>（线程私有）</p></li><li class="lvl-3"><p><strong>Java堆</strong>（线程共享，大量对象实例的创建区域，JVM 重点关注的主战场）</p></li><li class="lvl-3"><p><strong>方法区</strong>（线程共享，存储类信息、常量、静态变量等，可回收无用类）</p></li><li class="lvl-3"><p>运行时常量池 (属于“方法区”的一部分)</p></li></ol></blockquote><p>JVM 垃圾收集主要针对 Java 堆区的内存管理。对于线程私有区域，随线程结束而自动释放，只会占用栈空间。</p><table><thead><tr><th>区域</th><th>线程共享</th><th>作用</th><th>异常</th><th>备注</th></tr></thead><tbody><tr><td>程序计数器</td><td>线程私有</td><td><strong>记录当前线程执行的字节码行号指示器</strong>。<br />确保线程切换能恢复到正确位置</td><td>Java虚拟机规范中唯一一个没有规定OutOfMemoryError(内存不足错误)的区域。</td><td>它保存的是程序将要执行的指令地址。<br />JVM是多线程的，每一个线程都有一个独立的程序计数器（为了线程切换后能恢复到正确的执行位置），是一块较小的内存空间，它与线程共存亡。<br />JVM中的程序计数器指向的是正在执行的字节码地址，可以看作是当前线程所执行的字节码的行号指示器。<br />(<strong>如果线程执行的是非native方法，则程序计数器中保存的是当前需要执行的指令的地址；如果线程执行的是native方法，则程序计数器中的值是undefined</strong>)</td></tr><tr><td>Java虚拟机栈</td><td>线程私有</td><td>Java方法执行的内存模型<br />存放<strong>局部变量</strong>表、操作<strong>数据栈、动态链接、方法出口</strong>等信息。</td><td>栈深大于允许的最大深度，抛出StackOverflowError(栈溢出错误)。  <br />内存不足时，抛出OutOfMemoryError(内存不足错误)。</td><td>常说的“栈”说的就是Java虚拟机栈，或者是Java虚拟机栈中的局部变量表。<br />一个线程一个栈，并且生命周期与线程相同。它的内部由一个个栈帧构成，一个栈帧代表一个调用的方法，线程在每次方法调用执行时创建一个栈帧然后压栈，栈帧用于存放局部变量、操作数、动态链接、方法出口等信息。方法执行完成后对应的栈帧出栈。<br />**实例方法中第一个位置存放的是它所属对象的引用，而静态方法则没有对象的引用。**另外静态方法里所操作的静态变量存放在方法区。<br />局部变量没有默认初始值，使用必须赋值</td></tr><tr><td>本地方法栈</td><td>线程私有</td><td>和Java虚拟机栈类似，不过是为JVM用到的Native方法服务。</td><td>同上</td><td>通过java本地接口JNI（Java Native Interface）来调用其它语言编写（如C）的程序<br />本地方法栈就是虚拟机线程调用Native方法执行时的栈</td></tr><tr><td>Java堆</td><td>线程共享</td><td>存放实例化数据。</td><td>内存不足时，抛出OutOfMemoryError(内存不足错误)。</td><td>通过-Xmx和-Xms控制大小。 GC的主要管理对象。<br />放置所有对象实例以及数组<br />不过在JIT（Just-in-time）情况下有些时候也有可能在栈上分配对象实例<br />GC基本都是采用的分代收集算法，所以堆内存结构还分块成：新生代和老年代；Eden空间、From Survivor、To Survivor等</td></tr><tr><td>方法区</td><td>线程共享</td><td>存放类信息（版本、字段、方法、接口等）、常量、静态变量、即时编译后的代码等数据。</td><td>内存不足时，抛出OutOfMemoryError(内存不足错误)。</td><td>每个类的全限定名<br/>每个类的直接超类的全限定名(可约束类型转换)<br/>该类是类还是接口<br/>该类型的访问修饰符<br/>直接超接口的全限定名的有序列表<br /><strong>已装载类的详细信息</strong><br /><strong>运行时常量池</strong></td></tr><tr><td>运行时常量池</td><td>线程共享</td><td>存放编译期生成的各种字面量和符号引用。</td><td>内存不足时，抛出OutOfMemoryError(内存不足错误)。</td><td>属于“方法区”的一部分。</td></tr><tr><td>直接内存</td><td>–</td><td>如NIO可以使用Native函数库直接分配堆外内存，该内存受计算机内存限制。</td><td>内存不足时，抛出OutOfMemoryError(内存不足错误)。</td><td>不是JVM运行时数据区的一部分，也不是JVM虚拟机规范中定义的内存区域。但这部分内存也被频繁的使用。所以放到一起。</td></tr></tbody></table><p><img src="/imgs/java/watermarkpic_center.png" alt="img"></p><h3 id="Java虚拟机栈">Java虚拟机栈</h3><p>一个线程一个栈，并且生命周期与线程相同。它的内部由一个个栈帧构成，一个栈帧代表一个调用的方法，线程在每次方法调用执行时创建一个栈帧然后压栈，栈帧用于存放局部变量、操作数、动态链接、方法出口等信息。方法执行完成后对应的栈帧出栈。</p><blockquote><p>一个线程中的方法可能还会调用其他方法，这样就会构成方法调用链，而且这个链可能会很长，而且每个线程都有方法处于执行状态。对于执行引擎来说，只有活动线程栈顶的栈帧才是有效的，称为当前栈帧（Current Stack Frame），这个栈帧关联的方法称为当前方法（Current Method）。</p><p>每一个栈帧的结构都包括了局部变量表、操作数栈、方法返回地址和一些额外的附加信息。某个方法的栈帧需要多大的局部变量表、多深的操作数栈都在编译程序时完全确定了，并且写入到类方法表的相应属性中了，因此某个方法的栈帧需要分配多少内存，不会受到程序运行期变量数据变化的影响，而仅仅取决于具体虚拟机的实现。</p></blockquote><h4 id="局部变量">局部变量</h4><ul class="lvl-0"><li class="lvl-2"><p>存储方法的<strong>参数</strong>和<strong>局部变量</strong>（包括基本类型和对象引用）。</p></li><li class="lvl-2"><p>是方法内部数据的主要存储区域。</p></li></ul><p><strong>特点</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>大小在编译期确定</strong>：由方法的字节码中的 <code>max_locals</code> 决定。</p></li><li class="lvl-2"><p>以“槽（Slot）”为单位：</p><ul class="lvl-3"><li class="lvl-4">每个 Slot 可存放一个 <code>boolean</code>、<code>byte</code>、<code>char</code>、<code>short</code>、<code>int</code>、<code>float</code>、<strong>引用类型</strong>（reference）。</li><li class="lvl-4"><code>long</code> 和 <code>double</code> 占用 <strong>2 个连续 Slot</strong>（称为“宽类型”）。</li></ul></li><li class="lvl-2"><p>索引从 0 开始：</p><ul class="lvl-3"><li class="lvl-4">对于实例方法：<ul class="lvl-5"><li class="lvl-6"><code>Slot[0]</code> 存放隐式参数 <code>this</code>（当前对象引用）；</li><li class="lvl-6"><code>Slot[1]</code> 开始存放方法参数；</li><li class="lvl-6">之后是局部变量。</li></ul></li><li class="lvl-4">对于静态方法：<code>Slot[0]</code> 直接存放第一个参数。</li></ul></li></ul></blockquote><p><strong>示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a + b;</span><br><span class="line">    <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;result&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的局部变量表（假设无优化）：</p><table><thead><tr><th>SLOT</th><th>内容</th></tr></thead><tbody><tr><td>0</td><td>this</td></tr><tr><td>1</td><td>a (int)</td></tr><tr><td>2</td><td>b (int)</td></tr><tr><td>3</td><td>c (int)</td></tr><tr><td>4</td><td>msg (引用)</td></tr></tbody></table><blockquote><p><strong>注意</strong>：局部变量表中的“引用”指向堆中的对象，<strong>对象本身不在栈上</strong>。</p></blockquote><h4 id="操作数栈">操作数栈</h4><ul class="lvl-0"><li class="lvl-2"><p>作为 JVM <strong>执行字节码指令的工作台</strong>。</p></li><li class="lvl-2"><p>字节码指令（如 <code>iadd</code>, <code>invokevirtual</code>）从操作数栈中<strong>弹出操作数</strong>，计算后再<strong>压入结果</strong>。</p></li></ul><blockquote><p><strong>特点</strong>：</p><ul class="lvl-1"><li class="lvl-2"><strong>后进先出（LIFO）</strong> 的栈结构。</li><li class="lvl-2"><strong>大小在编译期确定</strong>：由 <code>max_stack</code> 字段指定。</li><li class="lvl-2"><strong>不直接命名变量</strong>，而是通过“压栈-弹栈”传递数据。</li><li class="lvl-2">与局部变量表配合完成计算。</li></ul><p><strong>示例</strong>：<code>int c = a + b;</code>   对应的字节码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iload_1    <span class="comment">// 将局部变量表 Slot[1] (a) 压入操作数栈</span></span><br><span class="line">iload_2    <span class="comment">// 将 Slot[2] (b) 压入栈</span></span><br><span class="line">iadd       <span class="comment">// 弹出两个 int，相加，将结果压入栈</span></span><br><span class="line">istore_3   <span class="comment">// 弹出结果，存入 Slot[3] (c)</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="动态链接">动态链接</h4><ul class="lvl-0"><li class="lvl-2"><p>支持方法调用时的<strong>符号引用解析</strong>。</p></li><li class="lvl-2"><p>每个栈帧都包含一个指向<strong>运行时常量池（Runtime Constant Pool）</strong> 中该方法引用的指针。</p></li></ul><blockquote><p><strong>作用</strong>：</p><ul class="lvl-1"><li class="lvl-2">在方法执行过程中，若需调用其他方法（如 <code>invokevirtual</code>），JVM 通过动态链接找到目标方法的<strong>实际入口地址</strong>。</li><li class="lvl-2">支持<strong>多态（Polymorphism）</strong>：例如，<code>obj.toString()</code> 在运行时根据 <code>obj</code> 的实际类型决定调用哪个 <code>toString()</code>。</li></ul><p><strong>实现机制</strong>：</p><ul class="lvl-1"><li class="lvl-2"><p>字节码中的方法调用指令（如 <code>invokevirtual</code>）使用的是<strong>符号引用</strong>（类名、方法名、描述符）。</p></li><li class="lvl-2"><p>第一次调用时，JVM 将符号引用<strong>解析（Resolve）</strong> 为直接引用（内存地址），并可能进行<strong>内联缓存（Inline Caching）</strong> 优化。</p></li></ul></blockquote><h4 id="方法出口">方法出口</h4><p>保存<strong>方法正常或异常返回后，下一条应执行的字节码指令地址</strong>。也称为“方法出口信息”，方法返回地址（Method Return Address）。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>正常返回（Normal Return）：</p><ul class="lvl-3"><li class="lvl-4">执行到方法末尾或遇到 <code>return</code> 指令。</li><li class="lvl-4">JVM 从栈帧中取出返回地址，跳转到调用者方法的下一条指令。</li></ul></li><li class="lvl-2"><p>异常返回（Abrupt Return）：</p><ul class="lvl-3"><li class="lvl-4">方法内抛出异常且未被捕获。</li><li class="lvl-4">JVM 通过异常表（Exception Table）查找处理代码，<strong>不依赖返回地址</strong>。</li></ul></li></ul></blockquote><img src="/imgs/java/image-20251010201659201.png" alt="image-20251010201659201" style="zoom:75%;" /><h3 id="Java堆内存结构">Java堆内存结构</h3><p>Java 堆（Heap）是 JVM 中<strong>最大的一块内存区域</strong>，也是<strong>所有线程共享</strong>的运行时数据区，<strong>几乎所有的对象实例和数组都在堆上分配</strong>。</p><p>堆是垃圾回收（GC）的主要战场，其内部结构在不同 JVM 实现和不同垃圾收集器下略有差异，但核心思想一致：<strong>分代设计 + 区域划分</strong>。</p><img src="/imgs/java/image-20251010203311223.png" alt="image-20251010203311223" style="zoom:27%;" /><h4 id="新生代（Young）">新生代（Young）</h4><ul class="lvl-0"><li class="lvl-2"><p>存放<strong>新创建的对象</strong>。</p></li><li class="lvl-2"><p>大多数对象“朝生夕死”，在此区域经历多次 GC 后仍存活的对象会被晋升到老年代。</p></li></ul><blockquote><ol><li class="lvl-3"><p><strong>Eden 区</strong>：对象<strong>首次分配</strong>的地方。绝大多数新对象在此创建。</p></li><li class="lvl-3"><p><strong>Survivor 区（S0 和 S1）</strong>：两个大小相等的区域，<strong>始终只有一个在使用</strong>（From/To）。用于存放 Young GC 后存活的对象。</p></li></ol><p>其中 Eden : Survivor0 : Survivor1 = <strong>8 : 1 : 1</strong>，通过参数 <code>-XX:SurvivorRatio=8</code> 控制（表示 Eden 与单个 Survivor 的比值）</p><p>举例：若新生代总大小为 1GB，则 Eden ≈ 800MB，S0 = S1 ≈ 100MB。</p></blockquote><p><strong>对象分配流程</strong>：</p><blockquote><ol><li class="lvl-3"><p>新对象优先在 <strong>Eden</strong> 分配；</p></li><li class="lvl-3"><p>Eden 空间不足 → 触发 <strong>Minor GC（Young GC）</strong>；</p></li><li class="lvl-3"><p>GC 过程：</p><ol><li class="lvl-6">扫描 Eden + From Survivor（如 S0）；</li><li class="lvl-6">将存活对象复制到 To Survivor（如 S1）；</li><li class="lvl-6">清空 Eden 和 From Survivor；</li><li class="lvl-6">S0 与 S1 角色互换（下次 GC 时 S1 为 From，S0 为 To）。</li></ol></li></ol><p>使用 <strong>复制算法（Copying）</strong>，避免内存碎片，效率高。</p></blockquote><h4 id="老年代（Old）">老年代（Old）</h4><ul class="lvl-0"><li class="lvl-2"><p>存放<strong>长期存活的对象</strong>和<strong>大对象</strong>（可配置）。</p></li><li class="lvl-2"><p>对象从新生代晋升而来，或直接分配（如大对象）。</p></li><li class="lvl-2"><p>老年代 GC（Major GC / Full GC）通常<strong>停顿时间长</strong>，应尽量避免。</p></li></ul><p><strong>对象晋升条件</strong>：</p><blockquote><ol><li class="lvl-3"><p><strong>年龄阈值</strong>：对象在 Survivor 中经历 <code>MaxTenuringThreshold</code> 次 GC 后仍存活（默认 15，<code>-XX:MaxTenuringThreshold=15</code>）；</p></li><li class="lvl-3"><p><strong>动态年龄判定</strong>：若 Survivor 中相同年龄的对象总和 &gt; Survivor 空间一半，则大于等于该年龄的对象直接晋升；</p></li><li class="lvl-3"><p><strong>Survivor 空间不足</strong>：存活对象无法全部放入 To Survivor，多余对象直接进入老年代；</p></li><li class="lvl-3"><p><strong>大对象直接分配</strong>：通过 <code>-XX:PretenureSizeThreshold=N</code>（单位字节），超过阈值的对象直接进入老年代（避免在 Survivor 间复制）。</p></li></ol></blockquote><p><strong>回收算法</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>标记-清除（Mark-Sweep）</strong>：如 CMS；</p></li><li class="lvl-2"><p><strong>标记-整理（Mark-Compact）</strong>：如 Serial Old、Parallel Old；</p></li><li class="lvl-2"><p><strong>分区回收</strong>：如 G1（逻辑上属于老年代 Region）。</p></li></ul></blockquote><h4 id="特殊区域">特殊区域</h4><p>在 <strong>G1 垃圾收集器</strong> 中，堆被划分为多个 <strong>固定大小的 Region（默认 1~32MB）</strong>，不再显式区分 Eden/Survivor/Old，而是逻辑分代：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>Humongous 对象</strong>：大小 ≥ Region 一半的对象。</p></li><li class="lvl-2"><p>直接分配在 <strong>连续的 Humongous Region</strong> 中。</p></li><li class="lvl-2"><p>回收效率低，应尽量避免频繁创建大对象（如大数组、大字符串）。</p></li></ul></blockquote><h3 id="Java堆内存分配">Java堆内存分配</h3><p>为对象分配空间的任务等同于把一块确定大小的内存从Java堆中划分出来。</p><p><strong>对象在堆内分配内存的两种方法：</strong></p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>指针碰撞</strong> (Serial、ParNew等带压缩的收集器)</p><p>假设Java堆中内存是绝对规整的，所有用过的内存都放在一边，空闲的内存放在另一边，中间放着一个指针作为分界点的指示器，那所分配内存就仅仅是把那个指针向空闲空间那边挪动一段与对象大小相等的距离，这种分配方式称为“指针碰撞”（Bump the Pointer）</p></li><li class="lvl-2"><p><strong>空闲列表</strong> (CMS这种基于Mark-Sweep算法的收集器)</p><p>如果Java堆中的内存并不是规整的，已使用的内存和空闲的内存相互交错，那就没有办法简单地进行指针碰撞了，虚拟机就必须维护一个列表，记录上哪些内存块是可用的，在分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的记录，这种分配方式称为“空闲列表”（Free List）。</p></li></ul></blockquote><p>选择哪种分配方式由Java堆是否规整决定，而Java堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定。因此，在使用Serial、ParNew等带Compact过程的收集器时，系统采用的分配算法是指针碰撞，而使用CMS这种基于Mark-Sweep算法的收集器时，通常采用空闲列表。</p><p><strong>堆内存分配的优化</strong>：</p><p>为提升多线程分配效率，JVM 引入 <strong>TLAB</strong>（Thread Local Allocation Buffer）：</p><blockquote><ol><li class="lvl-3"><p>每个线程在 Eden 中预先分配一小块私有缓冲区（TLAB）；</p></li><li class="lvl-3"><p>线程创建对象时，<strong>优先在 TLAB 中分配</strong>，无需加锁；</p></li><li class="lvl-3"><p>TLAB 用尽时，才同步分配新的 TLAB 或直接在 Eden 公共区域分配。</p></li></ol><p>通过 <code>-XX:+UseTLAB</code> 启用（默认开启），通过 <code>-XX:TLABSize</code> 调整大小</p></blockquote><h2 id="判定对象是否存活">判定对象是否存活</h2><p>要真正宣告一个对象死亡，至少要经历两次标记过程：</p><blockquote><ol><li class="lvl-3"><p>如果对象在进行可达性分析后发现没有与GC Roots相连接的引用链，那它将会被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行finalize()方法。</p></li><li class="lvl-3"><p>当对象没有覆盖finalize()方法，或者finalize()方法已经被虚拟机调用过，虚拟机将这两种情况都视为“对象可回收”。</p></li></ol><p>程序中可以通过覆盖finapze()来一场自我拯救。</p></blockquote><h3 id="引用计数法">引用计数法</h3><p>给对象中添加一个引用计数器，每当有一个地方引用它时，计数器值加１；当引用失效时，计数器值减１.</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>任何时刻计数器值为０的对象就是不会再被使用的。</p></li><li class="lvl-2"><p>当一个对象被创建时，就将该对象实例分配给一个变量，该变量计数设置为1</p></li><li class="lvl-2"><p>当一个对象实例被垃圾收集时，它引用的任何对象实例的引用计数器减1。</p></li></ul></blockquote><p><strong>缺点</strong>：无法解决<strong>循环引用</strong>问题（如 A → B，B → A，但无外部引用）。</p><p><strong>优点</strong>：执行较快，可以和用户线程并发执行（不存在STW）。</p><p><strong>主流的Java虚拟机里面都没有选用引用计数算法来管理内存</strong>（Python、PHP 等使用）。</p><h3 id="可达性分析">可达性分析</h3><p>通过一系列“<strong>GCRoots</strong>”对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为<strong>引用链（reference chain）</strong>，当一个对象到GC Roots没有任何引用链相连时，则证明对象是不可用的。</p><p><strong>缺点</strong>：时间较长，会遍历所有的对象，且会导致STW</p><p><strong>优点</strong>：可以解决循环引用问题</p><p><strong>常见的 GC Roots 包括</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>虚拟机栈</strong>（栈帧中的本地变量）中引用的对象。</p></li><li class="lvl-2"><p><strong>方法区</strong>中<u>静态属性、常量</u>引用的对象</p></li><li class="lvl-2"><p><strong>本地方法栈</strong>中JNI（Native方法）引用的对象。</p></li><li class="lvl-2"><p><strong>Java虚拟机内部的引用</strong>，如基本数据类型对应的Class对象，常驻的异常对象等</p></li><li class="lvl-2"><p>**被同步锁(synchronized)**持有的对象</p></li></ul></blockquote><h3 id="是否被引用？">是否被引用？</h3><p>通过以上算法，JVM如何判断对象是否被引用的。从底层数据结构分析：</p><p><strong>对象头中的标记位</strong>(Mark Word)</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>每个Java对象在堆中都有一个对象头</p></li><li class="lvl-2"><p>包含用于GC的标记位(是否被访问过、是否可达等)</p></li><li class="lvl-2"><p>使用位图(Bitmap)技术高效记录对象状态</p></li></ul></blockquote><p><strong>记忆集</strong>(Remembered Set)</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>用于记录跨代引用(如老年代对象引用新生代对象)</p></li><li class="lvl-2"><p>通常采用卡表(Card Table)实现</p></li><li class="lvl-2"><p>将堆划分为512字节的卡(Card)，脏卡表示可能包含跨代引用</p></li></ul></blockquote><p><strong>可达性分析的核心过程</strong>：</p><blockquote><ol><li class="lvl-3"><p>通过**安全点(Safepoint)**暂停所有用户线程</p></li><li class="lvl-3"><p>扫描查找GC Roots</p></li><li class="lvl-3"><p>遍历对象图</p><ol><li class="lvl-6"><p>递归标记(Recursive Marking)，在对象头设置标记位</p></li><li class="lvl-6"><p>三色标记算法(Tri-color Marking)</p><blockquote><ul class="lvl-6"><li class="lvl-2"><strong>白色</strong>：未访问对象(初始状态)</li><li class="lvl-2"><strong>灰色</strong>：已访问但引用未完全处理</li><li class="lvl-2"><strong>黑色</strong>：已访问且所有引用已处理</li></ul></blockquote></li></ol></li><li class="lvl-3"><p>处理特殊引用</p><ol><li class="lvl-6">处理软引用</li><li class="lvl-6">清除所有弱引用</li><li class="lvl-6">处理虚引用并加入引用队列</li></ol></li></ol></blockquote><h3 id="引用级别">引用级别</h3><p>如果reference类型的数据中存储的数值代表的是另外一块内存的起始地址，就称这块内存代表着一个引用（java.lang.ref）。</p><p>Java对引用的概念进行了扩充，将引用分为<strong>强引用、软引用、弱引用、虚引用</strong>4种，这4种引用强度依次逐渐减弱。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>强引用</strong>（Strong Reference）</p><p>类似 <code>Object obj = new Object()</code> 这类引用，只要强引用还存在，垃圾收集器永远不会回收掉被引用的对象。</p></li><li class="lvl-2"><p><strong>软引用</strong>（Soft Reference）</p><p>用来描述一些还有用但并非必须的对象。对于软引用关联着的对象，在系统<strong>将要发生内存溢出异常之前</strong>，将会把这些对象列进回收范围之中进行第二次回收。如果这次回收后还没有足够的内存，才会抛出内存溢出异常。</p></li><li class="lvl-2"><p><strong>弱引用</strong>（Weak Reference）</p><p>也是用来描述非必需对象的，但是它的强度比软引用更弱一些，被弱引用关联的对象<strong>只能生存到下一次垃圾收集之前</strong>。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象（ThreadLocal.ThreadLocalMap 中有实现）</p></li><li class="lvl-2"><p><strong>虚引用</strong>（Phantom Reference）</p><p>也叫幽灵引用或幻影引用，是最弱的一种引用 关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。它的作用是能<strong>在对象被收集器回收时收到一个系统通知</strong>。</p></li></ul></blockquote><h2 id="垃圾回收算法">垃圾回收算法</h2><p><strong>程序计数器、虚拟机栈、本地方法栈</strong>3个区域随线程而生、随线程而灭，因此这几个区域的内存分配和回收都具备确定性。</p><p>只有线程共享区域需要通过算法标记特殊处理。</p><h3 id="标记-清除（Mark-Sweep）">标记-清除（Mark-Sweep）</h3><p>分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记对象。</p><ul class="lvl-0"><li class="lvl-2"><p><strong>优点</strong>：实现简单。</p></li><li class="lvl-2"><p><strong>缺点</strong>：产生大量不连续的<strong>内存碎片</strong>；效率不高（需遍历两次）。</p></li></ul><h3 id="标记-整理（Mark-Compact）">标记-整理（Mark-Compact）</h3><p>标记过程和“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清除，而是让所有存活对象都向一端移动，然后直接清理掉端边界以外的内存。</p><ul class="lvl-0"><li class="lvl-2"><p><strong>优点</strong>：无碎片。</p></li><li class="lvl-2"><p><strong>缺点</strong>：整理过程耗时。</p></li><li class="lvl-2"><p><strong>适用场景</strong>：<strong>老年代（Old Generation）</strong>。</p></li></ul><h3 id="复制算法（Copying）">复制算法（Copying）</h3><p>它将可用内存按照容量划分为大小相等的两块（From/To），每次只使用其中一块。当这一块的内存用完了，则就将还存活的对象复制到另一块上面，然后再把已经使用过的内存空间一次清理掉。使得每次都是对整个半区进行内存回收。</p><ul class="lvl-0"><li class="lvl-2"><p><strong>优点</strong>：无碎片、效率高（只需移动指针）。</p></li><li class="lvl-2"><p><strong>缺点</strong>：内存利用率仅 50%；较多复制操作，效率较低。</p></li><li class="lvl-2"><p><strong>适用场景</strong>：<strong>新生代（Young Generation）</strong>，因对象“朝生夕死”。</p></li></ul><h3 id="三色标记算法">三色标记算法</h3><ul class="lvl-0"><li class="lvl-2"><p><strong>黑色</strong>: 根对象，或者该对象与它的子对象都被扫描</p></li><li class="lvl-2"><p><strong>灰色</strong>: 对象本身被扫描,但还没扫描完该对象中的子对象</p></li><li class="lvl-2"><p><strong>白色</strong>: 未被扫描对象，扫描完成所有对象之后，最终为白色的为不可达对象，即垃圾对象</p></li></ul><blockquote><p>当GC开始扫描对象时，按照如下图步骤进行对象的扫描：</p><p>根对象被置为黑色，子对象被置为灰色。继续由灰色遍历,将已扫描了子对象的对象置为黑色。</p><p>遍历了所有可达的对象后，所有可达的对象都变成了黑色。不可达的对象即为白色，需要被清理。</p></blockquote><h3 id="分代收集思想">分代收集思想</h3><ul class="lvl-0"><li class="lvl-2"><p>基于 “弱代假说”：</p><ul class="lvl-2"><li class="lvl-4">大多数对象<strong>朝生夕死</strong>；</li><li class="lvl-4">熬过多次 GC 的对象越难死亡。</li></ul></li><li class="lvl-2"><p>将堆分为：</p><ul class="lvl-2"><li class="lvl-4"><strong>新生代（Young）</strong>：使用 <strong>复制算法</strong>（如 Eden + Survivor）。</li><li class="lvl-4"><strong>老年代（Old）</strong>：使用 <strong>标记-清除</strong> 或 <strong>标记-整理</strong>。</li><li class="lvl-4"><strong>永久代 / 元空间（Metaspace）</strong>：存储类元数据（JDK 8+ 用 Metaspace 替代 PermGen）。</li></ul></li></ul><h2 id="垃圾收集器">垃圾收集器</h2><ul class="lvl-0"><li class="lvl-2"><p><strong>串行收集器</strong>（Serial和Serial Old）</p><p>只能有一个垃圾回收线程执行，用户线程暂停。</p><p>适用于内存比较小的嵌入式设备。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-XX：+UseSerialGC</span><br><span class="line">-XX：+UseSerialOldGC</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p><strong>并行收集器</strong>[<em>吞吐量优先</em>]（ Parallel Scanvenge、Parallel Old）</p><p>多条垃圾收集线程并行工作，但此时用户线程仍然处于等待状态。</p><p>适用于科学计算、后台处理等若交互场景。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-XX：+UseParallelGC</span><br><span class="line">-XX：+UseParallelOldGC</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p><strong>并发收集器</strong>[<em>停顿时间优先</em>]（CMS、G1）</p><p>用户线程和垃圾收集线程同时执行(但并不一定是并行的，可能是交替执行的)，垃圾收集线程在执行的时候不会停顿用户线程的运行。</p><p>适用于相对时间有要求的场景，比如Web。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-XX：+UseConcMarkSweepGC</span><br><span class="line">-XX：+UseG1GC</span><br></pre></td></tr></table></figure></li></ul><p>通过命令查看JDK使用的默认收集器：</p><blockquote><p>查看JDK8使用的默认收集器：<code>java -XX:+PrintFlagsFinal -version | grep .\*Use.\*GC.\*</code></p><p><strong>Parallel</strong>（并行）和  <strong>Parallel Old</strong>（并行）</p><img src="/imgs/java/image-20250712223718233.png" alt="image-20250712223718233" style="zoom:67%;" /><p>JDK9及之后使用的收集器：G1</p><img src="/imgs/java/image-20250712224508786.png" alt="image-20250712224508786" style="zoom:67%;" /></blockquote><p><img src="/imgs/java/4ab21e4c4bf7203acd909eda15361194.png" alt="img"></p><h3 id="Parallel-收集器（并行）">Parallel 收集器（并行）</h3><p>JDK8 的默认收集器，需要配合 Parallel Old。吞吐量优先的垃圾收集器，<strong>年轻代</strong>收集器</p><blockquote><p>Parallel Scavenge 收集器是一个新生代收集器，采用<strong>复制算法</strong>，并且是<strong>多线程</strong>收集器</p><ul class="lvl-1"><li class="lvl-2">CMS等收集器是尽可能缩短垃圾收集时用户线程的停顿时间</li><li class="lvl-2">Parallel 收集器则是<strong>达到一个可控制的吞吐量</strong>（Throughput）</li></ul><p>这里所谓的吞吐量是指CPU用于运行用户代码的时间与CPU总消耗时间的比值，既<code>吞吐量 = 运行用户代码时间 / （运行用户代码时间 + 垃圾收集时间）</code>，虚拟机总共运行了100分钟，其中垃圾收集花掉了1分钟，那么吞吐量就是99%。</p><p>Parallel Scavenge 收集器提供了两个参数用于精确控制吞吐量，分别是控制<strong>最大收集停顿时间</strong>的<code>-XX:MaxGCPauseMillis</code>参数以及直接设置<strong>吞吐量大小</strong>的<code>-XX:GCTimeRatio</code>参数。</p></blockquote><h3 id="Parallel-Old收集器（并行）">Parallel Old收集器（并行）</h3><p>JDK8 的默认收集器，需要配合 Parallel。是老年代的并行收集器，使用多线程和“<strong>标记-整理</strong>”算法。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>**MaxGCPauseMillis：**参数允许的值是一个大于0的毫秒数，收集器将尽可能地保证内存回收花费的时间不超过设定值。</p><p>GC停顿时间缩短是以牺牲吞吐量和新生代空间换取来的：新生代调小导致收集更频繁，吞吐量也下降。</p></li><li class="lvl-2"><p>**GCTimeRatio：**参数的值是一个大于0且小于100的整数，也就是垃圾收集时间占总时间的比率，相当于是吞吐量的倒数。</p><p>如果把此参数设置为19，那允许的最大GC时间就占总时间的5%（既<code>1 /（1 + 19）</code>），默认值为99，允许最大1%（既 <code>1 /（1 + 99）</code>）的垃圾收集时间。</p></li></ul></blockquote><p>在注重吞吐量以及CPU资源敏感的场合，可以优先考虑Parallel Scavenge 加 Parallel Old 收集器。</p><h3 id="ParNew收集器（并发）">ParNew收集器（并发）</h3><p>新生代收集器，CMS默认搭配，Serial的多线程版本。</p><ul class="lvl-0"><li class="lvl-2"><p>-XX:UseParNewGC：启用ParNew收集器。</p></li><li class="lvl-2"><p>-XX:ParalletGCThreads：设定并行垃圾收集的线程数量。</p></li></ul><blockquote><ul class="lvl-1"><li class="lvl-2"><p>默认开启的线程数等于cpu数。</p></li><li class="lvl-2"><p>多核环境较Serial效率高。</p></li><li class="lvl-2"><p>并行收集（非并发）。</p></li><li class="lvl-2"><p>复制算法。</p></li></ul></blockquote><h3 id="CMS收集器（并发）"><strong>CMS收集器</strong>（并发）</h3><p>以获取最短回收停顿时间为目标。垃圾收集的线程和用户执行的线程是可以同时执行的。</p><p>基于<strong>标记-清除算法</strong>：只将标记为不存活的对象删除，并不会移动对象整理内存空间，会造成内存碎片参数：<code>-XX:CMSFullGCsBeforeCompaction=n</code></p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>只会回收老年代和永久代（元数据区），不会收集年轻代（年轻带只能配合Parallel New或Serial回收器）</p></li><li class="lvl-2"><p>一种预处理垃圾回收器（在内存用尽前，完成回收操作，触发阈值，默认是老年代或永久带达到92%）</p></li><li class="lvl-2"><p>并发收集、低停顿</p></li></ul></blockquote><p><strong>处理过程</strong>：</p><p><u>初始标记(STW)   - &gt;并发标记 －＞重新标记（STW） －＞并发清除．</u></p><blockquote><ol><li class="lvl-3"><p><strong>初始标记</strong>(CMS-initial-mark) ,  只标记老年代中与GC ROOT对象关联的对象，速度较快（STW）。</p></li><li class="lvl-3"><p><strong>并发标记</strong>(CMS-concurrent-mark)，与用户线程同时运行；从GC Roots开始找到它能引用的所有其它对象。</p><blockquote><p>在运行期间会发生新生代的对象晋升到老年代、或者是直接在老年代分配对象、或者更新老年代对象的引用关系等等，对于这些对象，都是需要进行重新标记的，否则有些对象就会被遗漏。为了提高重新标记的效率，该阶段会把上述对象所在的Card标识为Dirty，后续只需扫描这些Dirty Card的对象，避免扫描整个老年代；并发标记阶段只负责将引用发生改变的Card标记为Dirty状态，不负责处理；</p></blockquote></li><li class="lvl-3"><p><strong>预清理</strong>（CMS-concurrent-preclean），与用户线程同时运行；</p></li><li class="lvl-3"><p>可被终止的预清理（CMS-concurrent-abortable-preclean） 与用户线程同时运行；</p></li><li class="lvl-3"><p><strong>重新标记</strong>(CMS-remark) ； 修正并发标记期间因用户程序继续动作而导致标记产生变动的那一部分对象的标记记录，完成标记整个年老代的所有的存活对象（整个堆，STW）。</p></li><li class="lvl-3"><p><strong>并发清除</strong>(CMS-concurrent-sweep)，与用户线程同时运行；清除标记未被引用的对象。</p></li><li class="lvl-3"><p>重置状态：等待下次CMS的触发(CMS-concurrent-reset)，与用户线程同时运行；</p></li></ol></blockquote><p><strong>缺点</strong></p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>内存碎片</strong>（空间碎片过多时，会出现老年代虽然还有很大空间，但是无法找到足够大的连续空间来分配，不得不进行Full GC）<br>-XX:+UseCMSCompactAtFullCollection 执行Full GC时开启内存碎片的合并整理（默认开启），停顿时间变长</p></li><li class="lvl-2"><p><strong>浮动垃圾</strong>（标记整理时、用户线程执行的新对象），只能等待下一次GC再将该对象回收<br>-XX：CMSInitiatingOccupancyFraction     触发Full GC的百分比，可以降低内存回收次数要是CMS运行期间预留的内存无法满足程序需要时，虚拟机将启动后备预案:  临时启用Serial Old收集器来重新进行老年代的垃圾收集，停顿时间就很长了。</p></li><li class="lvl-2"><p>对CPU资源非常敏感</p></li></ul></blockquote><h3 id="G1收集器（并发）">G1收集器（并发）</h3><p>JDK 7开始使用，JDK 8非常成熟，<strong>JDK 9 之后默认使用的垃圾收集器</strong>，适用于新老生代。</p><blockquote><p>工作在堆内不同分区上的并发收集器。分区既可以归属于老年代，也可以归属新生代，同一个代的分区不需要保持连续</p><p>G1收集器专注于垃圾最多的分区，最终的效果是花费较少的时间就能回收这些分区的垃圾</p></blockquote><p><strong>特点</strong></p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>并行与并发</p></li><li class="lvl-2"><p><strong>分代收集</strong>（仍然保留了分代的概念）</p></li><li class="lvl-2"><p><strong>空间整合</strong>（整体上属于“标记-整理”算法，不会导致空间碎片）</p></li><li class="lvl-2"><p><strong>可预测的停顿</strong>（比CMS更先进的地方在于能让使用者明确指定一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒）</p></li></ul></blockquote><p><strong>处理过程</strong>：</p><blockquote><ol><li class="lvl-3"><p><strong>初始标记</strong>（Initial Marking）标记GC Roots能够关联的对象，并且修改TAMS的值（STW）</p></li><li class="lvl-3"><p><strong>并发标记</strong>（Concurrent Marking）  从GC Roots进行可达性分析，找出存活的对象，与用户线程并发执行</p></li><li class="lvl-3"><p><strong>最终标记</strong>（Final Marking）  修正在并发标记阶段因为用户程序的并发执行导致变动的数据（STW）</p></li><li class="lvl-3"><p><strong>筛选回收</strong>（Live Data Counting and Evacuation） 对各个Region的回收价值和成本进行排序，根据用户所期望的GC停顿时间制定回收计划</p></li></ol></blockquote><img src="/imgs/java/553d40356f974e18a0a89653673ebef2.jpeg" alt="img" style="zoom:50%;" /><p><strong>GC 收集过程</strong>：</p><p>G1 将堆划分为多个 <strong>Region</strong>（大小 1~32MB），逻辑上仍分代。</p><ol><li class="lvl-3"><p>Young GC：</p><ul class="lvl-2"><li class="lvl-5">回收 Eden + Survivor Region；</li><li class="lvl-5">STW，复制存活对象到 Survivor 或 Old Region。</li></ul></li><li class="lvl-3"><p>Concurrent Marking（并发标记）：</p><ul class="lvl-2"><li class="lvl-5">与应用线程并发执行，标记整个堆的存活对象。</li></ul></li><li class="lvl-3"><p>Mixed GC：</p><ul class="lvl-2"><li class="lvl-5">回收部分 Old Region（选择垃圾最多的 Region）；</li><li class="lvl-5">STW，但可控制停顿时间（<code>-XX:MaxGCPauseMillis</code>）。</li></ul></li></ol><blockquote><p>G1 的核心思想：<strong>“Garbage First”</strong> —— 优先回收垃圾最多的 Region。</p></blockquote><h3 id="各收集器特点">各收集器特点</h3><p>不同 GC 器适用于不同场景，JDK 版本演进中不断优化。</p><table><thead><tr><th>GC 收集器</th><th>适用代</th><th>所用算法</th><th>特点</th><th>适用场景</th></tr></thead><tbody><tr><td><strong>Serial</strong></td><td>新生代</td><td>复制</td><td>单线程，STW</td><td>客户端模式、小内存</td></tr><tr><td><strong>ParNew</strong></td><td>新生代</td><td>复制（并行）</td><td>多线程版 Serial</td><td>配合 CMS 使用</td></tr><tr><td><strong>Parallel Scavenge</strong></td><td>新生代</td><td>复制（并行）</td><td><strong>高吞吐量</strong></td><td>后台计算、批处理</td></tr><tr><td><strong>Serial Old</strong></td><td>老年代</td><td>标记-整理</td><td>单线程</td><td>与 Serial 配套</td></tr><tr><td><strong>Parallel Old</strong></td><td>老年代</td><td>标记-整理（并行）</td><td>高吞吐</td><td>与 Parallel Scavenge 配套</td></tr><tr><td><strong>CMS</strong>（Concurrent Mark Sweep）</td><td>老年代</td><td>标记-清除（并发）</td><td><strong>低延迟</strong>，但有碎片</td><td>Web 应用、响应敏感</td></tr><tr><td><strong>G1</strong>（Garbage First）</td><td>全堆</td><td>分区 + 复制/整理</td><td><strong>可预测停顿</strong>，兼顾吞吐与延迟</td><td>大内存（&gt;4G）、JDK 9+ 默认</td></tr><tr><td><strong>ZGC / Shenandoah</strong></td><td>全堆</td><td>并发、Region</td><td><strong>超低延迟（&lt;10ms）</strong></td><td>JDK 11+（ZGC），JDK 12+（Shenandoah）</td></tr></tbody></table><blockquote><ul class="lvl-1"><li class="lvl-2"><p>小内存应用 → Serial</p></li><li class="lvl-2"><p>后台计算 → Parallel Scavenge</p></li><li class="lvl-2"><p>Web 服务 → G1（JDK 8u40+）或 ZGC（JDK 11+）</p></li><li class="lvl-2"><p>实时系统 → ZGC / Shenandoah</p></li></ul></blockquote><h2 id="GC-日志分析">GC 日志分析</h2><p>开启 GC 日志（JDK 8）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-XX:+PrintGCDetails</span><br><span class="line">-XX:+PrintGCDateStamps </span><br><span class="line">-Xloggc:gc.log</span><br></pre></td></tr></table></figure><p>典型日志片段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[GC (Allocation Failure) [PSYoungGen: 512M-&gt;128M(512M)] 1024M-&gt;600M(2048M), 0.025 secs]</span><br></pre></td></tr></table></figure><blockquote><ul class="lvl-1"><li class="lvl-2"><p><code>PSYoungGen</code>：新生代使用 Parallel Scavenge；</p></li><li class="lvl-2"><p><code>512M-&gt;128M</code>：GC 前后 Eden+Survivor 使用量；</p></li><li class="lvl-2"><p><code>1024M-&gt;600M</code>：堆总使用量；</p></li><li class="lvl-2"><p><code>0.025 secs</code>：STW 时间。</p></li></ul></blockquote><p>关注指标：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>GC 频率</strong>：是否过于频繁？</p></li><li class="lvl-2"><p><strong>停顿时间（Pause Time）</strong>：是否影响响应？</p></li><li class="lvl-2"><p><strong>老年代增长趋势</strong>：是否内存泄漏？</p></li></ul><p><strong>GC 日志记录</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">63.971</span>: [GC (Allocation Failure) [PSYoungGen: 31073K-&gt;4210K(38400K)]</span><br><span class="line">31073K-&gt;4234K(125952K), <span class="number">0.0049946</span> secs] [Times: user=<span class="number">0.05</span> sys=<span class="number">0.02</span>, real=<span class="number">0.01</span> secs]</span><br></pre></td></tr></table></figure><blockquote><ol><li class="lvl-6"><p>63.971：gc发生时，虚拟机运行了多少秒。</p></li><li class="lvl-6"><p>GC (Allocation Failure) ： 发生了一次垃圾回收，这是一次Minor GC 。注意它不表示只GC新生代，括号里的内容是gc发生的原因，这里的Allocation Failure的原因是年轻代中没有足够区域能够存放需要分配的数据而失败。如果是System.gc()，说明这是一次成功的垃圾回收。</p></li><li class="lvl-6"><p>PSYoungGen: 使用的垃圾收集器的名字。</p></li><li class="lvl-6"><p>31073K-&gt;4210K(38400K)指的是垃圾收集前-&gt;垃圾收集后(年轻代堆总大小)</p></li><li class="lvl-6"><p>31073K-&gt;4234K(125952K),指的是垃圾收集前后，Java堆的大小（总堆125952K，堆大小包括新生代和年老代）， 因此可以计算出年老代占用空间为125952k-38400k = 87552k</p></li><li class="lvl-6"><p>0.0049946 secs：整个GC过程持续时间</p></li><li class="lvl-6"><p>[Times: user=0.05 sys=0.02, real=0.01 secs]分别表示用户态耗时，内核态耗时和总耗时。也是对gc耗时的一个记录。</p></li></ol></blockquote><p><strong>Full GC 日志记录</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">83.783</span>: [Full <span class="title function_">GC</span> <span class="params">(System.gc()</span>) [PSYoungGen: 15361K-&gt;0K(372224K)] [ParOldGen: 83468K-&gt;98200K(172032K)] 98829K-&gt;98200K(544256K), [Metaspace: 9989K-&gt;9989K(1058816K)], <span class="number">0.3036213</span> secs] [Times: user=<span class="number">1.03</span> sys=<span class="number">0.00</span>, real=<span class="number">0.30</span> secs]</span><br></pre></td></tr></table></figure><blockquote><p>1    [PSYoungGen: 15361K-&gt;0K(372224K)] ：年轻代：垃圾收集前-&gt;垃圾收集后(年轻代堆总大小)</p><p>2     [ParOldGen: 83468K-&gt;98200K(172032K)]  ：年老代：垃圾收集前-&gt;垃圾收集后(年老代堆总大小)</p><p>3     98829K-&gt;98200K(544256K), ：垃圾收集前-&gt;垃圾收集后(总堆大小)</p><p>4     [[Metaspace: 9989K-&gt;9989K(1058816K)], Metaspace空间信息，同上</p><p>5     0.3036213 secs：整个GC过程持续时间</p><p>6     [Times: user=1.03 sys=0.00, real=0.30 secs] 分别表示用户态耗时，内核态耗时和总耗时。也是对gc耗时的一个记录。</p></blockquote><h2 id="GC-问题与调优分析">GC 问题与调优分析</h2><p>JVM 垃圾回收（GC）调优是 Java 应用性能优化的核心环节，目标是<strong>在有限资源下，平衡吞吐量、延迟（停顿时间）和内存使用</strong>，避免频繁 GC、长时间停顿或内存溢出（OOM）。</p><p>以下<strong>三者不可兼得</strong>：通常需在“吞吐 vs 延迟”之间权衡。</p><table><thead><tr><th>目标</th><th>说明</th><th>使用场景</th></tr></thead><tbody><tr><td><strong>高吞吐量（Throughput）</strong></td><td>最大化应用运行时间，最小化 GC 时间占比</td><td>后台计算、批处理、离线任务</td></tr><tr><td><strong>低延迟（Low Latency）</strong></td><td>控制单次 GC 停顿时间（STW）在毫秒级</td><td>Web 服务、实时交易、用户交互系统</td></tr><tr><td><strong>内存效率</strong></td><td>避免内存浪费，合理控制堆大小</td><td>容器化部署、资源受限环境</td></tr></tbody></table><h3 id="GC-调优分析">GC 调优分析</h3><ol><li class="lvl-3"><p>明确应用特征</p><blockquote><ul class="lvl-3"><li class="lvl-2">是 CPU 密集型还是 I/O 密集型？</li><li class="lvl-2">对响应时间敏感吗？（如 API 接口要求 &lt;100ms）</li><li class="lvl-2">对象生命周期分布？（短命对象多？大对象多？）</li></ul></blockquote></li><li class="lvl-3"><p>收集基线数据</p><blockquote><ul class="lvl-3"><li class="lvl-2">当前堆大小（<code>-Xms</code>, <code>-Xmx</code>）</li><li class="lvl-2">GC 类型（默认？手动指定？）</li><li class="lvl-2">GC 日志（必须开启！）</li><li class="lvl-2">应用负载（QPS、并发数、请求类型）</li></ul></blockquote></li><li class="lvl-3"><p>开启 GC 日志</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># JDK 8 示例:</span></span><br><span class="line">-XX:+UseG1GC \</span><br><span class="line">-XX:+PrintGCDetails \</span><br><span class="line">-XX:+PrintGCDateStamps \</span><br><span class="line">-XX:+PrintGCTimeStamps \</span><br><span class="line">-Xloggc:/data/logs/gc.log \</span><br><span class="line">-XX:+UseGCLogFileRotation \</span><br><span class="line">-XX:NumberOfGCLogFiles=5 \</span><br><span class="line">-XX:GCLogFileSize=100M</span><br><span class="line">    </span><br><span class="line"><span class="comment"># JDK 9+ 使用统一日志语法：</span></span><br><span class="line">-Xlog:gc*:file=gc.log:<span class="keyword">time</span>,tags</span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p>GC 指标与分析维度</p><table><thead><tr><th>指标</th><th>说明</th><th>健康阈值（参考）</th></tr></thead><tbody><tr><td>Young GC 频率</td><td>每秒/分钟发生次数</td><td>&lt;1 次/秒（视 Eden 大小而定）</td></tr><tr><td>Young GC 停顿时间</td><td>STW 时间</td><td>&lt;50ms（Web 应用）</td></tr><tr><td>Full GC / Mixed GC 频率</td><td>应尽量避免 Full GC</td><td>0 次/天（理想）</td></tr><tr><td>老年代增长速率</td><td>每次 Young GC 后老年代增量</td><td>稳定或缓慢增长</td></tr><tr><td>GC 吞吐量</td><td>1 - (GC总时间 / 运行总时间)</td><td>&gt;95%（吞吐型应用）</td></tr><tr><td>Metaspace 使用率</td><td>是否持续增长？</td><td>稳定，无 OOM</td></tr></tbody></table><blockquote><ul class="lvl-3"><li class="lvl-2"><p>Young GC 后老年代<strong>突增</strong> → 对象过早晋升</p></li><li class="lvl-2"><p>Full GC <strong>频繁触发</strong> → 内存泄漏或堆太小</p></li><li class="lvl-2"><p>GC 停顿<strong>毛刺大</strong> → 大对象、CMS 并发失败、G1 回收效率低</p></li></ul></blockquote></li></ol><h3 id="GC-调优步骤">GC 调优步骤</h3><p>一、<strong>选择合适的 GC 收集器</strong></p><table><thead><tr><th>应用类型</th><th>GC 收集器</th><th>JDK版本</th></tr></thead><tbody><tr><td>吞吐优先（批处理）</td><td>Parallel GC</td><td>JDK 8+</td></tr><tr><td>延迟敏感（Web/API）</td><td>G1 GC</td><td>JDK 8u40+</td></tr><tr><td>超低延迟（&lt;10ms）</td><td>ZGC / Shenandoah</td><td>JDK 11+（ZGC），JDK 12+（Shenandoah）</td></tr><tr><td>小内存（&lt;1GB）</td><td>Serial GC</td><td>客户端应用</td></tr></tbody></table><blockquote><p><strong>JDK 8 默认是 Parallel GC</strong>，但 Web 应用建议手动切换为 G1。</p></blockquote><p>二、<strong>合理设置堆大小</strong></p><ul class="lvl-0"><li class="lvl-2"><p><strong>原则</strong>：<code>-Xms = -Xmx</code>（避免动态扩容带来的性能抖动）</p></li><li class="lvl-2"><p>经验值：</p><ul class="lvl-2"><li class="lvl-4">小型应用：1~2GB</li><li class="lvl-4">中型 Web 服务：4~8GB</li><li class="lvl-4">大型服务：8~32GB（G1 更适合大堆）</li></ul></li><li class="lvl-2"><p><strong>容器环境</strong>：务必限制容器内存，并设置 <code>-XX:MaxRAMPercentage=75.0</code>（JDK 8u191+）</p></li></ul><p>三、<strong>调整新生代大小</strong></p><p>新生代越大，Young GC 频率越低，但单次停顿可能变长。</p><ul class="lvl-0"><li class="lvl-2"><p><strong>Parallel GC</strong>：通过 <code>-Xmn</code> 或 <code>-XX:NewRatio</code>（老年代:新生代，默认 2:1）</p></li><li class="lvl-2"><p><strong>G1 GC</strong>：<strong>不要手动设置 <code>-Xmn</code></strong>！G1 自动管理 Region，可通过 <code>-XX:G1NewSizePercent</code>（默认 5%）和 <code>-XX:G1MaxNewSizePercent</code>（默认 60%）微调。</p></li></ul><p>四、<strong>控制对象晋升行为</strong></p><ul class="lvl-0"><li class="lvl-2"><p><strong>调整晋升阈值</strong>：默认15，可尝试降低（如6）减少老年代压力 <code>-XX:MaxTenuringThreshold=15</code></p></li><li class="lvl-2"><p><strong>大对象直接进老年代</strong>（避免 Survivor 拷贝）：<code>-XX:PretenureSizeThreshold=1M</code>  单位字节（仅 Serial/ParNew 有效）</p></li></ul><p>五、<strong>针对特定 GC 器调优</strong></p><p><strong>G1 GC</strong></p><p>关键参数调整：G1 会根据 <code>MaxGCPauseMillis</code> 动态调整 Young Region 数量和 Mixed GC 策略。</p><table><thead><tr><th>参数</th><th>说明</th><th>建议值</th></tr></thead><tbody><tr><td><code>-XX:MaxGCPauseMillis=200</code></td><td>目标最大停顿时间</td><td>50~200ms（Web 应用）</td></tr><tr><td><code>-XX:G1HeapRegionSize</code></td><td>Region 大小（1~32MB）</td><td>自动（除非堆 &gt;32GB）</td></tr><tr><td><code>-XX:G1MixedGCCountTarget=8</code></td><td>Mixed GC 次数目标</td><td>默认8，可增加以降低单次压力</td></tr><tr><td><code>-XX:G1HeapWastePercent=5</code></td><td>允许的堆浪费比例</td><td>默认5，可适当提高</td></tr></tbody></table><p><strong>Parallel GC</strong>（吞吐优先）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-XX:ParallelGCThreads=N<span class="comment"># GC 线程数（默认 CPU 核数）</span></span><br><span class="line">-XX:GCTimeRatio=99<span class="comment"># 吞吐目标：GC 时间占比 ≤ 1/(1+99) = 1%</span></span><br></pre></td></tr></table></figure><p><strong>ZGC</strong>（JDK 11+）：</p><p>几乎无参数可调，停顿时间稳定在 <strong>1~10ms</strong>，适合大堆（TB 级）。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UseZGC</span><br><span class="line">-Xmx16g </span><br><span class="line">-XX:+UnlockExperimentalVMOptions <span class="comment"># JDK 11 需要，15+ 不需要</span></span><br></pre></td></tr></table></figure><h3 id="GC-问题与解决方案">GC 问题与解决方案</h3><p><strong>Young GC频繁</strong></p><p>每秒多次 Young GC，CPU 高，应用卡顿。</p><blockquote><p>Eden 区太小、对象创建过快、存在内存泄漏（短命对象实际长期存活）。</p><ul class="lvl-1"><li class="lvl-2"><strong>调优</strong>：<ul class="lvl-3"><li class="lvl-4">增大新生代（<code>-Xmn</code>），或调整 Eden/Survivor 比例。</li><li class="lvl-4">减少临时对象创建（如避免在循环中 new）</li><li class="lvl-4">使用对象池或克隆技术</li></ul></li></ul></blockquote><p><strong>Full GC 频繁</strong></p><p>日志中出现 <code>Full GC</code>，停顿几百毫秒到几秒。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>可能原因</strong>：</p><ul class="lvl-3"><li class="lvl-4">老年代空间不足；</li><li class="lvl-4">Metaspace 不足（类加载过多）；</li><li class="lvl-4">显式调用 <code>System.gc()</code>。</li><li class="lvl-4">CMS 并发模式失败</li></ul></li><li class="lvl-2"><p><strong>调优</strong>：</p><ul class="lvl-3"><li class="lvl-4">增大堆或老年代（<code>-Xmx</code>）；</li><li class="lvl-4">关闭显式 GC（<code>-XX:+DisableExplicitGC</code>）；</li><li class="lvl-4">监控 Metaspace（<code>-XX:MetaspaceSize=256m -XX:MaxMetaspaceSize=512m</code>）。</li><li class="lvl-4">CMS 场景：增大老年代、提前触发并发标记（<code>-XX:CMSInitiatingOccupancyFraction=70</code>）</li></ul></li></ul></blockquote><p><strong>G1 Mixed GC 效率低</strong></p><p>Mixed GC 持续多轮，老年代回收慢。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>原因</strong>：G1 选择的 Region 垃圾比例不高。</p></li><li class="lvl-2"><p>解决：</p><ul class="lvl-3"><li class="lvl-4">降低 <code>G1MixedGCLiveThresholdPercent</code>（默认 85%）→ 更激进回收；</li><li class="lvl-4">增加 <code>G1MixedGCCountTarget</code> → 分摊回收压力。</li></ul></li></ul></blockquote><p><strong>长时间 STW</strong></p><blockquote><p>改用低延迟 GC（如 G1、ZGC）。</p></blockquote><h3 id="GC-调优工具使用">GC 调优工具使用</h3><table><thead><tr><th>工具</th><th>用途</th></tr></thead><tbody><tr><td><strong>jstat</strong></td><td>实时监控 GC 统计（<code>jstat -gcutil &lt;pid&gt; 1s</code>）</td></tr><tr><td><strong>jmap</strong></td><td>生成堆转储（<code>jmap -dump:live,format=b,file=heap.hprof &lt;pid&gt;</code>）</td></tr><tr><td><strong>jconsole / VisualVM</strong></td><td>图形化监控 GC、内存、线程</td></tr><tr><td><strong>GCViewer / GCEasy</strong></td><td>可视化分析 GC 日志</td></tr><tr><td><strong>MAT (Memory Analyzer)</strong></td><td>分析内存泄漏、对象引用链</td></tr><tr><td><strong>Arthas</strong></td><td>线上诊断（<code>heapdump</code>、<code>vmtool</code>）</td></tr></tbody></table><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">-Xms4g<span class="comment"># 初始堆大小，在启动时即分配较大内存，减少运行时动态扩展带来的性能损耗。</span></span><br><span class="line">-Xmx4g<span class="comment"># 最大堆大小（JVM最大可用内存）</span></span><br><span class="line">-Xmn512M<span class="comment"># 新生代大小（年老代 = 堆大小 - 新生代大小）</span></span><br><span class="line">-XX:MetaspaceSize=80M<span class="comment"># 元空间最小</span></span><br><span class="line">-XX:MaxMetaspaceSize=128M<span class="comment"># 元空间最大</span></span><br><span class="line">-Xss2M<span class="comment"># 栈的大小（每个线程可使用的内存大小）</span></span><br><span class="line">-XX:-UseCompressedClassPointers<span class="comment"># 压缩</span></span><br><span class="line">-XX:NewRatio=4<span class="comment"># 新生代和老年代的比值 （新生代:老年代=1:4），新生代占堆大小的1/5</span></span><br><span class="line">-XX:SurvivorRatio=8<span class="comment"># 年轻代中Eden区与两个Survivor区的比值8:2 （Eden:Survivor=8:1），一个Survivor占年轻代的1/10</span></span><br><span class="line">-XX:+PrintGCDetails<span class="comment"># 输出详细GC日志</span></span><br><span class="line">-Xloggc:gc.log <span class="comment"># 输出GC日志到文件</span></span><br><span class="line">-XX:+PrintGCDateStamps <span class="comment"># 输出GC的时间戳（以日期的形式，如 2013-05-04T21:53:59.234+0800） </span></span><br><span class="line">-XX:+PrintGCDetails</span><br><span class="line">-XX:+PrintGCTimeStamps</span><br><span class="line">-XX:+UseGCLogFileRotation</span><br><span class="line">-XX:NumberOfGCLogFiles=5</span><br><span class="line">-XX:GCLogFileSize=100M</span><br><span class="line">-Xverify:none <span class="comment"># 关闭了验证器 , all - 启用最完整的验证，none - 禁用验证器，remote - 对远程装入的类启用严格的类装入检查，缺省情况下，验证器处于开启状态，必须针对所有生产服务器启用验证器。</span></span><br><span class="line"></span><br><span class="line">-XX:+UseG1GC  <span class="comment"># 使用G1垃圾收集器，适用于大堆和多核处理器。 </span></span><br><span class="line">-XX:MaxGCPauseMillis=100</span><br><span class="line">-XX:+ParallelRefProcEnabled</span><br></pre></td></tr></table></figure><p>由于设置XX:MetaspaceSize=80M，当内存用超过80M时，触发Full GC，同时Metadata内存以设置的幅度增长。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2021</span>-<span class="number">03</span>-23T17:<span class="number">17</span>:<span class="number">25.874</span>+0800: [Full <span class="title function_">GC</span> <span class="params">(Metadata GC Threshold)</span> [PSYoungGen: 37341K-&gt;0K(387072K)] [ParOldGen: 31360K-&gt;61147K(94208K)] 68701K-&gt;61147K(481280K), [Metaspace: 76992K-&gt;76991K(81920K)], <span class="number">0.1373842</span> secs] [Times: user=<span class="number">0.63</span> sys=<span class="number">0.00</span>, real=<span class="number">0.14</span> secs] </span><br></pre></td></tr></table></figure><img src="/imgs/java/image-20210318111503081.png" alt="image-20210318111503081" style="zoom: 67%;" />]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> 垃圾收集器 </tag>
            
            <tag> GC调优 </tag>
            
            <tag> 标记清除 </tag>
            
            <tag> 可达性分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ 如何保证消息顺序</title>
      <link href="/2025/10/6dd3207ce4454096b95be8f75d86722d/"/>
      <url>/2025/10/6dd3207ce4454096b95be8f75d86722d/</url>
      
        <content type="html"><![CDATA[<p>RabbitMQ 本身不保证严格顺序，需要在应用层实现。</p><p>支持顺序消息所面临的挑战：</p><blockquote><ol><li class="lvl-3"><p><strong>多个消费者</strong>：并行消费会打乱顺序。</p><p>单个消费会降低系统吞吐量，可能出现数据堆积问题。</p><p>在分布式环境下，需要谨慎处理并发问题</p></li><li class="lvl-3"><p><strong>消息重试</strong>：失败的消息重新入队会破坏顺序。</p><p>但是不重试数据丢失问题需要消费者自己保证。还有消息失败、节点故障等其他异常情况。</p></li><li class="lvl-3"><p><strong>多个队列</strong>：消息分布在不同的队列中。</p><p>如果指定到单个队列，可能出现数据倾斜等一系列问题和挑战。</p></li></ol></blockquote><h2 id="实现方案">实现方案</h2><p>实现顺序消息的前提条件，需要满足的条件：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>每次只预取一条消息（prefetch = 1），获取通过其他方式保证每次消费一条</p></li><li class="lvl-2"><p>避免自动重试破坏顺序</p></li><li class="lvl-2"><p>根据业务逻辑将消息分组（不同队列）</p></li></ul></blockquote><p>各方案的特点和适用场景：</p><table><thead><tr><th style="text-align:left">特性</th><th style="text-align:left">1.单队列单消费</th><th style="text-align:left">2.基于消息分组</th><th style="text-align:left">3.Redis维护状态</th><th style="text-align:left">4.消息处理器</th></tr></thead><tbody><tr><td style="text-align:left"><strong>实现复杂度</strong></td><td style="text-align:left">⭐（非常简单）</td><td style="text-align:left">⭐⭐（中等）</td><td style="text-align:left">⭐⭐⭐（复杂）</td><td style="text-align:left">⭐⭐⭐⭐（最复杂）</td></tr><tr><td style="text-align:left"><strong>性能吞吐量</strong></td><td style="text-align:left">⭐（最低）</td><td style="text-align:left">⭐⭐（较低）</td><td style="text-align:left">⭐⭐⭐（中等）</td><td style="text-align:left">⭐⭐⭐⭐（较高）</td></tr><tr><td style="text-align:left"><strong>资源消耗</strong></td><td style="text-align:left">⭐（最低）</td><td style="text-align:left">⭐⭐（较低）</td><td style="text-align:left">⭐⭐⭐（需要Redis）</td><td style="text-align:left">⭐⭐⭐（内存和CPU较高）</td></tr><tr><td style="text-align:left"><strong>顺序保证强度</strong></td><td style="text-align:left">⭐⭐⭐⭐⭐（绝对保证）</td><td style="text-align:left">⭐⭐⭐（应用层保证）</td><td style="text-align:left">⭐⭐⭐⭐（强保证）</td><td style="text-align:left">⭐⭐⭐⭐（强保证）</td></tr><tr><td style="text-align:left"><strong>扩展性</strong></td><td style="text-align:left">⭐（无法扩展）</td><td style="text-align:left">⭐⭐⭐（可按组扩展）</td><td style="text-align:left">⭐⭐⭐⭐（弹性较好）</td><td style="text-align:left">⭐⭐⭐⭐（弹性好）</td></tr><tr><td style="text-align:left"><strong>可靠性/容错</strong></td><td style="text-align:left">⭐⭐（单点故障）</td><td style="text-align:left">⭐⭐⭐（中等）</td><td style="text-align:left">⭐⭐⭐⭐（高）</td><td style="text-align:left">⭐⭐⭐（依赖本地状态）</td></tr></tbody></table><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>低流量（&lt; 100 msg/s）</strong>：方案1最简单可靠</p></li><li class="lvl-2"><p><strong>中流量（100 - 1000 msg/s）</strong>：方案2或方案3</p></li><li class="lvl-2"><p><strong>高流量（&gt; 1000 msg/s）</strong>：方案4或专门的消息队列</p></li><li class="lvl-2"><p><strong>必须绝对保证</strong>：方案1（牺牲性能）或方案3（复杂但可扩展）</p></li><li class="lvl-2"><p><strong>可以接受偶尔乱序</strong>：方案2</p></li><li class="lvl-2"><p><strong>允许缓冲和延迟</strong>：方案4</p></li></ul></blockquote><h3 id="单队列单消费">单队列单消费</h3><ol><li class="lvl-3"><p><strong>实现极其简单</strong>：只需配置一个消费者，无需复杂逻辑。</p></li><li class="lvl-3"><p><strong>严格保证全局顺序</strong>：因为只有一个消费者，消息绝对按入队顺序处理。</p></li><li class="lvl-3"><p><strong>零外部依赖</strong>：不依赖Redis等外部组件，部署简单。</p></li><li class="lvl-3"><p><strong>无状态</strong>：服务本身是无状态的，易于理解和管理。</p></li></ol><blockquote><p>缺点：</p><ol><li class="lvl-3"><strong>性能瓶颈严重</strong>：单消费者模型无法利用多核CPU，吞吐量极低。</li><li class="lvl-3"><strong>无扩展性</strong>：无法通过增加消费者来提高处理能力，是系统的单点。</li><li class="lvl-3"><strong>容错性差</strong>：如果该消费者所在节点故障，整个消息处理将完全中断。</li><li class="lvl-3"><strong>资源利用率低</strong>：在消息处理包含I/O等待（如DB操作）时，CPU资源被浪费。</li></ol></blockquote><p>适用场景：</p><ul class="lvl-0"><li class="lvl-2"><p>消息量非常小（每秒几条到几十条）</p></li><li class="lvl-2"><p>顺序性是最高优先级，宁可慢也不能乱</p></li><li class="lvl-2"><p>开发和维护资源有限</p></li><li class="lvl-2"><p>适合原型开发或非核心业务</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">orderQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;order.queue&quot;</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">orderExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;order.exchange&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">orderBinding</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(orderQueue())</span><br><span class="line">                .to(orderExchange())</span><br><span class="line">                .with(<span class="string">&quot;order.key&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderMessageProducer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendOrderMessage</span><span class="params">(String orderId, List&lt;String&gt; messages)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; messages.size(); i++) &#123;</span><br><span class="line">            <span class="type">OrderMessage</span> <span class="variable">orderMessage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderMessage</span>(orderId, i, messages.get(i));</span><br><span class="line">            rabbitTemplate.convertAndSend(<span class="string">&quot;order.exchange&quot;</span>, <span class="string">&quot;order.key&quot;</span>, orderMessage);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderMessageConsumer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;order.queue&quot;, concurrency = &quot;1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processOrderMessage</span><span class="params">(OrderMessage message)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 处理消息</span></span><br><span class="line">            System.out.println(<span class="string">&quot;处理顺序消息: &quot;</span> + message.getSequence() + <span class="string">&quot;, 内容: &quot;</span> + message.getContent());</span><br><span class="line">            <span class="comment">// 模拟业务处理</span></span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 记录日志，但不重新入队</span></span><br><span class="line">            System.err.println(<span class="string">&quot;消息处理失败: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于消息分组">基于消息分组</h3><p>保证同一批次顺序的消息分为一组。</p><ol><li class="lvl-3"><p><strong>较好的扩展性</strong>：不同消息组可以并行处理，提高了系统整体吞吐量。</p></li><li class="lvl-3"><p><strong>资源利用率提升</strong>：可以利用多个消费者实例。</p></li><li class="lvl-3"><p><strong>实现相对简单</strong>：逻辑清晰，易于理解和调试。</p></li><li class="lvl-3"><p><strong>灵活性</strong>：可以按业务维度（如订单ID、用户ID）进行分组。</p></li></ol><p>缺点：</p><blockquote><ol><li class="lvl-3"><p><strong>顺序保证有漏洞</strong>：</p><ul class="lvl-3"><li class="lvl-5">依赖消息按序到达消费者（在网络分区或重试时可能不保证）</li><li class="lvl-5">状态维护在内存中，应用重启会导致状态丢失</li></ul></li><li class="lvl-3"><p><strong>乱序消息处理复杂</strong>：需要对乱序消息进行缓冲或拒绝，可能造成消息积压。</p></li><li class="lvl-3"><p><strong>内存状态管理</strong>：<code>ConcurrentHashMap</code>可能内存泄漏（如果某些组永远没有最后一条消息）。</p></li><li class="lvl-3"><p><strong>组内串行</strong>：同一个消息组仍然只能串行处理，如果某个大组消息很多，会成为瓶颈。</p></li></ol></blockquote><p>适用场景：</p><ul class="lvl-0"><li class="lvl-2"><p>消息分组明确且组间无依赖的业务</p></li><li class="lvl-2"><p>消息量中等，对完全的顺序性要求不是极端严格</p></li><li class="lvl-2"><p>可以接受在应用重启时丢失部分顺序上下文</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SequentialMessage</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String groupId;  <span class="comment">// 消息组ID</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> sequence;    <span class="comment">// 序列号</span></span><br><span class="line">    <span class="keyword">private</span> String content;  <span class="comment">// 消息内容</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> total;       <span class="comment">// 总消息数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生产者发送保证：按消息分组到指定组（队列）</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SequentialMessageProducer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendSequentialMessages</span><span class="params">(String groupId, List&lt;String&gt; messages)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; messages.size(); i++) &#123;</span><br><span class="line">            <span class="type">SequentialMessage</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SequentialMessage</span>();</span><br><span class="line">            message.setGroupId(groupId);</span><br><span class="line">            message.setSequence(i);</span><br><span class="line">            message.setContent(messages.get(i));</span><br><span class="line">            message.setTotal(messages.size());</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 使用groupId作为routing key，确保同一组消息进入同一队列</span></span><br><span class="line">            rabbitTemplate.convertAndSend(<span class="string">&quot;sequential.exchange&quot;</span>, groupId, message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消费者保证：逻辑中维护顺序关系</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SequentialMessageConsumer</span> &#123;</span><br><span class="line">    <span class="comment">// 维护组内上一条消息的序列号，保证顺序消费</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Integer&gt; lastProcessedSequence = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;sequential.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processSequentialMessage</span><span class="params">(SequentialMessage message)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">groupId</span> <span class="operator">=</span> message.getGroupId();</span><br><span class="line">        <span class="type">int</span> <span class="variable">currentSequence</span> <span class="operator">=</span> message.getSequence();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检查消息顺序（上一条序列号）</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">lastSequence</span> <span class="operator">=</span> lastProcessedSequence.getOrDefault(groupId, -<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (currentSequence == lastSequence + <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 按顺序处理消息</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                processMessage(message);</span><br><span class="line">                lastProcessedSequence.put(groupId, currentSequence);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 如果是最后一条消息，清理状态</span></span><br><span class="line">                <span class="keyword">if</span> (currentSequence == message.getTotal() - <span class="number">1</span>) &#123;</span><br><span class="line">                    lastProcessedSequence.remove(groupId);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                System.err.println(<span class="string">&quot;消息处理失败: &quot;</span> + e.getMessage());</span><br><span class="line">                <span class="comment">// 可以考虑将失败的消息转移到死信队列</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 顺序不对，重新入队或记录日志</span></span><br><span class="line">            System.err.println(<span class="string">&quot;消息顺序错误，期望: &quot;</span> + (lastSequence + <span class="number">1</span>) + <span class="string">&quot;, 实际: &quot;</span> + currentSequence);</span><br><span class="line">            <span class="comment">// 这里可以重新发布消息，或者使用延迟重试</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processMessage</span><span class="params">(SequentialMessage message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;处理组 &quot;</span> + message.getGroupId() + <span class="string">&quot; 的第 &quot;</span> + message.getSequence() + <span class="string">&quot; 条消息: &quot;</span> + message.getContent());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-Redis-维护">使用 Redis 维护</h3><ol><li class="lvl-3"><p><strong>强顺序保证</strong>：通过分布式锁和持久化状态，即使在应用重启后也能保持顺序。</p></li><li class="lvl-3"><p><strong>更好的扩展性</strong>：多个消费者实例可以协作处理不同消息组。</p></li><li class="lvl-3"><p><strong>容错性高</strong>：单个消费者故障不会影响其他组的处理。</p></li><li class="lvl-3"><p><strong>状态持久化</strong>：Redis中的数据在应用重启后仍然存在。</p></li></ol><blockquote><p>缺点：</p><ol><li class="lvl-3"><strong>外部依赖</strong>：强依赖Redis的可用性和性能，系统架构更复杂。</li><li class="lvl-3"><strong>实现复杂度高</strong>：需要处理分布式锁、状态同步等复杂问题。</li><li class="lvl-3"><strong>网络开销</strong>：每次处理消息都需要与Redis交互，增加了延迟。</li><li class="lvl-3"><strong>Redis成为瓶颈</strong>：如果消息组非常多，Redis可能成为性能和单点故障的瓶颈。</li><li class="lvl-3"><strong>成本更高</strong>：需要维护Redis集群。</li></ol></blockquote><p>适用场景：</p><ul class="lvl-0"><li class="lvl-2"><p>对顺序性要求很高，且需要应用多实例部署</p></li><li class="lvl-2"><p>消息组数量在合理范围内（不是海量级别）</p></li><li class="lvl-2"><p>已有Redis基础设施或愿意承担其运维成本</p></li><li class="lvl-2"><p>需要保证在应用重启后仍能正确处理顺序</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisSequentialConsumer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SEQUENCE_KEY_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;msg:sequence:&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;redis.sequential.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processWithRedis</span><span class="params">(SequentialMessage message)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> SEQUENCE_KEY_PREFIX + message.getGroupId() + <span class="string">&quot;:lock&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sequenceKey</span> <span class="operator">=</span> SEQUENCE_KEY_PREFIX + message.getGroupId();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用分布式锁确保同一时间只有一个消费者处理同一组消息</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">locked</span> <span class="operator">=</span> tryLock(lockKey, message.getGroupId(), <span class="number">30</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!locked) &#123;</span><br><span class="line">            <span class="comment">// 获取锁失败，重新入队</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AmqpRejectAndDontRequeueException</span>(<span class="string">&quot;无法获取锁，稍后重试&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">lastSequence</span> <span class="operator">=</span> (Integer) redisTemplate.opsForValue().get(sequenceKey);</span><br><span class="line">            lastSequence = lastSequence == <span class="literal">null</span> ? -<span class="number">1</span> : lastSequence;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (message.getSequence() == lastSequence + <span class="number">1</span>) &#123;</span><br><span class="line">                processMessage(message);</span><br><span class="line">                redisTemplate.opsForValue().set(sequenceKey, message.getSequence());</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (message.getSequence() == message.getTotal() - <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="comment">// 清理状态</span></span><br><span class="line">                    redisTemplate.delete(sequenceKey);</span><br><span class="line">                    redisTemplate.delete(lockKey);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.err.println(<span class="string">&quot;顺序错误，期望: &quot;</span> + (lastSequence + <span class="number">1</span>) + <span class="string">&quot;, 实际: &quot;</span> + message.getSequence());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (locked) &#123;</span><br><span class="line">                releaseLock(lockKey, message.getGroupId());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(String key, String value, <span class="type">long</span> expireSeconds)</span> &#123;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">success</span> <span class="operator">=</span> redisTemplate.opsForValue().setIfAbsent(key, value, expireSeconds, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">return</span> Boolean.TRUE.equals(success);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">releaseLock</span><span class="params">(String key, String value)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">currentValue</span> <span class="operator">=</span> redisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="keyword">if</span> (value.equals(currentValue)) &#123;</span><br><span class="line">            redisTemplate.delete(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消息处理器">消息处理器</h3><ol><li class="lvl-3"><p><strong>高吞吐量</strong>：通过缓冲和异步处理，提高了消息处理效率。</p></li><li class="lvl-3"><p><strong>智能缓冲</strong>：能够处理暂时的乱序，等待前置消息到达。</p></li><li class="lvl-3"><p><strong>弹性扩展</strong>：可以很好地处理消息组的动态变化。</p></li><li class="lvl-3"><p><strong>减少网络往返</strong>：在内存中缓冲处理，比方案3的Redis交互更快。</p></li></ol><blockquote><p>缺点：</p><ol><li class="lvl-3"><strong>实现最复杂</strong>：需要管理内存缓冲区、处理线程、状态同步等。</li><li class="lvl-3"><strong>内存消耗大</strong>：在内存中缓冲消息，可能占用大量堆内存。</li><li class="lvl-3"><strong>状态易丢失</strong>：应用重启会导致内存中所有缓冲消息和状态丢失。</li><li class="lvl-3"><strong>调试困难</strong>：异步处理逻辑复杂，出现问题难以跟踪和调试。</li><li class="lvl-3"><strong>内存泄漏风险</strong>：需要精心设计缓冲区的清理机制。</li></ol></blockquote><p>适用场景：</p><ul class="lvl-0"><li class="lvl-2"><p>消息量大且对性能要求高</p></li><li class="lvl-2"><p>可以接受应用重启时丢失顺序上下文</p></li><li class="lvl-2"><p>有足够的技术能力实现和维护复杂处理逻辑</p></li><li class="lvl-2"><p>消息处理允许一定的延迟（由于缓冲机制）</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdvancedSequentialProcessor</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, BlockingQueue&lt;SequentialMessage&gt;&gt; messageBuffers = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Boolean&gt; processingFlags = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">ExecutorService</span> <span class="variable">processorExecutor</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;advanced.sequential.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveMessage</span><span class="params">(SequentialMessage message)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">groupId</span> <span class="operator">=</span> message.getGroupId();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 初始化消息缓冲区</span></span><br><span class="line">        messageBuffers.putIfAbsent(groupId, <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;());</span><br><span class="line">        BlockingQueue&lt;SequentialMessage&gt; buffer = messageBuffers.get(groupId);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            buffer.put(message);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 如果该组消息没有正在处理，启动处理器</span></span><br><span class="line">            <span class="keyword">if</span> (processingFlags.putIfAbsent(groupId, <span class="literal">true</span>) == <span class="literal">null</span>) &#123;</span><br><span class="line">                processorExecutor.submit(() -&gt; processMessageGroup(groupId));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processMessageGroup</span><span class="params">(String groupId)</span> &#123;</span><br><span class="line">        BlockingQueue&lt;SequentialMessage&gt; buffer = messageBuffers.get(groupId);</span><br><span class="line">        <span class="type">int</span> <span class="variable">expectedSequence</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="comment">// 查看队首元素但不移除</span></span><br><span class="line">                <span class="type">SequentialMessage</span> <span class="variable">message</span> <span class="operator">=</span> buffer.peek();</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (message == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 缓冲区为空，停止处理</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (message.getSequence() == expectedSequence) &#123;</span><br><span class="line">                    <span class="comment">// 移除并处理消息</span></span><br><span class="line">                    buffer.poll();</span><br><span class="line">                    processSingleMessage(message);</span><br><span class="line">                    expectedSequence++;</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// 如果是最后一条消息，结束处理</span></span><br><span class="line">                    <span class="keyword">if</span> (message.getSequence() == message.getTotal() - <span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.getSequence() &gt; expectedSequence) &#123;</span><br><span class="line">                    <span class="comment">// 等待前面的消息</span></span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 重复消息，直接丢弃</span></span><br><span class="line">                    buffer.poll();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;处理消息组 &quot;</span> + groupId + <span class="string">&quot; 时发生错误: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 清理状态</span></span><br><span class="line">            processingFlags.remove(groupId);</span><br><span class="line">            <span class="keyword">if</span> (buffer.isEmpty()) &#123;</span><br><span class="line">                messageBuffers.remove(groupId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processSingleMessage</span><span class="params">(SequentialMessage message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;高级处理器 - 组 &quot;</span> + message.getGroupId() + </span><br><span class="line">                          <span class="string">&quot; 序列 &quot;</span> + message.getSequence() + <span class="string">&quot;: &quot;</span> + </span><br><span class="line">                          message.getContent());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
            <tag> RabbitMQ顺序消息 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ 如何保证消息顺序</title>
      <link href="/2025/10/08f894cf913a4d40a02f5b8694ad368c/"/>
      <url>/2025/10/08f894cf913a4d40a02f5b8694ad368c/</url>
      
        <content type="html"><![CDATA[<p>RocketMQ 实现<strong>顺序消息（Ordered Message）</strong> 的核心思想是：<strong>保证同一业务标识（如订单 ID）的消息，在发送、存储和消费三个阶段都严格按照发送顺序被处理</strong>。这是通过 <strong>“局部有序”</strong>（Partition/Queue 级别有序）来实现的，而非全局有序（全局有序性能极差，一般不推荐）。</p><p>下面从原理、实现方式、代码示例、注意事项等方面详细说明 RocketMQ 如何实现顺序消息。</p><h2 id="顺序消息的类型">顺序消息的类型</h2><p>RocketMQ 支持两种顺序消息：</p><table><thead><tr><th>类型</th><th>说明</th><th>适用场景</th></tr></thead><tbody><tr><td>全局顺序消息</td><td>所有消息严格按发送顺序消费</td><td>性能极低，仅用于极特殊场景（如金融对账）</td></tr><tr><td>分区顺序消息（局部顺序）</td><td>同一业务 Key（如订单 ID）的消息有序，不同 Key 之间可并行</td><td>电商订单、状态机变更等主流场景</td></tr></tbody></table><blockquote><p><strong>生产环境几乎只用“分区顺序消息”</strong>，因为全局顺序要求 Topic 只有一个 Queue，吞吐量严重受限。</p></blockquote><h2 id="实现原理">实现原理</h2><p>核心总结：<strong>同一业务 Key → 同一 Queue → 单线程消费 = 顺序保证</strong></p><h3 id="各阶段如何保证顺序">各阶段如何保证顺序</h3><ol><li class="lvl-3"><p><strong>发送阶段</strong>：消息路由到同一个 Queue</p><p>生产者通过 <strong>MessageQueueSelector</strong> 接口，根据业务 Key（如 <code>orderId</code>）选择固定的 MessageQueue。</p><p>例如：所有 <code>orderId=1001</code> 的消息都发送到 Queue 0，<code>orderId=1002</code> 的消息都发送到 Queue 1。</p><p>这样保证<strong>同一个业务实体的消息落在同一个 Queue 中</strong>。</p></li><li class="lvl-3"><p><strong>存储阶段</strong>：Queue 内部 FIFO</p><p>RocketMQ 的每个 Queue 本质是一个<strong>顺序写入的日志文件（CommitLog 分片）</strong>。</p><p>同一 Queue 中的消息天然按写入顺序存储，保证存储有序。</p></li><li class="lvl-3"><p><strong>消费阶段</strong>：单线程顺序消费</p><p>消费者对每个 Queue <strong>使用单线程</strong>拉取消息并处理。</p><p>RocketMQ 的 PushConsumer 默认为每个 Queue 分配一个消费线程（可通过配置调整，但顺序消费必须单线程）。</p><p>如果消费失败，会<strong>暂停该 Queue 的消费</strong>，直到成功或跳过，避免乱序。</p></li></ol><h3 id="实现的关键机制">实现的关键机制</h3><ol><li class="lvl-3"><p><strong>Queue 锁机制</strong>（消费端）</p><p>RocketMQ 为每个 Queue 在消费端加锁（分布式锁，基于 Broker）。保证同一时间，<strong>一个 Queue 只能被一个 Consumer 实例消费</strong>，确保单线程处理。如果 Consumer 宕机，Broker 会在 20 秒后释放锁，由其他实例接管。</p></li><li class="lvl-3"><p><strong>消息重试策略</strong></p><p>顺序消息<strong>不进入重试队列</strong>。失败时会<strong>暂停当前 Queue 的消费</strong>，持续重试，直到成功或人工干预。</p><p>可通过 <code>context.setSuspendCurrentQueueTimeMillis(1000)</code> 自定义暂停时间（最大 30 秒）。</p></li><li class="lvl-3"><p><strong>性能与扩展性</strong></p><p>顺序性是以<strong>牺牲并行度</strong>为代价的。</p><p>建议：<strong>合理设计业务 Key</strong>，避免热点（如所有消息都用同一个 Key，导致所有流量压到一个 Queue）。</p><p>可通过增加 Queue 数量提升吞吐（如 16 个 Queue，16 个订单 ID 均匀分布）。</p></li></ol><h2 id="Demo-示例">Demo 示例</h2><p>demo代码Java实现</p><h3 id="生产者">生产者</h3><p>使用 MessageQueueSelector</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DefaultMQProducer</span> <span class="variable">producer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultMQProducer</span>(<span class="string">&quot;OrderProducerGroup&quot;</span>);</span><br><span class="line">producer.setNamesrvAddr(<span class="string">&quot;localhost:9876&quot;</span>);</span><br><span class="line">producer.start();</span><br><span class="line"></span><br><span class="line">String[] orderIds = &#123;<span class="string">&quot;1001&quot;</span>, <span class="string">&quot;1002&quot;</span>, <span class="string">&quot;1001&quot;</span>, <span class="string">&quot;1002&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; orderIds.length; i++) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">orderId</span> <span class="operator">=</span> orderIds[i];</span><br><span class="line">    <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(</span><br><span class="line">        <span class="string">&quot;OrderTopic&quot;</span>,</span><br><span class="line">        <span class="string">&quot;OrderTag&quot;</span>,</span><br><span class="line">        (<span class="string">&quot;订单操作-&quot;</span> + i + <span class="string">&quot;, orderId=&quot;</span> + orderId).getBytes(RemotingHelper.DEFAULT_CHARSET)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关键：根据 orderId 选择 Queue</span></span><br><span class="line">    <span class="type">SendResult</span> <span class="variable">sendResult</span> <span class="operator">=</span> producer.send(msg, <span class="keyword">new</span> <span class="title class_">MessageQueueSelector</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> MessageQueue <span class="title function_">select</span><span class="params">(List&lt;MessageQueue&gt; mqs, Message msg, Object arg)</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">orderId</span> <span class="operator">=</span> (String) arg;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> orderId.hashCode() % mqs.size(); <span class="comment">// 础但有效</span></span><br><span class="line">            <span class="keyword">return</span> mqs.get(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, orderId); <span class="comment">// 将 orderId 作为 arg 传入 selector</span></span><br><span class="line"></span><br><span class="line">    System.out.printf(<span class="string">&quot;发送结果: %s, QueueId: %d%n&quot;</span>, sendResult.getSendStatus(), sendResult.getMessageQueue().getQueueId());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">producer.shutdown();</span><br></pre></td></tr></table></figure><h3 id="消费者">消费者</h3><p>使用顺序消费监听器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DefaultMQPushConsumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultMQPushConsumer</span>(<span class="string">&quot;OrderConsumerGroup&quot;</span>);</span><br><span class="line">consumer.setNamesrvAddr(<span class="string">&quot;localhost:9876&quot;</span>);</span><br><span class="line">consumer.subscribe(<span class="string">&quot;OrderTopic&quot;</span>, <span class="string">&quot;OrderTag&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册顺序消息监听器</span></span><br><span class="line">consumer.registerMessageListener(<span class="keyword">new</span> <span class="title class_">MessageListenerOrderly</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ConsumeOrderlyStatus <span class="title function_">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; msgs, ConsumeOrderlyContext context)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (MessageExt msg : msgs) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">orderId</span> <span class="operator">=</span> getOrderIdFromMsg(msg); <span class="comment">// 从消息中解析 orderId</span></span><br><span class="line">            System.out.println(<span class="string">&quot;消费消息: &quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(msg.getBody()) + <span class="string">&quot;, QueueId: &quot;</span> + msg.getQueueId());</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 模拟业务处理</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 处理订单状态变更逻辑</span></span><br><span class="line">                processOrder(orderId, msg);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="comment">// 消费失败：返回 SUSPEND_CURRENT_QUEUE_A_MOMENT，稍后重试</span></span><br><span class="line">                <span class="keyword">return</span> ConsumeOrderlyStatus.SUSPEND_CURRENT_QUEUE_A_MOMENT;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 消费成功</span></span><br><span class="line">        <span class="keyword">return</span> ConsumeOrderlyStatus.SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">consumer.start();</span><br></pre></td></tr></table></figure><h2 id="典型应用场景">典型应用场景</h2><ol><li class="lvl-3"><p><strong>电商订单状态流转</strong><br><code>创建 → 支付 → 发货 → 完成</code>，必须严格有序。</p></li><li class="lvl-3"><p><strong>数据库 Binlog 同步</strong><br>同一行数据的多次变更必须按序应用，否则数据错乱。</p></li><li class="lvl-3"><p><strong>玩家游戏操作日志</strong><br><code>移动 → 攻击 → 使用技能</code>，顺序影响游戏逻辑。</p></li><li class="lvl-3"><p><strong>金融交易流水</strong><br>同一账户的多笔交易需按时间顺序处理。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
          <category> RocketMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RocketMQ </tag>
            
            <tag> Rocket顺序消息 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式锁的应用场景和多种实现方案</title>
      <link href="/2025/10/012c8567dfc94aec8d01c55acdf98396/"/>
      <url>/2025/10/012c8567dfc94aec8d01c55acdf98396/</url>
      
        <content type="html"><![CDATA[<p>分布式锁是分布式系统中用于协调多个节点对共享资源进行互斥访问的关键机制。</p><p>核心目标：<strong>在任意时刻，只有一个节点能操作某项共享资源</strong>，从而避免数据不一致、重复处理、资源竞争等问题。</p><p>以下是分布式锁的典型使用场景：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>防止重复提交 / 幂等性控制</strong>：防止用户多次点击“支付”按钮，或网络重试（防止请求重复）</p></li><li class="lvl-2"><p><strong>秒杀 / 抢购系统</strong>：高并发下抢购限量商品（防止出现商品<strong>超卖</strong>问题）</p></li><li class="lvl-2"><p><strong>定时任务防重</strong>：多个服务实例部署了相同的定时任务（防止任务被多个节点同时执行，导致数据重复处理或资源浪费）</p></li><li class="lvl-2"><p><strong>分布式 ID 生成</strong>：Snowflake 算法中，机器 ID 需全局唯一（防止多节点启动时可能分配到相同机器 ID）</p></li><li class="lvl-2"><p><strong>缓存更新</strong>：缓存失效瞬间，大量请求穿透到数据库（预防数据库压力骤增，甚至宕机）</p></li><li class="lvl-2"><p><strong>状态机流转控制</strong>：订单状态从“待支付” → “已支付” → “已发货”，需严格顺序（并发请求可能导致状态错乱，如重复发货）</p></li><li class="lvl-2"><p><strong>分布式配置变更协调</strong>：多个服务实例需同时应用新配置（如灰度发布），实例间配置不一致导致业务异常</p></li><li class="lvl-2"><p><strong>文件/资源互斥写入</strong>：多个节点需写入同一个共享文件（如日志聚合、报表生成），导致文件内容错乱或覆盖</p></li></ul></blockquote><p><strong>为了确保分布式锁可用，至少要确保锁实现同时满足以下四个条件</strong>：</p><blockquote><ol><li class="lvl-3"><p><strong>互斥性</strong>。在任意时刻，只有一个客户端能持有锁。</p></li><li class="lvl-3"><p><strong>不发生死锁</strong>。即使有客户端在持有锁的期间崩溃而没有主动解锁，也能保证后续其他客户端能加锁。</p></li><li class="lvl-3"><p><strong>容错性</strong>。只要大部分的Redis节点正常运行，客户端就可以加锁和解锁。</p></li><li class="lvl-3"><p><strong>隔离性</strong>。加锁和解锁必须是同一个客户端，客户端自己不能把别人加的锁给解了。</p></li></ol></blockquote><p><strong>常见的实现方案有以下几种</strong>：</p><blockquote><ol><li class="lvl-3"><p><strong>基于数据库（MySQL）实现</strong>：利用数据库的唯一约束（如唯一索引）或行锁（如 <code>SELECT ... FOR UPDATE</code>）实现互斥。</p></li><li class="lvl-3"><p><strong>基于 Redis 实现</strong>：利用 Redis 的原子操作（如 <code>SET key value NX EX</code>）实现锁。</p></li><li class="lvl-3"><p><strong>基于 ZooKeeper 实现</strong>：利用 ZooKeeper 的临时顺序节点（ephemeral sequential node）和 watch 机制。</p></li><li class="lvl-3"><p><strong>基于 Etcd 实现</strong>：类似 ZooKeeper，利用 Etcd 的 Lease（租约）和 Watch 机制。</p></li><li class="lvl-3"><p><strong>其他方案</strong>：</p><ul class="lvl-3"><li class="lvl-5"><strong>Consul</strong>：基于 Raft 协议，提供 KV 存储和 Session 机制实现分布式锁。</li><li class="lvl-5"><strong>自研方案</strong>：结合多种存储（如 Redis + MySQL 双写校验），但复杂度高。</li></ul></li></ol></blockquote><table><thead><tr><th>方案</th><th>一致性</th><th>性能</th><th>可靠性</th><th>自动过期</th><th>适用场景</th></tr></thead><tbody><tr><td><strong>数据库</strong></td><td>弱</td><td>低</td><td>依赖 DB</td><td>需手动</td><td>低并发、简单场景</td></tr><tr><td><strong>Redis</strong></td><td>最终</td><td><strong>高</strong></td><td>单点风险</td><td><strong>支持</strong></td><td>高并发、性能敏感场景</td></tr><tr><td><strong>ZooKeeper</strong></td><td><strong>强</strong></td><td>中</td><td><strong>高</strong></td><td><strong>支持</strong></td><td>强一致性要求场景</td></tr><tr><td><strong>Etcd</strong></td><td><strong>强</strong></td><td>中</td><td><strong>高</strong></td><td><strong>支持</strong></td><td>云原生、K8s 生态</td></tr></tbody></table><h2 id="基于数据库实现">基于数据库实现</h2><p>利用数据库的唯一约束（如唯一索引）或行锁（如 <code>SELECT ... FOR UPDATE</code>）实现互斥。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>唯一索引法</strong>：尝试插入一条带唯一键的记录，插入成功即获得锁，失败则表示锁已被占用。</p></li><li class="lvl-2"><p><strong>乐观锁</strong>：通过版本号（version）控制并发更新。</p></li><li class="lvl-2"><p><strong>悲观锁</strong>：使用 <code>SELECT ... FOR UPDATE</code> 获取行级排他锁。</p></li></ul></blockquote><p><strong>优点</strong>：简单易懂，无需引入额外组件。</p><p><strong>缺点</strong>：</p><ul class="lvl-0"><li class="lvl-2"><p>性能较差（尤其高并发下数据库压力大）；</p></li><li class="lvl-2"><p>依赖数据库可靠性；</p></li><li class="lvl-2"><p>不支持自动过期（需额外处理死锁）；</p></li></ul><p><strong>实现案例</strong>：</p><p>通过数据库的排他锁来实现分布式锁。 基于MySQL的InnoDB引擎，可以使用以下方法来实现加锁操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 阻塞锁？ for update语句会在执行成功后立即返回，在执行失败时一直处于阻塞状态，直到成功。</span></span><br><span class="line"><span class="comment">// 锁定之后服务宕机，无法释放？使用这种方式，服务宕机之后数据库会自己把锁释放掉。</span></span><br><span class="line"><span class="comment">// 排他锁长时间不提交，就会占用数据库连接。一旦类似的连接变得多了，就可能把数据库连接池撑爆</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lock</span><span class="params">()</span>&#123;</span><br><span class="line">    connection.setAutoCommit(<span class="literal">false</span>)</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            result = select * from methodLock where method_name=xxx <span class="keyword">for</span> update;</span><br><span class="line">            <span class="keyword">if</span>(result==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解锁</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span>&#123;</span><br><span class="line">    connection.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在查询语句后面增加<code>for update (nowait)</code>，数据库会在查询过程中给数据库表增加排他锁（ InnoDB引擎在加锁的时候，只有通过唯一索引进行检索的时候才会使用行级锁，否则会使用表级锁）。当某条记录被加上排他锁之后，其他线程无法再该行记录上增加排他锁。</p><blockquote><p><strong>共享锁</strong>：由读表操作加的锁，加锁后其他用户只能获取该表或行的共享锁，不能获取排它锁，也就是说只能读不能写</p><p><strong>排它锁</strong>：由写表操作加的锁，加锁后其他用户不能获取该表或行的任何锁，典型是mysql事务中</p></blockquote><h2 id="基于-Redis-实现">基于 Redis 实现</h2><p>利用 Redis 的原子操作（如 <code>SET key value NX EX</code>）实现锁。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET lock_key unique_value NX EX <span class="number">30</span></span><br></pre></td></tr></table></figure><blockquote><ul class="lvl-1"><li class="lvl-2"><p><code>NX</code>：仅当 key 不存在时设置（保证原子性）；</p></li><li class="lvl-2"><p><code>EX 30</code>：设置过期时间（防止死锁）；</p></li><li class="lvl-2"><p><code>unique_value</code>：用于解锁时校验（避免误删他人锁）。</p></li></ul></blockquote><p><strong>优点</strong>：</p><ul class="lvl-0"><li class="lvl-2"><p>高性能、低延迟；</p></li><li class="lvl-2"><p>支持自动过期；</p></li><li class="lvl-2"><p>社区方案成熟（如 Redisson）。</p></li></ul><p><strong>缺点</strong>：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>单点故障</strong>：主从架构下主节点宕机可能导致锁丢失（需用 Redlock 算法缓解）；</p></li><li class="lvl-2"><p>网络分区时可能违反互斥性（CAP 理论限制）。</p></li></ul><h3 id="简单实现">简单实现</h3><p>加锁的过程很简单，就是通过SET指令来设置值，成功则返回；否则就循环等待，在timeout时间内仍未获取到锁，则获取失败</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisLock</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">lock_key</span> <span class="operator">=</span> <span class="string">&quot;redis_lock&quot;</span>; <span class="comment">//锁键</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">long</span> <span class="variable">internalLockLeaseTime</span> <span class="operator">=</span> <span class="number">30000</span>;<span class="comment">//锁过期时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="variable">timeout</span> <span class="operator">=</span> <span class="number">999999</span>; <span class="comment">//获取锁的超时时间</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//SET命令的参数 </span></span><br><span class="line">    <span class="type">SetParams</span> <span class="variable">params</span> <span class="operator">=</span> SetParams.setParams().nx().px(internalLockLeaseTime);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JedisPool jedisPool;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加锁</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lock</span><span class="params">(String id)</span>&#123;</span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> jedisPool.getResource();</span><br><span class="line">        <span class="type">Long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">                <span class="comment">//SET命令返回OK ，则证明获取锁成功</span></span><br><span class="line">                <span class="comment">// NX，意思是SET IF NOT EXIST，即当key不存在时，我们进行set操作；若key已经存在，则不做任何操作；</span></span><br><span class="line">                <span class="comment">// PX，意思是我们要给这个key加一个过期的设置</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">lock</span> <span class="operator">=</span> jedis.set(lock_key, id, <span class="string">&quot;NX&quot;</span>, <span class="string">&quot;PX&quot;</span>, internalLockLeaseTime);</span><br><span class="line">                <span class="keyword">if</span>(<span class="string">&quot;OK&quot;</span>.equals(lock))&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//否则循环等待，在timeout时间内仍未获取到锁，则获取失败</span></span><br><span class="line">                <span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> System.currentTimeMillis() - start;</span><br><span class="line">                <span class="keyword">if</span> (l&gt;=timeout) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            jedis.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解锁</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">unlock</span><span class="params">(String id)</span>&#123;</span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> jedisPool.getResource();</span><br><span class="line">        <span class="type">String</span> <span class="variable">script</span> <span class="operator">=</span></span><br><span class="line">            <span class="string">&quot;if redis.call(&#x27;get&#x27;,KEYS[1]) == ARGV[1] then&quot;</span> +</span><br><span class="line">            <span class="string">&quot;   return redis.call(&#x27;del&#x27;,KEYS[1]) &quot;</span> +</span><br><span class="line">            <span class="string">&quot;else&quot;</span> +</span><br><span class="line">            <span class="string">&quot;   return 0 &quot;</span> +</span><br><span class="line">            <span class="string">&quot;end&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> jedis.eval(script, Collections.singletonList(lock_key), </span><br><span class="line">                                       Collections.singletonList(id));</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(result.toString()))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            jedis.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">clientcount</span> <span class="operator">=</span><span class="number">1000</span>;</span><br><span class="line">    <span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(clientcount);</span><br><span class="line"></span><br><span class="line">    <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(clientcount);</span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;clientcount;i++)&#123;</span><br><span class="line">        executorService.execute(() -&gt; &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//通过Snowflake算法获取唯一的ID字符串</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> IdUtil.getId();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                redisLock.lock(id);</span><br><span class="line">                count++;</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                redisLock.unlock(id);</span><br><span class="line">            &#125;</span><br><span class="line">            countDownLatch.countDown();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    countDownLatch.await();</span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    logger.info(<span class="string">&quot;执行线程数:&#123;&#125;,总耗时:&#123;&#125;,count数为:&#123;&#125;&quot;</span>,clientcount,end-start,count);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存在的问题：</p><ul class="lvl-0"><li class="lvl-2"><p>​    <mark>锁不具有可重入性</mark>。</p></li><li class="lvl-2"><p>​    业务未处理而主动释放锁，此时锁已到期。</p></li></ul><p><strong>获取锁-错误案例1</strong>:  过期时间设置分两步，不具有原子性，易发生死锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Long</span> <span class="variable">result</span> <span class="operator">=</span> jedis.setnx(lockKey, requestId);</span><br><span class="line"><span class="keyword">if</span> (result == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 若在这里程序突然崩溃，则无法设置过期时间，将发生死锁，锁永远不会过期</span></span><br><span class="line">    jedis.expire(lockKey, expireTime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>获取锁-错误案例2</strong>：过期时间分步判断且各客户端时间必须强一致，不具有原子性，在时间判断过程中到期，则可能被其他客户端加锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">wrongGetLock2</span><span class="params">(Jedis jedis, String lockKey, <span class="type">int</span> expireTime)</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">expires</span> <span class="operator">=</span> System.currentTimeMillis() + expireTime;</span><br><span class="line">    <span class="type">String</span> <span class="variable">expiresStr</span> <span class="operator">=</span> String.valueOf(expires);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果当前锁不存在，返回加锁成功</span></span><br><span class="line">    <span class="keyword">if</span> (jedis.setnx(lockKey, expiresStr) == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果锁存在，获取锁的过期时间</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">currentValueStr</span> <span class="operator">=</span> jedis.get(lockKey);</span><br><span class="line">    <span class="keyword">if</span> (currentValueStr != <span class="literal">null</span> &amp;&amp; Long.parseLong(currentValueStr) &lt; System.currentTimeMillis()) &#123;</span><br><span class="line">        <span class="comment">// 锁已过期，获取上一个锁的过期时间，并设置现在锁的过期时间</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">oldValueStr</span> <span class="operator">=</span> jedis.getSet(lockKey, expiresStr);</span><br><span class="line">        <span class="keyword">if</span> (oldValueStr != <span class="literal">null</span> &amp;&amp; oldValueStr.equals(currentValueStr)) &#123;</span><br><span class="line">            <span class="comment">// 考虑多线程并发的情况，只有一个线程的设置值和当前值相同，它才有权利加锁</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">// 其他情况，一律返回加锁失败</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Redisson-实现">Redisson 实现</h3><p>当已经被加锁，存在该key且未过期时，其他线程将 while (true) {} 一直尝试获取锁，而不是队列等待</p><p><strong>实现原理</strong></p><img src="/imgs/v2-6a83e9a88942a6ec850a403640e46339_r.jpg" alt="img" style="zoom:67%;" /><p><strong>加锁机制</strong></p><p>如果该客户端面对的是一个Redis Cluster集群，它首先会根据hash节点选择一台机器，再发送一段lua脚本到redis，</p><p>保存Hash 数据结构：myLock:{threadId:1}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;T&gt; RFuture&lt;T&gt; <span class="title function_">tryLockInnerAsync</span><span class="params">(<span class="type">long</span> waitTime, <span class="type">long</span> leaseTime, TimeUnit unit, <span class="type">long</span> threadId, RedisStrictCommand&lt;T&gt; command)</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> evalWriteAsync(getRawName(), LongCodec.INSTANCE, command,</span><br><span class="line">             <span class="string">&quot;if (redis.call(&#x27;exists&#x27;, KEYS[1]) == 0) then &quot;</span> +</span><br><span class="line">                 <span class="string">&quot;redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[2], 1); &quot;</span> +</span><br><span class="line">                 <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +</span><br><span class="line">                 <span class="string">&quot;return nil; &quot;</span> +</span><br><span class="line">             <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">             <span class="string">&quot;if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[2]) == 1) then &quot;</span> + <span class="comment">// 可重入加锁判断</span></span><br><span class="line">                 <span class="string">&quot;redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[2], 1); &quot;</span> +    <span class="comment">//     累加1</span></span><br><span class="line">                 <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +</span><br><span class="line">                 <span class="string">&quot;return nil; &quot;</span> +</span><br><span class="line">             <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                 <span class="string">&quot;return redis.call(&#x27;pttl&#x27;, KEYS[1]);&quot;</span>, <span class="comment">// 返回剩余时间</span></span><br><span class="line">         Collections.singletonList(getRawName()), unit.toMillis(leaseTime), getLockName(threadId));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>锁互斥机制</strong></p><p>根据LUA脚本尝试加锁，若不成功，不断尝试，直到信号量释放获取到锁或被中断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">(<span class="type">long</span> leaseTime, TimeUnit unit, <span class="type">boolean</span> interruptibly)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">     <span class="type">long</span> <span class="variable">threadId</span> <span class="operator">=</span> Thread.currentThread().getId();</span><br><span class="line">     <span class="type">Long</span> <span class="variable">ttl</span> <span class="operator">=</span> tryAcquire(-<span class="number">1</span>, leaseTime, unit, threadId);</span><br><span class="line">     <span class="comment">// lock acquired</span></span><br><span class="line">     <span class="keyword">if</span> (ttl == <span class="literal">null</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     RFuture&lt;RedissonLockEntry&gt; future = subscribe(threadId);</span><br><span class="line">     <span class="keyword">if</span> (interruptibly) &#123;</span><br><span class="line">         commandExecutor.syncSubscriptionInterrupted(future);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         commandExecutor.syncSubscription(future);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">// 不断尝试获取锁</span></span><br><span class="line">         <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">             ttl = tryAcquire(-<span class="number">1</span>, leaseTime, unit, threadId);</span><br><span class="line">             <span class="comment">// lock acquired</span></span><br><span class="line">             <span class="keyword">if</span> (ttl == <span class="literal">null</span>) &#123;</span><br><span class="line">                 <span class="keyword">break</span>;</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">             <span class="comment">// 锁的剩余时间</span></span><br><span class="line">             <span class="keyword">if</span> (ttl &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                 <span class="keyword">try</span> &#123;</span><br><span class="line">                     <span class="comment">// 如果在给定的等待时间内变为可用并且当前线程未被中断，则从此信号量获取许可。</span></span><br><span class="line">             <span class="comment">// 如果没有可用的许可，则当前线程将出于线程调度目的而被禁用并处于休眠状态，直到发生以下三种情况之一：</span></span><br><span class="line">                <span class="comment">// 1.其他线程调用该信号量的release方法，当前线程接下来将被分配一个许可； </span></span><br><span class="line">                <span class="comment">// 2.其他线程中断当前线程； 3. 指定的等待时间已过。</span></span><br><span class="line">                     future.getNow().getLatch().tryAcquire(ttl, TimeUnit.MILLISECONDS);</span><br><span class="line">                 &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                     <span class="keyword">if</span> (interruptibly) &#123;</span><br><span class="line">                         <span class="keyword">throw</span> e;</span><br><span class="line">                     &#125;</span><br><span class="line">                     future.getNow().getLatch().tryAcquire(ttl, TimeUnit.MILLISECONDS);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                 <span class="keyword">if</span> (interruptibly) &#123;</span><br><span class="line">                     <span class="comment">// 从这个信号量中获取一个许可，阻塞直到一个信号量可用，或者线程被中断。</span></span><br><span class="line">                        <span class="comment">//获得许可证（如果有）并立即返回，将可用许可证的数量减少一个。</span></span><br><span class="line">                     future.getNow().getLatch().acquire();</span><br><span class="line">                 &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">//从此信号量获取许可，阻塞直到一个可用。获得许可证（如果有）并立即返回，将可用许可证的数量减少一个。</span></span><br><span class="line"><span class="comment">//如果没有可用的许可，则当前线程将出于线程调度目的而被禁用并处于休眠状态，直到某个其他线程调用此信号量的release方法。</span></span><br><span class="line">                     future.getNow().getLatch().acquireUninterruptibly();</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">         unsubscribe(future, threadId);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>释放锁</strong>（LUA脚本）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> RFuture&lt;Boolean&gt; <span class="title function_">unlockInnerAsync</span><span class="params">(<span class="type">long</span> threadId)</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> evalWriteAsync(getRawName(), LongCodec.INSTANCE, RedisCommands.EVAL_BOOLEAN,</span><br><span class="line">         <span class="string">&quot;if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[3]) == 0) then &quot;</span> +</span><br><span class="line">                 <span class="string">&quot;return nil;&quot;</span> +</span><br><span class="line">          <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                 <span class="string">&quot;local counter = redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[3], -1); &quot;</span> +</span><br><span class="line">           <span class="string">&quot;if (counter &gt; 0) then &quot;</span> + <span class="comment">// 判断可重入次数（加锁次数）</span></span><br><span class="line">                 <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[2]); &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;return 0; &quot;</span> +</span><br><span class="line">            <span class="string">&quot;else &quot;</span> +</span><br><span class="line">                 <span class="string">&quot;redis.call(&#x27;del&#x27;, KEYS[1]); &quot;</span> + <span class="comment">//删除key</span></span><br><span class="line">                 <span class="string">&quot;redis.call(&#x27;publish&#x27;, KEYS[2], ARGV[1]); &quot;</span> +</span><br><span class="line">                 <span class="string">&quot;return 1; &quot;</span> +</span><br><span class="line">             <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                 <span class="string">&quot;return nil;&quot;</span>,</span><br><span class="line">         Arrays.asList(getRawName(), getChannelName()), LockPubSub.UNLOCK_MESSAGE, internalLockLeaseTime, getLockName(threadId));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>自动延期机制</strong></p><p>客户端A加锁的锁key默认生存时间只有30秒，如果超过了30秒，客户端A还想一直持有这把锁，怎么办</p><blockquote><p>只要客户端A一旦加锁成功，就会启动一个watch dog看门狗，<strong>它是一个后台线程，会每隔10秒检查一下</strong>，如果客户端A还持有锁key，那么就会不断的延长锁key的生存时间</p></blockquote><p><strong>存在的问题</strong></p><p>master-slave主从异步复制导致redis分布式锁的缺陷，原锁丢失/多个客户端加锁。</p><p><strong>在master实例宕机的时候，可能导致多个客户端同时完成加锁</strong>。</p><blockquote><p>为了Redis的高可用，一般都会给Redis的节点挂一个slave,然后采用哨兵模式进行主备切换。但由于Redis的主从复制（replication）是异步的，这可能会出现在数据同步过程中，<strong>master宕机，slave来不及同步数据就被选为master，从而数据丢失</strong>。</p></blockquote><blockquote><p>这就会导致客户端B来尝试加锁的时候，在新的master上完成了加锁，而客户端以为自己成功加了锁，就会导致多个客户端对一个分布式锁完成了加锁。这时就会导致各种脏数据的产生。</p></blockquote><h3 id="Redis集群锁（Redlock算法）">Redis集群锁（<strong>Redlock算法</strong>）</h3><p>在Redis的分布式环境中，我们假设有N个Redis master。这些节点<strong>完全互相独立，不存在主从复制或者其他集群协调机制</strong>。</p><p>我们确保将在N个实例上使用与在Redis单实例下相同方法获取和释放锁。现在我们假设有5个Redis master节点，同时我们需要在5台服务器上面运行这些Redis实例，这样保证他们不会同时都宕掉。</p><img src="/imgs/542a2850c57abe8f8b7d5d04a658e7ac.png" alt="img" style="zoom:67%;" /><p>为了取到锁，客户端应该执行以下操作:</p><blockquote><ol><li class="lvl-3"><p>获取当前Unix时间，以毫秒为单位。</p></li><li class="lvl-3"><p>依次尝试从N个实例，使用相同的key和随机值获取锁。在步骤2，当向Redis设置锁时,客户端应该设置一个网络连接和响应超时时间，这个超时时间应该小于锁的失效时间。例如你的锁自动失效时间为10秒，则超时时间应该在5-50毫秒之间。这样可以避免服务器端Redis已经挂掉的情况下，客户端还在死死地等待响应结果。如果服务器端没有在规定时间内响应，客户端应该尽快尝试另外一个Redis实例。</p></li><li class="lvl-3"><p>客户端使用当前时间减去开始获取锁时间（步骤1记录的时间）就得到获取锁使用的时间。当且仅当从大多数（这里是3个节点）的Redis节点都取到锁，并且使用的时间小于锁失效时间时，锁才算获取成功。</p></li><li class="lvl-3"><p>如果取到了锁，key的真正有效时间等于有效时间减去获取锁所使用的时间（步骤3计算的结果）。</p></li><li class="lvl-3"><p>如果因为某些原因，获取锁失败（<em>没有</em>在至少N/2+1个Redis实例取到锁或者取锁时间已经超过了有效时间），客户端应该在所有的Redis实例上进行解锁（即便某些Redis实例根本就没有加锁成功）。</p></li></ol></blockquote><h3 id="看门狗（延长锁时效）">看门狗（延长锁时效）</h3><p>假设锁超时时间是 30 秒，此时程序需要每隔一段时间去扫描一下该锁是否还存在，扫描时间需要小于超时时间，通常可以设置为超时时间的 1/3，在这里也就是 10 秒扫描一次。如果锁还存在，则重置其超时时间恢复到 30 秒。</p><p>通过这种方案，只要业务还没有处理完成，锁就会一直有效；而当业务一旦处理完成，程序也会马上删除该锁。</p><blockquote><p>1.watchDog 只有在未显示指定加锁时间时才会生效。（这点很重要）</p><p>2.lockWatchdogTimeout 设定的时间不要太小 ，比如我之前设置的是 100毫秒，由于网络直接导致加锁完后，watchdog去延期时，这个key在redis中已经被删除了。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;T&gt; RFuture&lt;Long&gt; <span class="title function_">tryAcquireAsync</span><span class="params">(<span class="type">long</span> waitTime, <span class="type">long</span> leaseTime</span></span><br><span class="line"><span class="params">                                          , TimeUnit unit, <span class="type">long</span> threadId)</span> &#123;</span><br><span class="line">    <span class="comment">//如果指定了加锁时间，会直接去加锁</span></span><br><span class="line">    <span class="keyword">if</span> (leaseTime != -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> tryLockInnerAsync(waitTime, leaseTime, unit, </span><br><span class="line">                                 threadId, RedisCommands.EVAL_LONG);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//没有指定加锁时间 会先进行加锁，并且默认时间就是 LockWatchdogTimeout的时间</span></span><br><span class="line">    <span class="comment">//这个是异步操作 返回RFuture 类似netty中的future</span></span><br><span class="line">    RFuture&lt;Long&gt; ttlRemainingFuture = tryLockInnerAsync(waitTime, </span><br><span class="line">            commandExecutor.getConnectionManager().getCfg().getLockWatchdogTimeout(),</span><br><span class="line">                      TimeUnit.MILLISECONDS, threadId, RedisCommands.EVAL_LONG);</span><br><span class="line">    <span class="comment">//这里也是类似netty Future 的addListener，在future内容执行完成后执行</span></span><br><span class="line">    ttlRemainingFuture.onComplete((ttlRemaining, e) -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ttlRemaining == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//这里是定时执行 当前锁自动延期的动作</span></span><br><span class="line">            scheduleExpirationRenewal(threadId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> ttlRemainingFuture;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>lua脚本判断 锁是否在，如果存在就进行 pexpire 延期。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> RFuture&lt;Boolean&gt; <span class="title function_">renewExpirationAsync</span><span class="params">(<span class="type">long</span> threadId)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> evalWriteAsync(getName(), LongCodec.INSTANCE, RedisCommands.EVAL_BOOLEAN,</span><br><span class="line">                          <span class="string">&quot;if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[2]) == 1) then &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;return 1; &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;return 0;&quot;</span>,</span><br><span class="line">                          Collections.singletonList(getName()),</span><br><span class="line">                          internalLockLeaseTime, getLockName(threadId));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基于-ZooKeeper-实现">基于 ZooKeeper 实现</h2><p>Zookeeper 的分布式实现依赖以下关键特性：</p><blockquote><p><strong>1. 临时节点和顺序节点：</strong> 临时节点在客户端会话结束时自动删除，顺序节点则会根据创建顺序生成唯一编号。这些特性被用于实现分布式锁和任务队列。</p><p><strong>2. Watcher 机制：</strong> 客户端可以对节点的变化（如创建、删除、数据变更）设置监听器。当节点状态发生变化时，Zookeeper 会通知相关客户端，从而实现事件驱动的分布式协调。</p></blockquote><p><strong>实现步骤</strong>：</p><ol><li class="lvl-3"><p>所有客户端在 <code>/locks</code> 路径下创建临时顺序节点（如 <code>/locks/lock_0000000001</code>）；</p></li><li class="lvl-3"><p>客户端检查自己创建的节点是否为序号最小的节点：</p><ul class="lvl-2"><li class="lvl-5">是 → 获得锁；</li><li class="lvl-5">否 → 监听前一个序号的节点（watch），等待其释放（节点删除）后重试。</li></ul></li></ol><p><strong>优点</strong>：</p><ul class="lvl-0"><li class="lvl-2"><p>强一致性（ZAB 协议保证）；</p></li><li class="lvl-2"><p>临时节点自动释放（客户端宕机时锁自动释放）；</p></li><li class="lvl-2"><p>无单点问题（ZooKeeper 集群高可用）。</p></li></ul><p><strong>缺点</strong>：</p><ul class="lvl-0"><li class="lvl-2"><p>性能低于 Redis（写操作需多数派确认）；</p></li><li class="lvl-2"><p>运维复杂度高；</p></li><li class="lvl-2"><p>网络抖动可能导致频繁重连。</p></li></ul><p><strong>实现案例</strong>：</p><p>Zookeeper 的分布式锁通过以下步骤实现：</p><ol><li class="lvl-3"><p><strong>创建节点：</strong> 客户端在指定路径下创建临时顺序节点。如果节点是路径下最小的节点，则获取锁；否则，监听前一个节点的删除事件。</p></li><li class="lvl-3"><p><strong>监听机制：</strong> 未获取锁的客户端会阻塞并监听前一个节点的变化。当前一个节点被删除时，触发监听器，重新尝试获取锁。</p></li><li class="lvl-3"><p><strong>释放锁：</strong> 获取锁的客户端完成任务后，删除自身节点，通知下一个等待的客户端。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">zkLock</span><span class="params">()</span> &#123;</span><br><span class="line">   currentNode = zk.create(<span class="string">&quot;/locks/seq-&quot;</span>, <span class="literal">null</span>, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);</span><br><span class="line">   List&lt;String&gt; childrenNodes = zk.getChildren(<span class="string">&quot;/locks&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">   Collections.sort(childrenNodes);</span><br><span class="line">   <span class="type">String</span> <span class="variable">thisNode</span> <span class="operator">=</span> currentNode.substring(<span class="string">&quot;/locks/&quot;</span>.length());</span><br><span class="line">   <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> childrenNodes.indexOf(thisNode);</span><br><span class="line">   <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span>; <span class="comment">// 当前节点是最小节点，获取锁</span></span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       waitPath = <span class="string">&quot;/locks/&quot;</span> + childrenNodes.get(index - <span class="number">1</span>);</span><br><span class="line">       zk.getData(waitPath, <span class="literal">true</span>, <span class="keyword">new</span> <span class="title class_">Stat</span>());</span><br><span class="line">       waitDownLatch.await(); <span class="comment">// 等待前一个节点释放锁</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用 Curator 框架</strong>：Curator 是对 Zookeeper 的封装，提供了更高效的分布式锁实现。通过 <em>InterProcessMutex</em> 类，可以轻松实现分布式锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InterProcessLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InterProcessMutex</span>(curatorFramework, <span class="string">&quot;/locks&quot;</span>);</span><br><span class="line">lock.acquire(); <span class="comment">// 获取锁</span></span><br><span class="line"><span class="comment">// 执行业务逻辑</span></span><br><span class="line">lock.release(); <span class="comment">// 释放锁</span></span><br></pre></td></tr></table></figure><h2 id="基于-Etcd-实现">基于 Etcd 实现</h2><p>类似 ZooKeeper，利用 Etcd 的 Lease（租约）和 Watch 机制。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>通过 <code>Put</code> 操作尝试创建带租约的 key；</p></li><li class="lvl-2"><p>若 key 不存在则创建成功（获得锁），否则监听 key 的删除事件；</p></li><li class="lvl-2"><p>租约到期自动删除 key（防止死锁）。</p></li></ul></blockquote><p>实现原理</p><blockquote><ol><li class="lvl-3"><p><strong>租约机制</strong>：etcd 使用租约（Lease）为键值对设置 TTL（生存时间）。当租约到期时，键值对会自动删除，从而释放锁。</p></li><li class="lvl-3"><p><strong>事务机制</strong>：通过事务操作确保只有一个客户端能够成功创建特定的键（即加锁）。</p></li><li class="lvl-3"><p><strong>公平性</strong>：etcd 基于键的创建版本号（Revision）实现公平性，确保按顺序获取锁。</p></li></ol></blockquote><p><strong>优点</strong>：</p><ul class="lvl-0"><li class="lvl-2"><p>高可用、强一致性（Raft 协议）；</p></li><li class="lvl-2"><p>支持 TTL 自动过期；</p></li><li class="lvl-2"><p>云原生生态友好（Kubernetes 底层依赖）。</p></li></ul><p><strong>缺点</strong>：</p><ul class="lvl-0"><li class="lvl-2"><p>性能略低于 Redis；</p></li><li class="lvl-2"><p>学习成本较高。</p></li></ul><h3 id="自定义实现">自定义实现</h3><p>加锁逻辑（支持阻塞等待），<strong>不保证公平性</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="type">long</span> <span class="variable">timeoutMs</span> <span class="operator">=</span> unit.toMillis(timeout);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (System.currentTimeMillis() - start &lt; timeoutMs) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 创建租约</span></span><br><span class="line">            <span class="type">LeaseGrantResponse</span> <span class="variable">leaseGrant</span> <span class="operator">=</span> leaseClient.grant(leaseTTL).get();</span><br><span class="line">            <span class="built_in">this</span>.leaseId = leaseGrant.getID();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 尝试获取锁（put 操作）</span></span><br><span class="line">            <span class="type">PutResponse</span> <span class="variable">putResponse</span> <span class="operator">=</span> kvClient.put(</span><br><span class="line">                ByteSequence.from(lockKey, StandardCharsets.UTF_8),</span><br><span class="line">                ByteSequence.from(<span class="string">&quot;locked&quot;</span>, StandardCharsets.UTF_8),</span><br><span class="line">                PutOption.newBuilder().withLeaseId(leaseId).build()</span><br><span class="line">            ).get();</span><br><span class="line"></span><br><span class="line">            <span class="built_in">this</span>.revision = putResponse.getHeader().getRevision();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 检查是否是最小 revision（即是否获得锁）</span></span><br><span class="line">            <span class="comment">// 实际上，etcd 锁的标准做法是：尝试 put 后，检查是否有比自己 revision 更小的 key</span></span><br><span class="line">            <span class="comment">// 但更高效的方式是：直接尝试 put，然后通过 range 查询判断自己是否最小</span></span><br><span class="line">            <span class="comment">// 简化版：我们假设只要 put 成功且没有更小的 revision，就获得锁</span></span><br><span class="line">            <span class="comment">// 但标准做法应使用 etcd 的锁 API（见下文推荐）</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 简化实现：直接认为 put 成功即获得锁（仅适用于单客户端竞争）</span></span><br><span class="line">            <span class="comment">// 严格公平锁需检查 revision 队列（见下方“完整公平锁”说明）</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            <span class="comment">// 租约或 put 失败，清理并重试</span></span><br><span class="line">            <span class="keyword">if</span> (leaseId != -<span class="number">1</span>) &#123;</span><br><span class="line">                leaseClient.revoke(leaseId);</span><br><span class="line">                leaseId = -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>); <span class="comment">// 短暂等待后重试</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="jetcd-实现">jetcd 实现</h3><p>使用 jetcd 内置的 <code>Lock</code> 客户端。jetcd 提供了封装好的分布式锁 API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">Client</span> <span class="variable">client</span> <span class="operator">=</span> Client.builder()</span><br><span class="line">        .endpoints(<span class="string">&quot;http://127.0.0.1:2379&quot;</span>)</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">    <span class="type">Lock</span> <span class="variable">lockClient</span> <span class="operator">=</span> client.getLockClient();</span><br><span class="line">    <span class="type">ByteSequence</span> <span class="variable">lockName</span> <span class="operator">=</span> ByteSequence.from(<span class="string">&quot;/my-lock&quot;</span>, StandardCharsets.UTF_8);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取锁（阻塞直到获得）</span></span><br><span class="line">    <span class="type">LockResponse</span> <span class="variable">lockResponse</span> <span class="operator">=</span> lockClient.lock(lockName).get(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">    System.out.println(<span class="string">&quot;Got lock, lease ID: &quot;</span> + lockResponse.getLease());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 执行业务逻辑</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Working...&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 释放锁</span></span><br><span class="line">        lockClient.unlock(lockResponse.getKey()).get();</span><br><span class="line">        System.out.println(<span class="string">&quot;Lock released.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    client.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项">注意事项</h3><ol><li class="lvl-3"><p><strong>租约续期</strong>：<br>jetcd 的 <code>Lock</code> 客户端<strong>不会自动续租</strong>！若业务执行时间 &gt; leaseTTL，锁会自动释放。<br><strong>解决方案</strong>：</p><ul class="lvl-2"><li class="lvl-5">设置足够长的 TTL；</li><li class="lvl-5">或启动后台线程定期 <code>leaseClient.keepAlive(leaseId)</code>（需自行管理）。</li></ul></li><li class="lvl-3"><p><strong>异常处理</strong>：网络中断、etcd 宕机时，锁可能提前释放，需业务层保证幂等性。</p></li><li class="lvl-3"><p><strong>锁命名</strong>：建议使用 <code>/locks/service_name/resource_id</code> 格式避免冲突。</p></li><li class="lvl-3"><p><strong>性能</strong>：<br>etcd 锁的吞吐量低于 Redis，适用于<strong>强一致性、低频竞争</strong>场景。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式锁 </tag>
            
            <tag> 看门狗 </tag>
            
            <tag> Redisson </tag>
            
            <tag> Etcd分布式锁 </tag>
            
            <tag> ZooKeeper分布式锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 多线程之交替执行的实现方案</title>
      <link href="/2025/09/5667928f59754e0e87f521c9c6c351c6/"/>
      <url>/2025/09/5667928f59754e0e87f521c9c6c351c6/</url>
      
        <content type="html"><![CDATA[<p>两个线程交替打印1-100，列举以下几种方法：</p><blockquote><ol><li class="lvl-3"><strong>synchronized+object</strong>：<code>wait()</code>等待，<code>notify()</code> 唤醒</li><li class="lvl-3"><strong>Lock-condition</strong>（条件变量）：<code>c1.signalAll()</code> 唤醒，<code>c2.await()</code> 等待</li><li class="lvl-3"><strong>volatile</strong> 修饰的变量，通过值控制（可以是boolean，或者是数字类型）</li><li class="lvl-3"><strong>Semaphore</strong>（信号量），<code>acquire()</code>获取许可，<code>release()</code>释放许可;</li><li class="lvl-3"><strong>CyclicBarrier</strong>（循环栅栏），<code>await() </code>使等待</li><li class="lvl-3"><strong>AtomicBoolean</strong>，基于cas机制实现线程交替打印</li><li class="lvl-3"><strong>LockSupport</strong>：<code>park()</code>阻塞当前线程、<code>unpark(Thread t) </code>释放t线程，设置锁标志位</li></ol></blockquote><h2 id="Object（等待-唤醒）">Object（等待+唤醒）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt; 多线程交替打印</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 通过Object的 wait() 和 notify() 方法，需要借助锁实现，如 synchronized</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> He.hp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> haeng2030@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2024/11/21 21:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WaitNotifyStagger</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">printf</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (o1) &#123;</span><br><span class="line">                o1.notify();</span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-&quot;</span> + (++num));</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    o1.wait(<span class="number">2000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">while</span> (num &lt; <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">WaitNotifyStagger</span> <span class="variable">threadPrint</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WaitNotifyStagger</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(threadPrint::printf, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(threadPrint::printf, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Condition（条件变量）">Condition（条件变量）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadStaggerByCondition</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(Condition curr, Condition next)</span> &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.lockInterruptibly();</span><br><span class="line">                next.signal();</span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-&quot;</span> + (++num));</span><br><span class="line"></span><br><span class="line">                curr.await(<span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (num &lt; <span class="number">90</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ThreadStaggerByCondition</span> <span class="variable">threadPrint2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadStaggerByCondition</span>();</span><br><span class="line">        <span class="type">Condition</span> <span class="variable">condition1</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">        <span class="type">Condition</span> <span class="variable">condition2</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">        <span class="type">Condition</span> <span class="variable">condition3</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"></span><br><span class="line">        threadPool.submit(() -&gt; threadPrint2.print(condition1, condition2));</span><br><span class="line">        threadPool.submit(() -&gt; threadPrint2.print(condition2, condition3));</span><br><span class="line">        threadPool.submit(() -&gt; threadPrint2.print(condition3, condition1));</span><br><span class="line"></span><br><span class="line">        threadPool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Semaphore（信号量）">Semaphore（信号量）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadStaggerBySemaphore</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">maxNum</span> <span class="operator">=</span> <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(Semaphore curr, Semaphore next)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (num &lt; maxNum) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                curr.acquire();</span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-&quot;</span> + (num++));</span><br><span class="line"></span><br><span class="line">                next.release();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Semaphore</span> <span class="variable">semaphore1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Semaphore</span> <span class="variable">semaphore2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ThreadStaggerBySemaphore</span> <span class="variable">stagger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadStaggerBySemaphore</span>();</span><br><span class="line">        threadPool.submit(() -&gt; stagger.print(semaphore1, semaphore2));</span><br><span class="line">        threadPool.submit(() -&gt; stagger.print(semaphore2, semaphore1));</span><br><span class="line"></span><br><span class="line">        threadPool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CyclicBarrier（循环栅栏）">CyclicBarrier（循环栅栏）</h2><p>主要用于让一组线程互相等待，直到所有线程都达到了一个公共屏障点（Barrier Point），然后这些线程才继续执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadStaggerByCyclicBarrier</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">maxNum</span> <span class="operator">=</span> <span class="number">40</span>;</span><br><span class="line">    <span class="comment">// 屏障的限制个数为2，传入一个参数n，那么需要有n个线程都执行await方法，才会进入下一轮</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">CyclicBarrier</span> <span class="variable">cyclicBarrier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-&quot;</span> + (++num));</span><br><span class="line">                &#125;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 进入阻塞，直到线程B也执行await方法</span></span><br><span class="line">                    cyclicBarrier.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">while</span> (num &lt; maxNum);</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-&quot;</span> + (++num));</span><br><span class="line">                &#125;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    cyclicBarrier.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">while</span> (num &lt; maxNum);</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Queue（阻塞队列）">Queue（阻塞队列）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadStaggerByQueue</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">maxNum</span> <span class="operator">=</span> <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(BlockingQueue&lt;Integer&gt; curr, BlockingQueue&lt;Integer&gt; next)</span> &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                curr.take();</span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-&quot;</span> + (++num));</span><br><span class="line"></span><br><span class="line">                next.add(<span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (num &lt; maxNum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">final</span> BlockingQueue&lt;Integer&gt; q1 = <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Integer&gt;() &#123;&#123;</span><br><span class="line">            add(<span class="number">0</span>); <span class="comment">// 加个值</span></span><br><span class="line">        &#125;&#125;;</span><br><span class="line">        <span class="keyword">final</span> BlockingQueue&lt;Integer&gt; q2 = <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">ThreadStaggerByQueue</span> <span class="variable">threadPrint2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadStaggerByQueue</span>();</span><br><span class="line">        threadPool.submit(() -&gt; threadPrint2.print(q1, q2));</span><br><span class="line">        threadPool.submit(() -&gt; threadPrint2.print(q2, q1));</span><br><span class="line"></span><br><span class="line">        threadPool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="volatile-变量">volatile 变量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt; 多线程交替打印</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; volatile 修饰的变量，可以换成数字类型，支持更多线程。 boolean只能两个线程</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> He.hp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> haeng2030@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2024/11/21 22:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VolatileStagger</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-&quot;</span> + (++num));</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">while</span> (num &lt; <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (; num &lt; <span class="number">100</span>; ) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-&quot;</span> + (++num));</span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AtomicBoolean（CAS）">AtomicBoolean（CAS）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt; 多线程交替打印</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 基于cas的原子类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> He.hp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> haeng2030@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2024/11/21 22:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AtomicStagger</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">AtomicBoolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicBoolean</span>(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (flag.get()) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-&quot;</span> + (++num));</span><br><span class="line">                    flag.set(<span class="literal">false</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">while</span> (num &lt; <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (; num &lt; <span class="number">100</span>; ) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!flag.get()) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-&quot;</span> + (++num));</span><br><span class="line">                    flag.set(<span class="literal">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LockSupport（阻塞-释放）">LockSupport（阻塞/释放）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;多线程交替打印</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; LockSupport.park() 和 LockSupport.unpark(t2)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> He.hp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> haeng2030@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2024/11/21 23:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LockSupportStagger</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        t1 = <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="comment">// 获取不到就会阻塞在这里</span></span><br><span class="line">                LockSupport.park();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-&quot;</span> + (++num));</span><br><span class="line">                <span class="comment">// 这个参数不写1也没事，因为我们tryRelease没用到</span></span><br><span class="line">                LockSupport.unpark(t2);</span><br><span class="line">            &#125; <span class="keyword">while</span> (num &lt; <span class="number">100</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>);</span><br><span class="line">        t2 = <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                LockSupport.park();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-&quot;</span> + (++num));</span><br><span class="line">                LockSupport.unpark(t1);</span><br><span class="line">            &#125; <span class="keyword">while</span> (num &lt; <span class="number">100</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        LockSupport.unpark(t1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java多线程 </tag>
            
            <tag> Condition </tag>
            
            <tag> AtomicBoolean </tag>
            
            <tag> CyclicBarrier </tag>
            
            <tag> Semaphore </tag>
            
            <tag> LockSupport </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 多线程之有序执行的实现方案</title>
      <link href="/2025/09/f09e383fabf7484584ede610c1453cd2/"/>
      <url>/2025/09/f09e383fabf7484584ede610c1453cd2/</url>
      
        <content type="html"><![CDATA[<p>线程在启动以后，并不是第一时间就会立马执行。而是要等待CPU的一个资源调度，而CPU调度的顺序是通过复杂算法计算得到的。</p><p>等启动的线程得到CPU指令后，才和主线程做一个切换，执行run方法。这就造成了每次我们执行的结果都是随机的。</p><p>可以通过一些方式控制线程执行的顺序：</p><h2 id="join-（优先执行）">join()（优先执行）</h2><p>调用线程需等待该<code>join()</code>线程执行完成后，才能继续用下其他线程。</p><blockquote><p>底层通过<code>wait</code>和<code>notify</code>实现，保证线程执行顺序</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadOrderByJoin</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;1产品经理规划新需求&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;2开发人员开发新需求功能&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Thread</span> <span class="variable">thread3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;3测试人员测试新功能&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread1.join(); <span class="comment">// 等待当前线程执行完毕再往下执行</span></span><br><span class="line">        thread2.start();</span><br><span class="line">        thread2.join(); <span class="comment">// 等待当前线程执行完毕再往下执行</span></span><br><span class="line">        thread3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Object（等待-唤醒）">Object（等待+唤醒）</h2><p>Object的方法，是让当前线程进入等待状态，释放它所持有的锁。“直到其他线程调用此对象的 notify() 方法或 notifyAll() 方法”，当前线程被唤醒(进入“就绪状态”)。</p><blockquote><p>所有的实例都有一个等待队列，它在实例的wait方法执行后停止操作的线程的队列。</p><p>执行wait方法后，线程便会暂停操作，进入等待队列</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadOrderByObject</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">demo1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">demo2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (demo1) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;1产品经理规划新需求&quot;</span>);</span><br><span class="line">                demo1.notify();       <span class="comment">//放开 1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (demo1) &#123;</span><br><span class="line">                    demo1.wait();        <span class="comment">// 暂停1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;2开发人员开发新需求功能&quot;</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (demo2) &#123;</span><br><span class="line">                demo2.notify();        <span class="comment">//放开 2</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Thread</span> <span class="variable">thread3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (demo2) &#123;</span><br><span class="line">                    demo2.wait();     <span class="comment">// 暂停2</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;3测试人员测试新功能&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 先启动最后等待的线程，依次向上（wait() 在 notify() 前面执行，否则一直阻塞等待，除非wait(1000)）</span></span><br><span class="line">        thread3.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">        thread1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ExecutorService（单线程池）">ExecutorService（单线程池）</h2><p>利用并发包里<code>newSingleThreadExecutor</code>产生一个单线程的线程池，而这个线程池的底层原理就是一个先进先出（FIFO）的队列。</p><blockquote><p>代码中executor.submit依次添加了123线程，按照FIFO的特性，执行顺序也就是123的执行结果，从而保证了执行顺序。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ExecutorService 的源码原理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Runnable command)</span> &#123; </span><br><span class="line">    <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> ctl.get();</span><br><span class="line">    <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</span><br><span class="line">        <span class="keyword">if</span> (addWorker(command, <span class="literal">true</span>))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        c = ctl.get();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">recheck</span> <span class="operator">=</span> ctl.get();</span><br><span class="line">        <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</span><br><span class="line">            reject(command);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)</span><br><span class="line">            addWorker(<span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="literal">false</span>))</span><br><span class="line">        reject(command);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">static</span> <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line"><span class="comment">// 通过ExecutorService 线程池启动线程，保证顺序执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        executorService.submit(thread2);</span><br><span class="line">        executorService.submit(thread1);</span><br><span class="line">        executorService.submit(thread3);</span><br><span class="line"></span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Condition（条件变量）">Condition（条件变量）</h2><p>通常与锁关联。需要在多个Contidion中共享一个锁时，可以传递一个Lock/RLock实例给构造方法，否则它将自己生成一个RLock实例。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>**await()**方法类似于Object类中的<code>wait()</code>方法。</p></li><li class="lvl-2"><p>**await(long time,TimeUnit unit)**方法类似于Object类中的<code>wait(long time)</code>方法。</p></li><li class="lvl-2"><p>**signal()**方法类似于Object类中的<code>notify()</code>方法。</p></li><li class="lvl-2"><p>**signalAll()**方法类似于Object类中的<code>notifyAll()</code>方法。</p></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadOrderByCondition</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Condition</span> <span class="variable">condition1</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Condition</span> <span class="variable">condition2</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">threadFlag</span> <span class="operator">=</span> <span class="number">1</span>;<span class="comment">//当前正在执行线程的标记,相当于状态标记</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;1产品经理规划新需求&quot;</span>);</span><br><span class="line">                condition1.signal();</span><br><span class="line">                threadFlag = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (threadFlag != <span class="number">1</span>)</span><br><span class="line">                    condition1.await();</span><br><span class="line">                System.out.println(<span class="string">&quot;2开发人员开发新需求功能&quot;</span>);</span><br><span class="line">                threadFlag = <span class="number">2</span>;</span><br><span class="line">                condition2.signal();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (threadFlag != <span class="number">2</span>)</span><br><span class="line">                    condition2.await();</span><br><span class="line">                System.out.println(<span class="string">&quot;3测试人员测试新功能&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CountDownLatch（计数）">CountDownLatch（计数）</h2><p>位于java.util.concurrent包下，利用它可以实现类似计数器的功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadOrderByCountDownLatch</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于判断线程一是否执行，倒计时设置为1，执行后减1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">CountDownLatch</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">CountDownLatch</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;1产品经理规划新需求&quot;</span>);        </span><br><span class="line">            c1.countDown();</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;            <span class="comment">//等待c1倒计时，计时为0则往下运行</span></span><br><span class="line">                c1.await();</span><br><span class="line">                System.out.println(<span class="string">&quot;2开发人员开发新需求功能&quot;</span>);         </span><br><span class="line">                c2.countDown();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;            <span class="comment">//等待c2倒计时，计时为0则往下运行</span></span><br><span class="line">                c2.await();</span><br><span class="line">                System.out.println(<span class="string">&quot;3测试人员测试新功能&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CyclicBarrier（回环栅栏）">CyclicBarrier（回环栅栏）</h2><p>通过它可以实现让一组线程等待至某个状态之后再全部同时执行。</p><blockquote><p>当所有等待线程都被释放以后，CyclicBarrier可以被重用。当调用await()方法之后，线程就处于barrier了。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadOrderByCyclicBarrier</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">CyclicBarrier</span> <span class="variable">barrier1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">static</span> <span class="type">CyclicBarrier</span> <span class="variable">barrier2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;1产品经理规划新需求&quot;</span>);            <span class="comment">//放开栅栏1</span></span><br><span class="line">                barrier1.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;            <span class="comment">//放开栅栏1</span></span><br><span class="line">                barrier1.await();</span><br><span class="line">                System.out.println(<span class="string">&quot;2开发人员开发新需求功能&quot;</span>);            <span class="comment">//放开栅栏2</span></span><br><span class="line">                barrier2.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;            <span class="comment">//放开栅栏2</span></span><br><span class="line">                barrier2.await();</span><br><span class="line">                System.out.println(<span class="string">&quot;3测试人员测试新功能&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Semaphore（信号量）">Semaphore（信号量）</h2><p>是一个计数信号量，包含一组许可证。每个<code>acquire()</code>都会阻塞，直到获取一个可用的许可证，每个<code>release()</code>都会释放持有许可证的线程，并且归还一个可用的许可证。</p><blockquote><p><strong>acquire()</strong>:当前线程尝去阻塞的获取1个许可证，获取了1个可用的许可证，则会停止等待，继续执行。</p><p><strong>release()</strong>:当前线程释放1个可用的许可证。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadOrderBySemaphore</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Semaphore</span> <span class="variable">semaphore1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Semaphore</span> <span class="variable">semaphore2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;1产品经理规划新需求&quot;</span>);</span><br><span class="line">            semaphore1.release();</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                semaphore1.acquire();</span><br><span class="line">                System.out.println(<span class="string">&quot;2开发人员开发新需求功能&quot;</span>);</span><br><span class="line">                semaphore2.release();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                semaphore2.acquire();</span><br><span class="line">                System.out.println(<span class="string">&quot;3测试人员测试新功能&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>其他例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123; <span class="comment">//生产者、消费者问题</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">clerk</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">clerk</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">productT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Producer</span>(c));<span class="comment">//生产者线程</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">consumerT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Consumer</span>(c));<span class="comment">//消费者线程</span></span><br><span class="line">        productT.start();</span><br><span class="line">        consumerT.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">clerk</span> &#123; <span class="comment">//店员</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">product</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//默认 0 个产品</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">addproduct</span><span class="params">()</span> &#123; <span class="comment">//生产出的产品，交给店员</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.product &gt;= <span class="number">20</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait(); <span class="comment">//产品过多，稍后再生产</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            product++;</span><br><span class="line">            System.out.println(<span class="string">&quot;生产者生产第&quot;</span> + product + <span class="string">&quot;个产品。&quot;</span>);</span><br><span class="line">            notifyAll(); <span class="comment">//通知等待区的消费者可取产品</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">getproduct</span><span class="params">()</span> &#123; <span class="comment">//消费者从店员处取产品</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.product &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait(); <span class="comment">//缺货，稍后再取</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;消费者取走了第：&quot;</span> + product + <span class="string">&quot;产品。&quot;</span>);</span><br><span class="line">            product--;</span><br><span class="line">            notifyAll(); <span class="comment">//通知等待取得生产者可以继续生产</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Producer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123; <span class="comment">//生产者线程</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> clerk c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Producer</span><span class="params">(clerk c)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.c = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产者开始生产产品。&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep((<span class="type">int</span>) (Math.random() * <span class="number">10</span>) * <span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            c.addproduct(); <span class="comment">//生产</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123; <span class="comment">//消费者线程</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> clerk c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Consumer</span><span class="params">(clerk c)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.c = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者开始取走产品。&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep((<span class="type">int</span>) (Math.random() * <span class="number">10</span>) * <span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            c.getproduct(); <span class="comment">//取产品</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java多线程 </tag>
            
            <tag> Condition </tag>
            
            <tag> CyclicBarrier </tag>
            
            <tag> Semaphore </tag>
            
            <tag> ExecutorService </tag>
            
            <tag> CountDownLatch </tag>
            
            <tag> join </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ 负载均衡实现原理</title>
      <link href="/2025/09/e42c313d478f4e7ca960e034058d3a72/"/>
      <url>/2025/09/e42c313d478f4e7ca960e034058d3a72/</url>
      
        <content type="html"><![CDATA[<p>RocketMQ 的负载均衡（Load Balancing）机制是其高可用、高吞吐能力的核心组成部分，主要体现在 <strong>生产者发送消息的负载均衡</strong> 和 <strong>消费者消费消息的负载均衡</strong> 两个层面。两者均基于 <strong>Topic 的 Queue 分片模型</strong> 实现，但策略和目标不同。</p><p>下面从原理、实现机制、策略类型、代码逻辑等方面详细阐述 RocketMQ 的负载均衡实现。</p><h2 id="核心基础">核心基础</h2><p>核心为 Topic 与 Queue 模型，在 RocketMQ 中</p><ul class="lvl-0"><li class="lvl-2"><p>一个 <strong>Topic</strong> 被划分为多个 <strong>MessageQueue</strong>（简称 Queue）。</p></li><li class="lvl-2"><p>每个 Queue 是<strong>有序、不可分割</strong>的最小存储和消费单元。</p></li><li class="lvl-2"><p>Queue 分布在多个 Broker 上（主从架构），实现数据分片和并行处理。</p></li></ul><img src="/imgs/mq/image-20251011233016362.png" alt="image-20251011233016362" style="zoom:67%;" /><h2 id="生产者负载均衡">生产者负载均衡</h2><p>将消息<strong>均匀发送到 Topic 的所有 Queue</strong>，避免热点 Queue，提升吞吐。</p><h3 id="轮询策略（默认）">轮询策略（默认）</h3><ul class="lvl-0"><li class="lvl-2"><p>RocketMQ Producer 内部维护一个 <code>index</code> 计数器。</p></li><li class="lvl-2"><p>每次发送消息时，<code>index++</code>，然后 <code>index % queueTotal</code> 选择 Queue。</p></li><li class="lvl-2"><p>保证消息在所有 Queue 间<strong>均匀轮询</strong>。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DefaultMQProducer 内部逻辑简化版</span></span><br><span class="line"><span class="type">int</span> <span class="variable">nextIndex</span> <span class="operator">=</span> <span class="built_in">this</span>.sendWhichQueue.getAndIncrement();</span><br><span class="line"><span class="type">int</span> <span class="variable">queueIndex</span> <span class="operator">=</span> Math.abs(nextIndex) % queueList.size();</span><br><span class="line"><span class="type">MessageQueue</span> <span class="variable">selectedQueue</span> <span class="operator">=</span> queueList.get(queueIndex);</span><br></pre></td></tr></table></figure><h3 id="自定义策略">自定义策略</h3><p>当需要<strong>顺序消息</strong>或<strong>按业务 Key 路由</strong>时，可自定义选择器：MessageQueueSelector</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">producer.send(msg, (mqs, msg, arg) -&gt; &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> (String) arg;</span><br><span class="line">    <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> key.hashCode() % mqs.size();</span><br><span class="line">    <span class="keyword">return</span> mqs.get(idx);</span><br><span class="line">&#125;, <span class="string">&quot;orderId123&quot;</span>);</span><br></pre></td></tr></table></figure><p>此时负载均衡由业务逻辑控制，<strong>不再轮询</strong>。</p><h3 id="故障规避">故障规避</h3><ul class="lvl-0"><li class="lvl-2"><p>Producer 会定期从 NameServer 拉取 Topic 路由信息（默认 30 秒）。</p></li><li class="lvl-2"><p>如果某个 Broker 不可用，其上的 Queue 会被自动剔除，后续消息只发往健康 Queue。</p></li><li class="lvl-2"><p>支持 <strong>sendLatencyFaultEnable</strong>（延迟容错）：若某 Broker 发送慢，会临时规避一段时间。</p></li></ul><h2 id="消费者负载均衡">消费者负载均衡</h2><p>将 Topic 的所有 Queue <strong>均匀分配给当前 Consumer Group 中的多个 Consumer 实例</strong>，实现并行消费。</p><p>核心机制：Rebalance（重平衡）</p><h3 id="触发时机">触发时机</h3><ul class="lvl-0"><li class="lvl-2"><p>Consumer 启动时</p></li><li class="lvl-2"><p>新 Consumer 加入或退出 Group</p></li><li class="lvl-2"><p>Topic 的 Queue 数量变化（如扩容）</p></li><li class="lvl-2"><p>定时任务（默认每 20 秒）</p></li></ul><h3 id="负载均衡策略">负载均衡策略</h3><p>RocketMQ 提供多种分配策略，默认是 <strong>平均分配（AllocateMessageQueueAveragely）</strong>：</p><table><thead><tr><th>策略</th><th>说明</th></tr></thead><tbody><tr><td><code>AllocateMessageQueueAveragely</code>（默认）</td><td>平均分配，尽量均分 Queue</td></tr><tr><td><code>AllocateMessageQueueAveragelyByCircle</code></td><td>轮询分配（适合 Queue 数 &lt; Consumer 数）</td></tr><tr><td><code>AllocateMessageQueueByMachineRoom</code></td><td>按机房分配（需配置）</td></tr><tr><td><code>AllocateMessageQueueConsistentHash</code></td><td>一致性哈希（减少重平衡抖动）</td></tr><tr><td><code>AllocateMessageQueueByConfig</code></td><td>按配置分配（静态）</td></tr></tbody></table><blockquote><p>平均分配（4 Queues, 2 Consumers）：</p><ul class="lvl-1"><li class="lvl-2">Consumer-1: Queue-0, Queue-1</li><li class="lvl-2">Consumer-2: Queue-2, Queue-3</li></ul><p>轮询分配（3 Queues, 2 Consumers）：</p><ul class="lvl-1"><li class="lvl-2"><p>Consumer-1: Queue-0, Queue-2</p></li><li class="lvl-2"><p>Consumer-2: Queue-1</p></li></ul></blockquote><h3 id="分配过程">分配过程</h3><ol><li class="lvl-3"><p>Consumer 从 NameServer 获取 Topic 所有 Queue 列表。</p></li><li class="lvl-3"><p>获取当前 Consumer Group 下所有在线 Consumer 实例（通过心跳注册到 Broker）。</p></li><li class="lvl-3"><p>对 Queue 列表和 Consumer 列表<strong>排序</strong>（保证所有实例计算结果一致）。</p></li><li class="lvl-3"><p>应用分配策略，计算本实例应消费的 Queue 子集。</p></li><li class="lvl-3"><p>更新本地消费队列，并启动/停止对应 Queue 的拉取任务。</p></li></ol><blockquote><ul class="lvl-1"><li class="lvl-2"><p>顺序消费时，<strong>一个 Queue 只能被一个 Consumer 消费</strong>（加分布式锁）。</p></li><li class="lvl-2"><p>负载均衡仍按上述策略分配，但消费线程为单线程。</p></li></ul></blockquote><h3 id="两种模式">两种模式</h3><ol><li class="lvl-3"><p>集群模式（CLUSTERING）</p><ul class="lvl-2"><li class="lvl-5">Queue 在 Consumer Group 内<strong>共享</strong>，每条消息只被一个 Consumer 消费。</li><li class="lvl-5">适用于<strong>任务分发、削峰填谷</strong>等场景。</li><li class="lvl-5">负载均衡在此模式下生效。</li></ul></li><li class="lvl-3"><p>广播模式（BROADCASTING）</p><ul class="lvl-2"><li class="lvl-5"><p>每个 Consumer 都消费<strong>所有 Queue 的全部消息</strong>。</p></li><li class="lvl-5"><p>无负载均衡概念，每个实例独立消费全量数据。</p></li><li class="lvl-5"><p>适用于<strong>缓存更新、配置同步</strong>等场景。</p></li></ul></li></ol><h2 id="负载均衡的可靠性保障">负载均衡的可靠性保障</h2><ol><li class="lvl-3"><p>心跳机制</p><ul class="lvl-2"><li class="lvl-5"><p>Consumer 每 30 秒向所有 Broker 发送心跳，注册自身信息。</p></li><li class="lvl-5"><p>Broker 维护 Consumer Group 的在线列表，用于 Rebalance。</p></li></ul></li><li class="lvl-3"><p>重平衡幂等性</p><ul class="lvl-2"><li class="lvl-5"><p>Rebalance 过程是幂等的，多次执行结果一致。</p></li><li class="lvl-5"><p>拉取消息时基于 <strong>PullOffset</strong>，避免重复或丢失。</p></li></ul></li><li class="lvl-3"><p>故障转移</p><ul class="lvl-2"><li class="lvl-5"><p>若 Consumer 宕机，其他实例在下一次 Rebalance（20 秒内）接管其 Queue。</p></li><li class="lvl-5"><p>消费进度（Consumer Offset）持久化在 Broker（集群模式）或本地（广播模式）。</p></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
          <category> RocketMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RocketMQ </tag>
            
            <tag> Rocket负载均衡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 的弱引用和回调函数</title>
      <link href="/2025/09/8aa0908410da49a88994c7b3b08f7f67/"/>
      <url>/2025/09/8aa0908410da49a88994c7b3b08f7f67/</url>
      
        <content type="html"><![CDATA[<h2 id="回调函数">回调函数</h2><p><strong>回调函数（Callback Function）</strong> 是一种编程模式，指的是将一个函数作为参数传递给另一个函数，并在特定时机（如事件触发、异步操作完成、条件满足等）被调用执行。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>实现<strong>异步操作</strong>（如网络请求、文件读写完成后的处理）</p></li><li class="lvl-2"><p>实现<strong>事件驱动</strong>（如 GUI 中按钮点击、定时器触发）</p></li><li class="lvl-2"><p>提高代码<strong>灵活性和复用性</strong>（不同场景传入不同回调函数）</p></li></ul></blockquote><p><strong>优点</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>灵活性高</strong>：行为可动态配置</p></li><li class="lvl-2"><p><strong>解耦</strong>：调用者和被调用者无需直接依赖</p></li><li class="lvl-2"><p><strong>适合事件/异步模型</strong></p></li></ul></blockquote><p><strong>缺点</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>回调地狱（Callback Hell）</strong>：多层嵌套回调导致代码难以阅读和维护</p></li><li class="lvl-2"><p><strong>错误处理复杂</strong>：异常传播困难</p></li><li class="lvl-2"><p><strong>调试困难</strong>：调用栈不直观</p></li></ul></blockquote><h3 id="实现方式">实现方式</h3><ul class="lvl-0"><li class="lvl-2"><p><strong>基础回调</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需要回调的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Hello, <span class="subst">&#123;name&#125;</span>!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数，将回调函数作为参数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_user</span>(<span class="params">name, callback</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Processing user...&quot;</span>)</span><br><span class="line">    callback(name)  <span class="comment"># 回调！</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用主函数</span></span><br><span class="line">process_user(<span class="string">&quot;Alice&quot;</span>, greet)</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># Processing user...</span></span><br><span class="line"><span class="comment"># Hello, Alice!</span></span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>带返回值的回调</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用回调函数计算</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">apply_operation</span>(<span class="params">numbers, operation</span>):</span><br><span class="line">    <span class="keyword">return</span> [operation(num) <span class="keyword">for</span> num <span class="keyword">in</span> numbers]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">result = apply_operation([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], square)</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># [1, 4, 9, 16]</span></span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>匿名函数（lambda）的回调</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">result = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x ** <span class="number">2</span>, numbers))</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># [1, 4, 9, 16, 25]</span></span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>事件驱动回调</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Button</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.click_callbacks = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_click</span>(<span class="params">self, callback</span>):</span><br><span class="line">        <span class="variable language_">self</span>.click_callbacks.append(callback)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">click</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Button clicked!&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> callback <span class="keyword">in</span> <span class="variable language_">self</span>.click_callbacks:</span><br><span class="line">            callback()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">say_hello</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello from callback!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">log_click</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Button was clicked at some time.&quot;</span>)</span><br><span class="line"></span><br><span class="line">btn = Button()</span><br><span class="line">btn.on_click(say_hello)</span><br><span class="line">btn.on_click(log_click)</span><br><span class="line"></span><br><span class="line">btn.click()</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># Button clicked!</span></span><br><span class="line"><span class="comment"># Hello from callback!</span></span><br><span class="line"><span class="comment"># Button was clicked at some time.</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="异步回调">异步回调</h3><ul class="lvl-0"><li class="lvl-2"><p>使用 threading 的异步回调</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">async_task</span>(<span class="params">callback</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">worker</span>():</span><br><span class="line">        time.sleep(<span class="number">2</span>)  <span class="comment"># 模拟耗时操作</span></span><br><span class="line">        result = <span class="string">&quot;Task completed!&quot;</span></span><br><span class="line">        callback(result)</span><br><span class="line"><span class="comment"># 异步执行</span></span><br><span class="line">    thread = threading.Thread(target=worker)</span><br><span class="line">    thread.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回调函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_result</span>(<span class="params">result</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Received result: <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Starting async task...&quot;</span>)</span><br><span class="line">async_task(handle_result)</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>回调 + 参数绑定（functools）</p><p>回调函数需要额外参数，但调用方只允许传入无参函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">notify_user</span>(<span class="params">user_id, message</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;User <span class="subst">&#123;user_id&#125;</span>: <span class="subst">&#123;message&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定部分参数</span></span><br><span class="line">callback = partial(notify_user, <span class="number">123</span>, <span class="string">&quot;Your task is done!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟触发</span></span><br><span class="line">callback()  <span class="comment"># 输出: User 123: Your task is done!</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="弱引用">弱引用</h2><p><strong>弱引用（Weak Reference）</strong> 是一种特殊的引用方式，它<strong>不会增加对象的引用计数</strong>，因此不会阻止对象被垃圾回收机制回收。</p><blockquote><p>Python 使用<strong>引用计数</strong>作为主要的垃圾回收机制。当一个对象的引用计数变为 0 时，它就会被自动回收。</p><p>但在某些场景下，我们希望“观察”或“缓存”一个对象，但又<strong>不希望因为我们的引用而阻止它被回收</strong> —— 这就是弱引用的用武之地。</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p><strong>强引用（Strong Reference）</strong>：普通的变量赋值、容器存储等，会增加引用计数。</p></li><li class="lvl-2"><p><strong>弱引用（Weak Reference）</strong>：不会增加引用计数，对象可被正常回收。</p></li><li class="lvl-2"><p>弱引用指向的对象一旦被回收，弱引用会自动失效（变成 <code>None</code> 或抛出异常）。</p></li></ul><p>不是所有对象都支持弱引用！<strong>只有支持弱引用协议的对象才可以</strong>。</p><p>支持弱引用的对象：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>用户自定义类的实例（默认支持）</p></li><li class="lvl-2"><p>部分内置类型（如 <code>list</code>, <code>dict</code> 在某些 Python 版本中支持，但不推荐依赖）</p></li></ul></blockquote><p>不支持弱引用的对象：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><code>int</code>, <code>str</code>, <code>tuple</code>, <code>float</code> 等<strong>不可变内置类型</strong>（出于性能和实现原因）</p></li><li class="lvl-2"><p>部分 C 扩展对象</p></li></ul></blockquote><h3 id="使用-weakref">使用 weakref</h3><p>Python 提供了标准库 <code>weakref</code> 来创建和管理弱引用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> weakref</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span> 被销毁了&quot;</span>)</span><br><span class="line"></span><br><span class="line">obj = MyClass(<span class="string">&quot;TestObject&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;引用计数:&quot;</span>, sys.getrefcount(obj) - <span class="number">1</span>)  <span class="comment"># 减1是因为getrefcount本身也引用了一次</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建弱引用</span></span><br><span class="line">weak_obj = weakref.ref(obj)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;弱引用指向的对象:&quot;</span>, weak_obj())  <span class="comment"># &lt;__main__.MyClass object at 0x...&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;是否存活:&quot;</span>, weak_obj() <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>)  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除强引用</span></span><br><span class="line"><span class="keyword">del</span> obj</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;弱引用指向的对象:&quot;</span>, weak_obj())  <span class="comment"># None</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;是否存活:&quot;</span>, weak_obj() <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>)  <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h3 id="带回调的弱引用">带回调的弱引用</h3><p>可以在对象被回收时触发一个回调函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> weakref</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">callback</span>(<span class="params">ref</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;对象已被回收，弱引用失效！&quot;</span>)</span><br><span class="line"></span><br><span class="line">obj = MyClass(<span class="string">&quot;CallbackObject&quot;</span>)</span><br><span class="line">weak_obj = weakref.ref(obj, callback)  <span class="comment"># 注册回调</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> obj  <span class="comment"># 触发回收和回调</span></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># CallbackObject 被销毁了</span></span><br><span class="line"><span class="comment"># 对象已被回收，弱引用失效！</span></span><br></pre></td></tr></table></figure><h3 id="弱引用字典">弱引用字典</h3><ul class="lvl-0"><li class="lvl-3"><p><code>WeakKeyDictionary</code>：键是弱引用（键可被回收）</p></li></ul>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> weakref</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Key</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;Key(<span class="subst">&#123;self.name&#125;</span>)&quot;</span></span><br><span class="line"></span><br><span class="line">key1 = Key(<span class="string">&quot;A&quot;</span>)</span><br><span class="line">key2 = Key(<span class="string">&quot;B&quot;</span>)</span><br><span class="line"></span><br><span class="line">weak_dict = weakref.WeakKeyDictionary()</span><br><span class="line">weak_dict[key1] = <span class="string">&quot;value1&quot;</span></span><br><span class="line">weak_dict[key2] = <span class="string">&quot;value2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;当前字典:&quot;</span>, <span class="built_in">dict</span>(weak_dict))  <span class="comment"># &#123;Key(A): &#x27;value1&#x27;, Key(B): &#x27;value2&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> key1</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;删除 key1 后:&quot;</span>, <span class="built_in">dict</span>(weak_dict))  <span class="comment"># &#123;Key(B): &#x27;value2&#x27;&#125;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>WeakValueDictionary</code>：值是弱引用（值可被回收）</p><p>键或值必须是<strong>可哈希对象</strong>（通常是自定义类实例），不能是 <code>list</code>, <code>dict</code> 等不可哈希类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">weak_val_dict = weakref.WeakValueDictionary()</span><br><span class="line">obj1 = MyClass(<span class="string">&quot;Obj1&quot;</span>)</span><br><span class="line">obj2 = MyClass(<span class="string">&quot;Obj2&quot;</span>)</span><br><span class="line"></span><br><span class="line">weak_val_dict[<span class="string">&quot;a&quot;</span>] = obj1</span><br><span class="line">weak_val_dict[<span class="string">&quot;b&quot;</span>] = obj2</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;当前字典:&quot;</span>, <span class="built_in">dict</span>(weak_val_dict))</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> obj1</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;删除 obj1 后:&quot;</span>, <span class="built_in">dict</span>(weak_val_dict))  <span class="comment"># 只剩 &#x27;b&#x27;: obj2</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="弱引用集合">弱引用集合</h3><p>类似 <code>set</code>，但元素是弱引用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">weak_set = weakref.WeakSet()</span><br><span class="line"></span><br><span class="line">obj1 = MyClass(<span class="string">&quot;SetObj1&quot;</span>)</span><br><span class="line">obj2 = MyClass(<span class="string">&quot;SetObj2&quot;</span>)</span><br><span class="line"></span><br><span class="line">weak_set.add(obj1)</span><br><span class="line">weak_set.add(obj2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;当前集合:&quot;</span>, <span class="built_in">list</span>(weak_set))</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> obj1</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;删除 obj1 后:&quot;</span>, <span class="built_in">list</span>(weak_set))  <span class="comment"># 只剩 obj2</span></span><br></pre></td></tr></table></figure><h3 id="应用场景">应用场景</h3><ul class="lvl-0"><li class="lvl-2"><p>缓存系统，避免内存泄漏</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> weakref</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DataCache</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>._cache = weakref.WeakValueDictionary()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, key</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._cache.get(key)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set</span>(<span class="params">self, key, value</span>):</span><br><span class="line">        <span class="variable language_">self</span>._cache[key] = value</span><br><span class="line"></span><br><span class="line">cache = DataCache()</span><br><span class="line">big_data = MyClass(<span class="string">&quot;BigData&quot;</span>)</span><br><span class="line">cache.<span class="built_in">set</span>(<span class="string">&quot;data1&quot;</span>, big_data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cache.get(<span class="string">&quot;data1&quot;</span>))  <span class="comment"># 存在</span></span><br><span class="line"><span class="keyword">del</span> big_data</span><br><span class="line"><span class="built_in">print</span>(cache.get(<span class="string">&quot;data1&quot;</span>))  <span class="comment"># None —— 自动清理！</span></span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>观察者模式 / 事件监听器，避免循环引用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Subject</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>._observers = weakref.WeakSet()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_observer</span>(<span class="params">self, observer</span>):</span><br><span class="line">        <span class="variable language_">self</span>._observers.add(observer)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">notify</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> obs <span class="keyword">in</span> <span class="variable language_">self</span>._observers:</span><br><span class="line">            obs.update()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Observer</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;收到通知！&quot;</span>)</span><br><span class="line"></span><br><span class="line">subject = Subject()</span><br><span class="line">observer = Observer()</span><br><span class="line">subject.add_observer(observer)</span><br><span class="line">subject.notify()  <span class="comment"># 收到通知！</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> observer  <span class="comment"># observer 被回收，自动从 WeakSet 中移除</span></span><br><span class="line">subject.notify()  <span class="comment"># 无输出，不会报错</span></span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>父子对象引用，避免循环引用导致内存泄漏</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        <span class="variable language_">self</span>.children = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, parent</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        <span class="variable language_">self</span>.parent = weakref.ref(parent)  <span class="comment"># 弱引用父对象，避免循环引用</span></span><br><span class="line"></span><br><span class="line">p = Parent(<span class="string">&quot;Parent1&quot;</span>)</span><br><span class="line">c = Child(<span class="string">&quot;Child1&quot;</span>, p)</span><br><span class="line">p.children.append(c)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c.parent().name)  <span class="comment"># Parent1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> p  <span class="comment"># 父对象可被正常回收</span></span><br><span class="line"><span class="built_in">print</span>(c.parent())       <span class="comment"># None</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="系统中的应用">系统中的应用</h2><p>支持传递多个参数+弱引用的回调函数使用</p><h3 id="定义回调函数">定义回调函数</h3><p>支持多个参数：用于处理主函数完成后的操作：成功或失败的处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">handle_workflow_completion</span>(<span class="params">self, task_id, prompt_id, success, msg, **kwargs</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> lock:</span><br><span class="line">            <span class="keyword">if</span> success:</span><br><span class="line">                task.status = TaskStatus.SUCCESS.value</span><br><span class="line">                task.task_msg = <span class="string">f&quot;任务执行成功，工作流已完成：<span class="subst">&#123;msg&#125;</span>&quot;</span></span><br><span class="line">                <span class="variable language_">self</span>.on_complete(task, prompt_id, file_names)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> task.execution_count &lt;= <span class="variable language_">self</span>.task_max_retry:</span><br><span class="line">                    task.status = TaskStatus.QUEUED.value</span><br><span class="line">                    task.task_msg = msg</span><br><span class="line">                    task.end_time = <span class="literal">None</span>  <span class="comment"># 清除结束时间</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="variable language_">self</span>.on_error(task, <span class="string">f&quot;任务执行失败：已重试超过<span class="subst">&#123;self.task_max_retry&#125;</span>次，<span class="subst">&#123;msg&#125;</span>&quot;</span>)</span><br><span class="line">                    async_send_failure_email(task_id, task.task_type, task.task_msg)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print_log_exception()</span><br></pre></td></tr></table></figure><h3 id="定义主函数">定义主函数</h3><p>主函数内部可以继续使用回调函数：<code>on_complete</code>、<code>on_error</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">async_run_workflow</span>(<span class="params">self, on_complete=<span class="literal">None</span>, on_error=<span class="literal">None</span>, task_id=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> true:</span><br><span class="line">            on_complete(task_id, prompt_id) </span><br><span class="line"></span><br><span class="line">        workflow_status_checker.check_workflow_status_async(</span><br><span class="line">            <span class="comment"># on_complete=weakref.WeakMethod(task_callback_handler.handle_workflow_completion),</span></span><br><span class="line">            <span class="comment"># on_timeout=weakref.WeakMethod(task_callback_handler.handle_workflow_timeout),</span></span><br><span class="line">            on_complete=task_callback_handler.handle_workflow_completion,</span><br><span class="line">            on_timeout=task_callback_handler.handle_workflow_timeout,</span><br><span class="line">            prompt_id=prompt_id,</span><br><span class="line">            task_id=task_id</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> prompt_id</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print_log_exception()</span><br><span class="line">        on_error(task_id, &#123;<span class="built_in">str</span>(e)&#125;)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="定义执行函数">定义执行函数</h3><p>执行主函数，调用回调函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">check_workflow_status_async</span>(<span class="params">self, prompt_id: <span class="built_in">str</span>,</span></span><br><span class="line"><span class="params">                                on_complete: <span class="type">Callable</span>[[<span class="built_in">str</span>, <span class="built_in">bool</span>], <span class="literal">None</span>],</span></span><br><span class="line"><span class="params">                                task_id: <span class="built_in">str</span> = <span class="literal">None</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">   <span class="keyword">if</span> true:</span><br><span class="line">    <span class="variable language_">self</span>.callback_with_complete(task_id, prompt_id, <span class="literal">True</span>, <span class="string">&quot;成功&quot;</span>, on_complete)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 执行完成回调，标记为失败</span></span><br><span class="line">    <span class="variable language_">self</span>.callback_with_complete(task_id, prompt_id, <span class="literal">False</span>, <span class="string">&quot;工作流执行出错，错误&quot;</span>, on_complete)    </span><br></pre></td></tr></table></figure><h3 id="弱引用调用回调函数">弱引用调用回调函数</h3><p>使用 <code>functools </code>包装所有参数，使用 <code>weakref </code>调用 <code>functools </code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">callback_with_complete</span>(<span class="params">self, task_id: <span class="built_in">str</span>, prompt_id: <span class="built_in">str</span>, success: <span class="built_in">bool</span>, msg: <span class="built_in">str</span>, on_complete</span>):</span><br><span class="line">    <span class="comment"># 执行完成回调，标记为失败</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        callback_with_args = functools.partial(</span><br><span class="line">            on_complete,</span><br><span class="line">            task_id,</span><br><span class="line">            prompt_id,</span><br><span class="line">            success,</span><br><span class="line">            output_name,</span><br><span class="line">            msg</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        weak_callback = weakref.ref(callback_with_args)</span><br><span class="line">        <span class="comment"># 调用弱引用回调</span></span><br><span class="line">        <span class="keyword">if</span> weak_callback() <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            weak_callback()()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            warning(<span class="string">&quot;weak_callback_complete 对象已被垃圾回收&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        error(<span class="string">f&quot;weak_callback_complete 执行完成回调时出错: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">        print_log_exception()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 回调函数 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python回调函数 </tag>
            
            <tag> Python弱引用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 提供的默认图标样式（4.7.0）</title>
      <link href="/2025/09/84109943ebba4ffb9278daf2c200c0aa/"/>
      <url>/2025/09/84109943ebba4ffb9278daf2c200c0aa/</url>
      
        <content type="html"><![CDATA[<head>    <link rel="stylesheet" id="9iphp-style-css" href="/css/hexo-icons.css" type="text/css" media="all">    <sty</head><body><article class="well clearfix page fa-icons" id="post"><div class="page-content">        <h1 class="page-header">使用指南</h1><div class="alert alert-info">引入CSS：<code>&lt;link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet"&gt;</code><br>HTML标签用法 <code>&lt;i class="fa fa-XXX"&gt;&lt;/i&gt;</code> （如：<code>&lt;i class="fa fa-home"&gt;&lt;/i&gt;</code> 输出 <iclass="fa fa-home"></i>）<br>           配置文件用法 <code>name: / || fas fa-XXX</code>（如：<code>首页: / || fas fa-home</code> 输出 <iclass="fa fa-home"></i>）<br>            更多内容请访问 <a class="alert-link" href="http://fontawesome.io/" target="_blank" data-original-title="" title="">http://fontawesome.io/</a></div><section id="new"><h1 class="page-header">4.7新增图标</h1><div class="row fontawesome-icon-list"><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-address-book" aria-hidden="true"></i> address-book</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-address-book-o" aria-hidden="true"></i> address-book-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-address-card" aria-hidden="true"></i> Example of address-card</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-address-card-o" aria-hidden="true"></i> address-card-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bandcamp" aria-hidden="true"></i> bandcamp</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bath" aria-hidden="true"></i> bath</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bathtub" aria-hidden="true"></i> bathtub <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-drivers-license" aria-hidden="true"></i> drivers-license <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-drivers-license-o" aria-hidden="true"></i> drivers-license-o <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-eercast" aria-hidden="true"></i> eercast</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-envelope-open" aria-hidden="true"></i> envelope-open</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-envelope-open-o" aria-hidden="true"></i> envelope-open-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-etsy" aria-hidden="true"></i> etsy</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-free-code-camp" aria-hidden="true"></i> free-code-camp</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-grav" aria-hidden="true"></i> grav</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-handshake-o" aria-hidden="true"></i> handshake-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-id-badge" aria-hidden="true"></i> id-badge</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-id-card" aria-hidden="true"></i> id-card</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-id-card-o" aria-hidden="true"></i> id-card-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-imdb" aria-hidden="true"></i> imdb</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-linode" aria-hidden="true"></i> linode</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-meetup" aria-hidden="true"></i> meetup</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-microchip" aria-hidden="true"></i> microchip</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-podcast" aria-hidden="true"></i> podcast</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-quora" aria-hidden="true"></i> quora</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-ravelry" aria-hidden="true"></i> ravelry</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-s15" aria-hidden="true"></i> s15 <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-shower" aria-hidden="true"></i> shower</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-snowflake-o" aria-hidden="true"></i> snowflake-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-superpowers" aria-hidden="true"></i> superpowers</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-telegram" aria-hidden="true"></i> telegram</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thermometer" aria-hidden="true"></i> thermometer <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thermometer-0" aria-hidden="true"></i> thermometer-0 <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thermometer-1" aria-hidden="true"></i> thermometer-1 <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thermometer-2" aria-hidden="true"></i> thermometer-2 <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thermometer-3" aria-hidden="true"></i> thermometer-3 <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thermometer-4" aria-hidden="true"></i> thermometer-4 <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thermometer-empty" aria-hidden="true"></i> thermometer-empty</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thermometer-full" aria-hidden="true"></i> thermometer-full</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thermometer-half" aria-hidden="true"></i> thermometer-half</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thermometer-quarter" aria-hidden="true"></i> thermometer-quarter</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thermometer-three-quarters" aria-hidden="true"></i> thermometer-three-quarters</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-times-rectangle" aria-hidden="true"></i> times-rectangle <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-times-rectangle-o" aria-hidden="true"></i> times-rectangle-o <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-user-circle" aria-hidden="true"></i> user-circle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-user-circle-o" aria-hidden="true"></i> user-circle-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-user-o" aria-hidden="true"></i> user-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-vcard" aria-hidden="true"></i> vcard <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-vcard-o" aria-hidden="true"></i> vcard-o <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-window-close" aria-hidden="true"></i> window-close</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-window-close-o" aria-hidden="true"></i> window-close-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-window-maximize" aria-hidden="true"></i> window-maximize</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-window-minimize" aria-hidden="true"></i> window-minimize</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-window-restore" aria-hidden="true"></i> window-restore</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-wpexplorer" aria-hidden="true"></i> wpexplorer</div></div></section><section id="web-application"><h1 class="page-header">Web 应用类</h1><div class="row fontawesome-icon-list"><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-address-book" aria-hidden="true"></i> address-book</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-address-book-o" aria-hidden="true"></i> address-book-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-address-card" aria-hidden="true"></i> address-card</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-address-card-o" aria-hidden="true"></i> address-card-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-adjust" aria-hidden="true"></i> adjust</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-american-sign-language-interpreting" aria-hidden="true"></i> american-sign-language-interpreting</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-anchor" aria-hidden="true"></i> anchor</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-archive" aria-hidden="true"></i> archive</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-area-chart" aria-hidden="true"></i> area-chart</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-arrows" aria-hidden="true"></i> arrows</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-arrows-h" aria-hidden="true"></i> arrows-h</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-arrows-v" aria-hidden="true"></i> arrows-v</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-asl-interpreting" aria-hidden="true"></i> asl-interpreting <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-assistive-listening-systems" aria-hidden="true"></i> assistive-listening-systems</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-asterisk" aria-hidden="true"></i> asterisk</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-at" aria-hidden="true"></i> at</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-audio-description" aria-hidden="true"></i> audio-description</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-automobile" aria-hidden="true"></i> automobile <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-balance-scale" aria-hidden="true"></i> balance-scale</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-ban" aria-hidden="true"></i> ban</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bank" aria-hidden="true"></i> bank <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bar-chart" aria-hidden="true"></i> bar-chart</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bar-chart-o" aria-hidden="true"></i> bar-chart-o <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-barcode" aria-hidden="true"></i> barcode</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bars" aria-hidden="true"></i> bars</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bath" aria-hidden="true"></i> bath</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bathtub" aria-hidden="true"></i> bathtub <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-battery" aria-hidden="true"></i> battery <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-battery-0" aria-hidden="true"></i> battery-0 <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-battery-1" aria-hidden="true"></i> battery-1 <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-battery-2" aria-hidden="true"></i> battery-2 <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-battery-3" aria-hidden="true"></i> battery-3 <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-battery-4" aria-hidden="true"></i> battery-4 <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-battery-empty" aria-hidden="true"></i> battery-empty</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-battery-full" aria-hidden="true"></i> battery-full</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-battery-half" aria-hidden="true"></i> battery-half</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-battery-quarter" aria-hidden="true"></i> battery-quarter</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-battery-three-quarters" aria-hidden="true"></i> battery-three-quarters</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bed" aria-hidden="true"></i> bed</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-beer" aria-hidden="true"></i> beer</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bell" aria-hidden="true"></i> bell</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bell-o" aria-hidden="true"></i> bell-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bell-slash" aria-hidden="true"></i> bell-slash</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bell-slash-o" aria-hidden="true"></i> bell-slash-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bicycle" aria-hidden="true"></i> bicycle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-binoculars" aria-hidden="true"></i> binoculars</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-birthday-cake" aria-hidden="true"></i> birthday-cake</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-blind" aria-hidden="true"></i> blind</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bluetooth" aria-hidden="true"></i> bluetooth</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bluetooth-b" aria-hidden="true"></i> bluetooth-b</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bolt" aria-hidden="true"></i> bolt</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bomb" aria-hidden="true"></i> bomb</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-book" aria-hidden="true"></i> book</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bookmark" aria-hidden="true"></i> bookmark</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bookmark-o" aria-hidden="true"></i> bookmark-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-braille" aria-hidden="true"></i> braille</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-briefcase" aria-hidden="true"></i> briefcase</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bug" aria-hidden="true"></i> bug</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-building" aria-hidden="true"></i> building</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-building-o" aria-hidden="true"></i> building-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bullhorn" aria-hidden="true"></i> bullhorn</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bullseye" aria-hidden="true"></i> bullseye</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bus" aria-hidden="true"></i> bus</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cab" aria-hidden="true"></i> cab <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-calculator" aria-hidden="true"></i> calculator</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-calendar" aria-hidden="true"></i> calendar</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-calendar-check-o" aria-hidden="true"></i> calendar-check-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-calendar-minus-o" aria-hidden="true"></i> calendar-minus-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-calendar-o" aria-hidden="true"></i> calendar-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-calendar-plus-o" aria-hidden="true"></i> calendar-plus-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-calendar-times-o" aria-hidden="true"></i> calendar-times-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-camera" aria-hidden="true"></i> camera</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-camera-retro" aria-hidden="true"></i> camera-retro</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-car" aria-hidden="true"></i> car</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-caret-square-o-down" aria-hidden="true"></i> caret-square-o-down</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-caret-square-o-left" aria-hidden="true"></i> caret-square-o-left</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-caret-square-o-right" aria-hidden="true"></i> caret-square-o-right</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-caret-square-o-up" aria-hidden="true"></i> caret-square-o-up</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cart-arrow-down" aria-hidden="true"></i> cart-arrow-down</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cart-plus" aria-hidden="true"></i> cart-plus</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cc" aria-hidden="true"></i> cc</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-certificate" aria-hidden="true"></i> certificate</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-check" aria-hidden="true"></i> check</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-check-circle" aria-hidden="true"></i> check-circle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-check-circle-o" aria-hidden="true"></i> check-circle-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-check-square" aria-hidden="true"></i> check-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-check-square-o" aria-hidden="true"></i> check-square-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-child" aria-hidden="true"></i> child</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-circle" aria-hidden="true"></i> circle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-circle-o" aria-hidden="true"></i> circle-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-circle-o-notch" aria-hidden="true"></i> circle-o-notch</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-circle-thin" aria-hidden="true"></i> circle-thin</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-clock-o" aria-hidden="true"></i> clock-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-clone" aria-hidden="true"></i> clone</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-close" aria-hidden="true"></i> close <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cloud" aria-hidden="true"></i> cloud</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cloud-download" aria-hidden="true"></i> cloud-download</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cloud-upload" aria-hidden="true"></i> cloud-upload</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-code" aria-hidden="true"></i> code</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-code-fork" aria-hidden="true"></i> code-fork</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-coffee" aria-hidden="true"></i> coffee</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cog" aria-hidden="true"></i> cog</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cogs" aria-hidden="true"></i> cogs</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-comment" aria-hidden="true"></i> comment</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-comment-o" aria-hidden="true"></i> comment-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-commenting" aria-hidden="true"></i> commenting</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-commenting-o" aria-hidden="true"></i> commenting-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-comments" aria-hidden="true"></i> comments</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-comments-o" aria-hidden="true"></i> comments-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-compass" aria-hidden="true"></i> compass</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-copyright" aria-hidden="true"></i> copyright</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-creative-commons" aria-hidden="true"></i> creative-commons</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-credit-card" aria-hidden="true"></i> credit-card</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-credit-card-alt" aria-hidden="true"></i> credit-card-alt</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-crop" aria-hidden="true"></i> crop</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-crosshairs" aria-hidden="true"></i> crosshairs</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cube" aria-hidden="true"></i> cube</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cubes" aria-hidden="true"></i> cubes</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cutlery" aria-hidden="true"></i> cutlery</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-dashboard" aria-hidden="true"></i> dashboard <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-database" aria-hidden="true"></i> database</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-deaf" aria-hidden="true"></i> deaf</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-deafness" aria-hidden="true"></i> deafness <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-desktop" aria-hidden="true"></i> desktop</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-diamond" aria-hidden="true"></i> diamond</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-dot-circle-o" aria-hidden="true"></i> dot-circle-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-download" aria-hidden="true"></i> download</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-drivers-license" aria-hidden="true"></i> drivers-license <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-drivers-license-o" aria-hidden="true"></i> drivers-license-o <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-edit" aria-hidden="true"></i> edit <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-ellipsis-h" aria-hidden="true"></i> ellipsis-h</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-ellipsis-v" aria-hidden="true"></i> ellipsis-v</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-envelope" aria-hidden="true"></i> envelope</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-envelope-o" aria-hidden="true"></i> envelope-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-envelope-open" aria-hidden="true"></i> envelope-open</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-envelope-open-o" aria-hidden="true"></i> envelope-open-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-envelope-square" aria-hidden="true"></i> envelope-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-eraser" aria-hidden="true"></i> eraser</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-exchange" aria-hidden="true"></i> exchange</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-exclamation" aria-hidden="true"></i> exclamation</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-exclamation-circle" aria-hidden="true"></i> exclamation-circle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-exclamation-triangle" aria-hidden="true"></i> exclamation-triangle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-external-link" aria-hidden="true"></i> external-link</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-external-link-square" aria-hidden="true"></i> external-link-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-eye" aria-hidden="true"></i> eye</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-eye-slash" aria-hidden="true"></i> eye-slash</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-eyedropper" aria-hidden="true"></i> eyedropper</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-fax" aria-hidden="true"></i> fax</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-feed" aria-hidden="true"></i> feed <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-female" aria-hidden="true"></i> female</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-fighter-jet" aria-hidden="true"></i> fighter-jet</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-archive-o" aria-hidden="true"></i> file-archive-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-audio-o" aria-hidden="true"></i> file-audio-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-code-o" aria-hidden="true"></i> file-code-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-excel-o" aria-hidden="true"></i> file-excel-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-image-o" aria-hidden="true"></i> file-image-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-movie-o" aria-hidden="true"></i> file-movie-o <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-pdf-o" aria-hidden="true"></i> file-pdf-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-photo-o" aria-hidden="true"></i> file-photo-o <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-picture-o" aria-hidden="true"></i> file-picture-o <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-powerpoint-o" aria-hidden="true"></i> file-powerpoint-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-sound-o" aria-hidden="true"></i> file-sound-o <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-video-o" aria-hidden="true"></i> file-video-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-word-o" aria-hidden="true"></i> file-word-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-zip-o" aria-hidden="true"></i> file-zip-o <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-film" aria-hidden="true"></i> film</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-filter" aria-hidden="true"></i> filter</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-fire" aria-hidden="true"></i> fire</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-fire-extinguisher" aria-hidden="true"></i> fire-extinguisher</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-flag" aria-hidden="true"></i> flag</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-flag-checkered" aria-hidden="true"></i> flag-checkered</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-flag-o" aria-hidden="true"></i> flag-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-flash" aria-hidden="true"></i> flash <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-flask" aria-hidden="true"></i> flask</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-folder" aria-hidden="true"></i> folder</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-folder-o" aria-hidden="true"></i> folder-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-folder-open" aria-hidden="true"></i> folder-open</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-folder-open-o" aria-hidden="true"></i> folder-open-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-frown-o" aria-hidden="true"></i> frown-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-futbol-o" aria-hidden="true"></i> futbol-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-gamepad" aria-hidden="true"></i> gamepad</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-gavel" aria-hidden="true"></i> gavel</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-gear" aria-hidden="true"></i> gear <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-gears" aria-hidden="true"></i> gears <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-gift" aria-hidden="true"></i> gift</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-glass" aria-hidden="true"></i> glass</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-globe" aria-hidden="true"></i> globe</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-graduation-cap" aria-hidden="true"></i> graduation-cap</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-group" aria-hidden="true"></i> group <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-grab-o" aria-hidden="true"></i> hand-grab-o <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-lizard-o" aria-hidden="true"></i> hand-lizard-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-paper-o" aria-hidden="true"></i> hand-paper-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-peace-o" aria-hidden="true"></i> hand-peace-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-pointer-o" aria-hidden="true"></i> hand-pointer-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-rock-o" aria-hidden="true"></i> hand-rock-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-scissors-o" aria-hidden="true"></i> hand-scissors-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-spock-o" aria-hidden="true"></i> hand-spock-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-stop-o" aria-hidden="true"></i> hand-stop-o <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-handshake-o" aria-hidden="true"></i> handshake-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hard-of-hearing" aria-hidden="true"></i> hard-of-hearing <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hashtag" aria-hidden="true"></i> hashtag</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hdd-o" aria-hidden="true"></i> hdd-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-headphones" aria-hidden="true"></i> headphones</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-heart" aria-hidden="true"></i> heart</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-heart-o" aria-hidden="true"></i> heart-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-heartbeat" aria-hidden="true"></i> heartbeat</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-history" aria-hidden="true"></i> history</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-home" aria-hidden="true"></i> home</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hotel" aria-hidden="true"></i> hotel <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hourglass" aria-hidden="true"></i> hourglass</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hourglass-1" aria-hidden="true"></i> hourglass-1 <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hourglass-2" aria-hidden="true"></i> hourglass-2 <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hourglass-3" aria-hidden="true"></i> hourglass-3 <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hourglass-end" aria-hidden="true"></i> hourglass-end</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hourglass-half" aria-hidden="true"></i> hourglass-half</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hourglass-o" aria-hidden="true"></i> hourglass-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hourglass-start" aria-hidden="true"></i> hourglass-start</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-i-cursor" aria-hidden="true"></i> i-cursor</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-id-badge" aria-hidden="true"></i> id-badge</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-id-card" aria-hidden="true"></i> id-card</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-id-card-o" aria-hidden="true"></i> id-card-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-image" aria-hidden="true"></i> image <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-inbox" aria-hidden="true"></i> inbox</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-industry" aria-hidden="true"></i> industry</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-info" aria-hidden="true"></i> info</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-info-circle" aria-hidden="true"></i> info-circle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-institution" aria-hidden="true"></i> institution <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-key" aria-hidden="true"></i> key</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-keyboard-o" aria-hidden="true"></i> keyboard-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-language" aria-hidden="true"></i> language</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-laptop" aria-hidden="true"></i> laptop</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-leaf" aria-hidden="true"></i> leaf</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-legal" aria-hidden="true"></i> legal <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-lemon-o" aria-hidden="true"></i> lemon-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-level-down" aria-hidden="true"></i> level-down</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-level-up" aria-hidden="true"></i> level-up</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-life-bouy" aria-hidden="true"></i> life-bouy <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-life-buoy" aria-hidden="true"></i> life-buoy <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-life-ring" aria-hidden="true"></i> life-ring</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-life-saver" aria-hidden="true"></i> life-saver <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-lightbulb-o" aria-hidden="true"></i> lightbulb-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-line-chart" aria-hidden="true"></i> line-chart</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-location-arrow" aria-hidden="true"></i> location-arrow</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-lock" aria-hidden="true"></i> lock</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-low-vision" aria-hidden="true"></i> low-vision</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-magic" aria-hidden="true"></i> magic</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-magnet" aria-hidden="true"></i> magnet</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-mail-forward" aria-hidden="true"></i> mail-forward <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-mail-reply" aria-hidden="true"></i> mail-reply <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-mail-reply-all" aria-hidden="true"></i> mail-reply-all <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-male" aria-hidden="true"></i> male</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-map" aria-hidden="true"></i> map</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-map-marker" aria-hidden="true"></i> map-marker</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-map-o" aria-hidden="true"></i> map-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-map-pin" aria-hidden="true"></i> map-pin</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-map-signs" aria-hidden="true"></i> map-signs</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-meh-o" aria-hidden="true"></i> meh-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-microchip" aria-hidden="true"></i> microchip</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-microphone" aria-hidden="true"></i> microphone</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-microphone-slash" aria-hidden="true"></i> microphone-slash</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-minus" aria-hidden="true"></i> minus</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-minus-circle" aria-hidden="true"></i> minus-circle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-minus-square" aria-hidden="true"></i> minus-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-minus-square-o" aria-hidden="true"></i> minus-square-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-mobile" aria-hidden="true"></i> mobile</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-mobile-phone" aria-hidden="true"></i> mobile-phone <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-money" aria-hidden="true"></i> money</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-moon-o" aria-hidden="true"></i> moon-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-mortar-board" aria-hidden="true"></i> mortar-board <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-motorcycle" aria-hidden="true"></i> motorcycle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-mouse-pointer" aria-hidden="true"></i> mouse-pointer</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-music" aria-hidden="true"></i> music</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-navicon" aria-hidden="true"></i> navicon <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-newspaper-o" aria-hidden="true"></i> newspaper-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-object-group" aria-hidden="true"></i> object-group</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-object-ungroup" aria-hidden="true"></i> object-ungroup</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-paint-brush" aria-hidden="true"></i> paint-brush</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-paper-plane" aria-hidden="true"></i> paper-plane</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-paper-plane-o" aria-hidden="true"></i> paper-plane-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-paw" aria-hidden="true"></i> paw</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-pencil" aria-hidden="true"></i> pencil</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-pencil-square" aria-hidden="true"></i> pencil-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-pencil-square-o" aria-hidden="true"></i> pencil-square-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-percent" aria-hidden="true"></i> percent</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-phone" aria-hidden="true"></i> phone</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-phone-square" aria-hidden="true"></i> phone-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-photo" aria-hidden="true"></i> photo <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-picture-o" aria-hidden="true"></i> picture-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-pie-chart" aria-hidden="true"></i> pie-chart</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-plane" aria-hidden="true"></i> plane</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-plug" aria-hidden="true"></i> plug</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-plus" aria-hidden="true"></i> plus</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-plus-circle" aria-hidden="true"></i> plus-circle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-plus-square" aria-hidden="true"></i> plus-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-plus-square-o" aria-hidden="true"></i> plus-square-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-podcast" aria-hidden="true"></i> podcast</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-power-off" aria-hidden="true"></i> power-off</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-print" aria-hidden="true"></i> print</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-puzzle-piece" aria-hidden="true"></i> puzzle-piece</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-qrcode" aria-hidden="true"></i> qrcode</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-question" aria-hidden="true"></i> question</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-question-circle" aria-hidden="true"></i> question-circle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-question-circle-o" aria-hidden="true"></i> question-circle-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-quote-left" aria-hidden="true"></i> quote-left</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-quote-right" aria-hidden="true"></i> quote-right</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-random" aria-hidden="true"></i> random</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-recycle" aria-hidden="true"></i> recycle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-refresh" aria-hidden="true"></i> refresh</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-registered" aria-hidden="true"></i> registered</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-remove" aria-hidden="true"></i> remove <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-reorder" aria-hidden="true"></i> reorder <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-reply" aria-hidden="true"></i> reply</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-reply-all" aria-hidden="true"></i> reply-all</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-retweet" aria-hidden="true"></i> retweet</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-road" aria-hidden="true"></i> road</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-rocket" aria-hidden="true"></i> rocket</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-rss" aria-hidden="true"></i> rss</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-rss-square" aria-hidden="true"></i> rss-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-s15" aria-hidden="true"></i> s15 <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-search" aria-hidden="true"></i> search</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-search-minus" aria-hidden="true"></i> search-minus</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-search-plus" aria-hidden="true"></i> search-plus</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-send" aria-hidden="true"></i> send <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-send-o" aria-hidden="true"></i> send-o <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-server" aria-hidden="true"></i> server</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-share" aria-hidden="true"></i> share</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-share-alt" aria-hidden="true"></i> share-alt</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-share-alt-square" aria-hidden="true"></i> share-alt-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-share-square" aria-hidden="true"></i> share-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-share-square-o" aria-hidden="true"></i> share-square-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-shield" aria-hidden="true"></i> shield</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-ship" aria-hidden="true"></i> ship</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-shopping-bag" aria-hidden="true"></i> shopping-bag</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-shopping-basket" aria-hidden="true"></i> shopping-basket</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-shopping-cart" aria-hidden="true"></i> shopping-cart</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-shower" aria-hidden="true"></i> shower</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-sign-in" aria-hidden="true"></i> sign-in</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-sign-language" aria-hidden="true"></i> sign-language</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-sign-out" aria-hidden="true"></i> sign-out</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-signal" aria-hidden="true"></i> signal</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-signing" aria-hidden="true"></i> signing <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-sitemap" aria-hidden="true"></i> sitemap</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-sliders" aria-hidden="true"></i> sliders</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-smile-o" aria-hidden="true"></i> smile-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-snowflake-o" aria-hidden="true"></i> snowflake-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-soccer-ball-o" aria-hidden="true"></i> soccer-ball-o <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-sort" aria-hidden="true"></i> sort</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-sort-alpha-asc" aria-hidden="true"></i> sort-alpha-asc</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-sort-alpha-desc" aria-hidden="true"></i> sort-alpha-desc</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-sort-amount-asc" aria-hidden="true"></i> sort-amount-asc</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-sort-amount-desc" aria-hidden="true"></i> sort-amount-desc</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-sort-asc" aria-hidden="true"></i> sort-asc</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-sort-desc" aria-hidden="true"></i> sort-desc</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-sort-down" aria-hidden="true"></i> sort-down <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-sort-numeric-asc" aria-hidden="true"></i> sort-numeric-asc</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-sort-numeric-desc" aria-hidden="true"></i> sort-numeric-desc</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-sort-up" aria-hidden="true"></i> sort-up <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-space-shuttle" aria-hidden="true"></i> space-shuttle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-spinner" aria-hidden="true"></i> spinner</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-spoon" aria-hidden="true"></i> spoon</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-square" aria-hidden="true"></i> square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-square-o" aria-hidden="true"></i> square-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-star" aria-hidden="true"></i> star</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-star-half" aria-hidden="true"></i> star-half</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-star-half-empty" aria-hidden="true"></i> star-half-empty <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-star-half-full" aria-hidden="true"></i> star-half-full <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-star-half-o" aria-hidden="true"></i> star-half-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-star-o" aria-hidden="true"></i> star-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-sticky-note" aria-hidden="true"></i> sticky-note</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-sticky-note-o" aria-hidden="true"></i> sticky-note-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-street-view" aria-hidden="true"></i> street-view</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-suitcase" aria-hidden="true"></i> suitcase</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-sun-o" aria-hidden="true"></i> sun-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-support" aria-hidden="true"></i> support <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-tablet" aria-hidden="true"></i> tablet</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-tachometer" aria-hidden="true"></i> tachometer</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-tag" aria-hidden="true"></i> tag</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-tags" aria-hidden="true"></i> tags</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-tasks" aria-hidden="true"></i> tasks</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-taxi" aria-hidden="true"></i> taxi</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-television" aria-hidden="true"></i> television</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-terminal" aria-hidden="true"></i> terminal</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thermometer" aria-hidden="true"></i> thermometer <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thermometer-0" aria-hidden="true"></i> thermometer-0 <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thermometer-1" aria-hidden="true"></i> thermometer-1 <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thermometer-2" aria-hidden="true"></i> thermometer-2 <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thermometer-3" aria-hidden="true"></i> thermometer-3 <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thermometer-4" aria-hidden="true"></i> thermometer-4 <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thermometer-empty" aria-hidden="true"></i> thermometer-empty</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thermometer-full" aria-hidden="true"></i> thermometer-full</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thermometer-half" aria-hidden="true"></i> thermometer-half</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thermometer-quarter" aria-hidden="true"></i> thermometer-quarter</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thermometer-three-quarters" aria-hidden="true"></i> thermometer-three-quarters</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thumb-tack" aria-hidden="true"></i> thumb-tack</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thumbs-down" aria-hidden="true"></i> thumbs-down</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thumbs-o-down" aria-hidden="true"></i> thumbs-o-down</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thumbs-o-up" aria-hidden="true"></i> thumbs-o-up</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thumbs-up" aria-hidden="true"></i> thumbs-up</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-ticket" aria-hidden="true"></i> ticket</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-times" aria-hidden="true"></i> times</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-times-circle" aria-hidden="true"></i> times-circle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-times-circle-o" aria-hidden="true"></i> times-circle-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-times-rectangle" aria-hidden="true"></i> times-rectangle <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-times-rectangle-o" aria-hidden="true"></i> times-rectangle-o <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-tint" aria-hidden="true"></i> tint</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-toggle-down" aria-hidden="true"></i> toggle-down <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-toggle-left" aria-hidden="true"></i> toggle-left <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-toggle-off" aria-hidden="true"></i> toggle-off</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-toggle-on" aria-hidden="true"></i> toggle-on</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-toggle-right" aria-hidden="true"></i> toggle-right <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-toggle-up" aria-hidden="true"></i> toggle-up <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-trademark" aria-hidden="true"></i> trademark</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-trash" aria-hidden="true"></i> trash</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-trash-o" aria-hidden="true"></i> trash-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-tree" aria-hidden="true"></i> tree</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-trophy" aria-hidden="true"></i> trophy</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-truck" aria-hidden="true"></i> truck</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-tty" aria-hidden="true"></i> tty</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-tv" aria-hidden="true"></i> tv <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-umbrella" aria-hidden="true"></i> umbrella</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-universal-access" aria-hidden="true"></i> universal-access</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-university" aria-hidden="true"></i> university</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-unlock" aria-hidden="true"></i> unlock</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-unlock-alt" aria-hidden="true"></i> unlock-alt</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-unsorted" aria-hidden="true"></i> unsorted <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-upload" aria-hidden="true"></i> upload</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-user" aria-hidden="true"></i> user</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-user-circle" aria-hidden="true"></i> user-circle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-user-circle-o" aria-hidden="true"></i> user-circle-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-user-o" aria-hidden="true"></i> user-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-user-plus" aria-hidden="true"></i> user-plus</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-user-secret" aria-hidden="true"></i> user-secret</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-user-times" aria-hidden="true"></i> user-times</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-users" aria-hidden="true"></i> users</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-vcard" aria-hidden="true"></i> vcard <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-vcard-o" aria-hidden="true"></i> vcard-o <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-video-camera" aria-hidden="true"></i> video-camera</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-volume-control-phone" aria-hidden="true"></i> volume-control-phone</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-volume-down" aria-hidden="true"></i> volume-down</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-volume-off" aria-hidden="true"></i> volume-off</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-volume-up" aria-hidden="true"></i> volume-up</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-warning" aria-hidden="true"></i> warning <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-wheelchair" aria-hidden="true"></i> wheelchair</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-wheelchair-alt" aria-hidden="true"></i> wheelchair-alt</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-wifi" aria-hidden="true"></i> wifi</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-window-close" aria-hidden="true"></i> window-close</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-window-close-o" aria-hidden="true"></i> window-close-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-window-maximize" aria-hidden="true"></i> window-maximize</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-window-minimize" aria-hidden="true"></i> window-minimize</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-window-restore" aria-hidden="true"></i> window-restore</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-wrench" aria-hidden="true"></i> wrench</div>                <div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-circle-o-notch" aria-hidden="true"></i> circle-o-notch</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cog" aria-hidden="true"></i> cog</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-gear" aria-hidden="true"></i> gear <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-refresh" aria-hidden="true"></i> refresh</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-spinner" aria-hidden="true"></i> spinner</div>                <div class="row fontawesome-icon-list"><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-check-square" aria-hidden="true"></i> check-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-check-square-o" aria-hidden="true"></i> check-square-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-circle" aria-hidden="true"></i> circle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-circle-o" aria-hidden="true"></i> circle-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-dot-circle-o" aria-hidden="true"></i> dot-circle-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-minus-square" aria-hidden="true"></i> minus-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-minus-square-o" aria-hidden="true"></i> minus-square-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-plus-square" aria-hidden="true"></i> plus-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-plus-square-o" aria-hidden="true"></i> plus-square-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-square" aria-hidden="true"></i> square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-square-o" aria-hidden="true"></i> square-o</div></div></section>        <section id="file-type"><h1 class="page-header">文本文件类</h1><div class="row fontawesome-icon-list"><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-align-center" aria-hidden="true"></i> align-center</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-align-justify" aria-hidden="true"></i> align-justify</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-align-left" aria-hidden="true"></i> align-left</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-align-right" aria-hidden="true"></i> align-right</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bold" aria-hidden="true"></i> bold</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-chain" aria-hidden="true"></i> chain <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-chain-broken" aria-hidden="true"></i> chain-broken</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-clipboard" aria-hidden="true"></i> clipboard</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-columns" aria-hidden="true"></i> columns</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-copy" aria-hidden="true"></i> copy <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cut" aria-hidden="true"></i> cut <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-dedent" aria-hidden="true"></i> dedent <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-eraser" aria-hidden="true"></i> eraser</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file" aria-hidden="true"></i> file</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-o" aria-hidden="true"></i> file-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-text" aria-hidden="true"></i> file-text</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-text-o" aria-hidden="true"></i> file-text-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-files-o" aria-hidden="true"></i> files-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-floppy-o" aria-hidden="true"></i> floppy-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-font" aria-hidden="true"></i> font</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-header" aria-hidden="true"></i> header</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-indent" aria-hidden="true"></i> indent</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-italic" aria-hidden="true"></i> italic</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-link" aria-hidden="true"></i> link</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-list" aria-hidden="true"></i> list</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-list-alt" aria-hidden="true"></i> list-alt</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-list-ol" aria-hidden="true"></i> list-ol</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-list-ul" aria-hidden="true"></i> list-ul</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-outdent" aria-hidden="true"></i> outdent</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-paperclip" aria-hidden="true"></i> paperclip</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-paragraph" aria-hidden="true"></i> paragraph</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-paste" aria-hidden="true"></i> paste <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-repeat" aria-hidden="true"></i> repeat</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-rotate-left" aria-hidden="true"></i> rotate-left <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-rotate-right" aria-hidden="true"></i> rotate-right <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-save" aria-hidden="true"></i> save <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-scissors" aria-hidden="true"></i> scissors</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-strikethrough" aria-hidden="true"></i> strikethrough</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-subscript" aria-hidden="true"></i> subscript</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-superscript" aria-hidden="true"></i> superscript</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-table" aria-hidden="true"></i> table</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-text-height" aria-hidden="true"></i> text-height</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-text-width" aria-hidden="true"></i> text-width</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-th" aria-hidden="true"></i> th</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-th-large" aria-hidden="true"></i> th-large</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-th-list" aria-hidden="true"></i> th-list</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-underline" aria-hidden="true"></i> underline</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-undo" aria-hidden="true"></i> undo</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-unlink" aria-hidden="true"></i> unlink <span class="text-muted">(alias)</span></div>                <div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file" aria-hidden="true"></i> file</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-archive-o" aria-hidden="true"></i> file-archive-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-audio-o" aria-hidden="true"></i> file-audio-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-code-o" aria-hidden="true"></i> file-code-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-excel-o" aria-hidden="true"></i> file-excel-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-image-o" aria-hidden="true"></i> file-image-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-movie-o" aria-hidden="true"></i> file-movie-o <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-o" aria-hidden="true"></i> file-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-pdf-o" aria-hidden="true"></i> file-pdf-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-photo-o" aria-hidden="true"></i> file-photo-o <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-picture-o" aria-hidden="true"></i> file-picture-o <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-powerpoint-o" aria-hidden="true"></i> file-powerpoint-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-sound-o" aria-hidden="true"></i> file-sound-o <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-text" aria-hidden="true"></i> file-text</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-text-o" aria-hidden="true"></i> file-text-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-video-o" aria-hidden="true"></i> file-video-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-word-o" aria-hidden="true"></i> file-word-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-file-zip-o" aria-hidden="true"></i> file-zip-o <span class="text-muted">(alias)</span></div></div></section><section id="hand"><h1 class="page-header">手势类</h1><div class="row fontawesome-icon-list"><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-grab-o" aria-hidden="true"></i> hand-grab-o <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-lizard-o" aria-hidden="true"></i> hand-lizard-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-o-down" aria-hidden="true"></i> hand-o-down</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-o-left" aria-hidden="true"></i> hand-o-left</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-o-right" aria-hidden="true"></i> hand-o-right</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-o-up" aria-hidden="true"></i> hand-o-up</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-paper-o" aria-hidden="true"></i> hand-paper-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-peace-o" aria-hidden="true"></i> hand-peace-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-pointer-o" aria-hidden="true"></i> hand-pointer-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-rock-o" aria-hidden="true"></i> hand-rock-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-scissors-o" aria-hidden="true"></i> hand-scissors-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-spock-o" aria-hidden="true"></i> hand-spock-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-stop-o" aria-hidden="true"></i> hand-stop-o <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thumbs-down" aria-hidden="true"></i> thumbs-down</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thumbs-o-down" aria-hidden="true"></i> thumbs-o-down</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thumbs-o-up" aria-hidden="true"></i> thumbs-o-up</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-thumbs-up" aria-hidden="true"></i> thumbs-up</div></div></section><section id="transportation"><h1 class="page-header">交通类</h1><div class="row fontawesome-icon-list"><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-ambulance" aria-hidden="true"></i> ambulance</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-automobile" aria-hidden="true"></i> automobile <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bicycle" aria-hidden="true"></i> bicycle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bus" aria-hidden="true"></i> bus</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cab" aria-hidden="true"></i> cab <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-car" aria-hidden="true"></i> car</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-fighter-jet" aria-hidden="true"></i> fighter-jet</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-motorcycle" aria-hidden="true"></i> motorcycle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-plane" aria-hidden="true"></i> plane</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-rocket" aria-hidden="true"></i> rocket</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-ship" aria-hidden="true"></i> ship</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-space-shuttle" aria-hidden="true"></i> space-shuttle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-subway" aria-hidden="true"></i> subway</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-taxi" aria-hidden="true"></i> taxi</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-train" aria-hidden="true"></i> train</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-truck" aria-hidden="true"></i> truck</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-wheelchair" aria-hidden="true"></i> wheelchair</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-wheelchair-alt" aria-hidden="true"></i> wheelchair-alt</div></div></section><section id="gender"><h1 class="page-header">性别类</h1><div class="row fontawesome-icon-list"><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-genderless" aria-hidden="true"></i> genderless</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-intersex" aria-hidden="true"></i> intersex <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-mars" aria-hidden="true"></i> mars</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-mars-double" aria-hidden="true"></i> mars-double</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-mars-stroke" aria-hidden="true"></i> mars-stroke</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-mars-stroke-h" aria-hidden="true"></i> mars-stroke-h</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-mars-stroke-v" aria-hidden="true"></i> mars-stroke-v</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-mercury" aria-hidden="true"></i> mercury</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-neuter" aria-hidden="true"></i> neuter</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-transgender" aria-hidden="true"></i> transgender</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-transgender-alt" aria-hidden="true"></i> transgender-alt</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-venus" aria-hidden="true"></i> venus</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-venus-double" aria-hidden="true"></i> venus-double</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-venus-mars" aria-hidden="true"></i> venus-mars</div></div></section><section id="payment"><h1 class="page-header">支付类</h1><div class="row fontawesome-icon-list"><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cc-amex" aria-hidden="true"></i> cc-amex</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cc-diners-club" aria-hidden="true"></i> cc-diners-club</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cc-discover" aria-hidden="true"></i> cc-discover</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cc-jcb" aria-hidden="true"></i> cc-jcb</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cc-mastercard" aria-hidden="true"></i> cc-mastercard</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cc-paypal" aria-hidden="true"></i> cc-paypal</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cc-stripe" aria-hidden="true"></i> cc-stripe</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cc-visa" aria-hidden="true"></i> cc-visa</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-credit-card" aria-hidden="true"></i> credit-card</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-credit-card-alt" aria-hidden="true"></i> credit-card-alt</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-google-wallet" aria-hidden="true"></i> google-wallet</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-paypal" aria-hidden="true"></i> paypal</div></div></section><section id="chart"><h1 class="page-header">图表类</h1><div class="row fontawesome-icon-list"><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-area-chart" aria-hidden="true"></i> area-chart</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bar-chart" aria-hidden="true"></i> bar-chart</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bar-chart-o" aria-hidden="true"></i> bar-chart-o <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-line-chart" aria-hidden="true"></i> line-chart</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-pie-chart" aria-hidden="true"></i> pie-chart</div></div></section><section id="currency"><h1 class="page-header">货币类</h1><div class="row fontawesome-icon-list"><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bitcoin" aria-hidden="true"></i> bitcoin <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-btc" aria-hidden="true"></i> btc</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cny" aria-hidden="true"></i> cny <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-dollar" aria-hidden="true"></i> dollar <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-eur" aria-hidden="true"></i> eur</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-euro" aria-hidden="true"></i> euro <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-gbp" aria-hidden="true"></i> gbp</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-gg" aria-hidden="true"></i> gg</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-gg-circle" aria-hidden="true"></i> gg-circle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-ils" aria-hidden="true"></i> ils</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-inr" aria-hidden="true"></i> inr</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-jpy" aria-hidden="true"></i> jpy</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-krw" aria-hidden="true"></i> krw</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-money" aria-hidden="true"></i> money</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-rmb" aria-hidden="true"></i> rmb <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-rouble" aria-hidden="true"></i> rouble <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-rub" aria-hidden="true"></i> rub</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-ruble" aria-hidden="true"></i> ruble <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-rupee" aria-hidden="true"></i> rupee <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-shekel" aria-hidden="true"></i> shekel <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-sheqel" aria-hidden="true"></i> sheqel <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-try" aria-hidden="true"></i> try</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-turkish-lira" aria-hidden="true"></i> turkish-lira <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-usd" aria-hidden="true"></i> usd</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-won" aria-hidden="true"></i> won <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-yen" aria-hidden="true"></i> yen <span class="text-muted">(alias)</span></div></div></section><section id="directional"><h1 class="page-header">方向类</h1><div class="row fontawesome-icon-list"><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-angle-double-down" aria-hidden="true"></i> angle-double-down</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-angle-double-left" aria-hidden="true"></i> angle-double-left</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-angle-double-right" aria-hidden="true"></i> angle-double-right</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-angle-double-up" aria-hidden="true"></i> angle-double-up</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-angle-down" aria-hidden="true"></i> angle-down</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-angle-left" aria-hidden="true"></i> angle-left</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-angle-right" aria-hidden="true"></i> angle-right</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-angle-up" aria-hidden="true"></i> angle-up</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-arrow-circle-down" aria-hidden="true"></i> arrow-circle-down</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-arrow-circle-left" aria-hidden="true"></i> arrow-circle-left</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-arrow-circle-o-down" aria-hidden="true"></i> arrow-circle-o-down</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-arrow-circle-o-left" aria-hidden="true"></i> arrow-circle-o-left</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-arrow-circle-o-right" aria-hidden="true"></i> arrow-circle-o-right</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-arrow-circle-o-up" aria-hidden="true"></i> arrow-circle-o-up</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-arrow-circle-right" aria-hidden="true"></i> arrow-circle-right</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-arrow-circle-up" aria-hidden="true"></i> arrow-circle-up</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-arrow-down" aria-hidden="true"></i> arrow-down</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-arrow-left" aria-hidden="true"></i> arrow-left</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-arrow-right" aria-hidden="true"></i> arrow-right</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-arrow-up" aria-hidden="true"></i> arrow-up</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-arrows" aria-hidden="true"></i> arrows</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-arrows-alt" aria-hidden="true"></i> arrows-alt</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-arrows-h" aria-hidden="true"></i> arrows-h</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-arrows-v" aria-hidden="true"></i> arrows-v</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-caret-down" aria-hidden="true"></i> caret-down</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-caret-left" aria-hidden="true"></i> caret-left</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-caret-right" aria-hidden="true"></i> caret-right</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-caret-square-o-down" aria-hidden="true"></i> caret-square-o-down</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-caret-square-o-left" aria-hidden="true"></i> caret-square-o-left</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-caret-square-o-right" aria-hidden="true"></i> caret-square-o-right</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-caret-square-o-up" aria-hidden="true"></i> caret-square-o-up</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-caret-up" aria-hidden="true"></i> caret-up</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-chevron-circle-down" aria-hidden="true"></i> chevron-circle-down</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-chevron-circle-left" aria-hidden="true"></i> chevron-circle-left</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-chevron-circle-right" aria-hidden="true"></i> chevron-circle-right</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-chevron-circle-up" aria-hidden="true"></i> chevron-circle-up</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-chevron-down" aria-hidden="true"></i> chevron-down</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-chevron-left" aria-hidden="true"></i> chevron-left</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-chevron-right" aria-hidden="true"></i> chevron-right</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-chevron-up" aria-hidden="true"></i> chevron-up</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-exchange" aria-hidden="true"></i> exchange</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-o-down" aria-hidden="true"></i> hand-o-down</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-o-left" aria-hidden="true"></i> hand-o-left</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-o-right" aria-hidden="true"></i> hand-o-right</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hand-o-up" aria-hidden="true"></i> hand-o-up</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-long-arrow-down" aria-hidden="true"></i> long-arrow-down</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-long-arrow-left" aria-hidden="true"></i> long-arrow-left</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-long-arrow-right" aria-hidden="true"></i> long-arrow-right</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-long-arrow-up" aria-hidden="true"></i> long-arrow-up</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-toggle-down" aria-hidden="true"></i> toggle-down <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-toggle-left" aria-hidden="true"></i> toggle-left <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-toggle-right" aria-hidden="true"></i> toggle-right <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-toggle-up" aria-hidden="true"></i> toggle-up <span class="text-muted">(alias)</span></div></div></section><section id="video-player"><h1 class="page-header">视频类</h1><div class="row fontawesome-icon-list"><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-arrows-alt" aria-hidden="true"></i> arrows-alt</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-backward" aria-hidden="true"></i> backward</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-compress" aria-hidden="true"></i> compress</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-eject" aria-hidden="true"></i> eject</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-expand" aria-hidden="true"></i> expand</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-fast-backward" aria-hidden="true"></i> fast-backward</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-fast-forward" aria-hidden="true"></i> fast-forward</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-forward" aria-hidden="true"></i> forward</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-pause" aria-hidden="true"></i> pause</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-pause-circle" aria-hidden="true"></i> pause-circle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-pause-circle-o" aria-hidden="true"></i> pause-circle-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-play" aria-hidden="true"></i> play</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-play-circle" aria-hidden="true"></i> play-circle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-play-circle-o" aria-hidden="true"></i> play-circle-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-random" aria-hidden="true"></i> random</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-step-backward" aria-hidden="true"></i> step-backward</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-step-forward" aria-hidden="true"></i> step-forward</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-stop" aria-hidden="true"></i> stop</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-stop-circle" aria-hidden="true"></i> stop-circle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-stop-circle-o" aria-hidden="true"></i> stop-circle-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-youtube-play" aria-hidden="true"></i> youtube-play</div></div></section><section id="brand"><h1 class="page-header">品牌logo类</h1><div class="row fontawesome-icon-list margin-bottom-lg"><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-500px" aria-hidden="true"></i> 500px</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-adn" aria-hidden="true"></i> adn</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-amazon" aria-hidden="true"></i> amazon</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-android" aria-hidden="true"></i> android</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-angellist" aria-hidden="true"></i> angellist</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-apple" aria-hidden="true"></i> apple</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bandcamp" aria-hidden="true"></i> bandcamp</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-behance" aria-hidden="true"></i> behance</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-behance-square" aria-hidden="true"></i> behance-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bitbucket" aria-hidden="true"></i> bitbucket</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bitbucket-square" aria-hidden="true"></i> bitbucket-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bitcoin" aria-hidden="true"></i> bitcoin <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-black-tie" aria-hidden="true"></i> black-tie</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bluetooth" aria-hidden="true"></i> bluetooth</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-bluetooth-b" aria-hidden="true"></i> bluetooth-b</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-btc" aria-hidden="true"></i> btc</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-buysellads" aria-hidden="true"></i> buysellads</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cc-amex" aria-hidden="true"></i> cc-amex</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cc-diners-club" aria-hidden="true"></i> cc-diners-club</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cc-discover" aria-hidden="true"></i> cc-discover</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cc-jcb" aria-hidden="true"></i> cc-jcb</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cc-mastercard" aria-hidden="true"></i> cc-mastercard</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cc-paypal" aria-hidden="true"></i> cc-paypal</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cc-stripe" aria-hidden="true"></i> cc-stripe</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cc-visa" aria-hidden="true"></i> cc-visa</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-chrome" aria-hidden="true"></i> chrome</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-codepen" aria-hidden="true"></i> codepen</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-codiepie" aria-hidden="true"></i> codiepie</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-connectdevelop" aria-hidden="true"></i> connectdevelop</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-contao" aria-hidden="true"></i> contao</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-css3" aria-hidden="true"></i> css3</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-dashcube" aria-hidden="true"></i> dashcube</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-delicious" aria-hidden="true"></i> delicious</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-deviantart" aria-hidden="true"></i> deviantart</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-digg" aria-hidden="true"></i> digg</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-dribbble" aria-hidden="true"></i> dribbble</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-dropbox" aria-hidden="true"></i> dropbox</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-drupal" aria-hidden="true"></i> drupal</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-edge" aria-hidden="true"></i> edge</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-eercast" aria-hidden="true"></i> eercast</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-empire" aria-hidden="true"></i> empire</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-envira" aria-hidden="true"></i> envira</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-etsy" aria-hidden="true"></i> etsy</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-expeditedssl" aria-hidden="true"></i> expeditedssl</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-fa" aria-hidden="true"></i> fa <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-facebook" aria-hidden="true"></i> facebook</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-facebook-f" aria-hidden="true"></i> facebook-f <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-facebook-official" aria-hidden="true"></i> facebook-official</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-facebook-square" aria-hidden="true"></i> facebook-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-firefox" aria-hidden="true"></i> firefox</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-first-order" aria-hidden="true"></i> first-order</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-flickr" aria-hidden="true"></i> flickr</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-font-awesome" aria-hidden="true"></i> font-awesome</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-fonticons" aria-hidden="true"></i> fonticons</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-fort-awesome" aria-hidden="true"></i> fort-awesome</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-forumbee" aria-hidden="true"></i> forumbee</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-foursquare" aria-hidden="true"></i> foursquare</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-free-code-camp" aria-hidden="true"></i> free-code-camp</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-ge" aria-hidden="true"></i> ge <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-get-pocket" aria-hidden="true"></i> get-pocket</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-gg" aria-hidden="true"></i> gg</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-gg-circle" aria-hidden="true"></i> gg-circle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-git" aria-hidden="true"></i> git</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-git-square" aria-hidden="true"></i> git-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-github" aria-hidden="true"></i> github</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-github-alt" aria-hidden="true"></i> github-alt</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-github-square" aria-hidden="true"></i> github-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-gitlab" aria-hidden="true"></i> gitlab</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-gittip" aria-hidden="true"></i> gittip <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-glide" aria-hidden="true"></i> glide</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-glide-g" aria-hidden="true"></i> glide-g</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-google" aria-hidden="true"></i> google</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-google-plus" aria-hidden="true"></i> google-plus</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-google-plus-circle" aria-hidden="true"></i> google-plus-circle <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-google-plus-official" aria-hidden="true"></i> google-plus-official</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-google-plus-square" aria-hidden="true"></i> google-plus-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-google-wallet" aria-hidden="true"></i> google-wallet</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-gratipay" aria-hidden="true"></i> gratipay</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-grav" aria-hidden="true"></i> grav</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hacker-news" aria-hidden="true"></i> hacker-news</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-houzz" aria-hidden="true"></i> houzz</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-html5" aria-hidden="true"></i> html5</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-imdb" aria-hidden="true"></i> imdb</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-instagram" aria-hidden="true"></i> instagram</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-internet-explorer" aria-hidden="true"></i> internet-explorer</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-ioxhost" aria-hidden="true"></i> ioxhost</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-joomla" aria-hidden="true"></i> joomla</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-jsfiddle" aria-hidden="true"></i> jsfiddle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-lastfm" aria-hidden="true"></i> lastfm</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-lastfm-square" aria-hidden="true"></i> lastfm-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-leanpub" aria-hidden="true"></i> leanpub</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-linkedin" aria-hidden="true"></i> linkedin</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-linkedin-square" aria-hidden="true"></i> linkedin-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-linode" aria-hidden="true"></i> linode</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-linux" aria-hidden="true"></i> linux</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-maxcdn" aria-hidden="true"></i> maxcdn</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-meanpath" aria-hidden="true"></i> meanpath</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-medium" aria-hidden="true"></i> medium</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-meetup" aria-hidden="true"></i> meetup</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-mixcloud" aria-hidden="true"></i> mixcloud</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-modx" aria-hidden="true"></i> modx</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-odnoklassniki" aria-hidden="true"></i> odnoklassniki</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-odnoklassniki-square" aria-hidden="true"></i> odnoklassniki-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-opencart" aria-hidden="true"></i> opencart</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-openid" aria-hidden="true"></i> openid</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-opera" aria-hidden="true"></i> opera</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-optin-monster" aria-hidden="true"></i> optin-monster</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-pagelines" aria-hidden="true"></i> pagelines</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-paypal" aria-hidden="true"></i> paypal</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-pied-piper" aria-hidden="true"></i> pied-piper</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-pied-piper-alt" aria-hidden="true"></i> pied-piper-alt</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-pied-piper-pp" aria-hidden="true"></i> pied-piper-pp</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-pinterest" aria-hidden="true"></i> pinterest</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-pinterest-p" aria-hidden="true"></i> pinterest-p</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-pinterest-square" aria-hidden="true"></i> pinterest-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-product-hunt" aria-hidden="true"></i> product-hunt</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-qq" aria-hidden="true"></i> qq</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-quora" aria-hidden="true"></i> quora</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-ra" aria-hidden="true"></i> ra <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-ravelry" aria-hidden="true"></i> ravelry</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-rebel" aria-hidden="true"></i> rebel</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-reddit" aria-hidden="true"></i> reddit</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-reddit-alien" aria-hidden="true"></i> reddit-alien</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-reddit-square" aria-hidden="true"></i> reddit-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-renren" aria-hidden="true"></i> renren</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-resistance" aria-hidden="true"></i> resistance <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-safari" aria-hidden="true"></i> safari</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-scribd" aria-hidden="true"></i> scribd</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-sellsy" aria-hidden="true"></i> sellsy</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-share-alt" aria-hidden="true"></i> share-alt</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-share-alt-square" aria-hidden="true"></i> share-alt-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-shirtsinbulk" aria-hidden="true"></i> shirtsinbulk</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-simplybuilt" aria-hidden="true"></i> simplybuilt</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-skyatlas" aria-hidden="true"></i> skyatlas</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-skype" aria-hidden="true"></i> skype</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-slack" aria-hidden="true"></i> slack</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-slideshare" aria-hidden="true"></i> slideshare</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-snapchat" aria-hidden="true"></i> snapchat</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-snapchat-ghost" aria-hidden="true"></i> snapchat-ghost</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-snapchat-square" aria-hidden="true"></i> snapchat-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-soundcloud" aria-hidden="true"></i> soundcloud</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-spotify" aria-hidden="true"></i> spotify</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-stack-exchange" aria-hidden="true"></i> stack-exchange</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-stack-overflow" aria-hidden="true"></i> stack-overflow</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-steam" aria-hidden="true"></i> steam</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-steam-square" aria-hidden="true"></i> steam-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-stumbleupon" aria-hidden="true"></i> stumbleupon</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-stumbleupon-circle" aria-hidden="true"></i> stumbleupon-circle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-superpowers" aria-hidden="true"></i> superpowers</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-telegram" aria-hidden="true"></i> telegram</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-tencent-weibo" aria-hidden="true"></i> tencent-weibo</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-themeisle" aria-hidden="true"></i> themeisle</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-trello" aria-hidden="true"></i> trello</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-tripadvisor" aria-hidden="true"></i> tripadvisor</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-tumblr" aria-hidden="true"></i> tumblr</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-tumblr-square" aria-hidden="true"></i> tumblr-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-twitch" aria-hidden="true"></i> twitch</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-twitter" aria-hidden="true"></i> twitter</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-twitter-square" aria-hidden="true"></i> twitter-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-usb" aria-hidden="true"></i> usb</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-viacoin" aria-hidden="true"></i> viacoin</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-viadeo" aria-hidden="true"></i> viadeo</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-viadeo-square" aria-hidden="true"></i> viadeo-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-vimeo" aria-hidden="true"></i> vimeo</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-vimeo-square" aria-hidden="true"></i> vimeo-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-vine" aria-hidden="true"></i> vine</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-vk" aria-hidden="true"></i> vk</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-wechat" aria-hidden="true"></i> wechat <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-weibo" aria-hidden="true"></i> weibo</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-weixin" aria-hidden="true"></i> weixin</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-whatsapp" aria-hidden="true"></i> whatsapp</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-wikipedia-w" aria-hidden="true"></i> wikipedia-w</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-windows" aria-hidden="true"></i> windows</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-wordpress" aria-hidden="true"></i> wordpress</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-wpbeginner" aria-hidden="true"></i> wpbeginner</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-wpexplorer" aria-hidden="true"></i> wpexplorer</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-wpforms" aria-hidden="true"></i> wpforms</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-xing" aria-hidden="true"></i> xing</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-xing-square" aria-hidden="true"></i> xing-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-y-combinator" aria-hidden="true"></i> y-combinator</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-y-combinator-square" aria-hidden="true"></i> y-combinator-square <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-yahoo" aria-hidden="true"></i> yahoo</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-yc" aria-hidden="true"></i> yc <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-yc-square" aria-hidden="true"></i> yc-square <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-yelp" aria-hidden="true"></i> yelp</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-yoast" aria-hidden="true"></i> yoast</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-youtube" aria-hidden="true"></i> youtube</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-youtube-play" aria-hidden="true"></i> youtube-play</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-youtube-square" aria-hidden="true"></i> youtube-square</div></div></section><section id="medical"><h1 class="page-header">医疗类</h1><div class="row fontawesome-icon-list"><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-ambulance" aria-hidden="true"></i> ambulance</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-h-square" aria-hidden="true"></i> h-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-heart" aria-hidden="true"></i> heart</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-heart-o" aria-hidden="true"></i> heart-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-heartbeat" aria-hidden="true"></i> heartbeat</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hospital-o" aria-hidden="true"></i> hospital-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-medkit" aria-hidden="true"></i> medkit</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-plus-square" aria-hidden="true"></i> plus-square</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-stethoscope" aria-hidden="true"></i> stethoscope</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-user-md" aria-hidden="true"></i> user-md</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-wheelchair" aria-hidden="true"></i> wheelchair</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-wheelchair-alt" aria-hidden="true"></i> wheelchair-alt</div></div></section>        <section id="accessibility"><h1 class="page-header">障碍类（助残）</h1><div class="row fontawesome-icon-list"><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-american-sign-language-interpreting" aria-hidden="true"></i> american-sign-language-interpreting</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-asl-interpreting" aria-hidden="true"></i> asl-interpreting <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-assistive-listening-systems" aria-hidden="true"></i> assistive-listening-systems</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-audio-description" aria-hidden="true"></i> audio-description</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-blind" aria-hidden="true"></i> blind</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-braille" aria-hidden="true"></i> braille</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-cc" aria-hidden="true"></i> cc</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-deaf" aria-hidden="true"></i> deaf</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-deafness" aria-hidden="true"></i> deafness <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-hard-of-hearing" aria-hidden="true"></i> hard-of-hearing <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-low-vision" aria-hidden="true"></i> low-vision</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-question-circle-o" aria-hidden="true"></i> question-circle-o</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-sign-language" aria-hidden="true"></i> sign-language</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-signing" aria-hidden="true"></i> signing <span class="text-muted">(alias)</span></div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-tty" aria-hidden="true"></i> tty</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-universal-access" aria-hidden="true"></i> universal-access</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-volume-control-phone" aria-hidden="true"></i> volume-control-phone</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-wheelchair" aria-hidden="true"></i> wheelchair</div><div class="fa-hover col-md-3 col-sm-4"><i class="fa fa-wheelchair-alt" aria-hidden="true"></i> wheelchair-alt</div></div></section></div></article></body>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Hexo图标 </tag>
            
            <tag> Butterfly图标 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 如何自定义类似主页的分页列表</title>
      <link href="/2025/09/474520ec174b490f96586dfa50bb510f/"/>
      <url>/2025/09/474520ec174b490f96586dfa50bb510f/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>注意版本</strong>：框架 <a href="https://hexo.io/">Hexo 7.3.0</a>|主题 <a href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly 5.4.3</a></p></blockquote><p><strong>需求</strong>：构建一个文学列表栏目，根据不同类别（三行诗集、诗词歌赋等），每个栏目可以有多个作品展示（类似首页，每页展示10条，数据为标题、时间、描述、作者、图片等）。</p><p>具体效果可参照我的博客： ”文学 -  诗词歌赋“</p><h2 id="注意事项">注意事项</h2><p>Front-matter 必须严格格式（md文件）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 春日偶得</span><br><span class="line">type: poems</span><br><span class="line">date: <span class="number">2025</span>-<span class="number">04</span>-<span class="number">01</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure><p><strong>对于脚本的放置位置</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>放在项目根 scripts（推荐用于全局逻辑）</p></li><li class="lvl-2"><p>放在主题 scripts（推荐用于主题专属逻辑）</p></li></ul><p>我是放在主题butterfly之下  <code>themes/butterfly/scripts/custom/</code></p></blockquote><p><strong>对于模板文件的配置</strong>：</p><blockquote><p>三个地方必须完全一致：</p><ol><li class="lvl-3">Front-matter: <code>layout: custom/literature</code></li><li class="lvl-3">Generator: <code>layout: ['custom/literature']</code></li><li class="lvl-3">文件路径: <code>layout/custom/literature.pug</code></li></ol><p>如果没有加载到模板，会自动用 <code>archive</code> 模板（时间轴形式）</p></blockquote><p><strong>对于路径的配置</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>Generator 中的 basePath，必须和你的文件路径 <strong>完全一致</strong>！如果文件路径是 <code>literature/poems/</code>，但 <code>basePath</code> 是 <code>literature/three-line-poems/</code>  会导致路由不匹配，找不到模板。</p></li><li class="lvl-2"><p><strong>路径不能有符号</strong>，如：我之前 <code>literature/three-line-poems/</code> ，存在符号导致一直路由不到自定义模板中</p></li></ul></blockquote><p><strong>其他文件异常</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Cannot read properties of undefined (reading &#x27;length&#x27;)</span></span><br><span class="line"><span class="comment">// 可以在报错的指定行，添加判断条件  &amp;&amp; page.categories.data</span></span><br><span class="line"><span class="keyword">if</span> theme.<span class="property">post_meta</span>.<span class="property">post</span>.<span class="property">categories</span> &amp;&amp; page.<span class="property">categories</span> &amp;&amp; page.<span class="property">categories</span>.<span class="property">data</span> &amp;&amp; page.<span class="property">categories</span>.<span class="property">data</span>.<span class="property">length</span> &gt; <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>项目结构</strong>：</p><blockquote><p>hexo-blog/<br>├── source/<br>│   ├── _posts/文学/<br>│   │   ├── <a href="http://xn--4yqs28akwekh.md">春日偶得.md</a>           ← 包含 type: three-line-poem<br>│   │   └── <a href="http://xn--ess69p03e5y8b.md">夜读有感.md</a><br>│   └── literature/<br>│       └──poems/<br>│           └── <a href="http://index.md">index.md</a>      ← layout: custom/literature<br>├── themes/<br>│   └── butterfly/<br>│       ├── layout/custom/<br>│       │   └── literature.pug<br>│       ├── scripts/custom/<br>│       │   └──poems.js  ← layout: custom/literature<br>│       ├── source/css/custom/<br>│       │   └──literature.css<br>└── _config.yml</p></blockquote><h2 id="前提条件">前提条件</h2><ol><li class="lvl-3"><p>你已安装 Hexo 并创建了博客项目。</p></li><li class="lvl-3"><p>已安装 <code>hexo-pagination</code> 插件（用于分页逻辑）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-pagination --save</span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p>使用 Pug 作为模板引擎（默认是 EJS，需配置）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug --save</span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p>在 <code>_config.yml</code> 中设置主题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure></li></ol><h2 id="创建自定义页面">创建自定义页面</h2><blockquote><p><strong>注意</strong>：框架会自动创建该文件。你也可以自己手动创建，指定相关信息。</p></blockquote><p>创建页面文件（列表）：在 <code>source/literature/poems/index.md</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 三行诗集</span><br><span class="line">layout: custom/literature</span><br><span class="line">pagination: <span class="literal">true</span></span><br><span class="line">per_page: <span class="number">5</span></span><br><span class="line">type: three-line-poem</span><br><span class="line">---</span><br></pre></td></tr></table></figure><blockquote><ul class="lvl-1"><li class="lvl-2"><p><code>layout: custom/literature</code> → 指定使用自定义模板（模板所在位置：<strong>路径/文件名</strong>）</p></li><li class="lvl-2"><p><code>per_page: 5</code> → 每页显示5首诗</p></li><li class="lvl-2"><p><code>type: three-line-poem</code> → 自定义类型，用于筛选文章</p></li></ul></blockquote><h2 id="准备文章数据">准备文章数据</h2><p><code>source/_posts/文学/春日偶得.md</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 春日偶得</span><br><span class="line">date: <span class="number">2025</span>-<span class="number">04</span>-<span class="number">01</span></span><br><span class="line">categories: [文学, 诗集]</span><br><span class="line">tags: [三行情诗, 春日偶得]</span><br><span class="line">type: three-line-poem</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">春风拂面不须酒，</span><br><span class="line">落花随步即成诗。</span><br><span class="line">心静自然天地宽。</span><br></pre></td></tr></table></figure><p><code>source/_posts/文学/夜读有感.md</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 夜读有感</span><br><span class="line">date: <span class="number">2025</span>-<span class="number">04</span>-<span class="number">02</span></span><br><span class="line">categories: [文学, 诗集]</span><br><span class="line">tags: [三行情诗, 夜读有感]</span><br><span class="line">type: three-line-poem</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">灯下翻书夜已深，</span><br><span class="line">字里行间见古人。</span><br><span class="line">合卷方知月照襟。</span><br></pre></td></tr></table></figure><blockquote><p>所有你想在 <code>/literature/poems</code> 页面展示的诗，都加上 <code>type: three-line-poem</code>。</p><p>路径可以随意，如： <code>source/_posts/test/test.md</code></p></blockquote><h2 id="创建分页模板（pug）">创建分页模板（pug）</h2><p>在主题目录（ <code>themes/butterfly/layout/</code>）下创建模板（模板一定要与 hexo-pagination 版本对应，否则会出错，目前是4.0.0）</p><p><code>themes/butterfly/layout/custom/literature.pug</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">extends ../includes/layout.pug</span><br><span class="line"></span><br><span class="line">block content</span><br><span class="line">  style.</span><br><span class="line">    @import url(&#x27;/css/custom/literature.css&#x27;);</span><br><span class="line"></span><br><span class="line">  .poetry-page</span><br><span class="line">    .container</span><br><span class="line">      .poetry-header</span><br><span class="line">        h1= page.title || &#x27;诗集&#x27;</span><br><span class="line">      </span><br><span class="line">      - var poemPosts = page.posts || [];</span><br><span class="line">      if poemPosts.length === 0</span><br><span class="line">        .no-poems</span><br><span class="line">          p 📖 暂无诗歌，敬请期待...</span><br><span class="line">      else</span><br><span class="line">        .poem-container</span><br><span class="line">          each post in poemPosts</span><br><span class="line">            .poem-card</span><br><span class="line">              .card-header</span><br><span class="line">                h3.poem-title= post.title</span><br><span class="line">                if post.author</span><br><span class="line">                  p.poem-author 【#&#123;post.author&#125;】</span><br><span class="line">                .poem-meta</span><br><span class="line">                  if post.date &amp;&amp; post.address</span><br><span class="line">                    span #&#123;new Date(post.date).toLocaleDateString(&#x27;zh-CN&#x27;, &#123; year: &#x27;numeric&#x27;, month: &#x27;long&#x27;, day: &#x27;numeric&#x27; &#125;)&#125; • #&#123;post.address&#125;</span><br><span class="line">                  else if post.date</span><br><span class="line">                    span #&#123;new Date(post.date).toLocaleDateString(&#x27;zh-CN&#x27;, &#123; year: &#x27;numeric&#x27;, month: &#x27;long&#x27;, day: &#x27;numeric&#x27; &#125;)&#125;</span><br><span class="line">                  else if post.address</span><br><span class="line">                    span #&#123;post.address&#125;</span><br><span class="line">                if post.description</span><br><span class="line">                  p.poem-description= post.description</span><br><span class="line">            </span><br><span class="line">              .poem-body</span><br><span class="line">                .poem-content</span><br><span class="line">                  -</span><br><span class="line">                    var contentText = post.content || &#x27;&#x27;;</span><br><span class="line">                    var cleanText = contentText.replace(/&lt;[^&gt;]*&gt;/g, &#x27;&#x27;).replace(/\s*\n\s*/g, &#x27;\n&#x27;).trim();</span><br><span class="line">                    var lines = cleanText.split(&#x27;\n&#x27;).filter(line =&gt; line.trim() !== &#x27;&#x27;);</span><br><span class="line">                  if lines.length &gt; 0</span><br><span class="line">                    each line, i in lines</span><br><span class="line">                      - var cleanLine = line.trim().replace(/^(《[^》]*》\s*)/, &#x27;&#x27;);</span><br><span class="line">                      if cleanLine</span><br><span class="line">                        p.poem-line= cleanLine</span><br><span class="line">                  else</span><br><span class="line">                    p.poem-line(style=&#x27;text-align: center; color: #999;&#x27;) 无诗句内容</span><br><span class="line"></span><br><span class="line">              .card-footer</span><br><span class="line">                a.read-more(href=url_for(post.path)) 📖 阅读全文</span><br><span class="line"></span><br><span class="line">      if page.total &gt; 1</span><br><span class="line">        .pagination-wrap</span><br><span class="line">          .pagination-title</span><br><span class="line">            | 第 #&#123;page.current&#125; 页，共 #&#123;page.total&#125; 页</span><br><span class="line">          .pagination</span><br><span class="line">            if page.prev &amp;&amp; page.prev &gt; 0</span><br><span class="line">              a.page-link.prev(href=url_for(page.prev_link))</span><br><span class="line">                span.page-nav &amp;laquo; 上一页</span><br><span class="line">            else</span><br><span class="line">              span.page-link.disabled</span><br><span class="line">                span.page-nav &amp;laquo; 上一页</span><br><span class="line"></span><br><span class="line">            - for (let i = 1; i &lt;= page.total; i++)</span><br><span class="line">              if i === page.current</span><br><span class="line">                span.page-link.current= i</span><br><span class="line">              else</span><br><span class="line">                - var pageLink = i === 1 ? page.base : page.base + &#x27;page/&#x27; + i;</span><br><span class="line">                  a.page-link(href=url_for(pageLink))= i</span><br><span class="line"></span><br><span class="line">            if page.next &amp;&amp; page.next &gt; 0</span><br><span class="line">              a.page-link.next(href=url_for(page.next_link))</span><br><span class="line">                span.page-nav 下一页 &amp;raquo;</span><br><span class="line">            else</span><br><span class="line">              span.page-link.disabled</span><br><span class="line">                span.page-nav 下一页 &amp;raquo;</span><br></pre></td></tr></table></figure><p>如果你希望更精确控制“诗句预览”，可以在生成器或模板中预处理。</p><p>每首诗显示为一张精美卡片：</p><blockquote><p>┌──────────────────────────────────────┐<br>│  《春日偶得》                               │ ← 渐变标题栏<br>│  余一叶知秋尽               │<br>│   己亥年正月 •  老家     ├<br>│  春日散步偶得小诗，心随景动。        │ ← 描述（斜体灰色）<br>│                                        │<br>│  春风拂面不须酒，                       │ ← 第一行（橙色）<br>│  落花随步即成诗。               │ ← 第二行（蓝色）<br>│  心静自然天地宽。                       │ ← 第三行（绿色加粗）<br>├──────────────────────────────────────┤<br>│                                  📖 阅读全文 │ ← 右下角按钮<br>└──────────────────────────────────────┘</p><ul class="lvl-1"><li class="lvl-2">网格自适应（PC 3列，平板 2列，手机 1列）</li><li class="lvl-2">鼠标悬停轻微上浮 + 阴影加深</li><li class="lvl-2">点击标题或“阅读全文”进入详情页</li><li class="lvl-2">分页导航 + 页码跳转</li></ul></blockquote><p>如果显示：未提取到诗句内容</p><p>可能问题：你的Generator 与 模板中的数据不对应，获取数据的属性不同，或者缺少文章</p><h2 id="pug-模板样式（CSS）">pug 模板样式（CSS）</h2><p>在主题目录（ <code>themes/butterfly/source/</code>）下创建样式<code>themes\butterfly\source\css\custom\literature.css</code></p><p>你可以根据自己的需求，随意更改样式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.poetry-page</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">2rem</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f8f9fa</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.poetry-header</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">2rem</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1.5rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.poetry-header</span> <span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2.2rem</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#2c3e50</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.poem-grid</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">2rem</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">2rem</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">1200px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.poem-grid</span> &#123;</span><br><span class="line"><span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0</span> <span class="number">1rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.poem-card</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: white;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">4px</span> <span class="number">12px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.05</span>);</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.poem-card</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">24px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">2px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card-header</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1.5rem</span> <span class="number">1.5rem</span> <span class="number">1rem</span> <span class="number">1.5rem</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#f0f0f0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.poem-title</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.3rem</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0.5rem</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#2c3e50</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.poem-meta</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.85rem</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#7f8c8d</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.poem-body</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1.5rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.poem-content</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">1rem</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.poem-line</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.1rem</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.8</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0.4rem</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.3rem</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;STKaiti&quot;</span>, <span class="string">&quot;KaiTi&quot;</span>, serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.poem-line</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#e74c3c</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.poem-line</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#3498db</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.poem-line</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#27ae60</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">500</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card-footer</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1rem</span> <span class="number">1.5rem</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f8f9fa</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: right;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.read-more</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#5d8aa8</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.9rem</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">500</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.read-more</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#2c5aa0</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.no-poems</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">3rem</span> <span class="number">2rem</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.1rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注入分页数据（Generator）">注入分页数据（Generator）</h2><p>你需要在主题的脚本或插件中为该页面生成分页器。在主题的 <code>scripts/custom</code> 目录创建 <code>three-line-poem.js</code></p><blockquote><p><strong>注意</strong>： 此处的 register generators名称 “three-line-poem”，必须保持唯一，否则会与其他冲突而不起效果。</p><p>插件的使用 参照 <a href="https://github.com/hexojs/hexo-pagination">Git 文档</a>，配置错误会导致加载不到模板，一直使用默认的。</p></blockquote><p>你可以随意在 <code>processedPosts</code> 中添加任意返回值，然后在pug模板中获取展示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// themes/butterfly/scripts/three-line-poem-pagination.js</span></span><br><span class="line"><span class="keyword">const</span> pagination = <span class="built_in">require</span>(<span class="string">&#x27;hexo-pagination&#x27;</span>);</span><br><span class="line"></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">generator</span>.<span class="title function_">register</span>(<span class="string">&#x27;three-line-poem&#x27;</span>, <span class="keyword">function</span>(<span class="params">locals</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; config &#125; = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">const</span> &#123; posts &#125; = locals;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 筛选 type: poems 的文章</span></span><br><span class="line">  <span class="keyword">const</span> poemPosts = posts</span><br><span class="line">    .<span class="title function_">sort</span>(<span class="string">&#x27;-date&#x27;</span>)</span><br><span class="line">    .<span class="title function_">filter</span>(<span class="function"><span class="params">post</span> =&gt;</span> post.<span class="property">type</span> === <span class="string">&#x27;three-line-poem&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> processedPosts = poemPosts.<span class="title function_">map</span>(<span class="function"><span class="params">post</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">title</span>: post.<span class="property">title</span>,</span><br><span class="line"><span class="attr">author</span>: post.<span class="property">author</span>,</span><br><span class="line"><span class="attr">date</span>: post.<span class="property">date</span>,</span><br><span class="line"><span class="attr">content</span>: post.<span class="property">content</span>,</span><br><span class="line"><span class="attr">description</span>: post.<span class="property">description</span>,</span><br><span class="line">&#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> basePath = <span class="string">&#x27;literature/poems/&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> paginated = <span class="title function_">pagination</span>(basePath, processedPosts, &#123;</span><br><span class="line">    <span class="attr">perPage</span>: config.<span class="property">theme</span>.<span class="property">per_page</span> || <span class="number">10</span>,</span><br><span class="line">    <span class="attr">layout</span>: [<span class="string">&quot;custom/literature&quot;</span>], <span class="comment">// ← 和你的模板路径一致 , &#x27;index&#x27;, &#x27;archive&#x27;</span></span><br><span class="line">    <span class="attr">format</span>: <span class="string">&#x27;page/%d/&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;三行情诗&quot;</span>,</span><br><span class="line">  <span class="attr">tag</span>: <span class="string">&quot;三行情诗&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> paginated;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>这个脚本会在生成时为 <code>/literature/poems/</code> 创建分页，并注入 <code>paginator</code> 对象到模板上下文。</p><p>在脚本中加 <code>console.log</code>， 验证脚本是否被加载</p><p>在主题配置（<code>themes/butterfly/_config.yml</code>）中添加：<code>per_page: 10</code>，这样你可以统一控制每页数量。</p></blockquote><h2 id="生成并预览">生成并预览</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行</span></span><br><span class="line">hexo clean &amp; hexo g &amp; hexo s</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行生成后，检查输出文件：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">public/literature/poems/index.html</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">public/literature/poems/page/2/index.html</span></span><br><span class="line">hexo g --debug &gt; debug.log 2&gt;&amp;1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">预览</span></span><br><span class="line">http://localhost:4000/literature/poems/</span><br><span class="line">http://localhost:4000/literature/poems/page/2/</span><br></pre></td></tr></table></figure><blockquote><ul class="lvl-1"><li class="lvl-2"><p>访问 <code>/literature/poems/</code> 显示第一页诗歌列表（每页10首）。</p></li><li class="lvl-2"><p>底部有“上一页 / 页码 / 下一页”导航。</p></li><li class="lvl-2"><p>支持输入页码跳转。</p></li><li class="lvl-2"><p>每首诗标题可点击进入详情页。</p></li><li class="lvl-2"><p>响应式、语义化 Pug 结构。</p></li></ul></blockquote><p><img src="/imgs/image-20250920181655896.png" alt="image-20250920181655896"></p><h2 id="隐藏文章">隐藏文章</h2><p>如果需要在首页或其他栏目隐藏，可以使用 插件  <a href="https://github.com/prinsss/hexo-hide-posts/blob/master/README_ZH.md">hexo-hide-posts</a>，支持在特定标签显示或隐藏指定文章。</p><p>详细教程参考  <a href="https://github.com/prinsss/hexo-hide-posts/blob/master/README_ZH.md">插件Github说明</a>  或  <a href="https://insectmk.cn/posts/9c83ed78/#%E5%89%8D%E8%A8%80">博客</a></p><p>如我的配置，其他地方隐藏，只在 “文学-三行诗集” 栏目显示</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hide_posts:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>     <span class="comment"># 是否启用 hexo-hide-posts</span></span><br><span class="line">  <span class="attr">filter:</span> <span class="string">hidden</span>     <span class="comment"># 隐藏文章的 front-matter 标识，也可以改成其他你喜欢的名字</span></span><br><span class="line">  <span class="attr">noindex:</span> <span class="literal">false</span>    <span class="comment"># 为隐藏的文章添加 noindex meta 标签，阻止搜索引擎收录</span></span><br><span class="line">  <span class="comment"># 设置白名单，白名单中的 generator 可以访问隐藏文章</span></span><br><span class="line">  <span class="comment"># 常见的 generators 有：index, tag, category, archive, sitemap, feed, etc.</span></span><br><span class="line">  <span class="comment"># allowlist_generators: [&#x27;*&#x27;]</span></span><br><span class="line">  <span class="attr">allowlist_generators:</span> [<span class="string">&#x27;three-line-poem&#x27;</span>]</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 设置黑名单，黑名单中的 generator 不可以访问隐藏文章</span></span><br><span class="line">  <span class="comment"># 如果同时设置了黑名单和白名单，白名单的优先级更高</span></span><br><span class="line">  <span class="comment"># blocklist_generators: [&#x27;*&#x27;]</span></span><br><span class="line">  <span class="attr">blocklist_generators:</span> [<span class="string">&#x27;index&#x27;</span>, <span class="string">&#x27;tag&#x27;</span>, <span class="string">&#x27;archive&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Hexo自定义分页 </tag>
            
            <tag> Hexo分页 </tag>
            
            <tag> Butterfly分页 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 中各种锁的概念和应用场景</title>
      <link href="/2025/09/12fcec526d85480c91adb7dc237cd547/"/>
      <url>/2025/09/12fcec526d85480c91adb7dc237cd547/</url>
      
        <content type="html"><![CDATA[<h2 id="锁的种类">锁的种类</h2><img src="/imgs/image-20250917085547942.png" alt="image-20250917085547942" style="zoom: 80%;" /><h3 id="乐观锁-VS-悲观锁">乐观锁 VS 悲观锁</h3><p><strong>悲观锁</strong>：认为在使用数据的时候一定有别的线程来修改数据，因此在获取数据的时候会先加锁，确保数据不会被别的线程修改。Java中，synchronized关键字和Lock的实现类都是悲观锁，还有数据库的    <code>for UPDATE</code>。</p><p><strong>乐观锁</strong>：认为自己在使用数据时不会有别的线程修改数据，所以不会添加锁，只是在更新数据的时候去判断之前有没有别的线程更新了这个数据。（如果已被修改则重试或提交异常）。</p><p>乐观锁机为无锁机制，如atomic类的cas算法自旋实现，版本号机制，如数据库version字段。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>悲观锁适合写操作多的场景，先加锁可以保证写操作时数据正确。</p><p>对于资源竞争严重（线程冲突严重）的情况，CAS自旋的概率会比较大，从而浪费更多的CPU资源，效率低于synchronized等同步悲观锁。</p></li><li class="lvl-2"><p>乐观锁适合读操作多的场景，不加锁的特点能够使其读操作的性能大幅提升，增加吞吐量。</p><p>对于资源竞争较少（线程冲突较轻）的情况，使用synchronized同步锁进行线程阻塞和唤醒切换（用户态、内核态间的切换操作额外浪费消耗cpu资源）；而CAS基于硬件实现，不需要进入内核，不需要切换线程，操作自旋几率较少，可以获得更高的性能</p></li></ul></blockquote><img src="/imgs/20181122101946394.png" alt="img" style="zoom:67%;" /><h3 id="自旋锁-VS-阻塞锁">自旋锁 VS 阻塞锁</h3><p>阻塞或唤醒一个Java线程需要操作系统切换CPU状态来完成，这种状态转换需要耗费处理器时间。如果同步代码块中的内容过于简单，状态转换消耗的时间有可能比用户代码执行的时间还要长。</p><blockquote><p>在许多场景中，同步资源的锁定时间很短，为了这一小段时间去切换线程，线程挂起和恢复现场的花费可能会让系统得不偿失。如果物理机器有多个处理器，能够让两个或以上的线程同时并行执行，我们就可以让后面那个请求锁的线程不放弃CPU的执行时间，看看持有锁的线程是否很快就会释放锁。</p></blockquote><img src="/imgs/2018112210212894.png" alt="img" style="zoom:67%;" /><blockquote><p>自旋等待虽然避免了线程切换的开销，但它要占用处理器时间。如果锁被占用的时间很短，自旋等待的效果就会非常好。反之，如果锁被占用的时间很长，那么自旋的线程只会白浪费处理器资源。所以，自旋等待的时间必须要有一定的限度，如果自旋超过了限定次数（默认是10次，可以使用-XX:PreBlockSpin来更改）没有成功获得锁，就应当挂起线程。</p></blockquote><p>自旋锁的实现原理同样也是CAS，AtomicInteger中调用unsafe进行自增操作的源码中的do-while循环就是一个自旋操作，如果修改数值失败则通过循环来执行自旋，直至修改成功。</p><p><img src="/imgs/20181122104052869.png" alt="img"></p><blockquote><p>**自适自旋锁：**自旋的时间（次数）不再固定，而是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定。如果在同一个锁对象上，自旋等待刚刚成功获得过锁，并且持有锁的线程正在运行中，那么虚拟机就会认为这次自旋也是很有可能再次成功，进而它将允许自旋等待持续相对更长的时间。如果对于某个锁，自旋很少成功获得过，那在以后尝试获取这个锁时将可能省略掉自旋过程，直接阻塞线程，避免浪费处理器资源。</p></blockquote><p>java中自旋锁的简单实现方式:</p><p>当有第二个线程调用lock操作时由于owner值不为空，导致循环一直被执行，直至第一个线程调用unlock函数将owner设置为null，第二个线程才能进入临界区。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpinLock</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> AtomicReference&lt;Thread&gt; cas = <span class="keyword">new</span> <span class="title class_">AtomicReference</span>&lt;Thread&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">current</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">    <span class="comment">// 让当前线程不停地的在循环体内执行实现的，当循环的条件被其他线程改变时 才能进入临界区</span></span><br><span class="line">        <span class="keyword">while</span> (!cas.compareAndSet(<span class="literal">null</span>, current)) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">current</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        cas.compareAndSet(current, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自旋锁的其他种类： 在自旋锁中 另有三种常见的锁形式:   <strong>TicketLock ，CLHlock ，MCSlock</strong></p><p><strong>自旋锁的优点</strong>：</p><blockquote><ol><li class="lvl-3"><p>自旋锁不会使线程状态发生切换，一直处于用户态，即线程一直都是active的；不会使线程进入阻塞状态，减少了不必要的上下文切换，执行速度快</p></li><li class="lvl-3"><p>非自旋锁在获取不到锁的时候会进入阻塞状态，从而进入内核态，当获取到锁的时候需要从内核态恢复，需要线程上下文切换。 （线程被阻塞后便进入内核（Linux）调度状态，这个会导致系统在用户态与内核态之间来回切换，严重影响锁的性能）</p></li></ol></blockquote><p><strong>自旋锁的缺点</strong>：</p><blockquote><ol><li class="lvl-3"><p>消耗CPU：如果某个线程持有锁的时间过长，就会导致其它等待获取锁的线程进入循环等待。使用不当会造成CPU使用率极高。</p></li><li class="lvl-3"><p>非公平：自旋锁不是公平的，即无法满足等待时间最长的线程优先获取锁。不公平的锁就会存在“线程饥饿”问题。</p></li></ol></blockquote><p>Ticket锁主要解决的是访问顺序的问题（<strong>公平性</strong>），主要的问题是在多核cpu上。</p><p>最先请求获取锁的线程可以最先获取到锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TicketLock</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">AtomicInteger</span> <span class="variable">serviceNum</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">AtomicInteger</span> <span class="variable">ticketNum</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Integer&gt; LOCAL = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">myticket</span> <span class="operator">=</span> ticketNum.getAndIncrement();</span><br><span class="line">        LOCAL.set(myticket); <span class="comment">// 防止被外部修改myticket值</span></span><br><span class="line">  <span class="comment">// 每次都要查询一个serviceNum 服务号，影响性能（必须要到主内存读取，并阻止其他cpu修改）。</span></span><br><span class="line">        <span class="keyword">while</span> (myticket != serviceNum.get()) &#123; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">myticket</span> <span class="operator">=</span> LOCAL.get();</span><br><span class="line">        serviceNum.compareAndSet(myticket, myticket + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>TicketLock存在的问题:</strong></p><p>多处理器系统上，每个进程/线程占用的处理器都在读写同一个变量serviceNum ，每次读写操作都必须在多个处理器缓存之间进行缓存同步，这会导致繁重的系统总线和内存的流量，大大降低系统整体的性能。</p><p>CLHLock 和MCSLock 则是两种类型相似的公平锁，采用链表的形式进行排序，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CLHLock</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">CLHNode</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">isLocked</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> CLHNode     tail;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;CLHNode&gt; LOCAL = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;CLHNode&gt;();</span><br><span class="line">    <span class="comment">// 将指定类型的指定的volatile引用字段进行原子更新(tail获取、设定值两个操作是非原子的)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicReferenceFieldUpdater&lt;CLHLock, CLHNode&gt; UPDATER = AtomicReferenceFieldUpdater.newUpdater(CLHLock.class, CLHNode.class, <span class="string">&quot;tail&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CLHNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CLHNode</span>();</span><br><span class="line">        LOCAL.set(node);</span><br><span class="line">        <span class="type">CLHNode</span> <span class="variable">preNode</span> <span class="operator">=</span> UPDATER.getAndSet(<span class="built_in">this</span>, node);</span><br><span class="line">        <span class="keyword">if</span> (preNode != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (preNode.isLocked) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            preNode = <span class="literal">null</span>;</span><br><span class="line">            LOCAL.set(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CLHNode</span> <span class="variable">node</span> <span class="operator">=</span> LOCAL.get();</span><br><span class="line">        <span class="keyword">if</span> (!UPDATER.compareAndSet(<span class="built_in">this</span>, node, <span class="literal">null</span>)) &#123;</span><br><span class="line">            node.isLocked = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        node = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CLHlock是不停的查询前驱变量， 导致不适合在NUMA 架构下使用（在这种结构下，每个线程分布在不同的物理内存区域）</p><p>MCSLock则是对本地变量的节点进行循环。不存在CLHlock 的问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MCSLock</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MCSNode</span> &#123;</span><br><span class="line">        <span class="keyword">volatile</span> MCSNode next;</span><br><span class="line">        <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">isLocked</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;MCSNode&gt; NODE = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;MCSNode&gt;();</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unused&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> MCSNode queue;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicReferenceFieldUpdater&lt;MCSLock, MCSNode&gt; UPDATER = AtomicReferenceFieldUpdater.newUpdater(MCSLock.class, MCSNode.class, <span class="string">&quot;queue&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MCSNode</span> <span class="variable">currentNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MCSNode</span>();</span><br><span class="line">        NODE.set(currentNode);</span><br><span class="line">        <span class="type">MCSNode</span> <span class="variable">preNode</span> <span class="operator">=</span> UPDATER.getAndSet(<span class="built_in">this</span>, currentNode);</span><br><span class="line">        <span class="keyword">if</span> (preNode != <span class="literal">null</span>) &#123;</span><br><span class="line">            preNode.next = currentNode;</span><br><span class="line">            <span class="keyword">while</span> (currentNode.isLocked) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MCSNode</span> <span class="variable">currentNode</span> <span class="operator">=</span> NODE.get();</span><br><span class="line">        <span class="keyword">if</span> (currentNode.next == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (UPDATER.compareAndSet(<span class="built_in">this</span>, currentNode, <span class="literal">null</span>)) &#123;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (currentNode.next == <span class="literal">null</span>) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            currentNode.next.isLocked = <span class="literal">false</span>;</span><br><span class="line">            currentNode.next = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul class="lvl-1"><li class="lvl-2"><p>CLH 的队列是隐式的队列，没有真实的后继结点属性。</p></li><li class="lvl-2"><p>MCS 的队列是显式的队列，有真实的后继结点属性。</p></li></ul></blockquote><p>JAVA中，能够进入\退出、阻塞状态或包含阻塞锁的方法有 ，<strong>synchronized</strong> ，<strong>ReentrantLock</strong>，<strong>Object.wait()和notify()</strong>,   <strong>LockSupport.park()和unpart()</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CLHLock</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">CLHNode</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">volatile</span> Thread isLocked;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> CLHNode tail;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;CLHNode&gt; LOCAL = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;CLHNode&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicReferenceFieldUpdater&lt;CLHLock, CLHNode&gt; UPDATER = AtomicReferenceFieldUpdater.newUpdater(CLHLock.class, CLHNode.class, <span class="string">&quot;tail&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CLHNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CLHNode</span>();</span><br><span class="line">        LOCAL.set(node);</span><br><span class="line">        <span class="type">CLHNode</span> <span class="variable">preNode</span> <span class="operator">=</span> UPDATER.getAndSet(<span class="built_in">this</span>, node);</span><br><span class="line">        <span class="keyword">if</span> (preNode != <span class="literal">null</span>) &#123;</span><br><span class="line">            preNode.isLocked = Thread.currentThread();</span><br><span class="line">            LockSupport.park(<span class="built_in">this</span>);</span><br><span class="line">            preNode = <span class="literal">null</span>;</span><br><span class="line">            LOCAL.set(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CLHNode</span> <span class="variable">node</span> <span class="operator">=</span> LOCAL.get();</span><br><span class="line">        <span class="keyword">if</span> (!UPDATER.compareAndSet(<span class="built_in">this</span>, node, <span class="literal">null</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;unlock\t&quot;</span> + node.isLocked.getName());</span><br><span class="line">            LockSupport.unpark(node.isLocked);</span><br><span class="line">        &#125;</span><br><span class="line">        node = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>阻塞锁的优势在于，阻塞的线程不会占用cpu时间， 不会导致 CPu占用率过高，但进入时间以及恢复时间都要比自旋锁略慢。在竞争激烈的情况下 阻塞锁的性能要明显高于 自旋锁。</p></blockquote><p><strong>在线程竞争不激烈的情况下，使用自旋锁，竞争激烈的情况下使用阻塞锁</strong>。</p><h3 id="无锁-VS-偏向锁"><a href="https://www.cnblogs.com/jyroy/p/11365935.html">无锁 VS 偏向锁 </a></h3><p>偏向锁实际上是一种锁优化的，其目的是为了减少数据在无竞争情况下的性能消耗。</p><p>核心思想就是<strong>锁会偏向第一个获取它的线程</strong>，在接下来的执行过程中该锁没有其他的线程获取，则持有偏向锁的线程永远不需要再同步。</p><blockquote><p><strong>偏向锁的获取</strong><br>当一个线程访问同步块并获取锁时，会在对象头和栈帧中的锁记录里储存锁偏向的线程ID。以后该线程在进入和退出同步块时不需要进行CAS操作来加锁和解锁，只需要检查当前Mark Word中储存的线程是否指向当前线程，如果成功，表示已经获得对象锁；如果检测失败，则需要再测试一下Mark Word中偏向锁的标志是否已经被置为1（表示当前锁是偏向锁）：如果没有则使用CAS操作竞争锁，如果设置了，则尝试使用CAS将对象头的偏向锁指向当前线程。</p></blockquote><blockquote><p><strong>偏向锁的撤销</strong><br>偏向锁使用一种等待竞争出现才释放锁的机制，所以当有其他线程尝试获得锁时，才会释放锁。</p><p>偏向锁的撤销，需要等到安全点。它首先会暂停拥有偏向锁的线程，然后检查持有偏向锁的线程是否活着，如果不处于活动状态，则将对象头设置为无锁状态；如果依然活动，拥有偏向锁的栈会被执行，遍历偏向对象的锁记录，栈中的锁记录和对象头的Mark Word要么重新偏向其他线程，要么恢复到无锁或者标记对象不合适作为偏向锁（膨胀为轻量级锁），最后唤醒暂停的线程。</p></blockquote><blockquote><p><strong>关闭偏向锁</strong><br>偏向锁在Java运行环境中默认开启，但是不会随着程序启动立即生效，而是在启动几秒种后才激活，可以使用参数关闭延迟：<br><strong>-XX：BiasedLockingStartupDelay=0</strong><br>同样可以关闭偏向锁（程序默认进入轻量级锁）<br><strong>-XX：UseBiasedLocking=false</strong></p></blockquote><h3 id="轻量级锁-VS-重量级锁">轻量级锁 VS 重量级锁</h3><p>重量级锁就是最开始的线程阻塞操作，又叫悲观锁。</p><p>相对轻量级而言，重量级锁的阻塞挂起/唤醒线程需要从底层的的<strong>用户态</strong>转为<strong>内核态</strong> ，消耗CPU资源。</p><blockquote><p>轻量级锁是JDK1.6之中加入的新型锁机制，它并不是来代替重量级锁的，他的本意是在没有多线程竞争的前提下，减少传统的重量级锁使用操作系统互斥量产生的性能消耗。</p></blockquote><p><strong>轻量级锁加锁</strong></p><blockquote><p>线程在执行同步块之前，JVM会现在当前线程的栈帧中创建用于储存锁记录的空间（LockRecord），并将对象头的Mark Word信息复制到锁记录中。然后线程尝试使用CAS将对象头的MarkWord替换为指向锁记录的指针。</p><p>如果成功，当前线程获得锁，并且对象的锁标志位转变为“00”，如果失败，表示其他线程竞争锁，当前线程便会尝试自旋获取锁。</p><p><strong>如果有两条以上的线程竞争同一个锁，那么轻量级锁就不再有效</strong>，要膨胀为重量级锁，锁标志的状态变为“10”，MarkWord中储存的就是指向重量级锁（互斥量）的指针，后面等待的线程也要进入阻塞状态。</p></blockquote><p><strong>轻量级锁解锁</strong></p><blockquote><p>轻量级锁解锁时，同样通过CAS操作将对象头换回来。如果成功，则表示没有竞争发生。如果失败，说明有其他线程尝试过获取该锁，锁同样会膨胀为重量级锁。在释放锁的同时，唤醒被挂起的线程。</p></blockquote><h3 id="公平锁-VS-非公平锁">公平锁 VS 非公平锁</h3><p><strong>公平锁（Fair Lock）：</strong> 若等待队列非空，则直接入队；否则尝试获取锁</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>当一个线程尝试获取锁时，<strong>即使当前锁是可用的（没有被占用）</strong>，它也会<strong>先检查等待队列中是否有其他线程在排队</strong>。</p></li><li class="lvl-2"><p>如果有排队线程，当前线程会<strong>直接进入队列末尾排队</strong>，而不是“插队”获取锁。</p></li><li class="lvl-2"><p>保证了“先来先得”的公平性，避免线程饥饿。</p></li></ul></blockquote><p>**非公平锁（Non-fair Lock）：**先尝试获取锁，获取失败后，放入队列</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>当一个线程尝试获取锁时，<strong>不管等待队列中是否有其他线程</strong>，它都会<strong>首先尝试直接获取锁（CAS 抢占）</strong>。</p></li><li class="lvl-2"><p>如果抢锁成功 → 直接获得锁，不管队列里有没有“老员工”在排队。</p></li><li class="lvl-2"><p>如果抢锁失败 → 才进入等待队列排队。</p></li><li class="lvl-2"><p>这样可能导致“插队”，但<strong>吞吐量通常更高</strong>，因为减少了线程挂起/唤醒的开销。</p></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ReentrantLock</span> <span class="variable">fairLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>(<span class="literal">true</span>);   <span class="comment">// 公平锁</span></span><br><span class="line"><span class="type">ReentrantLock</span> <span class="variable">unfairLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();     <span class="comment">// 非公平锁（默认）</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>特性</th><th>公平锁</th><th>非公平锁</th></tr></thead><tbody><tr><td>获取锁时行为</td><td>检查队列，有排队则入队</td><td>直接尝试抢锁，失败才入队</td></tr><tr><td>吞吐量</td><td>较低（频繁上下文切换）</td><td>较高（减少排队，直接抢占）</td></tr><tr><td>公平性</td><td>保证 FIFO，无饥饿</td><td>不保证，可能插队</td></tr><tr><td>默认</td><td>否</td><td>是</td></tr></tbody></table><h3 id="可重入锁-VS-非可重入锁">可重入锁 VS 非可重入锁</h3><p>可重入锁又名递归锁，是指在同一个线程在外层方法获取锁的时候，再进入该线程的内层方法会自动获取锁（前提是锁对象是同一个对象或者class），不会因为之前已经获取过还没释放而阻塞。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>Java中<code>ReentrantLock</code>和<code>synchronized</code>都是可重入锁，可重入锁的一个优点是可一定程度避免死锁。</p></li><li class="lvl-2"><p>非可重入锁<code>NonReentrantLock</code>。</p></li></ul></blockquote><p>为什么可重入锁就可以在嵌套调用时可以自动获得锁呢？</p><blockquote><p>举例：有多个人在排队打水，此时管理员允许锁和同一个人的多个水桶绑定。这个人用多个水桶打水时，第一个水桶和锁绑定并打完水之后，第二个水桶也可以直接和锁绑定并开始打水，所有的水桶都打完水之后打水人才会将锁还给管理员。这个人的所有打水流程都能够成功执行，后续等待的人也能够打到水。</p><img src="/imgs/2018112210434386.png" alt="img" style="zoom:50%;" /></blockquote><p><strong>可重入锁的实现</strong></p><p>可重入锁，也叫做递归锁，指的是同一线程，在外层函数获得锁之后 ，内层递归函数仍然可以获取该锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getId() + <span class="string">&quot;--&gt; get&quot;</span>);</span><br><span class="line">        set();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getId() + <span class="string">&quot;--&gt; set&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ss).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ss).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ss).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>可重入锁最大的作用是避免死锁</strong></p><p>对于自旋锁来说， 若有同一线程两次调用<code>lock()</code> ，会导致第二次调用lock位置进行自旋，产生了死锁。说明这个锁并不是可重入的。</p><p><strong>自旋锁实现可重入锁</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpinLock1</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> AtomicReference&lt;Thread&gt; owner = <span class="keyword">new</span> <span class="title class_">AtomicReference</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">current</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        <span class="keyword">if</span> (current == owner.get()) &#123;</span><br><span class="line">            count++; <span class="comment">// 线程计数</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!owner.compareAndSet(<span class="literal">null</span>, current)) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">current</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        <span class="keyword">if</span> (current == owner.get()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (count != <span class="number">0</span>) &#123;</span><br><span class="line">                count--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                owner.compareAndSet(current, <span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="独享锁（互斥）-VS-共享锁">独享锁（互斥） VS 共享锁</h3><p><strong>独享锁</strong>（Exclusive Lock / 互斥锁）</p><p>同一时刻<strong>只允许一个线程</strong>持有该锁，其他线程必须等待锁释放后才能获取。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>互斥性：保证线程安全，避免数据竞争。</p></li><li class="lvl-2"><p>适用于写操作或需要独占资源的场景。</p></li><li class="lvl-2"><p>性能较低（因为并发度低），但安全性高。</p></li></ul></blockquote><p>Java 中的实现：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><code>synchronized</code> 关键字（隐式锁）</p></li><li class="lvl-2"><p><code>ReentrantLock</code>（显式锁，默认是独享锁）</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同一时刻只有一个线程能执行 `increment()` 方法。 </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p><strong>共享锁</strong>（Shared Lock / 读锁）</p><p>允许多个线程<strong>同时持有该锁</strong>，前提是这些线程的操作是“兼容”的（如多个读操作）。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>允许多个线程并发读取，提高并发性能。</p></li><li class="lvl-2"><p>不允许与写操作（独享锁）同时进行。</p></li><li class="lvl-2"><p>适用于“读多写少”的场景。</p></li></ul></blockquote><p>Java 中的实现：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><code>ReentrantReadWriteLock.ReadLock</code>（共享锁）</p></li><li class="lvl-2"><p><code>ReentrantReadWriteLock.WriteLock</code>（独享锁）</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多个线程可同时调用 `read()`，但调用 `write()` 时，其他读/写线程都必须等待。 </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Data</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ReentrantReadWriteLock</span> <span class="variable">rwLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读操作 - 共享锁</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">read</span><span class="params">()</span> &#123;</span><br><span class="line">        rwLock.readLock().lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            rwLock.readLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写操作 - 独享锁</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String newValue)</span> &#123;</span><br><span class="line">        rwLock.writeLock().lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.value = newValue;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            rwLock.writeLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><table><thead><tr><th>特性</th><th>独享锁（互斥锁）</th><th>共享锁（读锁）</th></tr></thead><tbody><tr><td>持有者数量</td><td>只能被一个线程持有</td><td>可被多个线程同时持有</td></tr><tr><td>适用场景</td><td>写操作、修改资源</td><td>读操作、查询资源</td></tr><tr><td>并发性</td><td>低（串行化）</td><td>高（允许多读）</td></tr><tr><td>典型实现</td><td><code>synchronized</code>,<code>ReentrantLock</code></td><td><code>ReentrantReadWriteLock.ReadLock</code></td></tr><tr><td>与对方的兼容性</td><td>不能与其他任何锁共存</td><td>可与其他共享锁共存，但不能与独享锁共存</td></tr><tr><td>性能</td><td>较低（阻塞其他线程）</td><td>较高（读操作可并发）</td></tr></tbody></table><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>读 &gt;&gt; 写</strong> ➜ 用 <code>ReentrantReadWriteLock</code>（共享读 + 独占写）</p></li><li class="lvl-2"><p><strong>写频繁 或 读写差不多</strong> ➜ 用 <code>ReentrantLock</code> 或 <code>synchronized</code>（简单高效）</p></li><li class="lvl-2"><p><strong>追求极致性能 + 读多写少</strong> ➜ 甚至可以考虑 <code>StampedLock</code>（Java 8+，支持乐观读）</p></li></ul></blockquote><h2 id="如何避免死锁">如何避免死锁</h2><p>活锁：线程的状态可以改变但是却不能继续执行</p><p><strong>死锁发生四个条件</strong>：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>互斥条件</strong>：一个资源每次只能被一个线程使用。要求对所分配的资源（如打印机）进行排他性控制，即在一段时间内某 资源仅为一个线程所占有。此时若有其他线程请求该资源，则请求线程只能等待。</p></li><li class="lvl-2"><p><strong>请求与保持条件</strong>：一个线程因请求资源而阻塞时，对已获得的资源保持不放（线程已经保持了至少一个资源，但又提出了新的资源请求，而该资源已被其他线程占有，此时请求线程被阻塞，但对自己已获得的资源保持不放）。</p></li><li class="lvl-2"><p><strong>不剥夺条件</strong>：线程已获得的资源，在末使用完之前，不能强行剥夺（只能是主动释放)。</p></li><li class="lvl-2"><p><strong>循环等待条件</strong>：若干线程之间形成一种头尾相接的循环等待资源关系。</p></li></ul><blockquote><p>当以上四个条件均满足，必然会造成死锁，发生死锁的线程无法进行下去，它们所持有的资源也无法释放。这样会导致CPU的吞吐量下降。当多个线程需要相同的一些锁，但是按照不同的顺序加锁，死锁就很容易发生。</p></blockquote><h3 id="避免死锁">避免死锁</h3><p>（破坏其中一个条件即可）：</p><p>最简单的方法就是阻止循环等待条件。将系统中所有的资源设置标志位、排序，规定所有的线程申请资源必须以一定的顺序（升序或降序）做操作来避免死锁，获取所有锁的顺序保持一致。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>让一个线程一次性申请所有的资源（破坏请求与保持条件）</p></li><li class="lvl-2"><p>加锁添加时限或通过 Lock 可重入锁，释放线程占用的锁（线程尝试获取锁的时候加上一定的时限，超过时限则放弃对该锁的请求，并释放自己占有的锁）（破坏不剥夺条件）</p></li><li class="lvl-2"><p>加锁顺序保持一致（线程按照一定的顺序加锁，确保所有的线程都是按照相同的顺序获得锁）（破坏循环等待条件）</p></li></ul></blockquote><h3 id="死锁检查">死锁检查</h3><p>死锁可能导致线程池满，线程无法销毁，一直占用。服务假死状态，CPU飙升</p><p>使用<code>jps</code>， <code>jstack</code> 或 <code>jconsole</code> 工具<code>dump</code>线程分析，它是 jdk 自带的线程堆栈分析工具。</p><p>arthas 分析线程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jps -l        #用jps来找到当前java的进程号,l表示列出路径</span><br><span class="line">jstack -l 14804 # 查看进程下所有线程状态（直接列出异常线程状态：Found one Java-level deadlock）</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">JConsole是一个图形化的监控工具！通过 线程 -&gt; 检测死锁    ，可查看死锁</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">jvisualvm是一个图形化的监控工具！ 线程中以红色表示异常线程</span></span><br></pre></td></tr></table></figure><h3 id="死锁复现">死锁复现</h3><p>解决一下死锁，只需要将加锁顺序改成一样，即都先加锁o1，再加锁o2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个简单的死锁类：加锁顺序不一致，且互相等待/争夺锁资源</span></span><br><span class="line"><span class="comment"> * 当DeadLock类的对象flag==1时（td1），先锁定o1,睡眠500毫秒</span></span><br><span class="line"><span class="comment"> * 而td1在睡眠的时候另一个flag==0的对象（td2）线程启动，先锁定o2,睡眠500毫秒</span></span><br><span class="line"><span class="comment"> * td1睡眠结束后需要锁定o2才能继续执行，而此时o2已被td2锁定；</span></span><br><span class="line"><span class="comment"> * td2睡眠结束后需要锁定o1才能继续执行，而此时o1已被td1锁定；</span></span><br><span class="line"><span class="comment"> * td1、td2相互等待，都需要得到对方锁定的资源才能继续执行，从而死锁。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeadLock</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//静态对象是类的所有对象共享的  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">o2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;flag=&quot;</span> + flag);</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (o1) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (o2) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (o2) &#123; <span class="comment">// 此处改为o1</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (o1) &#123;  <span class="comment">// 此处改为o2，即可避免死锁</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DeadLock</span> <span class="variable">td1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeadLock</span>();</span><br><span class="line">        <span class="type">DeadLock</span> <span class="variable">td2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeadLock</span>();</span><br><span class="line">        td1.flag = <span class="number">1</span>;</span><br><span class="line">        td2.flag = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//td1,td2都处于可执行状态，但JVM线程调度先执行哪个线程是不确定的。  </span></span><br><span class="line">        <span class="comment">//td2的run()可能在td1的run()之前运行  </span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(td1).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(td2).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h2 id="对象头与锁">对象头与锁</h2><p>锁就保存在对象头中。</p><p>Hotpot虚拟机的对象头分两部分信息：<strong>Mark Word（标记字段）、Klass Pointer（类型指针）</strong>。</p><p>Mark Word：</p><blockquote><p>默认存储对象的<u>HashCode，分代年龄和锁标志位</u>信息。这些信息都是与对象自身定义无关的数据，所以Mark Word被设计成一个非固定的数据结构以便在极小的空间内存存储尽量多的数据。它会根据对象的状态复用自己的存储空间，也就是说在运行期间Mark Word里存储的<u>数据会随着锁标志位的变化而变化</u>。这部分数据长度在32位和64位虚拟机中分别为32bit和64bit，它又称为“MarkWord”，它是实现锁的关键。</p></blockquote><p>Klass Point：</p><blockquote><p>对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。如果是数组的话，还有一个额外的空间储存数组长度。</p></blockquote><p>它的变化状态如下所示<br><img src="/imgs/20151217151455512" alt="img" style="zoom:67%;" /></p><p>如：synchronized是悲观锁，在操作同步资源之前需要给同步资源先加锁，这把锁就是存在Java对象头里的</p><h3 id="锁优化">锁优化</h3><p>主要是jdk中针对 Synchronized 关键字的优化。</p><p>Java 中的 <code>synchronized</code> 是最常用的同步机制，但早期版本（JDK 1.5 之前）性能较差，因为每次加锁/解锁都要调用操作系统内核的 Mutex（互斥量），涉及<strong>用户态到内核态切换</strong>，开销大。</p><p>从 JDK 1.6 开始，JVM 对 <code>synchronized</code> 做了大量优化，引入了  <strong>“锁优化”</strong> 手段：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>锁消除（Lock Elimination）</p></li><li class="lvl-2"><p>锁粗化（Lock Coarsening）</p></li><li class="lvl-2"><p>自旋锁 &amp; 自适应自旋（Spin Lock）</p></li><li class="lvl-2"><p>偏向锁（Biased Locking）</p></li><li class="lvl-2"><p>轻量级锁（Lightweight Locking）</p></li><li class="lvl-2"><p>重量级锁（Heavyweight Locking）→ 即“锁膨胀”</p></li></ul></blockquote><h3 id="锁消除">锁消除</h3><p>JVM 在 JIT 编译时，通过<strong>逃逸分析（Escape Analysis）</strong> 发现某个锁对象<strong>不会被多个线程访问</strong>（即“未逃逸”），则直接<strong>移除不必要的加锁操作</strong>。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>对象是局部变量，且不会被其他线程访问。</p></li><li class="lvl-2"><p>字符串拼接中 <code>StringBuffer</code> 的 <code>append()</code> 方法（内部有 <code>synchronized</code>，但局部使用时可消除）。</p></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// append() 是同步方法，但因为 sb 是局部变量，不会被其他线程访问，JVM 会消除锁，等价于用 StringBuilder。 </span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">concat</span><span class="params">(String s1, String s2)</span> &#123;</span><br><span class="line">    <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(); <span class="comment">// 局部变量，不逃逸</span></span><br><span class="line">    sb.append(s1);</span><br><span class="line">    sb.append(s2);</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认开启（JDK 1.6+），可通过参数控制：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-XX:+DoEscapeAnalysis      # 开启逃逸分析（默认开启）</span><br><span class="line">-XX:+EliminateLocks        # 开启锁消除（默认开启）</span><br></pre></td></tr></table></figure><h3 id="锁粗化">锁粗化</h3><p>如果一段代码中<strong>对同一个对象反复加锁、解锁</strong>（如循环内），JVM 会将多个加锁操作<strong>合并成一个范围更大的锁</strong>，减少加解锁次数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 源代码</span></span><br><span class="line"><span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">    doSomething1();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">    doSomething2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">    doSomething3();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JVM 优化为：</span></span><br><span class="line"><span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">    doSomething1();</span><br><span class="line">    doSomething2();</span><br><span class="line">    doSomething3();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实际代码</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (String.class)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// JIT优化后</span></span><br><span class="line"><span class="keyword">synchronized</span> (String.class) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="锁升级（锁膨胀）">锁升级（锁膨胀）</h3><p>指锁从<strong>轻量级 → 重量级</strong>的升级过程。这是 <code>synchronized</code> 实现的核心机制之一。</p><p>Java 对象头中有一个 <strong>Mark Word</strong>，用于存储锁状态。锁有四种状态（按竞争强度升级）</p><blockquote><p>在Java中，锁共有4种状态，级别从低到高依次为：无状态锁，偏向锁，轻量级锁和重量级锁状态，这几个状态会随着竞争情况逐渐升级。锁可以升级但不能降级。</p><p>锁的四种状态由低到高依次为：<strong>无锁    -&gt;    偏向锁    -&gt;    轻量级锁    -&gt;    重量级锁</strong></p></blockquote><img src="/imgs/20210205103013432.png" alt="img" style="zoom: 67%;" /><p>并且四种状态会随着竞争的情况逐渐升级，而且是<strong>不可逆</strong>的过程</p><img src="/imgs/20200603161323889.png" alt="img" style="zoom: 80%;" /><table><thead><tr><th>锁</th><th>优点</th><th>缺点</th><th>适用场景</th></tr></thead><tbody><tr><td>偏向锁</td><td>加锁和解锁不需要额外的消耗，和执行非同步方法相比仅存在纳秒级的差距</td><td>如果线程间存在锁竞争，会带来额外的锁撤销的消耗</td><td>适用于只有一个线程访问同步块场景</td></tr><tr><td>轻量级锁</td><td>竞争的线程不会阻塞，提高了程序的响应速度</td><td>如果始终得不到索竞争的线程，使用自旋会消耗CPU</td><td>追求响应速度，同步块执行速度非常快</td></tr><tr><td>重量级锁</td><td>线程竞争不使用自旋，不会消耗CPU</td><td>线程阻塞，响应时间缓慢</td><td>追求吞吐量，同步块执行速度较慢</td></tr></tbody></table><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>无锁</strong>：指<strong>没有对资源进行锁定</strong>，所有的线程都能访问并修改同一个资源，但同时只有一个线程能修改成功。果有多个线程修改同一个值，必定会有一个线程能修改成功，而其他修改失败的线程会不断重试直到修改成功。</p></li><li class="lvl-2"><p><strong>偏向锁</strong>：指当<strong>一段同步代码一直被同一个线程所访问</strong>时，即不存在多个线程的竞争时，那么该线程在后续访问时便会自动获得锁，从而降低获取锁带来的消耗，即提高性能。</p><ul class="lvl-3"><li class="lvl-4">初次执行到synchronized代码块的时候，锁对象变成偏向锁（通过CAS修改对象头里的锁标志位。执行完同步代码块后，线程并不会主动释放偏向锁，当第二次到达同步代码块时，线程会判断此时持有锁的线程是否就是自己，如果是则正常往下执行。由于之前没有释放锁，也就没有额外开销。偏向锁只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁，线程是不会主动释放偏向锁的。</li><li class="lvl-4">关于偏向锁的撤销，需要等待全局安全点，即在某个时间点上没有字节码正在执行时，它会先暂停拥有偏向锁的线程，然后判断锁对象是否处于被锁定状态。如果线程不处于活动状态，则将对象头设置成无锁状态，并撤销偏向锁，恢复到无锁（标志位为01）或轻量级锁（标志位为00）的状态。</li></ul></li><li class="lvl-2"><p><strong>轻量级锁</strong>：指当锁是偏向锁的时候，却<strong>被另外的线程所访问。存在少量锁竞争</strong>，此时偏向锁就会升级为轻量级锁，其他线程会通过自旋的形式尝试获取锁，线程不会阻塞，从而提高性能（JVM默认自旋次数为 -XX:PreBlockSpin=10）。</p><ul class="lvl-3"><li class="lvl-4">轻量级锁的获取主要由两种情况：<br>① 当关闭偏向锁功能时；<br>② 由于多个线程竞争偏向锁导致偏向锁升级为轻量级锁。</li></ul></li><li class="lvl-2"><p><strong>重量级锁</strong>：是指当有一个线程获取锁之后，其余<strong>所有等待获取该锁的线程都会处于阻塞状态</strong>（用户态 - 内核态）。由操作系统来负责线程间的调度和线程的状态变更。而这样会出现频繁地对线程运行状态的切换，线程的挂起和唤醒，从而消耗大量的系统资计数器记录自旋次数，达到最大自旋次数的线程，会将轻量级锁升级为重量级锁，当后续线程尝试获取锁时，发现被占用的锁是重量级锁，则直接将自己挂起（而不是忙等），等待将来被唤醒。</p></li></ul></blockquote><img src="/imgs/20200606123648335.png" alt="img" style="zoom:80%;" /><p><strong>锁升级过程详解</strong>：</p><p>① <strong>无锁 → 偏向锁</strong></p><ul class="lvl-0"><li class="lvl-2"><p>第一个线程访问同步块时，JVM 会将对象 Mark Word 设置为偏向该线程 ID。</p></li><li class="lvl-2"><p>后续该线程再进入，无需任何同步操作（零成本）。</p></li><li class="lvl-2"><p>若有其他线程竞争 → 撤销偏向锁 → 升级为轻量级锁。</p></li></ul><blockquote><p><strong>注意：JDK 15 开始默认禁用偏向锁，JDK 17+ 已移除。</strong></p></blockquote><p>② <strong>轻量级锁</strong></p><ul class="lvl-0"><li class="lvl-2"><p>通过 <strong>CAS（Compare And Swap）</strong> 尝试将对象头指向当前线程栈中的 Lock Record。</p></li><li class="lvl-2"><p>成功 → 获取锁。</p></li><li class="lvl-2"><p>失败 → 自旋重试（自适应自旋）。</p></li><li class="lvl-2"><p>自旋多次失败 → 升级为重量级锁。</p></li></ul><p>③ <strong>重量级锁</strong></p><ul class="lvl-0"><li class="lvl-2"><p>调用操作系统 Mutex，线程挂起进入阻塞队列。</p></li><li class="lvl-2"><p>由 OS 调度唤醒，开销最大。</p></li><li class="lvl-2"><p>但适合长时间持有锁或高竞争场景。</p></li></ul><h2 id="Java-提供的锁">Java 提供的锁</h2><p>造成线程安全问题的主要诱因：一是存在共享数据(也称临界资源)，二是存在多条线程共同操作共享数据</p><h3 id="Synchronized">Synchronized</h3><p>又称 <strong>对象监视器（Object Monitor）</strong>。</p><p>当一个线程正在访问一个对象的 synchronized 实例方法，那么其他线程不能访问该对象的其他 synchronized 方法（一个对象只有一把锁），同一线程内是可重入的，如果两个实例对象获取同一把锁，则会出现锁失效：</p><p>Synchronized关键字会让没有得到锁资源的线程进入<strong>BLOCKED</strong>状态，而后在争夺到锁资源后恢复为<strong>RUNNABLE</strong>状态，这个过程中涉及到操作系统<strong>用户模式</strong>和<strong>内核模式</strong>的转换，代价比较高（优化：增加了从<strong>偏向锁</strong>到<strong>轻量级锁</strong>再到<strong>重量级锁</strong>的过度）</p><h4 id="锁定范围">锁定范围</h4><p>Synchronized 的使用不同，加锁范围会有所不同：</p><blockquote><ol><li class="lvl-3"><p>修饰一个代码块，被修饰的代码块称为同步语句块，其作用的范围是大括号{}括起来的代码，作用的对象是<strong>调用这个代码块的对象（一个线程访问一个对象中的synchronized(this)同步代码块时，其他试图访问该对象的线程将被阻塞），如果为参数对象（synchronized (dto.getLock())）,则只会锁定阻塞同一对象</strong>；</p></li><li class="lvl-3"><p>修饰一个方法，被修饰的方法称为同步方法，其作用的范围是整个方法，作用的对象是<strong>调用这个方法的对象（两个对象间不会锁）</strong>；</p></li><li class="lvl-3"><p>修饰一个静态的方法，其作用的范围是整个静态方法，作用的对象是这个<strong>类对象</strong>；</p></li><li class="lvl-3"><p>修饰一个类，其作用的范围是synchronized后面括号括起来的部分，作用主的对象是这个类的所有对象。</p></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同步线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SyncThread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThreadDto</span> <span class="variable">lock1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThreadDto</span>();</span><br><span class="line">        <span class="type">MyThreadDto</span> <span class="variable">lock2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThreadDto</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">MySyncThread</span> <span class="variable">syncThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MySyncThread</span>(lock1);</span><br><span class="line">        <span class="type">MySyncThread</span> <span class="variable">syncThread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MySyncThread</span>(lock2);</span><br><span class="line"></span><br><span class="line">            <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(syncThread, <span class="string">&quot;SyncThread-1=&quot;</span> + i);</span><br><span class="line">            thread1.start();</span><br><span class="line"></span><br><span class="line">            <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(syncThread2, <span class="string">&quot;SyncThread-2=&quot;</span> + i);</span><br><span class="line">            thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySyncThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> count;</span><br><span class="line">    <span class="keyword">private</span> MyThreadDto packageAccessLock;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MySyncThread</span><span class="params">(MyThreadDto accessLock)</span> &#123;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        packageAccessLock = accessLock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 此处获得的是参数中的锁，只有同一对象的该参数才会阻塞</span></span><br><span class="line">        <span class="keyword">synchronized</span> (packageAccessLock.getLock()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + (count++));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThreadDto</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如下：出现结果为小于2000000，获得两个不同实例对象的锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountingSyncBad</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">increase</span><span class="params">()</span>&#123;    <span class="comment">// static 修饰，锁为当前类对象</span></span><br><span class="line">        i++;</span><br><span class="line">    &#125; <span class="comment">// 修饰实例方法，此时的锁对象为实例对象（如new AccountingSyncBad()）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000000</span>;j++)&#123;</span><br><span class="line">            increase();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;        <span class="comment">//new新实例</span></span><br><span class="line">        <span class="comment">// 获得两个不同对象的锁</span></span><br><span class="line">        Thread t1=<span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">AccountingSyncBad</span>());                <span class="comment">//new新实例</span></span><br><span class="line">        Thread t2=<span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">AccountingSyncBad</span>());</span><br><span class="line">        <span class="comment">// 获得同一把锁</span></span><br><span class="line">   <span class="comment">//     AccountingSyncBad instance = new AccountingSyncBad();</span></span><br><span class="line">   <span class="comment">//     Thread t1 = new Thread(instance);</span></span><br><span class="line">    <span class="comment">//    Thread t2 = new Thread(instance);</span></span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();                <span class="comment">//join含义:当前线程A等待thread线程终止之后才能从thread.join()返回</span></span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同步线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SyncThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SyncThread</span><span class="params">()</span> &#123;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + (count++));</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SyncThread</span> <span class="variable">syncThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SyncThread</span>(); <span class="comment">// 同一个对象阻塞</span></span><br><span class="line">        <span class="comment">// SyncThread syncThread2 = new SyncThread(); // 不同对象不阻塞</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(syncThread, <span class="string">&quot;SyncThread-1&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(syncThread, <span class="string">&quot;SyncThread-2&quot;</span>);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>synchronized可保证一个线程的变化(主要是共享数据的变化)被其他线程所看到（保证可见性，完全可以替代Volatile功能）</p><p><strong>应用方式：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>修饰实例方法，作用于当前实例加锁，进入同步代码前要获得当前实例的锁</p></li><li class="lvl-2"><p>修饰静态方法，作用于当前类对象加锁，进入同步代码前要获得当前类对象的锁</p></li><li class="lvl-2"><p>修饰代码块，指定加锁对象，对给定对象加锁，进入同步代码库前要获得给定对象的锁。</p></li></ul><p><strong>作用：</strong></p><blockquote><ol><li class="lvl-3"><p>原子性：确保线程互斥的访问同步代码；</p></li><li class="lvl-3"><p>可见性：保证共享变量的修改能够及时可见，其实是通过Java内存模型中的 “<strong>对一个变量unlock操作之前，必须要同步到主内存中；如果对一个变量进行lock操作，则将会清空工作内存中此变量的值，在执行引擎使用此变量前，需要重新从主内存中load操作或assign操作初始化变量值</strong>” 来保证的；</p></li><li class="lvl-3"><p>有序性：有效解决重排序问题，即 “一个unlock操作先行发生(happen-before)于后面对同一个锁的lock操作”；</p></li></ol></blockquote><h4 id="原理实现">原理实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javap -v -p XXX.class    # 执行编译，查看字节码</span><br></pre></td></tr></table></figure><p>如果synchronized修饰的是方法，会生成一个  <mark>ACC_SYNCHRONIZED</mark>  指令，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    s++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/imgs/image-20210621192740860.png" alt="image-20210621192740860" style="zoom: 50%;" /><p>如果synchronized修饰的是代码块，会生成一个  <mark>monitorenter</mark>  和  <mark>monitorexit</mark> 指令，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">        s++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码正常结束或抛出异常都会执行  monitorexit  退出监控锁。</p><img src="/imgs/image-20210621192947651.png" alt="image-20210621192947651" style="zoom: 67%;" /><p>monitor对象主要由以下几个字段来组成。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>count</strong>  记录个数</p></li><li class="lvl-2"><p><strong>wanitset</strong>   处于wait状态，会被加入到 waitset</p></li><li class="lvl-2"><p><strong>entryList</strong>    处于等待锁状态的线程，会被加入到entryList中。</p></li></ul><p>当monitor对象被线程持有时，count会加1，当线程释放monitor对象时，count会减1，用count表示monitor对象是否被持有。</p><p>而且synchronized有可重入性，当一个线程重复持有锁时，count会一直加，释放时候，会一直减，直到为0时，才算这块执行完。</p></blockquote><h4 id="重量级优化">重量级优化</h4><p>通常我们称Sychronized锁是一种重量级锁，是因为在互斥状态下，没有得到锁的线程会被挂起阻塞，而挂起线程和恢复线程的操作都需要在<strong>用户态</strong>和 <strong>内核态</strong>之间相互转换，而状态转换很耗费处理器时间，故称为重量级。</p><p>为了消除<strong>用户态</strong>和 <strong>内核态</strong>的开销转换，引入自旋，所谓的自旋，就是让没有获得锁的线程自己运行一段时间的自循环，这就是自旋锁。</p><blockquote><p>自旋锁在JDK6以后已经默认开启，可以通过-XX:+UseSpinning参数来开启。不挂起线程的代价就是该线程会一直占用处理器。如果锁被占用的时间很短，自旋等待的效果就会很好，反之，自旋会消耗大量处理器资源。因此，自旋的等待时间必须有一定的限度，如果超过限度还没有获得锁，就要挂起线程，这个限度默认是10次，可以使用-XX：PreBlockSpin改变。</p><p>在JDK6以后又引入了自适应自旋锁，也就说自旋的时间限度不是一个固定值了，而是由上一次同一个锁的自旋时间及锁的拥有者状态来决定。虚拟机认为，如果同一个锁对象自旋刚刚成功获得锁，那么下一次很可能获得锁，所以允许这次自旋锁自旋很长时间、而如果某个锁很少获得锁，那么以后在获取锁的过程中可能忽略到自旋过程。</p></blockquote><h3 id="Volatile">Volatile</h3><p>Java虚拟机提供的轻量级的同步机制，被volatile修饰的共享变量，就具有了以下两点特性：</p><blockquote><p><strong>1 . 保证了不同线程对该变量操作的内存可见性</strong>（当一个线程修改了被volatile修饰的值，新值总数可以被其他线程立即得知。）;</p><p><strong>2 . 禁止指令重排序</strong>（避免多线程环境下程序出现乱序执行的现象）。</p></blockquote><p><strong>并不保证安全性，不具有原子性</strong>（如果第二个线程在第一个线程读取旧值和写回新值期间读取i的域值）</p><blockquote><p>在线程执行时，首先会从主存中read变量值，再load到工作内存中的副本中，然后再传给处理器执行，执行完毕后再给工作内存中的副本赋值，随后工作内存再把值传回给主存，主存中的值才更新。</p><p>两个线程操作（修改），可能出现缓存不一致的问题。（只有一个线程修改操作，其他线程只读取，不存在原子性问题，但是i++操作就不行了）</p></blockquote><h4 id="使用场景">使用场景</h4><blockquote><p>只能在有限的情形下使用 volatile 变量替代锁。要使 volatile 变量提供理想的线程安全，必须同时满足下面两个条件：</p><ul class="lvl-1"><li class="lvl-2">对变量的写操作不依赖于当前值。</li><li class="lvl-2">该变量没有包含在具有其他变量的不变式中。</li></ul></blockquote><h4 id="指令重排">指令重排</h4><p><strong>什么是指令重排序？</strong><br><strong>在虚拟机层面</strong></p><blockquote><p>为了尽可能减少*<u>内存操作速度远慢于CPU运行速度</u>*所带来的CPU空置的影响，虚拟机会按照自己的一些规则，将程序编写顺序打乱——即写在后面的代码在时间顺序上可能会先执行，而写在前面的代码会后执行——以尽可能充分地利用CPU。</p><p>拿上面的例子来说：假如不是a=1的操作，而是<code>a=new byte[1024*1024]</code>(分配1M空间)`，那么它会运行地很慢，此时CPU是等待其执行结束呢，还是先执行下面那句flag=true呢？显然，先执行flag=true可以提前使用CPU，加快整体效率，当然这样的前提是不会产生错误。</p><p>虽然这里有两种情况：后面的代码先于前面的代码开始执行；前面的代码先开始执行，但当效率较慢的时候，后面的代码开始执行并先于前面的代码执行结束。不管谁先开始，总之后面的代码在一些情况下存在先结束的可能。</p></blockquote><p><strong>在硬件层面</strong></p><blockquote><p>CPU会将接收到的一批指令按照其规则重排序，同样是基于CPU速度比缓存速度快的原因，和上一点的目的类似，只是硬件处理的话，每次只能在接收到的有限指令范围内重排序，而虚拟机可以在更大层面、更多指令范围内重排序。硬件的重排序机制参见《从JVM并发看CPU内存指令重排序(Memory Reordering)》</p></blockquote><h4 id="原理实现-2">原理实现</h4><p><strong>volatile如何让变量立即可见</strong></p><blockquote><p>当写一个volatile变量时，JMM会把该线程对应的工作内存中的共享变量值刷新到主内存中，当读取一个volatile变量时，JMM会把该线程对应的工作内存置为无效，那么该线程将只能从主内存中重新读取共享变量。volatile变量正是通过这种写-读方式实现对其他线程可见（但其内存语义实现则是通过内存屏障）</p></blockquote><p><strong>volatile禁止指令重排优化</strong></p><p><mark>内存屏障</mark>，又称内存栅栏，是一个CPU指令，它的作用有两个，一是保证特定操作的执行顺序，二是保证某些变量的内存可见性。</p><blockquote><p>由于编译器和处理器都能执行指令重排优化</p><p>如果在指令间插入一条Memory Barrier则会告诉编译器和CPU，不管什么指令都不能和这条Memory Barrier指令重排序，也就是说通过插入内存屏障禁止在内存屏障前后的指令执行重排序优化。</p><p>Memory Barrier的另外一个作用是强制刷出各种CPU的缓存数据，因此任何CPU上的线程都能读取到这些数据的最新版本</p></blockquote><p>典型的禁止重排优化的例子DCL</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoubleCheckLock</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DoubleCheckLock instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DoubleCheckLock <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (instance==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (DoubleCheckLock.class)&#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="comment">//多线程环境下可能会出现问题的地方</span></span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">DoubleCheckLock</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字节码会生成一个 <mark>ACC_VOLATILE</mark></p><img src="/imgs/image-20210622094704147.png" alt="image-20210622094704147" style="zoom:67%;" /><h3 id="Lock">Lock</h3><p>API层面的可重入锁，包含<strong>ReentrantLock、ReadLock、ReadLockView、WriteLock、WriteLockView</strong></p><img src="/imgs/aHR0cDo2ZtdD1qcGVn" alt="img" style="zoom: 80%;" /><p>如果n个线程持有的为同一把锁，则需要竞争且阻塞，否则有各自的锁时，不会阻塞。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同步线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SyncThread</span> &#123;</span><br><span class="line">    <span class="comment">// 所有对象在同一SyncThread对象中将持有该同一把锁，发生阻塞</span></span><br><span class="line">   <span class="comment">// private final Lock lock = new ReentrantLock();</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 以下实例化两个对象，两个对象的两把锁。互不影响</span></span><br><span class="line">        <span class="type">MyThreadDto</span> <span class="variable">lock1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThreadDto</span>();</span><br><span class="line">        <span class="type">MyThreadDto</span> <span class="variable">lock2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThreadDto</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">MySyncThread</span> <span class="variable">syncThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MySyncThread</span>(lock1);</span><br><span class="line">        <span class="type">MySyncThread</span> <span class="variable">syncThread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MySyncThread</span>(lock2);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(syncThread, <span class="string">&quot;SyncThread-1&quot;</span>);</span><br><span class="line">        thread1.start();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(syncThread2, <span class="string">&quot;SyncThread-2&quot;</span>);</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySyncThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> count;</span><br><span class="line">    <span class="keyword">private</span> MyThreadDto packageAccessLock;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MySyncThread</span><span class="params">(MyThreadDto accessLock)</span> &#123;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        packageAccessLock = accessLock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                packageAccessLock.getReentrantLock().lockInterruptibly();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + (count++));</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                  packageAccessLock.getReentrantLock().unlock();</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThreadDto</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">// 每个MyThreadDto对象都有各自的一把锁，当为同一个MyThreadDto对象时，将会被阻塞。不同对象不会竞争</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Lock</span> <span class="variable">reentrantLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现原理（AQS）">实现原理（<a href="https://www.cnblogs.com/weiqihome/p/9665718.html">AQS</a>）</h4><p>用一个CAS操作，判断state是否是0（表示当前锁未被占用），如果是0则把它+1，并且设置当前线程为该锁的独占线程，表示获取锁成功。当多个线程同时尝试占用同一个锁时，CAS操作只能保证一个线程操作成功，剩下的只能乖乖的去排队 。</p><p>“非公平”即体现在这里，如果占用锁的线程刚释放锁，state置为0，而排队等待锁的线程还未唤醒时，新来的线程就直接抢占了该锁，那么就“插队”了。</p><p><strong>源码分析</strong></p><p>公平锁：若等待队列非空，则直接入队；否则尝试获取锁</p><p>非公平锁：先尝试获取锁，获取失败后，放入队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置 volatile int state = 1 成功表示加锁，0时释放锁，大于1表示重复加锁</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))    <span class="comment">// 通过CAS尝试变量从0设置为1</span></span><br><span class="line">setExclusiveOwnerThread(Thread.currentThread());    <span class="comment">// 设置变量为当前线程</span></span><br><span class="line"><span class="keyword">else</span> <span class="comment">// 加锁失败，放入等待队列（列表尾部）</span></span><br><span class="line">acquire(<span class="number">1</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以独占模式获取，忽略中断。 通过至少调用一次tryAcquire ，成功返回。 否则线程会排队，可能会反复阻塞和解除阻塞，调用tryAcquire直到成功。 此方法可用于实现方法Lock.lock 。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">acquire</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp; <span class="comment">// 先尝试加锁</span></span><br><span class="line"><span class="comment">// 以独占不间断模式获取已在队列中的线程。 由条件等待方法以及获取使用。</span></span><br><span class="line">acquireQueued(addWaiter(Node.EXCLUSIVE), arg))    </span><br><span class="line">selfInterrupt(); <span class="comment">// 中断当前线程</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加锁失败后放入排队队列，至尾部，并中断当前加锁线程</span></span><br><span class="line"><span class="keyword">private</span> Node <span class="title function_">addWaiter</span><span class="params">(Node mode)</span> &#123;</span><br><span class="line"><span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(Thread.currentThread(), mode);</span><br><span class="line"><span class="type">Node</span> <span class="variable">pred</span> <span class="operator">=</span> tail;</span><br><span class="line"><span class="keyword">if</span> (pred != <span class="literal">null</span>) &#123;</span><br><span class="line">node.prev = pred;</span><br><span class="line"><span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class="line">   pred.next = node;</span><br><span class="line">   <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">enq(node); <span class="comment">// 加入队尾</span></span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>加锁</strong></p><blockquote><p>第一步。尝试去获取锁。如果尝试获取锁成功，方法直接返回。非公平锁tryAcquire的流程是：检查state字段，若为0，表示锁未被占用，那么尝试占用，若不为0，检查当前锁是否被自己占用，若被自己占用，则更新state字段，表示重入锁的次数。如果以上两点都没有成功，则获取锁失败，返回false。</p><p>第二步，入队。其他线程占用锁，执行tryAcquire失败，并且入等待队列线程先入等待队列，然后开始自旋，尝试获取锁，获取成功就返回，失败则在队列里找一个安全点把自己挂起直到超时时间过期。这里为什么还需要循环呢？因为当前线程节点的前驱状态可能不是SIGNAL，那么在当前这一轮循环中线程不会被挂起，然后更新超时时间，开始新一轮的尝试。</p><p>第三步，挂起。已经入队的线程尝试获取锁，若失败则会被挂起。线程入队后能够挂起的前提是，它的前驱节点的状态为SIGNAL。若符合则返回true，将自己挂起。如果不符合，再看前驱节点是否&gt;0(CANCELLED)，若是向前遍历直到找到第一个符合要求的前驱，若不是则将前驱节点的状态设置为SIGNAL。</p></blockquote><p><strong>解锁</strong></p><blockquote><p>先尝试释放锁，若释放成功，那么查看头结点的状态是否为SIGNAL，如果是则唤醒头结点的下个节点关联的线程，如果释放失败那么返回false表示解锁失败</p><p>当前释放锁的线程若不持有锁，则抛出异常。若持有锁，计算释放后的state值是否为0，若为0表示锁已经被成功释放，并且则清空独占线程，最后更新state值，返回free。</p></blockquote><p>ReentrantLock#lock的原理流程图大致如下</p><p><img src="/imgs/aHR0cDovL21tYmd3hfZm10PWpwZWc" alt="img"></p><h3 id="Atomic（CAS）">Atomic（CAS）</h3><p>属于乐观锁，自旋等待直到成功，可设置自旋次数。</p><p>并发越高，失败的次数会越多，CAS如果长时间不成功，会极大的增加CPU的开销。因此CAS不适合竞争十分频繁的场景。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自旋</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndAddInt</span><span class="params">(Object var1, <span class="type">long</span> var2, <span class="type">int</span> var4)</span> &#123;</span><br><span class="line">    <span class="type">int</span> var5;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        var5 = <span class="built_in">this</span>.getIntVolatile(var1, var2);</span><br><span class="line">    &#125; <span class="keyword">while</span>(!<span class="built_in">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> var5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CAS由于是在硬件层面保证的原子性，不会锁住当前线程，它的效率是很高的。</p><h4 id="ABA-问题">ABA 问题</h4><p>避免ABA问题的版本号机制，如AtomicStampedReference。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">overTimeWaitMin</span><span class="params">(AbstractBaseGssp baseGssp, BaseDictDto dto, Map&lt;String, AtomicStampedReference&lt;AbstractBaseGssp&gt;&gt; mapReference)</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">    <span class="keyword">if</span> (dto == <span class="literal">null</span> || baseGssp == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> dto.getCode() + BaseConstants.SEPARATOR_06 + baseGssp.getGpsSn();</span><br><span class="line">    <span class="type">int</span> <span class="variable">stayMin</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mapReference.containsKey(key)) &#123;</span><br><span class="line">        <span class="comment">// 获得旧对象</span></span><br><span class="line">        AtomicStampedReference&lt;AbstractBaseGssp&gt; gsspReference = mapReference.get(key);</span><br><span class="line">        <span class="type">AbstractBaseGssp</span> <span class="variable">lastGssp</span> <span class="operator">=</span> gsspReference.getReference();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 有移动</span></span><br><span class="line">        <span class="keyword">if</span> (GsspUtil.hasMoved(lastGssp.getLongitude(), lastGssp.getLatitude(), baseGssp.getLongitude(), baseGssp.getLatitude())) &#123;</span><br><span class="line">            <span class="comment">// 比较stamp版本 并重新设值</span></span><br><span class="line">            gsspReference.compareAndSet(lastGssp, baseGssp, gsspReference.getStamp(), gsspReference.getStamp() + <span class="number">1</span>);</span><br><span class="line">            mapReference.put(key, gsspReference);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            stayMin = GsspUtil.timeIntervalMin(lastGssp.getGpsTime(), baseGssp.getGpsTime());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">        mapReference.put(key, <span class="keyword">new</span> <span class="title class_">AtomicStampedReference</span>&lt;&gt;(baseGssp, <span class="number">0</span>)); <span class="comment">// 初始值及版本</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> stayMin;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 高并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java 锁 </tag>
            
            <tag> 锁升级 </tag>
            
            <tag> 锁消除 </tag>
            
            <tag> Synchronized </tag>
            
            <tag> Atomic </tag>
            
            <tag> Lock </tag>
            
            <tag> 死锁检查 </tag>
            
            <tag> 偏向锁 </tag>
            
            <tag> 轻量级锁 </tag>
            
            <tag> 乐观锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>表达式的概念和求值实现</title>
      <link href="/2025/09/ba484d8d518d4691bc0c1737da33d517/"/>
      <url>/2025/09/ba484d8d518d4691bc0c1737da33d517/</url>
      
        <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>中缀表达式是人熟悉的表达式。例如 <code>3 + 5 * 6</code></p></li><li class="lvl-2"><p>前缀表达式，也称波兰表达式，运算符写在操作数前面。例如 <code>(3 + 4) * 5 - 6</code> 对应的前缀表达式为：<code>- * + 3 4 5 6</code></p></li><li class="lvl-2"><p>后缀表达式，也称逆波兰表达式，运算符写在操作数后面。例如 <code>(3 + 4) * 5 - 6</code> 对应的后缀表达式为：<code>3 4 + 5 * 6 -</code></p></li></ul><h2 id="前缀表达式">前缀表达式</h2><p>求值规则：<strong>自右向左</strong> 扫描表达式，遇到数字时压栈，遇到运算符则弹出栈顶两个数做对应运算，并将结果压入栈中。</p><ul class="lvl-0"><li class="lvl-2"><p>中缀表达式：<code>( 3 + 4 ) * 5 - 6</code></p></li><li class="lvl-2"><p>前缀表达式：<code>- * + 3 4 5 6</code></p></li></ul><p>执行计算过程：</p><blockquote><p>1. 将表达式 <code>自右向左</code> 扫描，将 <code>6 5 4 3</code> 依次压入栈中<br>  2. 遇到 <code>+</code> 时，将 <code>3 、4</code> 弹出，计算 <code>3 + 4</code>，然后将结果 <code>7</code> 压入栈中<br>  3. 遇到 <code>*</code> 时，将 <code>7、5</code> 弹出，计算 <code>7 * 5</code>，然后将结果 <code>35</code> 压入栈中<br>  4. 遇到 <code>-</code> 时，将 <code>35、6</code> 弹出，计算 <code>35 - 6</code>，然后将结果 <code>29</code> 压入栈中</p></blockquote><h2 id="后缀表达式">后缀表达式</h2><p>求值规则：<strong>从左至右</strong> 依次扫描表达式，遇到数字压入栈中，遇到运算符则弹出栈顶两个数做对应运算，并将结果压入栈中。</p><ul class="lvl-0"><li class="lvl-2"><p>中缀表达式：<code>( 3 + 4 ) * 5 - 6</code></p></li><li class="lvl-2"><p>后缀表达式：<code>3 4 + 5 * 6 -</code></p></li></ul><p>执行计算过程：</p><blockquote><p>1. 将表达式 <code>从左至右</code> 扫描，遇到括号，优先级最大，将<code>3 4</code>压入栈中<br>  2. 再括号收尾后，遇到 <code>+</code> 时，将 <code>4、3</code> 弹出，计算 <code>3 + 4</code>，然后将结果 <code>7</code> 压入栈中<br>  3. 将 <code>5</code> 压入栈中，左边为栈<br>  4. 遇到 <code>*</code> 时，将 <code>5、7</code> 弹出，计算 <code>7 * 5</code>，然后将结果 <code>35</code> 压入栈中<br>  5. 将 <code>6</code> 压入栈中<br>  6. 遇到 <code>-</code> 时，将 <code>35、6</code> 弹出，计算 <code>35 - 6</code>，然后将结果 <code>29</code> 压入栈中</p></blockquote><h2 id="中缀表达式">中缀表达式</h2><p>需要把 <strong>中缀表达式转后缀表达式</strong>，再做计算</p><p><strong>转化规则</strong>：把每个运算符都移到它的两个操作数的后面，然后删除括号即可。</p><blockquote><p>下面表以 <code>2 * ( ( 5 - 3 ) * 4 ) - 16 / 2</code> 作为样例演示转换的步骤。</p><p>创建两个栈 a 和 b，a 用于存储转换过程，b 用于临时存储操作符与小括号。</p></blockquote><table><thead><tr><th>运算步骤</th><th>扫描到字符</th><th>a 栈（栈低 -&gt; 栈顶）</th><th>b 栈（栈底 -&gt; 栈顶）</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>2</td><td>^</td><td>数字直接压入 a</td></tr><tr><td>2</td><td>*</td><td>2</td><td>*</td><td>b 中无符号，直接将 <code>*</code> 压入 b</td></tr><tr><td>3</td><td>(</td><td>2</td><td>*、(</td><td>括号优先级最高，左括号直接压入 b</td></tr><tr><td>4</td><td>(</td><td>2</td><td>*、( 、(</td><td>括号优先级最高，左括号直接压入 b</td></tr><tr><td>5</td><td>5</td><td>2、5</td><td>*、( 、(</td><td>数字直接压入 a</td></tr><tr><td>6</td><td>-</td><td>2、5</td><td>*、( 、( 、-</td><td><code>-</code> 优先级低于 <code>(</code>，由于 <code>(</code> 不是运算符，<code>-</code> 压入 b</td></tr><tr><td>7</td><td>3</td><td>2、5、3</td><td>*、( 、( 、-</td><td>数字直接压入 a</td></tr><tr><td>8</td><td>)</td><td>2、5、3、-</td><td>*、(</td><td>遇到右括号，符号依次弹出 b，并依次压入 a，直至遇到左括号，且删除左括号</td></tr><tr><td>9</td><td>*</td><td>2、5、3、-</td><td><em>、( 、</em></td><td><code>*</code> 比左括号优先级低，由于 <code>(</code> 不是运算符，<code>*</code> 压入 b</td></tr><tr><td>10</td><td>4</td><td>2、5、3、-、4</td><td><em>、( 、</em></td><td>数字直接压入 a</td></tr><tr><td>11</td><td>)</td><td>2、5、3、-、4、*</td><td>*</td><td>遇到右括号<code>)</code>，符号依次弹出 b，并依次压入 a，直至遇到左括号 <code>(</code>，且删除左括号 <code>(</code></td></tr><tr><td>12</td><td>-</td><td>2、5、3、-、4、<em>、</em></td><td>-</td><td><code>-</code> 优先级低于 <code>*</code>，<code>*</code> 出栈并压入 a，此时 <code>(</code> 变为栈顶元素，<code>-</code> 优先级低于 <code>(</code>，将 <code>-</code> 压入 b，</td></tr><tr><td>13</td><td>16</td><td>2、5、3、-、4、<em>、</em>、16</td><td>-</td><td>数字直接压入 a</td></tr><tr><td>14</td><td>/</td><td>2、5、3、-、4、<em>、</em>、16</td><td>-、/</td><td><code>/</code> 优先级高于 <code>-</code>，<code>/</code> 压入 b</td></tr><tr><td>15</td><td>2</td><td>2、5、3、-、4、<em>、</em>、16、2</td><td>-、/</td><td>数字直接压入 a</td></tr><tr><td>16</td><td>^</td><td>2、5、3、-、4、<em>、</em>、16、2、/</td><td>-</td><td>遍历完成，将 b 中的元素依次压入 a</td></tr><tr><td>17</td><td>^</td><td>2、5、3、-、4、<em>、</em>、16、2、/、-</td><td>^</td><td>遍历完成，将 b 中的元素依次压入 a</td></tr></tbody></table><blockquote><ol><li class="lvl-3"><p>每次扫描到的 数字 直接压入 a 栈</p></li><li class="lvl-3"><p>每次扫描到的符号 x 需要与 b 栈顶部的符号 y 比较优先级，如果 x &gt; y，则 x 压入 b 栈，如果 x &lt;= y，将 b 栈顶元素弹出后压入 a，继续比较 x 与 下一个 y。</p></li><li class="lvl-3"><p>最终获取的表达式为：2 5 3 - 4 * * 16 2 / -，需要将 a 中的元素弹出后再逆序。</p></li></ol></blockquote><h2 id="中缀表达式求值（整数版）">中缀表达式求值（整数版）</h2><p>通过栈的特性，转换为后缀表达式后求值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;HJ54 表达式求值</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;  给定一个字符串描述的算术表达式，计算出结果值。如：400+5 * 2 / (12-7)</span></span><br><span class="line"><span class="comment"> *（不支持小数位计算）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> He.hp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> haeng2030@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2024/12/12 15:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExpressionEvaluation</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> List&lt;Character&gt; symbol = Arrays.asList(<span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;)&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; list = parse(<span class="string">&quot;400+5 * 4 / (12-7)&quot;</span>);</span><br><span class="line">        System.out.println(list.toString());<span class="comment">// [400, +, 5, *, 4, /, (, 12, -, 7, )]</span></span><br><span class="line">        List&lt;String&gt; list2 = infixConvertToPostfix(list);</span><br><span class="line">        System.out.println(list2.toString());<span class="comment">// [400, 5, 4, *, 12, 7, -, /, +]</span></span><br><span class="line">        System.out.println(compute(list2));<span class="comment">// 404</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将表达式截取转换为字符（中缀表达式字符顺序）：  400, +, 5, *, 2, /, (, 12, -, 5, )</span></span><br><span class="line"><span class="comment">     * 如果遍历到操作符号，如 + - * / ( ) 直接添加到 ls 中。</span></span><br><span class="line"><span class="comment">     * 如果遍历到数，需要判断是否为多位数。如果是单位数，直接添加到 list 中。如果是多位数，需要拼接这个多位数，然后再添加到 list 中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">parse</span><span class="params">(String expre)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">num</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">char</span> charVal;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; expre.length(); i++) &#123;</span><br><span class="line">            charVal = expre.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (isNumber(charVal)) &#123;</span><br><span class="line">                num.append(charVal);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (symbol.contains(charVal)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (num.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    list.add(num.toString());</span><br><span class="line">                &#125;</span><br><span class="line">                num = <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">                list.add(String.valueOf(charVal));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (num.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            list.add(num.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将中缀表达式转换为后缀表达式:</span></span><br><span class="line"><span class="comment">     * 1、创建两个栈 s1、s2，s1 存储临时字符，s2 存储转换过程</span></span><br><span class="line"><span class="comment">     * 2、遍历后缀表达式的 list</span></span><br><span class="line"><span class="comment">     * 遍历到数字，直接添加到 s2 中。</span></span><br><span class="line"><span class="comment">     * 遍历到符号 + - * / 时，需要与 s1 栈顶符号比较优先级。</span></span><br><span class="line"><span class="comment">     * 如果比 s1 栈顶符号优先级高，则直接压入 s1。</span></span><br><span class="line"><span class="comment">     * 反之，将 s1 栈顶元素弹出并添加到 s2 中，继续与 s1 的次顶元素比较，直至 s1 为空或ls中遍历到的元素优先级高于 s1 栈顶符号。</span></span><br><span class="line"><span class="comment">     * 遍历到 (，直接压入 s1 中。</span></span><br><span class="line"><span class="comment">     * 遍历到 )，弹出 s1 中的符号，直至遇到 (，最后将 ( 弹出，ls 继续向后遍历，这样就删除了一对括号。</span></span><br><span class="line"><span class="comment">     * 3、list 遍历完以后，将 s1 中剩余的符号依次弹出并添加到 s2 中。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">infixConvertToPostfix</span><span class="params">(List&lt;String&gt; list)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建两个栈，s1 用于存储临时符号</span></span><br><span class="line">        Stack&lt;String&gt; s1 = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// s2 由于没有 pop 操作，并且最终需要逆序输出，所以使用 ArrayList 代替之</span></span><br><span class="line">        List&lt;String&gt; s2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.matches(<span class="string">&quot;\\d+&quot;</span>)) &#123;  <span class="comment">// 正则匹配，匹配到数字，直接添加到 s2</span></span><br><span class="line">                s2.add(s);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;(&quot;</span>.equals(s)) &#123;  <span class="comment">// 遍历到 (，直接压入 s1</span></span><br><span class="line">                s1.push(s);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;)&quot;</span>.equals(s)) &#123;  <span class="comment">// 遍历到 ) ，弹出 s1 中的符号添加到 s2 中，直至遇到 (</span></span><br><span class="line">                <span class="keyword">while</span> (!<span class="string">&quot;(&quot;</span>.equals(s1.peek())) &#123;  <span class="comment">// peek() 查看栈顶元素</span></span><br><span class="line">                    s2.add(s1.pop());</span><br><span class="line">                &#125;</span><br><span class="line">                s1.pop();  <span class="comment">// 当 ( 弹出，消除小括号</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  <span class="comment">// 遍历到 + - * /</span></span><br><span class="line">                <span class="comment">// s1 不为空，且当遍历到的符号，小于等于栈顶符号优先级，需要弹栈操作</span></span><br><span class="line">                <span class="comment">// 直到当前符号优先级大于 s1 栈顶元素或 s1 弹空时，结束</span></span><br><span class="line">                <span class="keyword">while</span> (!s1.empty() &amp;&amp; (getPriority(s) &lt;= getPriority(s1.peek()))) &#123;</span><br><span class="line">                    s2.add(s1.pop());  <span class="comment">// 将 s1 栈顶符号弹出添加到 s2 中</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 比较结束后，将当前字符压入 s1 中</span></span><br><span class="line">                s1.push(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 将 s1 中剩余符号添加到 s2 中</span></span><br><span class="line">        <span class="keyword">while</span> (!s1.empty()) &#123;</span><br><span class="line">            s2.add(s1.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算后缀表达式的值:</span></span><br><span class="line"><span class="comment">     * 1、创建一个栈 num，用于存储结果。</span></span><br><span class="line"><span class="comment">     * 2、依次遍历 list 中的元素，对每次遍历到的元素做相应处理。</span></span><br><span class="line"><span class="comment">     *      遍历到数时，直接压入 num 中。</span></span><br><span class="line"><span class="comment">     *      遍历到运算符时，从 num 中弹出两个数，使用该运算符做运算，并将运算结果结果继续压入 num 中。</span></span><br><span class="line"><span class="comment">     * 3、最后 num 中只会剩下一个数，将这个数弹出返回即可。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">compute</span><span class="params">(List&lt;String&gt; list)</span> &#123;</span><br><span class="line">        Stack&lt;Integer&gt; num = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">// 接收栈顶数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">// 接收次顶数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">// 每次计算结果</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.matches(<span class="string">&quot;\\d+&quot;</span>)) &#123;    <span class="comment">// 如果是数，就压栈</span></span><br><span class="line">                num.push(Integer.parseInt(s));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                num1 = num.pop();</span><br><span class="line">                num2 = num.pop();</span><br><span class="line">                <span class="keyword">switch</span> (s) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">                        res = num2 + num1;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">                        res = num2 - num1;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">                        res = num2 * num1;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">                        res = num2 / num1;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;扫描到未知符号！&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                num.push(res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isNumber</span><span class="params">(<span class="type">char</span> c)</span> &#123;</span><br><span class="line">        <span class="comment">// ascll码中数字 0 ~ 9 对应 48 ~ 57</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">48</span> &lt;= c &amp;&amp; c &lt;= <span class="number">57</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">//    符号优先级</span></span><br><span class="line"><span class="comment">//    当前遍历到的符号是运算符(+ - * /)，且此时 s1 栈顶元素为 ( 时，应当将运算符入栈，而不是弹出 (，所以将 ( 的优先级设为最小</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getPriority</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;*&quot;</span>.equals(s) || <span class="string">&quot;/&quot;</span>.equals(s)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;+&quot;</span>.equals(s) || <span class="string">&quot;-&quot;</span>.equals(s)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;(&quot;</span>.equals(s)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;扫描到未知符号！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数学计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 表达式求值 </tag>
            
            <tag> HJ54 </tag>
            
            <tag> 中缀表达式 </tag>
            
            <tag> 前缀表达式 </tag>
            
            <tag> 后缀表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware 如何扩展 Centos7 的磁盘容量</title>
      <link href="/2025/09/35f4ef2aabae45d4b9f215b1a36ac023/"/>
      <url>/2025/09/35f4ef2aabae45d4b9f215b1a36ac023/</url>
      
        <content type="html"><![CDATA[<p>场景：使用 VMware 搭建的 Centos 7.6 系统，使用过程中发现磁盘容量不够，通过 VMware 的图形界面进行扩容成功后，但是执行系统的 <code>df -h</code> 指令后并未显示已扩容的空间。</p><blockquote><p>当前磁盘组为  centos_master，需要新增一个 sd3</p></blockquote><h2 id="新增分区">新增分区</h2><p>新添加的容量需要通过新增的分区分配到系统中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看待扩展的磁盘总空间：</span></span><br><span class="line">lsblk</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看磁盘的详细信息：</span> </span><br><span class="line">fdisk -l</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">对新增加的硬盘进行分区：执行：m-&gt;n-&gt;p-&gt;输入分区号(一般都是最新加入的盘，3或者4)-&gt;回车-&gt;回车-&gt;w</span></span><br><span class="line">fdisk /dev/sda</span><br><span class="line"></span><br><span class="line">fdisk -l</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">发现/dev/sda2的Id是83，需要改成8e，保持和/dev/sda2是一样的。</span></span><br></pre></td></tr></table></figure><img src="/imgs/Centos7%20%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9/image-20250718225436566.png" alt="image-20250718225436566" style="zoom:67%;" /><h2 id="修改分区">修改分区</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将system类型改成Linux LVM类型，执行命令：</span></span><br><span class="line">fdisk /dev/sda</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数如下图所示</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改后查看：</span></span><br><span class="line">fdisk -l</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启系统 ：</span></span><br><span class="line">shutdown -r now</span><br></pre></td></tr></table></figure><img src="/imgs/Centos7%20%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9/image-20250718225713990.png" alt="image-20250718225713990" style="zoom:67%;" /><h2 id="磁盘格式化">磁盘格式化</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">对新增加的硬盘格式化：如下图</span></span><br><span class="line">mkfs.ext3 /dev/sda3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加新LVM到已有的LVM组，实现扩容：</span></span><br><span class="line">pvcreate /dev/sda3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看是否创建成功：</span></span><br><span class="line">pvdisplay</span><br></pre></td></tr></table></figure><img src="/imgs/Centos7%20%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9/image-20250718230053864.png" alt="image-20250718230053864" style="zoom:67%;" /><img src="/imgs/Centos7%20%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9/image-20250718230437266.png" alt="image-20250718230437266" style="zoom:67%;" /><h2 id="扩展磁盘">扩展磁盘</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">扩展 centos_master</span></span><br><span class="line">vgextend centos_master /dev/sda3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看是否修改成功：</span></span><br><span class="line">pvdisplay</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行扩容：每个 PE 占了 4.00MiB，所以不足30g</span></span><br><span class="line">lvextend -L +29.99G /dev/mapper/centos_master-root</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看是否扩容成功：</span></span><br><span class="line">lvs</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看磁盘空间采用的文件系统：</span> </span><br><span class="line">df -T</span><br></pre></td></tr></table></figure><img src="/imgs/Centos7%20%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9/image-20250718231108241.png" alt="image-20250718231108241" style="zoom:67%;" /><h2 id="刷新磁盘">刷新磁盘</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行命令：</span></span><br><span class="line">xfs_growfs /dev/mapper/centos_master-root</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看结果</span></span><br><span class="line">df -T</span><br><span class="line">df -h</span><br></pre></td></tr></table></figure><img src="/imgs/Centos7%20%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9/image-20250718231500513.png" alt="image-20250718231500513" style="zoom:67%;" /><h2 id="修复-PV">修复 PV</h2><p>执行两次 pvcreate 后，会出现 unknown 的 Physical volume（之前的会变成 unknown  ），如下图：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pvdisplay 查看pv 发现有一个unknown pv</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">去除未知或已丢失的VG</span></span><br><span class="line">vgreduce --removemissing /dev/centos_master</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看</span></span><br><span class="line">pvdisplay </span><br><span class="line">pvs</span><br><span class="line">vgs</span><br></pre></td></tr></table></figure><img src="/imgs/Centos7%20%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9/image-20250718232007920.png" alt="image-20250718232007920" style="zoom:67%;" /><p>使用 <code>pvs </code> 查看有 unknown 名称的 PV</p><img src="/imgs/Centos7%20%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9/image-20250718232301393.png" alt="image-20250718232301393" style="zoom:67%;" />]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VMware </tag>
            
            <tag> Centos7 </tag>
            
            <tag> Centos7磁盘扩容 </tag>
            
            <tag> VMware系统磁盘扩容 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统架构设计的实施考量和演进过程</title>
      <link href="/2025/09/64e3ec6a2be5436b9bd931ad7a023235/"/>
      <url>/2025/09/64e3ec6a2be5436b9bd931ad7a023235/</url>
      
        <content type="html"><![CDATA[<p>常用架构模式：</p><table><thead><tr><th style="text-align:left">模式</th><th style="text-align:left">适用场景</th><th style="text-align:left">技术示例</th></tr></thead><tbody><tr><td style="text-align:left">微服务</td><td style="text-align:left">复杂业务系统</td><td style="text-align:left">Spring Cloud + Docker</td></tr><tr><td style="text-align:left">事件驱动</td><td style="text-align:left">实时数据处理</td><td style="text-align:left">Kafka + Lambda</td></tr><tr><td style="text-align:left">Serverless<br />（无服务器架构，云计算模型）</td><td style="text-align:left">突发流量场景</td><td style="text-align:left">AWS Lambda<br />阿里云 函数计算</td></tr><tr><td style="text-align:left">微内核</td><td style="text-align:left">可插拔功能需求</td><td style="text-align:left">OSGi/Eclipse插件体系</td></tr></tbody></table><p>分支管理：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><code>main</code>: 生产环境</p></li><li class="lvl-2"><p><code>release/*</code>: 预发布分支</p></li><li class="lvl-2"><p><code>feature/*</code>: 功能开发分支</p></li><li class="lvl-2"><p><code>hotfix/*</code>: 热修复分支</p></li></ul></blockquote><h2 id="架构设计维度">架构设计维度</h2><p>软件架构设计与拆分，关键考虑因素和步骤：</p><h3 id="一、核心设计原则">一、核心设计原则</h3><ol><li class="lvl-3"><p><strong>单一职责原则</strong></p></li></ol><p>每个模块/服务只解决一个特定问题，避免职责混乱，从而降低系统的复杂性并提高可维护性。</p><ol start="2"><li class="lvl-3"><p>**接口分离原则 **</p><p>为不同的客户端提供专用接口，而不是使用一个通用的、庞大的接口。这样可以避免客户端依赖不需要的功能。</p></li><li class="lvl-3"><p><strong>依赖倒置原则</strong></p><p>高层模块不应该依赖于底层模块，二者都应该依赖于抽象。即，依赖于抽象，不要依赖于具体实现。通过依赖注入等技术，可以降低模块之间的耦合度。</p></li><li class="lvl-3"><p><strong>开放封闭原则</strong></p><p>对扩展开放，对修改封闭。一般不要直接修改类库源码（即使你有源代码），通过继承等方式扩展。</p></li><li class="lvl-3"><p><strong>里氏替换原则</strong></p><p>子类必须能够替换父类而不影响系统行为。确保了继承关系的正确性和一致性。</p></li><li class="lvl-3"><p><strong>迪米特法则</strong>（最少知识原则）</p><p>模块之间的交互尽量少，避免过多的依赖关系，从而降低系统的耦合度。</p></li><li class="lvl-3"><p><strong>高内聚低耦合</strong>原则</p><ul class="lvl-2"><li class="lvl-7">相关功能集中，模块间依赖最小化。如订单系统内部包含完整订单生命周期处理</li></ul></li></ol><h3 id="二、架构拆分维度">二、架构拆分维度</h3><p>合理划分系统层次，提高代码的可维护性和可测试性。推荐使用 MVC、六边形架构、CQRS、DDD（领域驱动设计）等模式。</p><ol><li class="lvl-3"><p><strong>水平拆分</strong>（分层架构）</p><ul class="lvl-2"><li class="lvl-5"><strong>表现层（Presentation Layer）</strong>：如 Web 层（Spring MVC、Thymeleaf、REST API）</li><li class="lvl-5"><strong>业务逻辑层/应用层（Service Layer）</strong>：处理业务逻辑的编排流程</li><li class="lvl-5"><strong>数据访问层/基础设施层（DAO / Repository Layer）</strong>：与数据库交互、常用工具，包含API 交互的<strong>防腐层</strong></li><li class="lvl-5"><strong>领域模型层（Domain Layer）</strong>：实体、值对象、聚合根等，核心模型、业务</li></ul></li><li class="lvl-3"><p><strong>垂直拆分</strong>（功能模块化）</p><ul class="lvl-2"><li class="lvl-5">用户中心</li><li class="lvl-5">商品服务</li><li class="lvl-5">订单服务</li><li class="lvl-5">支付服务</li><li class="lvl-5">物流服务</li><li class="lvl-5">…</li></ul></li><li class="lvl-3"><p><strong>数据拆分策略</strong></p><ul class="lvl-2"><li class="lvl-5"><p>读写分离（CQRS模式）</p></li><li class="lvl-5"><p>冷热数据分离（热数据存Redis）</p></li><li class="lvl-5"><p>分库分表（用户ID、哈希分片等）</p></li></ul></li></ol><h2 id="架构设计考量">架构设计考量</h2><p>关键设计考量：确保系统具备高可用性、可扩展性、可维护性和安全性</p><h3 id="一、非功能性需求">一、非功能性需求</h3><ul class="lvl-0"><li class="lvl-2"><p><strong>性能</strong>：CDN加速静态资源，数据库索引优化。保证系统响应时间和吞吐量满足需求。</p><ul class="lvl-2"><li class="lvl-4"><p>缓存策略（Redis、Ehcache、Caffeine）</p></li><li class="lvl-4"><p>数据库优化（索引、慢查询、读写分离）</p></li><li class="lvl-4"><p>异步处理（消息队列：Kafka、RabbitMQ）</p></li><li class="lvl-4"><p>并发编程优化（线程池、CompletableFuture、Reactive 编程）</p></li></ul></li><li class="lvl-2"><p><strong>可用性</strong>：确保系统在部分组件故障时仍能正常运行，多AZ部署，熔断降级策略（如Hystrix）</p><ul class="lvl-2"><li class="lvl-4"><p>集群部署（如 Spring Boot + Docker + Kubernetes）</p></li><li class="lvl-4"><p>故障转移（Failover）机制</p></li><li class="lvl-4"><p>服务注册与发现（如 Eureka、Nacos、Consul）</p></li><li class="lvl-4"><p>健康检查与熔断机制（如 Hystrix、Resilience4j）</p></li></ul></li><li class="lvl-2"><p><strong>扩展性</strong>：系统应能应对用户量和数据量的增长。K8s自动伸缩</p><ul class="lvl-2"><li class="lvl-4"><p>水平扩展：通过增加服务器节点（如微服务架构）</p></li><li class="lvl-4"><p>垂直扩展：提升单机性能（有限）</p></li><li class="lvl-4"><p>使用负载均衡（Nginx、HAProxy）</p></li><li class="lvl-4"><p>无状态设计（便于横向扩展）</p></li></ul></li><li class="lvl-2"><p><strong>安全性</strong>：零信任架构，保护系统免受攻击和数据泄露。</p><ul class="lvl-2"><li class="lvl-4">身份认证（OAuth2、JWT、Spring Security）</li><li class="lvl-4">授权机制（RBAC、ABAC）</li><li class="lvl-4">数据加密（HTTPS、敏感字段加密）</li><li class="lvl-4">防止常见攻击（XSS、CSRF、SQL 注入）</li><li class="lvl-4">安全审计与日志监控</li></ul></li><li class="lvl-2"><p><strong>可维护性与可读性</strong>：便于团队协作和后期维护。</p><ul class="lvl-2"><li class="lvl-4"><p>遵循设计模式（工厂、策略、观察者等）</p></li><li class="lvl-4"><p>代码规范与命名规范</p></li><li class="lvl-4"><p>模块化设计（Maven/Gradle 多模块）</p></li><li class="lvl-4"><p>文档化（Swagger API 文档、架构图、流程图）</p></li></ul></li><li class="lvl-2"><p><strong>可测试性（Testability）</strong>：确保系统易于测试。</p><ul class="lvl-2"><li class="lvl-4">单元测试（JUnit、Mockito）</li><li class="lvl-4">集成测试（TestContainers、SpringBootTest）</li><li class="lvl-4">自动化测试与 CI/CD 集成（Jenkins、GitLab CI）</li><li class="lvl-4">Mock 外部依赖（如数据库、第三方服务）</li></ul></li></ul><h3 id="二、分布式系统挑战">二、分布式系统挑战</h3><ul class="lvl-0"><li class="lvl-2"><p>事务处理：跨多个节点/服务的事务难以实现原子性（Atomicity）和隔离性（Isolation）</p><ul class="lvl-2"><li class="lvl-4"><p>本地事务（Spring @Transactional）</p></li><li class="lvl-4"><p>分布式事务（Seata、TCC、Saga 模式）</p></li><li class="lvl-4"><p>最终一致性（通过消息队列实现）</p></li><li class="lvl-4"><p>幂等性设计（防止重复操作）</p></li></ul></li><li class="lvl-2"><p>分布式ID：id唯一，且有序高效</p></li><li class="lvl-2"><p>分布式锁：并发与竞争条件，保证数据数据安全，支持高并发</p></li><li class="lvl-2"><p>一致性：CAP权衡，最终一致性实现</p></li><li class="lvl-2"><p>服务发现：Nacos/Consul/Eureka注册中心</p></li><li class="lvl-2"><p>容错与弹性设计：系统应具备自我恢复能力。</p><ul class="lvl-2"><li class="lvl-4">重试机制</li><li class="lvl-4">熔断与降级（Resilience4j）</li><li class="lvl-4">限流（Sentinel、RateLimiter）</li><li class="lvl-4">超时控制</li></ul></li><li class="lvl-2"><p><strong>脑裂问题</strong>：网络分区导致集群分裂成多个子集群，各自选举 Leader，数据冲突。</p></li></ul><h3 id="三、演进式架构">三、演进式架构</h3><ul class="lvl-0"><li class="lvl-2"><p>防腐层（Anti-Corruption Layer）隔离遗留系统</p></li><li class="lvl-2"><p>特性开关（Feature Toggle）实现渐进式发布</p></li><li class="lvl-2"><p>可观测性：指标（Prometheus）+日志（ELK）+链路追踪（Jaeger）</p></li><li class="lvl-2"><p>数据分片与负载均衡：数据如何在多个节点间合理分布？（一致性哈希、范围分片等）</p></li><li class="lvl-2"><p>配置与部署复杂性：多节点配置管理困难，需要DevOps、CI/CD等</p></li></ul><h2 id="架构实施流程">架构实施流程</h2><p>架构实施成功关键要素：</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><strong>业务驱动</strong></td><td>架构服务于业务目标，不是技术炫技</td></tr><tr><td><strong>渐进式演进</strong></td><td>不要“大爆炸式重构”，采用绞杀者模式、抽象分支等渐进策略</td></tr><tr><td><strong>自动化先行</strong></td><td>CI/CD、自动化测试、自动化部署是架构落地的基石</td></tr><tr><td><strong>可观测性是生命线</strong></td><td>没有监控的架构 = 盲人摸象</td></tr><tr><td><strong>团队能力匹配</strong></td><td>架构再先进，团队不会用也是灾难 → 需培训、结对、文档、Code Review</td></tr><tr><td><strong>架构治理常态化</strong></td><td>定期评审、技术债管理、防止架构腐化</td></tr></tbody></table><p>以下为可落地、分阶段、有方法论支撑的架构实施流程，从核心任务到成果物输出。</p><h3 id="阶段一：业务需求与目标对齐（What）">阶段一：业务需求与目标对齐（What）</h3><ol><li class="lvl-3"><p>明确业务目标（如支撑日活百万、大促零故障、全球化部署）</p></li><li class="lvl-3"><p>识别核心场景（如秒杀、推荐、支付、履约）</p></li><li class="lvl-3"><p>定义 SLA（可用性 99.99%？延迟 &lt; 200ms？）</p></li><li class="lvl-3"><p>确定约束条件（预算、团队能力、合规、上线时间）</p></li></ol><blockquote><p><strong>输出成果物</strong>：</p><ul class="lvl-1"><li class="lvl-2">《业务架构说明书》</li><li class="lvl-2">《非功能性需求清单》（性能、安全、扩展性、容灾等）</li><li class="lvl-2">《成功度量指标》（如订单成功率、P99 延迟、MTTR）</li></ul></blockquote><h3 id="阶段二：现状评估与差距分析（Where）">阶段二：现状评估与差距分析（Where）</h3><p>工具推荐：使用 C4 模型（Context, Container, Component, Code）画架构图。</p><ol><li class="lvl-3"><p>梳理当前系统架构（画出拓扑图、依赖关系）</p></li><li class="lvl-3"><p>识别瓶颈（如数据库单点、无缓存、无监控）</p></li><li class="lvl-3"><p>评估团队能力（是否有 K8s/微服务经验？）</p></li><li class="lvl-3"><p>评估基础设施（是否上云？是否有 CI/CD？）</p></li></ol><blockquote><p><strong>输出成果物</strong>：</p><ul class="lvl-1"><li class="lvl-2">《当前架构评估报告》</li><li class="lvl-2">《技术债清单》</li><li class="lvl-2">《演进路线图（初稿）》</li></ul></blockquote><h3 id="阶段三：架构设计与选型（How）">阶段三：架构设计与选型（How）</h3><p>技术选型要考虑“社区活跃度、团队熟悉度、云厂商支持度、License 成本”。</p><ol><li class="lvl-3"><p>设计目标架构（逻辑架构、部署架构、数据架构）</p></li><li class="lvl-3"><p>技术选型（语言、框架、中间件、数据库、云服务）</p></li><li class="lvl-3"><p>关键方案设计：</p><ul class="lvl-2"><li class="lvl-5">服务拆分策略（按业务域？按变更频率？）</li><li class="lvl-5">数据一致性方案（Saga？TCC？本地消息表？）</li><li class="lvl-5">高可用方案（多活？异地容灾？）</li><li class="lvl-5">安全方案（mTLS？RBAC？WAF？）</li></ul></li><li class="lvl-3"><p>制定演进路径（是“绞杀者模式”还是“并行双跑”？）</p></li></ol><blockquote><p><strong>输出成果物</strong>：</p><ul class="lvl-1"><li class="lvl-2">《目标架构设计文档》</li><li class="lvl-2">《技术选型报告》</li><li class="lvl-2">《关键方案设计说明书》（如《分布式事务方案》《缓存穿透解决方案》）</li><li class="lvl-2">《架构决策记录（ADR）》</li></ul></blockquote><h3 id="阶段四：原型验证与技术预研">阶段四：原型验证与技术预研</h3><ol><li class="lvl-3"><p>对关键技术点做 PoC（如：用 Seata 实现 TCC 事务；用 Istio 实现金丝雀发布）</p></li><li class="lvl-3"><p>验证性能（压测核心接口，如“下单”）</p></li><li class="lvl-3"><p>验证可行性（能否在团队内推广？是否有学习成本？）</p></li><li class="lvl-3"><p>验证成本（云资源费用、License 费用、人力投入）</p></li></ol><blockquote><p><strong>输出成果物</strong>：</p><ul class="lvl-1"><li class="lvl-2">《PoC 验证报告》</li><li class="lvl-2">《性能压测报告》</li><li class="lvl-2">《风险评估与应对方案》</li></ul></blockquote><h3 id="阶段五：分阶段实施与灰度上线">阶段五：分阶段实施与灰度上线</h3><ol><li class="lvl-3"><p>制定实施里程碑（如：Q3 完成用户中心重构，Q4 上线订单新架构）</p></li><li class="lvl-3"><p>采用“绞杀者模式”或“抽象分支”逐步替换老系统</p></li><li class="lvl-3"><p>建立自动化流水线（CI/CD）</p></li><li class="lvl-3"><p>灰度发布策略（按用户 ID、地域、设备灰度）</p></li><li class="lvl-3"><p>数据迁移与双写方案（确保平滑过渡）</p></li></ol><blockquote><p><strong>输出成果物</strong>：</p><ul class="lvl-1"><li class="lvl-2">《实施路线图 &amp; 甘特图》</li><li class="lvl-2">《发布计划 &amp; 回滚方案》</li><li class="lvl-2">《数据迁移方案》</li><li class="lvl-2">《灰度策略文档》</li></ul></blockquote><p>推荐工具：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>发布：Argo Rollouts / Flagger / Spinnaker</p></li><li class="lvl-2"><p>数据迁移：Debezium + Kafka Connect / 双写中间表</p></li><li class="lvl-2"><p>监控比对：新老系统指标对比（订单成功率、延迟等）</p></li></ul></blockquote><h3 id="阶段六：可观测性体系建设">阶段六：可观测性体系建设</h3><p>黄金指标：延迟（Latency）、流量（Traffic）、错误（Errors）、饱和度（Saturation）—— USE / RED 方法论。</p><ol><li class="lvl-3"><p>建设“监控三件套”：</p><ul class="lvl-2"><li class="lvl-5"><strong>Metrics（指标）</strong>：Prometheus + Grafana</li><li class="lvl-5"><strong>Logging（日志）</strong>：ELK / Loki + Filebeat</li><li class="lvl-5"><strong>Tracing（链路）</strong>：Jaeger / Zipkin / SkyWalking</li></ul></li><li class="lvl-3"><p>设置关键告警（如错误率 &gt; 1%、P99 &gt; 1s）</p></li><li class="lvl-3"><p>建立 SLO/SLI 体系（如“下单接口可用性 99.95%”）</p></li><li class="lvl-3"><p>建设业务大盘（订单量、GMV、转化率等）</p></li></ol><blockquote><p><strong>输出成果物</strong>：</p><ul class="lvl-1"><li class="lvl-2">《可观测性架构图》</li><li class="lvl-2">《告警规则清单》</li><li class="lvl-2">《SLO 定义文档》</li><li class="lvl-2">《值班手册 &amp; 应急预案》</li></ul></blockquote><h3 id="阶段七：高可用与容灾演练">阶段七：高可用与容灾演练</h3><ol><li class="lvl-3"><p>设计容灾架构（同城双活？异地多活？）</p></li><li class="lvl-3"><p>实施混沌工程（Chaos Mesh / Chaos Monkey）：</p><ul class="lvl-2"><li class="lvl-5">注入网络延迟、节点宕机、磁盘满、CPU 打满等故障</li><li class="lvl-5">验证系统自愈能力（K8s 自动重启？服务熔断？）</li></ul></li><li class="lvl-3"><p>压测演练（全链路压测、突增流量模拟）</p></li><li class="lvl-3"><p>故障复盘机制（建立 Blameless Postmortem 文化）</p></li></ol><blockquote><p><strong>输出成果物</strong>：</p><ul class="lvl-1"><li class="lvl-2">《容灾架构设计》</li><li class="lvl-2">《混沌工程实验报告》</li><li class="lvl-2">《压测报告 &amp; 容量规划》</li><li class="lvl-2">《故障复盘模板》</li></ul></blockquote><h3 id="阶段八：持续优化与架构治理">阶段八：持续优化与架构治理</h3><p>推荐指标：部署频率、变更前置时间、变更失败率、MTTR（平均恢复时间）—— DevOps DORA 指标。</p><ol><li class="lvl-3"><p>建立架构治理委员会（定期评审架构演进）</p></li><li class="lvl-3"><p>技术债管理（每季度偿还一定比例）</p></li><li class="lvl-3"><p>性能持续优化（慢 SQL 治理、缓存命中率提升）</p></li><li class="lvl-3"><p>成本优化（资源利用率分析、Spot 实例、冷热数据分层）</p></li><li class="lvl-3"><p>架构防腐（防止“微服务膨胀”、“过度设计”）</p></li></ol><blockquote><p><strong>输出成果物</strong>：</p><ul class="lvl-1"><li class="lvl-2">《架构治理章程》</li><li class="lvl-2">《技术债看板》</li><li class="lvl-2">《成本优化报告》</li><li class="lvl-2">《架构健康度评估》（如服务依赖复杂度、部署频率、故障率）</li></ul></blockquote><h2 id="架构演进过程">架构演进过程</h2><p>分布式系统的架构演进过程，是随着业务规模增长、技术能力提升、硬件成本下降和用户需求变化而不断迭代优化的过程。</p><blockquote><p>是从“单体”走向“分布式”，从“中心化”走向“去中心化/服务化”，从“人工运维”走向“自动化/智能化”的演进路径。</p></blockquote><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>单体架构</td><td>快速验证、简单部署</td><td>Tomcat、MySQL、单机部署</td><td>扩展性差、耦合严重</td></tr><tr><td>垂直拆分</td><td>解耦应用与数据</td><td>多服务器、读写分离、CDN</td><td>跨库一致性、运维复杂</td></tr><tr><td>分布式服务（SOA）</td><td>服务复用、团队协作</td><td>RPC、注册中心、配置中心</td><td>服务治理、链路追踪</td></tr><tr><td>微服务架构</td><td>敏捷交付、独立演进</td><td>Spring Cloud、Docker、K8s（初期）</td><td>分布式事务、数据聚合、服务爆炸</td></tr><tr><td>云原生架构</td><td>弹性伸缩、高可用、自动化</td><td>Kubernetes、Service Mesh、Serverless</td><td>运维复杂、安全策略、有状态管理</td></tr><tr><td>智能自适应架构</td><td>自治、自愈、成本最优</td><td>AIOps、混沌工程、边缘计算、FaaS</td><td>算法可靠性、系统可解释性</td></tr></tbody></table><blockquote><ol><li class="lvl-3"><p><strong>初创期</strong>：LAMP 单体，一台服务器跑 Web + DB。</p></li><li class="lvl-3"><p><strong>增长期</strong>：拆分 Web 与 DB，引入缓存（Redis）、搜索（Elasticsearch）。</p></li><li class="lvl-3"><p><strong>爆发期</strong>：按业务拆服务（用户、商品、订单、支付），引入 Dubbo + ZooKeeper。</p></li><li class="lvl-3"><p><strong>成熟期</strong>：全面微服务化，K8s 编排，Service Mesh 管理流量，建设数据中台。</p></li><li class="lvl-3"><p><strong>云原生期</strong>：混合云部署，部分服务 Serverless 化，AI 推荐 + 智能运维。</p></li><li class="lvl-3"><p><strong>未来</strong>：边缘节点处理附近用户请求，AI 实时调价 + 库存预测，系统自优化。</p></li></ol></blockquote><h3 id="一、单体架构">一、单体架构</h3><ul class="lvl-0"><li class="lvl-2"><p><strong>发布风险高</strong>：一个小改动需全量部署，容易“牵一发而动全身”。</p></li><li class="lvl-2"><p><strong>技术栈锁定</strong>：整个系统只能使用一种语言/框架。</p></li><li class="lvl-2"><p><strong>团队协作困难</strong>：多人修改同一代码库，合并冲突频繁。</p></li><li class="lvl-2"><p><strong>单点故障</strong>：一个模块崩溃可能导致整个系统瘫痪。</p></li><li class="lvl-2"><p><strong>性能瓶颈</strong>：数据库、业务逻辑、文件服务等共享资源，难以横向扩展。</p></li></ul><blockquote><p>适用场景：</p><ul class="lvl-1"><li class="lvl-2">初创产品 MVP（最小可行产品）</li><li class="lvl-2">用户量 &lt; 10万，QPS &lt; 1000</li><li class="lvl-2">团队规模小（&lt;10人）</li></ul></blockquote><h3 id="二、垂直拆分架构（应用与数据分离）">二、垂直拆分架构（应用与数据分离）</h3><p>当单体性能瓶颈显现（如数据库成为瓶颈），需要提升系统稳定性和可维护性</p><ol><li class="lvl-3"><p><strong>应用与数据库分离</strong>：Web 服务与 DB 部署在不同服务器。</p></li><li class="lvl-3"><p><strong>按功能垂直拆分</strong>：如用户中心、订单中心、商品中心各自独立部署。</p></li><li class="lvl-3"><p><strong>静态资源独立</strong>：图片、JS、CSS 交给 CDN 或独立服务器。</p></li></ol><blockquote><ul class="lvl-1"><li class="lvl-2"><p>减轻单机压力，提高并发能力。</p></li><li class="lvl-2"><p>各模块可独立扩展、独立维护。</p></li><li class="lvl-2"><p>数据库按业务拆分，缓解连接数和锁竞争。</p></li></ul></blockquote><p>同时会引入新问题：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>服务间调用开始出现（HTTP/RPC），需处理超时、重试、降级。</p></li><li class="lvl-2"><p>数据一致性难保证（如订单与库存需跨库操作）。</p></li><li class="lvl-2"><p>运维复杂度上升（多进程、多机器）。</p></li></ul></blockquote><h3 id="三、分布式服务架构（SOA）">三、分布式服务架构（SOA）</h3><p>当业务复杂度爆炸，垂直拆分后模块仍庞大，需支持多团队并行开发、独立发布</p><ol><li class="lvl-3"><p>引入 <strong>服务化思想</strong>：将通用能力抽象为“服务”，如登录服务、支付服务、通知服务。</p></li><li class="lvl-3"><p>使用 <strong>RPC 框架</strong>：如 Dubbo、gRPC、Thrift 实现服务间高效调用。</p></li><li class="lvl-3"><p>引入 <strong>服务注册与发现</strong>：ZooKeeper、Consul、Eureka。</p></li><li class="lvl-3"><p>初步实现 <strong>配置中心、服务治理</strong>（限流、熔断、路由）。</p></li></ol><blockquote><ul class="lvl-1"><li class="lvl-2"><p>服务复用性高，避免重复造轮子。</p></li><li class="lvl-2"><p>团队按服务划分，职责清晰，发布独立。</p></li><li class="lvl-2"><p>技术栈可异构（不同服务可用不同语言）。</p></li></ul></blockquote><p>于此同时会带来新挑战：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>分布式事务问题凸显（跨服务数据一致性）。</p></li><li class="lvl-2"><p>服务依赖复杂，链路变长，排查问题困难。</p></li><li class="lvl-2"><p>需引入监控、日志、链路追踪系统。</p></li></ul></blockquote><h3 id="四、微服务架构">四、微服务架构</h3><p>SOA 服务粒度仍粗，发布耦合；需要更敏捷、更弹性的架构。同时随着容器化、DevOps、云原生技术成熟</p><ul class="lvl-0"><li class="lvl-2"><p><strong>服务粒度更细</strong>：一个服务只做一件事（单一职责）。</p></li><li class="lvl-2"><p><strong>独立部署 &amp; 独立数据源</strong>：每个服务拥有自己的数据库（Database per Service）。</p></li><li class="lvl-2"><p><strong>去中心化治理</strong>：服务自治，技术选型自由。</p></li><li class="lvl-2"><p><strong>基础设施自动化</strong>：CI/CD、容器编排（Kubernetes）、服务网格（Service Mesh）。</p></li></ul><p>挑战进一步升级：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>分布式事务更复杂</strong> → Saga、TCC、本地消息表、Event Sourcing</p></li><li class="lvl-2"><p><strong>数据聚合查询困难</strong> → CQRS、数据中台、宽表同步</p></li><li class="lvl-2"><p><strong>服务爆炸</strong> → 服务网格（Istio、Linkerd）接管通信治理</p></li><li class="lvl-2"><p><strong>运维复杂度指数上升</strong> → 需要 SRE、可观测性体系、AIOps</p></li></ul></blockquote><h3 id="五、云原生架构">五、云原生架构</h3><p>企业全面上云，追求极致弹性、高可用、低成本。Kubernetes 成为事实标准，基础设施服务化</p><ul class="lvl-0"><li class="lvl-2"><p><strong>容器化封装</strong>（Docker），自动扩缩容（HPA/VPA）</p></li><li class="lvl-2"><p><strong>动态编排管理</strong>（Kubernetes），故障自愈（Pod 重启、节点迁移），灰度发布、金丝雀发布、蓝绿部署</p></li><li class="lvl-2"><p><strong>面向微服务</strong></p></li><li class="lvl-2"><p><strong>服务网格</strong>（Service Mesh）</p></li><li class="lvl-2"><p><strong>声明式 API &amp; 不可变基础设施</strong></p></li><li class="lvl-2"><p><strong>DevSecOps &amp; GitOps</strong></p></li></ul><blockquote><ul class="lvl-1"><li class="lvl-2"><p>资源利用率高，成本优化。</p></li><li class="lvl-2"><p>系统韧性（Resilience）强，SLA 可保障。</p></li><li class="lvl-2"><p>快速迭代，支持业务创新。</p></li></ul></blockquote><p>带来新挑战：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>学习曲线陡峭（K8s、CRD、Operator、Sidecar 等概念）</p></li><li class="lvl-2"><p>监控/安全/网络策略复杂（需零信任、mTLS、NetworkPolicy）</p></li><li class="lvl-2"><p>有状态服务管理难（如数据库、消息队列的 K8s 化）</p></li></ul></blockquote><h3 id="六、智能化-自适应架构（AI）">六、智能化 &amp; 自适应架构（AI）</h3><p>随着系统规模超大（千万级 QPS），人工运维不可持续。AI 技术成熟，可用于系统自优化</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>AIOps</strong>：异常检测、根因分析、自动扩缩容决策。</p></li><li class="lvl-2"><p><strong>混沌工程常态化</strong>：主动注入故障，验证系统韧性。</p></li><li class="lvl-2"><p><strong>Serverless + Event-Driven</strong>：极致解耦，按事件触发计算。</p></li><li class="lvl-2"><p><strong>数据与计算融合架构</strong>：流批一体、湖仓一体、近数据计算。</p></li><li class="lvl-2"><p><strong>边缘计算 + 分布式云</strong>：计算靠近用户，降低延迟。</p></li><li class="lvl-2"><p><strong>自治系统（Autonomous System）</strong>：自我监控、自我修复、自我优化。</p></li></ul></blockquote><h3 id="电商系统架构演进示例">电商系统架构演进示例</h3><p>某跨境电商架构演进的过程：</p><table><thead><tr><th>阶段</th><th>订单量</th><th>架构</th><th>技术点</th><th>特点</th></tr></thead><tbody><tr><td>初创期（1.0阶段）</td><td>日活几百</td><td>单体架构</td><td>Spring Boot + MySQL</td><td>快速上线、验证模式</td></tr><tr><td>增长期（2.0阶段）</td><td>日活1万+</td><td>垂直拆分 + 缓存</td><td>Redis + CDN + 读写分离</td><td>性能优化、支持增长</td></tr><tr><td>发展期（3.0阶段）</td><td>日订单10万+</td><td>分布式服务化</td><td>Dubbo + MQ + 分库分表</td><td>解耦协作、高并发支持</td></tr><tr><td>成熟期（4.0阶段）</td><td>日订单百万+</td><td>云原生微服务</td><td>K8s + Istio + Serverless</td><td>弹性伸缩、全球高可用</td></tr><tr><td>未来（5.0阶段）</td><td>日订单千万+</td><td>智能自适应架构</td><td>AIOps + 边缘计算 + EDA</td><td>自治系统、极致体验与效率</td></tr></tbody></table><blockquote><p>关键指标：订单处理能力从100TPS提升至5000TPS</p></blockquote><p><strong>一下为具体场景和实现，以及存在的挑战</strong>：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>1.0阶段</strong>：单体应用（Spring Boot + MySQL）。功能简单，日活几百，订单少量。</p><blockquote><p>前后端一体，MySQL 单机，手动部署等。</p><ul class="lvl-3"><li class="lvl-2"><p>大促时服务器 CPU 100%，页面打不开。</p></li><li class="lvl-2"><p>改个商品页，要重启整个系统，影响其他模块。</p></li><li class="lvl-2"><p>图片加载慢，数据库慢查询拖垮整个应用。</p></li></ul></blockquote></li><li class="lvl-2"><p><strong>2.0阶段</strong>：垂直拆分 + 基础优化。用户增长到日活 1 万，订单上千。支持促销、优惠券等</p><blockquote><p>应用与数据库分离、引入缓存、读写分离、静态资源 CDN、按功能垂直拆分等</p><ul class="lvl-3"><li class="lvl-2"><p>库存超卖（多个用户同时下单扣减库存）→ 需加锁或队列。</p></li><li class="lvl-2"><p>订单与库存数据在不同模块，一致性难保证。</p></li><li class="lvl-2"><p>服务之间开始用 HTTP 调用，超时、失败频发。</p></li></ul></blockquote></li><li class="lvl-2"><p><strong>3.0阶段</strong>：服务化拆分（商品/订单独立部署）。日订单量 10 万+，峰值 QPS 上千。</p><blockquote><p>服务拆分为用户、商品、订单、库存、支付等模块，引入 RPC 框架、服务注册发现、消息队列削峰解耦等。</p><ul class="lvl-3"><li class="lvl-2"><p>“下单失败但库存已扣” → 需补偿机制或 Saga 模式。</p></li><li class="lvl-2"><p>“服务调用链太长，不知道哪一步慢” → 需全链路监控。</p></li><li class="lvl-2"><p>“服务太多，配置管理混乱” → 需统一配置中心。</p></li><li class="lvl-2"><p>“发布一个服务导致整个系统雪崩” → 需熔断限流（Sentinel/Hystrix）。</p></li></ul></blockquote></li><li class="lvl-2"><p><strong>4.0阶段</strong>：云原生微服务架构。支持日订单百万级，峰值 QPS 数万。</p><blockquote><p>容器化、Kubernetes 编排、数据中台建设（统一数仓、用户画像、BI 报表、推荐算法）、中间件云托管、<strong>混沌工程</strong>。</p><ul class="lvl-3"><li class="lvl-2"><p>K8s YAML 配置爆炸 → 需 Helm / Kustomize / GitOps。</p></li><li class="lvl-2"><p>Sidecar 增加延迟 → 需性能调优。</p></li><li class="lvl-2"><p>多集群管理复杂 → 需 Karmada / Cluster API。</p></li><li class="lvl-2"><p>数据一致性仍难 → 引入 CDC（如 Debezium） + 事件溯源。</p></li></ul></blockquote></li><li class="lvl-2"><p><strong>5.0阶段</strong>：智能化 &amp; 自适应架构。日订单千万级，AI 驱动个性化推荐、动态定价、智能客服。系统“自我感知、自我修复和优化。</p><blockquote><ul class="lvl-3"><li class="lvl-2"><strong>AIOps</strong>：自动根因分析、智能扩缩容、异常检测（日志/指标自动聚类告警）。</li><li class="lvl-2"><strong>边缘计算</strong>：用户附近部署边缘节点，处理“附近商品推荐”，降低延迟，提升体验。</li><li class="lvl-2"><strong>Serverless 全面化</strong>：促销活动页面、临时计算任务全部 FaaS 化。按调用付费，资源零浪费。</li><li class="lvl-2"><strong>事件驱动架构（EDA）</strong>：业务事件 → Kafka → 消费者（下单 → 扣库存、埋点、通知）。系统高度解耦，弹性极强。</li><li class="lvl-2"><strong>数字孪生 &amp; 仿真压测</strong>：构建线上系统镜像，提前模拟大促流量，自动调优参数。</li></ul></blockquote></li></ul><p><strong>真实案例参考</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>淘宝：从 LAMP → 垂直拆分 → 服务化（HSF）→ 微服务（Dubbo）→ 云原生（Sigma / ASI）</p></li><li class="lvl-2"><p>亚马逊：从单体 → SOA → 微服务 → Serverless（Lambda）→ 智能化推荐系统</p></li><li class="lvl-2"><p>拼多多：早期用 Go 单体 → 快速服务化 → 全链路压测 + 极致优化 → 支撑“百亿补贴”高并发</p></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
          <category> 架构设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构设计 </tag>
            
            <tag> 架构模式 </tag>
            
            <tag> 架构实施 </tag>
            
            <tag> 架构演进 </tag>
            
            <tag> 云原生架构 </tag>
            
            <tag> 微服务架构 </tag>
            
            <tag> 分布式架构 </tag>
            
            <tag> AI自适应架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 多线程之线程池原理与使用指南</title>
      <link href="/2025/09/366f9754e67846f0b38a4354a634b75f/"/>
      <url>/2025/09/366f9754e67846f0b38a4354a634b75f/</url>
      
        <content type="html"><![CDATA[<p>使用线程池的优点：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>降低资源消耗</strong>：通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</p></li><li class="lvl-2"><p><strong>提高响应速度</strong>：当任务到达时，任务可以不需要等到线程创建就能立即执行。</p></li><li class="lvl-2"><p><strong>提高线程的可管理性</strong>：线程是稀缺资源，如果无限制地创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一分配、调优和监控。</p></li></ul><blockquote><p>所有线程池都基于 <code>java.util.concurrent.ThreadPoolExecutor</code>，底层是操作系统线程（Platform Threads），创建和切换成本高，需池化复用。</p><p>Java 21 引入了虚拟线程（Virtual Threads），让“一个任务一个线程”成为 I/O 场景的最佳实践。</p></blockquote><h2 id="线程池概念结构">线程池概念结构</h2><h3 id="核心组件">核心组件</h3><ul class="lvl-0"><li class="lvl-2"><p>核心线程数（<strong>corePoolSize</strong>）：线程池中常驻的线程数量，即使空闲也不会被回收（除非设置 <code>allowCoreThreadTimeOut(true)</code>）。</p></li><li class="lvl-2"><p>最大线程数（<strong>maximumPoolSize</strong>）：线程池允许创建的最大线程数量。当任务队列满且当前线程数 &lt; maximumPoolSize 时，会创建非核心线程执行任务。</p></li><li class="lvl-2"><p>非核心线程的存活时长（<strong>keepAliveTime</strong>）：非核心线程在空闲时的存活时间。超过该时间将被回收。</p></li><li class="lvl-2"><p>工作队列（<strong>BlockingQueue</strong><Runnable>）：当核心线程都在忙时，新任务会被放入队列等待。</p><ul class="lvl-2"><li class="lvl-4"><code>LinkedBlockingQueue</code>：无界队列（默认不设上限，易 OOM）</li><li class="lvl-4"><code>ArrayBlockingQueue</code>：有界队列</li><li class="lvl-4"><code>SynchronousQueue</code>：不存储元素，直接移交任务给线程（常用于 CachedThreadPool）</li><li class="lvl-4"><code>PriorityBlockingQueue</code>：优先级队列</li></ul></li><li class="lvl-2"><p>拒绝策略（<strong>RejectedExecutionHandler</strong>）：当线程池和队列都满了，如何处理新提交的任务，常见策略有：</p><ul class="lvl-2"><li class="lvl-4"><strong>AbortPolicy</strong>： 它将直接抛出RejectedExecutionException（默认）</li><li class="lvl-4"><strong>CallerRunsPolicy</strong>： 它直接在execute方法的调用线程中运行被拒绝的任务。如果执行程序已关闭，则会丢弃该任务</li><li class="lvl-4"><strong>DiscardOldestPolicy</strong>： 它放弃最旧的未处理请求，然后重试execute执行当前任务。</li><li class="lvl-4"><strong>DiscardPolicy</strong>： 默认情况下它将丢弃被拒绝的任务。</li></ul></li></ul><h3 id="执行流程">执行流程</h3><img src="/imgs/868f71cd0007cc74fd9bd0b963619a51.png" alt="深入理解线程池（详解）_线程池的工作原理-CSDN博客" style="zoom: 50%;" /><blockquote><p>1.查看核心线程池是否已满，不满就创建一条线程执行任务，否则执行第二步。</p><p>2.查看任务队列是否已满，不满就将任务存储在任务队列中，否则执行第三步。</p><p>3.查看线程池是否已满，即是否达到最大线程池数，不满就创建一条线程执行任务，否则就按照策略处理无法执行的任务。</p><p>4.当线程池中的线程数量大于核心线程时，如果某线程空闲时间超过<strong>keepAliveTime</strong>，线程将被终止。这样，线程池可以动态的调整池中的线程数。</p><p>5.当设置<strong>allowCoreThreadTimeOut</strong>(true)时，线程池中corePoolSize线程空闲时间达到<strong>keepAliveTime</strong>也将关闭</p></blockquote><h3 id="线程池状态">线程池状态</h3><p>线程池的状态和线程的状态是完全不同的，线程池的状态有以下 5 种：</p><ol><li class="lvl-3"><p><strong>running</strong>：运行状态，线程池创建好后会进入此状态，如不手动调用关闭方法，那线程池在整个程序运行期间都是此状态。</p></li><li class="lvl-3"><p><strong>shutdown</strong>：关闭状态，不再接受新任务提交，但是会将已保存在任务队列中的任务处理完。</p></li><li class="lvl-3"><p><strong>stop</strong>：停止状态，不再接受新任务提交，并且会中断当前正在执行的任务、放弃任务队列中已有的任务。</p></li><li class="lvl-3"><p><strong>tidying</strong>：整理状态，所有的任务都执行完毕后（也包括任务队列中的任务执行完），当前线程池中的活动线程数降为 0 时的状态。到此状态之后，会调用线程池的 terminated() 方法。</p></li><li class="lvl-3"><p><strong>terminated</strong>：销毁状态，当执行完线程池的 terminated() 方法之后就会变为此状态。</p></li></ol><p><img src="/imgs/image-20240705162257743.png" alt="image-20240705162257743"></p><img src="/imgs/620cc55cd9c0f63fc7aa1ddaaee8812d.png" alt="image.png" style="zoom:37%;" /><blockquote><ul class="lvl-1"><li class="lvl-2"><p>shutdown()  不再接收新的任务，但是现有任务继续，且队列中等候的线程也将会执行。除非内部有停止标识</p></li><li class="lvl-2"><p>shutdownNow()  不再接收新的任务，但是现有任务继续，队列中等候的线程不会再执行，将交给外部线程处理</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shutdown</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">mainLock</span> <span class="operator">=</span> <span class="built_in">this</span>.mainLock;</span><br><span class="line">    mainLock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      checkShutdownAccess();        </span><br><span class="line">      advanceRunState(SHUTDOWN);    </span><br><span class="line">      interruptIdleWorkers();        </span><br><span class="line">      onShutdown(); </span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      mainLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    tryTerminate();    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> List&lt;Runnable&gt; <span class="title function_">shutdownNow</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Runnable&gt; tasks;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">mainLock</span> <span class="operator">=</span> <span class="built_in">this</span>.mainLock;</span><br><span class="line">    mainLock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      checkShutdownAccess();</span><br><span class="line">      advanceRunState(STOP);</span><br><span class="line">      interruptWorkers();</span><br><span class="line">      tasks = drainQueue();    </span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      mainLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    tryTerminate();</span><br><span class="line">    <span class="keyword">return</span> tasks;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><p>重写 terminated() 方法，销毁前执行一些其他操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolStateTransition</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">      <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">0L</span>,</span><br><span class="line">              TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">100</span>)) &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">terminated</span><span class="params">()</span> &#123;</span><br><span class="line">              <span class="built_in">super</span>.terminated();</span><br><span class="line">              System.out.println(<span class="string">&quot;执行 terminated() 方法&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      threadPool.shutdown();</span><br><span class="line">      <span class="keyword">while</span> (!threadPool.awaitTermination(<span class="number">1</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;线程池正在运行中&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="线程池体系结构">线程池体系结构</h3><p><code>java.util.concurrent.Executor</code>: 负责线程的使用和调度的根接口;</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><code>ExecutorService</code>: 子接口,线程池的主要接口;</p><ul class="lvl-3"><li class="lvl-4"><code>AbstractExecutorService</code>: 接口抽象类，维护了通用方法：线程提交和运行<ul class="lvl-5"><li class="lvl-6"><code>ThreadPoolExecutor</code>: 线程池的实现类; 维护了线程池参数、状态、等待队列、锁和方法实现</li><li class="lvl-6"><code>ForkJoinPool</code>:并行线程池的实现类; 维护了线程池参数、状态、等待队列、工作线程</li><li class="lvl-6"><code>DelegatedExecutorService</code>:</li></ul></li></ul></li><li class="lvl-2"><p><code>ScheduledExecutorService</code>: 子接口,负责线程的调度;</p><ul class="lvl-3"><li class="lvl-4"><code>ScheduledThreadPoolExecutor</code>: 继承了线程池的实现类,实现了负责线程调度的子接口;</li></ul></li></ul></blockquote><p>工具类:    Executors（<font color=red>慎用</font>：最大线程数过大，队列大小未做限制，会导致CPU和内存占用过大出现服务宕机问题）</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><code>ExecutorService=Executors.newFixedThreadPool()</code>: <strong>固定大小</strong>线程池（<strong>核心=最大=n</strong>）;</p></li><li class="lvl-2"><p><code>ExecutorService=Executors.newCachedThreadPool()</code>: <strong>缓存</strong>线程池，<strong>核心=0，最大=MAX_INT</strong>，没有核心线程数;</p></li><li class="lvl-2"><p><code>ExecutorService=Executors.newSingleThreadExecutor()</code>: <strong>单个</strong>线程池, 线程池只有一个线程<strong>核心=最大=1</strong>;</p></li><li class="lvl-2"><p><code>ExecutorService=Executors.newWorkStealingPool()</code>:  <strong>并行</strong>线程池，默认核心大小为<strong>CPU核数</strong>（Runtime.getRuntime().availableProcessors()），最大默认 256</p></li><li class="lvl-2"><p><code>ScheduledExecutorService=Executors.newScheduledThreadPool()</code>: <strong>延时或定时</strong>的执行任务，<strong>核心=n，最大=MAX_INT</strong>;</p></li></ul></blockquote><p>spring 提供的 线程池</p><blockquote><p>TaskExecutor 接口</p><ul class="lvl-1"><li class="lvl-2"><p>AsyncTaskExecutor 接口</p><ul class="lvl-3"><li class="lvl-4"><p>SchedulingTaskExecutor 接口</p><ul class="lvl-5"><li class="lvl-6"><p>ThreadPoolTaskExecutor</p></li><li class="lvl-6"><p>ThreadPoolTaskScheduler</p></li><li class="lvl-6"><p>ConcurrentTaskExecutor</p></li><li class="lvl-6"><p>SimpleThreadPoolTaskExecutor</p></li></ul></li><li class="lvl-4"><p>SimpleAsyncTaskExecutor</p></li></ul></li></ul></blockquote><h2 id="线程池使用指南">线程池使用指南</h2><p>使用场景和建议</p><table><thead><tr><th>线程池类型</th><th>适用场景</th><th>Java 建议（21）</th></tr></thead><tbody><tr><td>FixedThreadPool</td><td>CPU 密集、控制并发</td><td>仍可用，但 I/O 场景改用虚拟线程</td></tr><tr><td>CachedThreadPool</td><td>短时突发任务</td><td>不推荐，改用虚拟线程或限流版</td></tr><tr><td>SingleThreadExecutor</td><td>串行任务</td><td>仍可用，注意队列大小</td></tr><tr><td>ScheduledThreadPool</td><td>定时任务</td><td>仍为首选</td></tr><tr><td>WorkStealingPool</td><td>分治计算</td><td>仍为首选（CPU 密集）</td></tr><tr><td><strong>VirtualThreadPerTask</strong></td><td><strong>高并发 I/O</strong></td><td><strong>Java 21+ 首选方案</strong></td></tr></tbody></table><p>总结推荐：</p><table><thead><tr><th>类型</th><th>适用场景</th><th>推荐实现方式</th><th>注意事项</th></tr></thead><tbody><tr><td>平台线程池（ThreadPoolExecutor）</td><td>CPU密集型、可控并发</td><td>自定义 ThreadPoolExecutor 或谨慎使用 Executors 工具类</td><td>控制线程数、队列类型、拒绝策略，注意关闭</td></tr><tr><td>虚拟线程池（Virtual Threads）</td><td>I/O密集型、高并发短任务</td><td><code>Executors.newVirtualThreadPerTaskExecutor()</code></td><td>适合大量阻塞任务，注意异常处理，目前为预览特性</td></tr></tbody></table><h3 id="ThreadPoolExecutor">ThreadPoolExecutor</h3><p><strong>ThreadPoolExecutor（标准线程池）</strong>，是线程池的核心实现类。可以自定义核心线程数、最大线程数、任务队列、拒绝策略等。</p><blockquote><p>通过 <code>Executors</code> 工厂方法可以快速创建几种常用配置的线程池，但是不建议生产用，如：</p><ul class="lvl-1"><li class="lvl-2"><code>newFixedThreadPool(int nThreads)</code>：固定大小的线程池。</li><li class="lvl-2"><code>newSingleThreadExecutor()</code>：单线程的线程池。</li><li class="lvl-2"><code>newCachedThreadPool()</code>：可缓存的线程池，线程数量几乎无限制，适合大量短时任务。</li><li class="lvl-2"><code>newScheduledThreadPool(int corePoolSize)</code>：支持定时及周期性任务调度。</li></ul></blockquote><h4 id="配置示例">配置示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAsync</span> <span class="comment">// 开启对异步任务的支持</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadAsyncConfigurer</span> <span class="keyword">implements</span> <span class="title class_">AsyncConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果当前运行的线程数小于corePoolSize，那么就创建线程来执行任务（执行时需要获取全局锁）。</span></span><br><span class="line"><span class="comment">     * 如果运行的线程大于或等于corePoolSize，那么就把task加入BlockQueue。</span></span><br><span class="line"><span class="comment">     * 如果创建的线程数量大于BlockQueue的最大容量，且线程小于maxPoolSize，那么创建新线程来执行该任务。</span></span><br><span class="line"><span class="comment">     * 如果创建线程导致当前运行的线程数超过maximumPoolSize，就根据饱和策略来拒绝该任务。</span></span><br><span class="line"><span class="comment">     * 如果允许关闭所有核心线程，则等待keepAliveSeconds 将关闭</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Executor <span class="title function_">getAsyncExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="comment">//通过Runtime方法来获取当前服务器cpu内核，根据cpu内核来创建核心线程数和最大线程数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">threadCount</span> <span class="operator">=</span> Runtime.getRuntime().availableProcessors();</span><br><span class="line"></span><br><span class="line">        <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">threadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">        <span class="comment">// 设置核心线程数（若使用的线程数大于核心线程且小于最大线程时，只有当队列满时才创建新的线程执行任务）</span></span><br><span class="line">        <span class="comment">// 若小于核心线程数，则创建新线程执行任务</span></span><br><span class="line">        threadPool.setCorePoolSize(threadCount + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 设置最大线程数，若线程已达到最大线程数，且队列已满，则根据设置的中止策略执行后面的任务</span></span><br><span class="line">        threadPool.setMaxPoolSize(threadCount * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 线程池所使用的缓冲队列</span></span><br><span class="line">        threadPool.setQueueCapacity(<span class="number">500</span>);</span><br><span class="line">        <span class="comment">// 是否允许线程池中corePoolSize线程空闲时间达到keepAliveTime关闭        </span></span><br><span class="line">        threadPool.setAllowCoreThreadTimeOut(<span class="literal">false</span>);</span><br><span class="line">        <span class="comment">// 等待任务在关机时完成--表明等待所有线程执行完</span></span><br><span class="line">        threadPool.setWaitForTasksToCompleteOnShutdown(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 等待时间 （默认为0，此时立即停止），并没等待xx秒后强制停止</span></span><br><span class="line">        threadPool.setAwaitTerminationSeconds(<span class="number">60</span> * <span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 线程名称前缀</span></span><br><span class="line">        threadPool.setThreadNamePrefix(<span class="string">&quot;taskExector-&quot;</span>);</span><br><span class="line">        <span class="comment">//    设置中止策略(达到最大线程数后，队列已满且无线程可用于处理后面的任务时的策略)</span></span><br><span class="line">         <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常。</span></span><br><span class="line"><span class="comment">         * ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。</span></span><br><span class="line"><span class="comment">         * ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）</span></span><br><span class="line"><span class="comment">         * ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        threadPool.setRejectedExecutionHandler(<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br><span class="line">        <span class="comment">// 初始化线程</span></span><br><span class="line">        threadPool.initialize();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// keepAliveTime  当超过核心线程数的线程执行完任务后，需要等待的时间，超过该时间则销毁</span></span><br><span class="line">        <span class="keyword">return</span> threadPool;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者以下方式</span></span><br><span class="line">    <span class="meta">@Lazy</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;executorService&quot;, destroyMethod = &quot;shutdown&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ExecutorService <span class="title function_">executorService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//核心线程数（获取硬件）：线程池创建时候初始化的线程数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">corePoolSize</span> <span class="operator">=</span> Runtime.getRuntime().availableProcessors();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(corePoolSize + <span class="number">1</span>, corePoolSize * <span class="number">2</span> + <span class="number">1</span>, <span class="number">20</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingDeque</span>&lt;&gt;(<span class="number">2000</span>), <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用案例">使用案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolExample</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">corePoolSize</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxPoolSize</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">keepAliveTime</span> <span class="operator">=</span> <span class="number">60L</span>;</span><br><span class="line">        <span class="type">TimeUnit</span> <span class="variable">timeUnit</span> <span class="operator">=</span> TimeUnit.SECONDS;</span><br><span class="line">        <span class="type">int</span> <span class="variable">queueCapacity</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用有界队列</span></span><br><span class="line">        BlockingQueue&lt;Runnable&gt; workQueue = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(queueCapacity);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可选：自定义线程工厂（给线程设置有意义的名字）</span></span><br><span class="line">        <span class="type">ThreadFactory</span> <span class="variable">threadFactory</span> <span class="operator">=</span> Executors.defaultThreadFactory(); <span class="comment">// 或自定义</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可选：自定义拒绝策略</span></span><br><span class="line">        <span class="type">RejectedExecutionHandler</span> <span class="variable">rejectionHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy(); <span class="comment">// 默认抛异常</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 ThreadPoolExecutor</span></span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">                corePoolSize,</span><br><span class="line">                maxPoolSize,</span><br><span class="line">                keepAliveTime,</span><br><span class="line">                timeUnit,</span><br><span class="line">                workQueue,</span><br><span class="line">                threadFactory,</span><br><span class="line">                rejectionHandler</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提交任务示例</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">taskId</span> <span class="operator">=</span> i;</span><br><span class="line">            executor.execute(() -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;执行任务 &quot;</span> + taskId + <span class="string">&quot;，线程：&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    Thread.currentThread().interrupt();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 优雅关闭线程池</span></span><br><span class="line">        executor.shutdown(); <span class="comment">// 不再接受新任务，等待已提交任务完成</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!executor.awaitTermination(<span class="number">60</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">                executor.shutdownNow(); <span class="comment">// 强制终止</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            executor.shutdownNow();</span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意事项">注意事项</h4><ol><li class="lvl-3"><p>不要盲目使用 <code>Executors</code> 提供的快捷方法，尤其是 <code>newCachedThreadPool()</code>，可能导致线程数无限增长。</p></li><li class="lvl-3"><p>明确任务特性（CPU密集型 or I/O密集型）来设置合理的线程数：</p><blockquote><ul class="lvl-3"><li class="lvl-2"><p>CPU密集型：线程数 ≈ CPU核心数</p></li><li class="lvl-2"><p>I/O密集型：线程数可以设高一些，如 CPU核心数 * (1 + 平均等待时间/平均计算时间)</p></li></ul><p>合理选择任务队列，比如：</p><ul class="lvl-3"><li class="lvl-2"><p>有界队列（如 ArrayBlockingQueue）可以防止资源耗尽，但可能触发拒绝策略；</p></li><li class="lvl-2"><p>无界队列（如 LinkedBlockingQueue）可能导致内存问题。</p></li></ul><p>一定要妥善处理线程池的关闭，调用 <code>shutdown()</code> 或 <code>shutdownNow()</code>，避免资源泄漏。</p></blockquote></li></ol><p>（1）<code>FixedThreadPool</code> — 固定大小线程池，无界队列</p><p><strong>适用</strong>：控制并发数，适合 CPU 密集或稳定负载，<strong>风险</strong>：任务堆积 → OOM</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生产建议:</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">4</span>, <span class="number">4</span>, <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">1000</span>), <span class="comment">// 有界队列</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br></pre></td></tr></table></figure><p>（2）<code>CachedThreadPool</code> — 弹性线程池，大量线程</p><p><strong>适用</strong>：大量短生命周期任务（如 HTTP 请求），<strong>风险</strong>：线程爆炸 → CPU/内存耗尽</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生产建议：限制最大线程数 + 监控</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">0</span>, <span class="number">200</span>, <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">SynchronousQueue</span>&lt;&gt;(),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">CustomThreadFactory</span>(<span class="string">&quot;cached-pool&quot;</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br></pre></td></tr></table></figure><p>（3）<code>SingleThreadExecutor</code> — 单线程串行池，无界队列</p><p><strong>适用</strong>：日志写入、顺序消费、串行化任务，<strong>风险</strong>：任务堆积 → OOM</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line"></span><br><span class="line"><span class="comment">//生产建议：改用有界队列 + 拒绝策略</span></span><br></pre></td></tr></table></figure><p>（4）<code>ScheduledThreadPool</code> — 定时任务池</p><p><strong>适用</strong>：定时心跳、轮询、延迟任务，<strong>注意</strong>：任务执行超时 → 后续任务延迟堆积（不会并发），未捕获异常 → 任务终止</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ScheduledExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">executor.scheduleAtFixedRate(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        heartbeat();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;心跳失败&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="number">0</span>, <span class="number">30</span>, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure><p>（5）<code>WorkStealingPool</code>（Java 8+）— 工作窃取池</p><p><strong>实现</strong>：<code>ForkJoinPool</code>，<strong>适用</strong>：递归、分治、CPU 密集型计算（如并行流底层），<strong>注意</strong>：任务应无阻塞、无状态，不适合 I/O 密集型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newWorkStealingPool();</span><br><span class="line"><span class="comment">// 或 Executors.newWorkStealingPool(4);</span></span><br></pre></td></tr></table></figure><h3 id="ForkJoinTask（并行任务）">ForkJoinTask（并行任务）</h3><ul class="lvl-0"><li class="lvl-2"><p>可递归拆分的任务（如：排序、搜索、矩阵运算、树遍历）；</p></li><li class="lvl-2"><p>CPU 密集型计算；</p></li><li class="lvl-2"><p>大量细粒度任务（任务执行时间 &gt; 调度开销）；</p></li><li class="lvl-2"><p>需要结果合并的场景（RecursiveTask）。</p></li></ul><h4 id="使用案例-2">使用案例</h4><p>使用案例：不带返回值的fork-join计算：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrintTask</span> <span class="keyword">extends</span> <span class="title class_">RecursiveAction</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">THRESHOLD</span> <span class="operator">=</span> <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> start;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> end;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PrintTask</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.start = start;</span><br><span class="line">        <span class="built_in">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (end - start &lt; THRESHOLD) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt;= end; i++) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;,i=&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">middle</span> <span class="operator">=</span> (start + end) / <span class="number">2</span>;</span><br><span class="line">            <span class="type">PrintTask</span> <span class="variable">firstTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintTask</span>(start, middle);</span><br><span class="line">            <span class="type">PrintTask</span> <span class="variable">secondTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintTask</span>(middle + <span class="number">1</span>, end);</span><br><span class="line">            invokeAll(firstTask, secondTask);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">ForkJoinPool</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ForkJoinPool</span>();</span><br><span class="line">        pool.submit(<span class="keyword">new</span> <span class="title class_">PrintTask</span>(<span class="number">1</span>,<span class="number">50</span>));</span><br><span class="line">        pool.awaitTermination(<span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line">        pool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用案例：带返回值的计算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculateTask</span> <span class="keyword">extends</span> <span class="title class_">RecursiveTask</span>&lt;Integer&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">THRESHOLD</span> <span class="operator">=</span> <span class="number">49</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> start;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> end;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CalculateTask</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.start = start;</span><br><span class="line">        <span class="built_in">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Integer <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (end - start &lt;= THRESHOLD) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt;= end; i++) &#123;</span><br><span class="line">                result += i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">middle</span> <span class="operator">=</span> (start + end) / <span class="number">2</span>;</span><br><span class="line">            <span class="type">CalculateTask</span> <span class="variable">firstTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CalculateTask</span>(start, middle);</span><br><span class="line">            <span class="type">CalculateTask</span> <span class="variable">secondTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CalculateTask</span>(middle + <span class="number">1</span>, end);</span><br><span class="line">            invokeAll(firstTask, secondTask);</span><br><span class="line">            <span class="keyword">return</span> firstTask.join() + secondTask.join();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">            result1 += i;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;循环计算 1-1000000 累加值：&quot;</span> + result1);</span><br><span class="line"></span><br><span class="line">        <span class="type">ForkJoinPool</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ForkJoinPool</span>();</span><br><span class="line">        ForkJoinTask&lt;Integer&gt; task = pool.submit(<span class="keyword">new</span> <span class="title class_">CalculateTask</span>(<span class="number">1</span>, <span class="number">1000000</span>));</span><br><span class="line">        <span class="type">int</span> <span class="variable">result2</span> <span class="operator">=</span> task.get();</span><br><span class="line">        System.out.println(<span class="string">&quot;并行计算 1-1000000 累加值：&quot;</span> + result2);</span><br><span class="line">        pool.awaitTermination(<span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line">        pool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="调优建议">调优建议</h4><ol><li class="lvl-3"><p><strong>合理设置并行度</strong>：一般 = CPU 核数；若任务有阻塞，可适当增加；</p></li><li class="lvl-3"><p><strong>任务粒度控制</strong>：太小 → 调度开销大；太大 → 无法充分利用多核；</p></li><li class="lvl-3"><p><strong>避免在任务中阻塞</strong>：如必须阻塞，使用 <code>ForkJoinPool.managedBlock(...)</code>；</p></li><li class="lvl-3"><p><strong>监控 commonPool</strong>：避免被阻塞任务拖垮整个应用；</p></li><li class="lvl-3"><p><strong>自定义 ForkJoinPool</strong>：隔离业务，避免相互影响。</p></li></ol><h4 id="注意事项-2">注意事项</h4><p>不适用场景，且在 ForkJoinTask 中执行阻塞 I/O 或 synchronized，会严重降低性能！</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>I/O 阻塞任务（会阻塞工作线程，影响窃取效率）；</p></li><li class="lvl-2"><p>任务不可拆分或拆分成本高；</p></li><li class="lvl-2"><p>任务间强依赖，无法并行。</p></li></ul></blockquote><h3 id="VirtualThreadPerTask">VirtualThreadPerTask</h3><p>虚拟线程适合高并发、I/O 密集型任务，能极大提升系统吞吐量且资源开销极小。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>虚拟线程不是由 OS 管理，而是由 JVM 调度，挂起和恢复开销极低。</p></li><li class="lvl-2"><p>每个虚拟线程占用内存极少（约 1KB~2KB），而平台线程通常需要 MB 级栈空间。</p></li><li class="lvl-2"><p>虚拟线程适合大量并发的阻塞任务（如 HTTP 请求、数据库访问等）。</p></li></ul></blockquote><h4 id="使用方式">使用方式</h4><ul class="lvl-0"><li class="lvl-2"><p>直接通过 <code>Executors.newVirtualThreadPerTaskExecutor()</code> 创建一个“每任务一个虚拟线程”的执行器。</p></li><li class="lvl-2"><p>或者使用 <code>Thread.ofVirtual().factory()</code> 构建虚拟线程工厂，再传入 <code>ThreadPoolExecutor</code>。</p></li></ul><p>使用 <code>Executors.newVirtualThreadPerTaskExecutor()</code> 可以简单地为每个任务分配一个虚拟线程，无需手动管理线程数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">var</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newVirtualThreadPerTaskExecutor()) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10_000</span>; i++) &#123;</span><br><span class="line">        executor.submit(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// 模拟 I/O：数据库查询、HTTP 调用等</span></span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;result&quot;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// 自动关闭</span></span><br></pre></td></tr></table></figure><blockquote><ul class="lvl-1"><li class="lvl-2"><p>每个任务一个虚拟线程，无池化，自动回收</p><ul class="lvl-3"><li class="lvl-4">无需调优线程池参数</li><li class="lvl-4">无队列堆积、无拒绝策略问题</li><li class="lvl-4">高吞吐、低延迟（尤其 I/O 场景）</li></ul></li></ul></blockquote><p><strong>虚拟线程 + 平台线程混合使用</strong>（高级场景）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 平台线程池处理 CPU 密集任务</span></span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">cpuPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(</span><br><span class="line">    Runtime.getRuntime().availableProcessors()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 虚拟线程处理 I/O 任务</span></span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">ioPool</span> <span class="operator">=</span> Executors.newVirtualThreadPerTaskExecutor();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组合使用</span></span><br><span class="line">ioPool.submit(() -&gt; &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> fetchDataFromNetwork(); <span class="comment">// I/O</span></span><br><span class="line">    cpuPool.submit(() -&gt; processData(data)); <span class="comment">// CPU</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="使用案例-3">使用案例</h4><p>简单的使用场景：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Web 服务（Spring Boot 3.2+ 支持虚拟线程）</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newVirtualThreadPerTaskExecutor();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/data&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CompletableFuture&lt;String&gt; <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// 模拟数据库查询（阻塞）</span></span><br><span class="line">            <span class="keyword">try</span> &#123; Thread.sleep(<span class="number">100</span>); &#125; <span class="keyword">catch</span> (Exception e) &#123;&#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;result&quot;</span>;</span><br><span class="line">        &#125;, executor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意事项-3">注意事项</h4><p>虚拟线程适合用于大量并发的、会阻塞的任务，例如网络请求、文件读写等。不适合用于计算密集型任务，因为虚拟线程仍然运行在有限的物理线程上，过多计算仍会竞争。</p><ol><li class="lvl-3"><p><strong>不适合 CPU 密集型任务</strong></p><ul class="lvl-2"><li class="lvl-5"><p>虚拟线程运行在平台线程上，CPU 密集会阻塞 Carrier 线程</p></li><li class="lvl-5"><p>应提交给 <code>ForkJoinPool</code> 或固定大小平台线程池</p></li></ul></li><li class="lvl-3"><p><strong>避免在虚拟线程中使用 <code>synchronized</code></strong></p><ul class="lvl-2"><li class="lvl-5"><p><code>synchronized</code> 会 pin 住底层平台线程，失去虚拟线程优势</p></li><li class="lvl-5"><p>改用 <code>ReentrantLock</code>、<code>StampedLock</code>、<code>Semaphore</code> 等</p></li></ul></li><li class="lvl-3"><p><strong>ThreadLocal 使用需谨慎</strong></p><ul class="lvl-2"><li class="lvl-5"><p>虚拟线程数量巨大 → ThreadLocal 内存泄漏风险</p></li><li class="lvl-5"><p>使用后及时 <code>remove()</code>，或改用 <code>ScopedValue</code>（Java 21 新增）</p></li></ul></li><li class="lvl-3"><p><strong>不要将虚拟线程放入传统线程池</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不推荐：虚拟线程放入传统线程池无意义</span></span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">pool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">pool.submit(() -&gt; Thread.startVirtualThread(task)); <span class="comment">// 多此一举</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确：直接使用虚拟线程执行器</span></span><br><span class="line">virtualExecutor.submit(task);</span><br></pre></td></tr></table></figure></li></ol><h2 id="线程池原理详解">线程池原理详解</h2><h3 id="ThreadPoolExecutor（标准常用）">ThreadPoolExecutor（标准常用）</h3><p>通过构造器设置核心参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="type">int</span> corePoolSize,      // 核心线程数</span></span><br><span class="line"><span class="params">    <span class="type">int</span> maximumPoolSize,   // 最大线程数</span></span><br><span class="line"><span class="params">    <span class="type">long</span> keepAliveTime,    // 空闲线程存活时间</span></span><br><span class="line"><span class="params">    TimeUnit unit,         // 时间单位</span></span><br><span class="line"><span class="params">    BlockingQueue&lt;Runnable&gt; workQueue, // 任务队列</span></span><br><span class="line"><span class="params">    ThreadFactory threadFactory,       // 线程工厂</span></span><br><span class="line"><span class="params">    RejectedExecutionHandler handler   // 拒绝策略</span></span><br><span class="line"><span class="params">)</span></span><br></pre></td></tr></table></figure><p><code>ThreadPoolExecutor</code> 使用一个 <code>AtomicInteger</code> 类型的字段 <code>ctl</code> 来同时表示 <strong>线程池状态</strong> 和 <strong>工作线程数量</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>高3位：线程池运行状态（runState）</p></li><li class="lvl-2"><p>低29位：工作线程数（workerCount）</p></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">RUNNING</span>    <span class="operator">=</span> -<span class="number">1</span> &lt;&lt; COUNT_BITS; <span class="comment">// 接受新任务，处理队列中任务</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SHUTDOWN</span>   <span class="operator">=</span>  <span class="number">0</span> &lt;&lt; COUNT_BITS; <span class="comment">// 不接受新任务，处理队列中任务</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">STOP</span>       <span class="operator">=</span>  <span class="number">1</span> &lt;&lt; COUNT_BITS; <span class="comment">// 不接受新任务，不处理队列任务，中断进行中任务</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TIDYING</span>    <span class="operator">=</span>  <span class="number">2</span> &lt;&lt; COUNT_BITS; <span class="comment">// 所有任务终止，workerCount=0，将调用 terminated()</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TERMINATED</span> <span class="operator">=</span>  <span class="number">3</span> &lt;&lt; COUNT_BITS; <span class="comment">// terminated() 已执行完毕</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 状态转换:</span></span><br><span class="line">RUNNING → SHUTDOWN （调用 shutdown()）</span><br><span class="line">          ↓</span><br><span class="line">        STOP （调用 shutdownNow()）</span><br><span class="line">          ↓</span><br><span class="line">       TIDYING （任务和线程都清空）</span><br><span class="line">          ↓</span><br><span class="line">     TERMINATED （terminated() 执行完毕）</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>内部定义了一个内部类 <code>Worker</code>，继承自 <code>AbstractQueuedSynchronizer（AQS）</code>，实现了简单的不可重入独占锁，用于控制线程执行任务时的状态。</p><p><strong>Worker 的作用</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>封装工作线程（Thread）；</p></li><li class="lvl-2"><p>持有第一个要执行的任务（firstTask）；</p></li><li class="lvl-2"><p>统计已完成任务数；</p></li><li class="lvl-2"><p>通过 AQS 实现任务执行时的“锁定”，避免中断正在运行的任务。</p></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继承AQS，使用CAS实现线程状态控制</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Worker</span> <span class="keyword">extends</span> <span class="title class_">AbstractQueuedSynchronizer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">/** Thread this worker is running in.  Null if factory fails. */</span></span><br><span class="line">    <span class="keyword">final</span> Thread thread;</span><br><span class="line">    <span class="comment">/** Initial task to run.  Possibly null. */</span></span><br><span class="line">    Runnable firstTask;</span><br><span class="line">    <span class="comment">/** Per-thread task counter */</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">long</span> completedTasks;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates with given first task and thread from ThreadFactory.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> firstTask the first task (null if none)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Worker(Runnable firstTask) &#123;</span><br><span class="line">        setState(-<span class="number">1</span>); <span class="comment">// inhibit interrupts until runWorker</span></span><br><span class="line">        <span class="built_in">this</span>.firstTask = firstTask;</span><br><span class="line">        <span class="built_in">this</span>.thread = getThreadFactory().newThread(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        runWorker(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通过CAS判断是否有线程在运行</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">tryAcquire</span><span class="params">(<span class="type">int</span> unused)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">            setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 释放线程</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">tryRelease</span><span class="params">(<span class="type">int</span> unused)</span> &#123;</span><br><span class="line">        setExclusiveOwnerThread(<span class="literal">null</span>);</span><br><span class="line">        setState(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span>        &#123; acquire(<span class="number">1</span>); &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">()</span>  &#123; <span class="keyword">return</span> tryAcquire(<span class="number">1</span>); &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span>      &#123; release(<span class="number">1</span>); &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isLocked</span><span class="params">()</span> &#123; <span class="keyword">return</span> getState() != <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">interruptIfStarted</span><span class="params">()</span> &#123;</span><br><span class="line">        Thread t;</span><br><span class="line">        <span class="keyword">if</span> (getState() &gt;= <span class="number">0</span> &amp;&amp; (t = thread) != <span class="literal">null</span> &amp;&amp; !t.isInterrupted()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                t.interrupt();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SecurityException ignore) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="VirtualThreadPerTask（虚拟线程）">VirtualThreadPerTask（虚拟线程）</h3><p>虚拟线程是轻量级线程，由 JVM 管理，底层使用少量平台线程（OS线程）调度大量虚拟线程。</p><table><thead><tr><th>维度</th><th>传统线程池（平台线程）</th><th>虚拟线程（Java 21+）</th></tr></thead><tbody><tr><td>线程成本</td><td>高（MB 级栈，OS 管理）</td><td>极低（KB 级，JVM 管理）</td></tr><tr><td>最大并发数</td><td>通常几百~几千</td><td>可达百万级</td></tr><tr><td>适用场景</td><td>CPU 密集型、定时任务</td><td>I/O 密集型（首选）</td></tr><tr><td>是否需要池化</td><td>必须池化复用</td><td>无需池化，按需创建（每个任务新建虚拟线程）</td></tr><tr><td>阻塞影响</td><td>阻塞 = 浪费线程</td><td>阻塞 = 自动挂起，不占平台线程</td></tr><tr><td>调优复杂度</td><td>高（队列、线程数、拒绝策略）</td><td>低（无需调优）</td></tr></tbody></table><blockquote><ul class="lvl-1"><li class="lvl-2"><p>轻量级线程，由 JVM 管理，不是 OS 线程</p></li><li class="lvl-2"><p>创建成本极低（可创建百万级）</p></li><li class="lvl-2"><p>阻塞时不阻塞底层 OS 线程（自动挂起/恢复）</p></li><li class="lvl-2"><p>适用于高并发 I/O 密集型场景</p></li></ul></blockquote><h4 id="虚拟线程的本质"><strong>虚拟线程的本质</strong></h4><p>虚拟线程是 <strong>Project Loom</strong> 引入的轻量级线程，由 JVM 而非操作系统管理：</p><ul class="lvl-0"><li class="lvl-2"><p>每个虚拟线程在 Java 堆中只是一个对象（约几百字节）；</p></li><li class="lvl-2"><p>虚拟线程映射到少量平台线程（Carrier Threads）上运行；</p></li><li class="lvl-2"><p>虚拟线程在执行阻塞操作（如 I/O、sleep、锁等待）时会自动 <strong>“卸载”（unmount）</strong>，让出底层平台线程，等可继续执行时再 <strong>“挂载”（mount）</strong> 到任意平台线程上继续执行。</p></li></ul><h4 id="虚拟线程的实现"><strong>虚拟线程的实现</strong></h4><p><code>Executors.newVirtualThreadPerTaskExecutor()</code> 返回的是一个 <code>ThreadPerTaskExecutor</code> 实例（内部类）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例化 ThreadPerTaskExecutor</span></span><br><span class="line"><span class="keyword">public</span> ThreadPerTaskExecutor <span class="title function_">newVirtualThreadPerTaskExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPerTaskExecutor</span>(Thread.ofVirtual().factory());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ThreadPerTaskExecutor 核心逻辑：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ThreadPerTaskExecutor</span> <span class="keyword">implements</span> <span class="title class_">Executor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ThreadFactory factory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ThreadPerTaskExecutor</span><span class="params">(ThreadFactory factory)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.factory = factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Runnable task)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(task);</span><br><span class="line">        factory.newThread(task).start(); <span class="comment">// 每次新建虚拟线程并启动</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并启动线程</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Runnable task)</span> &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> Thread.ofVirtual().unstarted(task);</span><br><span class="line">    thread.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul class="lvl-1"><li class="lvl-2"><p>每次 <code>execute(task)</code> → 创建一个全新的虚拟线程；</p></li><li class="lvl-2"><p>启动该线程执行任务；</p></li><li class="lvl-2"><p>任务执行完毕 → 虚拟线程自动销毁（GC 回收）；</p></li><li class="lvl-2"><p><strong>无队列、无线程池、无复用、无拒绝策略。</strong></p></li></ul></blockquote><h4 id="虚拟线程的特点"><strong>虚拟线程的特点</strong></h4><ol><li class="lvl-3"><p>创建成本极低</p><ul class="lvl-2"><li class="lvl-5">创建百万个虚拟线程内存开销仅几十 MB；</li><li class="lvl-5">对比：创建 1000 个平台线程可能就耗尽内存或 OS 线程限制。</li></ul></li><li class="lvl-3"><p><strong>阻塞不阻塞平台线程</strong></p><ul class="lvl-2"><li class="lvl-5">当虚拟线程执行 <code>socket.read()</code>, <code>Thread.sleep()</code>, <code>synchronized</code>, <code>Lock.lock()</code> 等操作时，JVM 会自动将其从 Carrier Thread 上卸载，让 Carrier Thread 去执行其他虚拟线程；</li><li class="lvl-5">当 I/O 完成或锁可用时，虚拟线程被重新调度执行；</li><li class="lvl-5"><strong>平台线程始终处于忙碌状态，无“线程饥饿”问题。</strong></li></ul></li><li class="lvl-3"><p><strong>无需线程池管理</strong></p><ul class="lvl-2"><li class="lvl-5">传统线程池是为了复用昂贵的平台线程；</li><li class="lvl-5">虚拟线程足够便宜，复用无意义，反而增加复杂度；</li><li class="lvl-5">“一个任务一个线程”变成最优实践。</li></ul></li></ol><h3 id="ForkJoinPool-（并行窃取）">ForkJoinPool （并行窃取）</h3><p>Java 7 引入的并发工具类，位于 <code>java.util.concurrent</code> 包中，专为 <strong>分治算法（Divide and Conquer）</strong> 和 <strong>并行任务处理</strong> 设计。它在 Java 8 的 <code>parallelStream()</code>、<code>CompletableFuture</code> 默认线程池中被广泛使用，是现代 Java 高性能并行计算的核心基础设施。</p><blockquote><p>其主旨是将大任务分成若干小任务，之后再并行对这些小任务进行计算，最终汇总这些任务的结果。 类似map-reduce</p></blockquote><h4 id="核心思想"><strong>核心思想</strong></h4><p>ForkJoinPool采取<strong>工作窃取算法</strong>（<strong>work-stealing</strong>），以避免工作线程由于拆分了任务之后的join等待过程。这样处于空闲的工作线程将从其他工作线程的队列中主动去窃取任务来执行。</p><ul class="lvl-0"><li class="lvl-2"><p><strong>工作窃取（Work-Stealing）</strong>：空闲线程从其他线程的任务队列“偷”任务执行，提高 CPU 利用率；</p></li><li class="lvl-2"><p><strong>轻量级任务调度</strong>：避免传统线程池中任务入队/出队的锁竞争；</p></li><li class="lvl-2"><p><strong>递归任务分解</strong>：支持任务“fork”拆分子任务，“join”合并结果。</p></li></ul><blockquote><p><strong>工作窃取</strong>：当某个线程的任务队列中没有可执行任务的时候，从其他线程的任务队列中窃取任务来执行，以充分利用工作线程的计算能力，减少线程由于获取不到任务而造成的空闲浪费。</p><p>ForkJoinPool中的所有线程都会尝试查找并执行提交到线程池中由其他活动创建的任务，如果不存在这些任务，则进行阻塞</p><p>在 ForkJoinPool 中，线程池中每个工作线程（ForkJoinWorkerThread）都对应一个任务队列（WorkQueue），工作线程优先处理来自自身队列的任务（LIFO或FIFO顺序，参数 mode 决定），然后以FIFO的顺序随机窃取其他队列中的任务。</p><p>在ForkJoinpool中，工作任务的队列都采用双端队列Deque容器。在通常使用队列都在队尾插入，在队头消费以实现FIFO。而为了实现工作窃取，会改成工作线程在工作队列上LIFO,而窃取其他线程的任务的时候，从队列头部取获取。</p></blockquote><p><strong>其中的核心类</strong>：</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><code>ForkJoinPool</code></td><td>线程池主类，管理线程、调度任务</td></tr><tr><td><code>ForkJoinWorkerThread</code></td><td>工作线程，每个线程绑定一个 WorkQueue</td></tr><tr><td><code>WorkQueue</code></td><td>双端队列（Deque），存储待执行任务，支持 LIFO（本线程取）和 FIFO（其他线程偷）</td></tr><tr><td><code>ForkJoinTask</code></td><td>任务抽象基类（类似 Runnable），支持 fork/join</td></tr><tr><td><code>RecursiveTask&lt;T&gt;</code></td><td>有返回值的递归任务（继承 ForkJoinTask）</td></tr><tr><td><code>RecursiveAction</code></td><td>无返回值的递归任务</td></tr></tbody></table><h4 id="工作窃取机制">工作窃取机制</h4><p><strong>WorkQueue 结构</strong></p><ul class="lvl-0"><li class="lvl-2"><p>每个 <code>ForkJoinWorkerThread</code> 拥有一个 <code>WorkQueue</code>；</p></li><li class="lvl-2"><p><code>WorkQueue</code> 是 <strong>双端队列（Deque）</strong>；</p></li><li class="lvl-2"><p>本线程操作队列尾部（LIFO）→ 减少竞争，利于缓存局部性；</p></li><li class="lvl-2"><p>其他线程偷任务从队列头部（FIFO）→ 避免偷“刚提交的大任务”，偷“老任务”更公平；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// runState bits: SHUTDOWN must be negative, others arbitrary powers of two</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span>  <span class="variable">RSLOCK</span>     <span class="operator">=</span> <span class="number">1</span>;        <span class="comment">//</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span>  <span class="variable">RSIGNAL</span>    <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">1</span>;    <span class="comment">//    信号</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span>  <span class="variable">STARTED</span>    <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">2</span>;    <span class="comment">//    开始</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span>  <span class="variable">STOP</span>       <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">29</span>;    <span class="comment">//    停止</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span>  <span class="variable">TERMINATED</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">30</span>;    <span class="comment">//    销毁</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span>  <span class="variable">SHUTDOWN</span>   <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">31</span>;    <span class="comment">//    关闭</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 工作队列</span></span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">WorkQueue</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">INITIAL_QUEUE_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">13</span>; <span class="comment">// 初始容量 8k</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAXIMUM_QUEUE_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">26</span>; <span class="comment">// 最大容量 64M</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> scanState;    <span class="comment">// versioned, &lt;0: inactive; odd:scanning</span></span><br><span class="line">    <span class="type">int</span> stackPred;             <span class="comment">// pool stack (ctl) predecessor</span></span><br><span class="line">    <span class="type">int</span> nsteals;               <span class="comment">// 抢断次数</span></span><br><span class="line">    <span class="type">int</span> hint;                  <span class="comment">// 随机化和窃取的索引</span></span><br><span class="line">    <span class="type">int</span> config;                <span class="comment">// pool index and mode</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> qlock;        <span class="comment">// 1: locked, &lt; 0: terminate; else 0</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> base;         <span class="comment">// index of next slot for poll</span></span><br><span class="line">    <span class="type">int</span> top;                   <span class="comment">// index of next slot for push</span></span><br><span class="line">    ForkJoinTask&lt;?&gt;[] array;   <span class="comment">// the elements (initially unallocated)</span></span><br><span class="line">    <span class="keyword">final</span> ForkJoinPool pool;   <span class="comment">// the containing pool (may be null)</span></span><br><span class="line">    <span class="keyword">final</span> ForkJoinWorkerThread owner; <span class="comment">// 工作线程，默认线程数量等于处理器的核心数</span></span><br><span class="line">    <span class="keyword">volatile</span> Thread parker;    <span class="comment">// == owner during call to park; else null</span></span><br><span class="line">    <span class="keyword">volatile</span> ForkJoinTask&lt;?&gt; currentJoin;  <span class="comment">// task being joined in awaitJoin</span></span><br><span class="line">    <span class="keyword">volatile</span> ForkJoinTask&lt;?&gt; currentSteal; <span class="comment">// mainly used by helpStealer</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>工作窃取（Work-Stealing）流程</strong></p><blockquote><p>线程A空闲<br>│<br>▼<br>随机选择一个其他线程B的 WorkQueue<br>│<br>▼<br>从线程B的 WorkQueue 头部窃取一个任务<br>│<br>▼<br>执行窃取的任务</p></blockquote><p>窃取操作是无锁或低竞争的（通过 CAS + 位运算优化），极大减少线程间同步开销。</p><h4 id="内部状态与调度">内部状态与调度</h4><ol><li class="lvl-3"><p><strong>ctl（控制状态）</strong></p><p>类似 <code>ThreadPoolExecutor</code>，<code>ForkJoinPool</code> 使用一个 <code>long</code> 类型字段 <code>ctl</code> 表示：</p><ul class="lvl-2"><li class="lvl-5"><p>低 32 位：活跃/空闲线程数；</p></li><li class="lvl-5"><p>高 32 位：用于唤醒、创建线程等信号。</p></li></ul></li><li class="lvl-3"><p><strong>任务提交方式</strong></p><p>外部队列是 FIFO，内部队列是 LIFO + 支持窃取。</p><ul class="lvl-2"><li class="lvl-5"><p><strong>外部提交（External Submissions）</strong>：如 <code>pool.submit(task)</code> → 进入 <code>Submission Queue</code>（共享队列）；</p></li><li class="lvl-5"><p><strong>内部 fork（Internal Forks）</strong>：如 <code>task.fork()</code> → 进入当前线程的 <code>WorkQueue</code> 尾部。</p></li></ul></li><li class="lvl-3"><p><strong>线程唤醒机制</strong></p><p>当任务提交到空队列或新任务到来时，<code>ForkJoinPool</code> 会尝试：</p><ul class="lvl-2"><li class="lvl-5"><p>唤醒一个空闲线程，或创建新线程（不超过最大并行度）；</p></li><li class="lvl-5"><p>使用“缓存行填充” + “伪共享避免”优化并发性能。</p></li></ul></li></ol><h4 id="fork-与-join-原理">fork() 与 join() 原理</h4><p>任务拆分+合并</p><blockquote><p>在ForkJoinPool中，任务的拆分和合并是通过继承自RecursiveAction或RecursiveTask的类来实现的。</p><p>开发者需要实现compute方法来定义任务的处理逻辑。</p><ol><li class="lvl-3"><p>当一个大任务被拆分成多个小任务时，这些小任务会被提交到ForkJoinPool中并行执行。</p></li><li class="lvl-3"><p>当所有小任务都执行完成后，它们的结果会被合并起来得到大任务的处理结果。</p></li></ol></blockquote><p><strong>fork()</strong></p><p>如果是 ForkJoinWorkerThread  推入自己的 WorkQueue（LIFO）。否则提交到公共队列（common pool 的 submission queue）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> ForkJoinTask&lt;V&gt; <span class="title function_">fork</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">    <span class="keyword">if</span> (t <span class="keyword">instanceof</span> ForkJoinWorkerThread)</span><br><span class="line">        ((ForkJoinWorkerThread) t).workQueue.push(<span class="built_in">this</span>); <span class="comment">// 推入当前线程队列尾部</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ForkJoinPool.common.externalPush(<span class="built_in">this</span>); <span class="comment">// 外部线程提交到共享队列</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>join()</strong></p><p>调用 doJoin()  如果任务未完成，当前线程会尝试帮助执行其他任务，或阻塞等待（通过 <code>ManagedBlocker</code> 或 <code>park</code>）；</p><p><strong>不会傻等，而是“帮助执行”或“窃取任务”，提高 CPU 利用率。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">join</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> s;</span><br><span class="line">    <span class="keyword">if</span> ((s = doJoin() &amp; DONE_MASK) != NORMAL)</span><br><span class="line">        reportException(s);</span><br><span class="line">    <span class="keyword">return</span> getRawResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="并行度（Parallelism）">并行度（Parallelism）</h4><p>默认并行度 = <code>Runtime.getRuntime().availableProcessors()</code>；可通过构造函数指定：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>并行度 ≠ 线程数：线程数可能略多（补偿阻塞），但活跃线程数 ≈ 并行度；</p></li><li class="lvl-2"><p>可通过 <code>ForkJoinPool.commonPool()</code> 获取全局共享池（默认并行度）。</p></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ForkJoinPool</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(Math.min(MAX_CAP, Runtime.getRuntime().availableProcessors()), <span class="comment">// CPU核心数</span></span><br><span class="line">         defaultForkJoinWorkerThreadFactory, <span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置并行度参数</span></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">ForkJoinPool</span><span class="params">(<span class="type">int</span> parallelism,                         // 并行度：最大 <span class="number">32767</span></span></span><br><span class="line"><span class="params">                     ForkJoinWorkerThreadFactory factory,    // 线程创建工厂类</span></span><br><span class="line"><span class="params">                     UncaughtExceptionHandler handler,        // 异常处理接口（因未捕获异常突然终止时执行）</span></span><br><span class="line"><span class="params">                     <span class="type">int</span> mode,                                // 异步模式：FIFO_QUEUE，LIFO_QUEUE,默认LIFO</span></span><br><span class="line"><span class="params">                     String workerNamePrefix)</span> &#123;               <span class="comment">//工作线程名称前缀</span></span><br><span class="line">    <span class="built_in">this</span>.workerNamePrefix = workerNamePrefix;</span><br><span class="line">    <span class="built_in">this</span>.factory = factory;</span><br><span class="line">    <span class="built_in">this</span>.ueh = handler;</span><br><span class="line">    <span class="built_in">this</span>.config = (parallelism &amp; SMASK) | mode;</span><br><span class="line">    <span class="type">long</span> <span class="variable">np</span> <span class="operator">=</span> (<span class="type">long</span>)(-parallelism); <span class="comment">// offset ctl counts</span></span><br><span class="line">    <span class="built_in">this</span>.ctl = ((np &lt;&lt; AC_SHIFT) &amp; AC_MASK) | ((np &lt;&lt; TC_SHIFT) &amp; TC_MASK);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认线程池工厂类</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">DefaultForkJoinWorkerThreadFactory</span></span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">ForkJoinWorkerThreadFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> ForkJoinWorkerThread <span class="title function_">newThread</span><span class="params">(ForkJoinPool pool)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ForkJoinWorkerThread</span>(pool);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="其他说明">其他说明</h4><ul class="lvl-0"><li class="lvl-2"><p>Java 8+ 中的 <code>parallelStream() </code> 默认使用 <code>ForkJoinPool.commonPool()</code>，任务被自动拆分为 <code>ForkJoinTask</code> 并并行执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.parallelStream().map(...).filter(...).collect(...); </span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p>CompletableFuture（默认异步执行器），默认使用  <code>ForkJoinPool.commonPool()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture.supplyAsync(() -&gt; task());</span><br><span class="line"><span class="comment">// 如果 commonPool 被阻塞（如大量 IO），会影响所有 parallelStream 和 CompletableFuture，可引入自定义线程池</span></span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ForkJoinPool</span>(<span class="number">8</span>);</span><br><span class="line">CompletableFuture.supplyAsync(() -&gt; task(), pool);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java多线程 </tag>
            
            <tag> ThreadPoolExecutor </tag>
            
            <tag> 线程池 </tag>
            
            <tag> Executors </tag>
            
            <tag> VirtualThreadPerTask </tag>
            
            <tag> WorkStealingPool </tag>
            
            <tag> ForkJoinTask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 系统如何搭建 Kubernetes 集群</title>
      <link href="/2025/09/84c118df8b3e4db4a1e3557e7633f8e8/"/>
      <url>/2025/09/84c118df8b3e4db4a1e3557e7633f8e8/</url>
      
        <content type="html"><![CDATA[<p>在Ubuntu24 上安装 Kubernetes 集群的详细过程，包括：节点安装调试、网络插件安装、Dashboard安装、Nginx 部署测试。</p><h2 id="基础安装">基础安装</h2><h3 id="系统环境设置">系统环境设置</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 永久关闭防火墙：</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">disable</span> --now ufw</span><br><span class="line"><span class="comment"># 设置为亚洲的上海时区</span></span><br><span class="line"><span class="built_in">sudo</span> timedatectl set-timezone Asia/Shanghai</span><br><span class="line"><span class="comment"># 重启时间同步服务</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl restart systemd-timesyncd.service</span><br><span class="line"><span class="comment"># 确保时间同步服务正常运行</span></span><br><span class="line">timedatectl status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 闭Swap分区</span></span><br><span class="line"><span class="built_in">sudo</span> swapoff -a</span><br><span class="line"><span class="built_in">sudo</span> sed -i <span class="string">&#x27;/swap/d&#x27;</span> /etc/fstab</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装policycoreutils软件包</span></span><br><span class="line"><span class="built_in">sudo</span> apt install -y policycoreutils</span><br><span class="line"><span class="comment"># 检查selinux关闭状态</span></span><br><span class="line">sestatus</span><br></pre></td></tr></table></figure><h3 id="系统参数配置">系统参数配置</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加主机名映射</span></span><br><span class="line"><span class="built_in">sudo</span> vi /etc/hosts</span><br><span class="line">    192.168.159.200 master200</span><br><span class="line">    192.168.159.201 slave201</span><br><span class="line">    192.168.159.202 slave202</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置内核参数：</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | sudo tee /etc/sysctl.d/k8s.conf</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class="line"><span class="string">net.ipv4.ip_forward = 1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> sysctl --system</span><br><span class="line"></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | sudo tee /etc/modules-load.d/k8s.conf</span></span><br><span class="line"><span class="string">overlay</span></span><br><span class="line"><span class="string">br_netfilter</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> modprobe overlay</span><br><span class="line"><span class="built_in">sudo</span> modprobe br_netfilter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置所需的 sysctl 参数，参数在重新启动后保持不变</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | sudo tee /etc/sysctl.d/k8s.conf</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables  = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="string">net.ipv4.ip_forward                 = 1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用 sysctl 参数而不重新启动</span></span><br><span class="line"><span class="built_in">sudo</span> sysctl --system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 系统变量在你的 sysctl 配置中被设置为 1：</span></span><br><span class="line">sysctl net.bridge.bridge-nf-call-iptables net.bridge.bridge-nf-call-ip6tables net.ipv4.ip_forward</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指令确认 br_netfilter 和 overlay 模块被加载：</span></span><br><span class="line">lsmod | grep br_netfilter</span><br><span class="line">lsmod | grep overlay</span><br></pre></td></tr></table></figure><h3 id="安装containerd容器">安装containerd容器</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装Containerd：</span></span><br><span class="line"><span class="built_in">sudo</span> apt install -y containerd</span><br><span class="line"><span class="comment"># curl -LO https://github.com/containerd/containerd/releases/download/v1.7.13/cri-containerd-cni-1.7.13-linux-amd64.tar.gz</span></span><br><span class="line"><span class="comment"># sudo tar -zxvf cri-containerd-cni-1.7.13-linux-amd64.tar.gz -C /</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">containerd -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成配置文件：</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /etc/containerd</span><br><span class="line">containerd config default | <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/containerd/config.toml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件： 将SystemdCgroup设置为true</span></span><br><span class="line"><span class="built_in">sudo</span> sed -i <span class="string">&#x27;s/SystemdCgroup = false/SystemdCgroup = true/&#x27;</span> /etc/containerd/config.toml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改镜像</span></span><br><span class="line"><span class="built_in">sudo</span> vi /etc/containerd/config.toml</span><br><span class="line"><span class="comment"># 修改 sandbox_image 值为 registry.aliyuncs.com/google_containers/pause:3.9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> --now containerd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl restart containerd</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> containerd</span><br><span class="line"><span class="built_in">sudo</span> systemctl status containerd</span><br><span class="line"></span><br><span class="line"><span class="comment">############################################## 使用（安装nginx）</span></span><br><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">ctr image pull docker.io/library/nginx:latest</span><br><span class="line"><span class="comment"># 列出镜像</span></span><br><span class="line">ctr image <span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 删除镜像</span></span><br><span class="line">ctr image <span class="built_in">rm</span> docker.io/library/nginx:latest</span><br><span class="line"><span class="comment"># 导入镜像</span></span><br><span class="line">ctr image import image.tar</span><br><span class="line"><span class="comment"># 导出镜像</span></span><br><span class="line">ctr image <span class="built_in">export</span> image.tar docker.io/library/nginx:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建容器</span></span><br><span class="line">ctr container create docker.io/library/nginx:latest my-nginx</span><br><span class="line"><span class="comment"># 启动容器任务</span></span><br><span class="line">ctr task start my-nginx</span><br><span class="line"><span class="comment"># 停止容器任务</span></span><br><span class="line">ctr task <span class="built_in">kill</span> my-nginx</span><br><span class="line"><span class="comment"># 删除容器</span></span><br><span class="line">ctr container <span class="built_in">rm</span> my-nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看任务列表</span></span><br><span class="line">ctr task <span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">ctr task <span class="built_in">exec</span> --<span class="built_in">tty</span> --exec-id shell my-nginx /bin/sh</span><br><span class="line"><span class="comment"># 查看容器日志</span></span><br><span class="line">ctr task logs my-nginx</span><br></pre></td></tr></table></figure><h3 id="安装Kubernetes组件">安装Kubernetes组件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 必要组件</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"><span class="built_in">sudo</span> apt-get install -y apt-transport-https ca-certificates curl gpg</span><br><span class="line"></span><br><span class="line"><span class="comment">#Kubernetes 软件包仓库的公共签名密钥</span></span><br><span class="line">curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | <span class="built_in">sudo</span> gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 Kubernetes apt 仓库</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /&#x27;</span> | <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/apt/sources.list.d/kubernetes.list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新安装</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"><span class="built_in">sudo</span> apt-get install -y kubelet kubeadm kubectl</span><br><span class="line"><span class="built_in">sudo</span> apt-mark hold kubelet kubeadm kubectl</span><br><span class="line"></span><br><span class="line">kubeadm version</span><br></pre></td></tr></table></figure><h2 id="集群安装">集群安装</h2><h3 id="初始化集群">初始化集群</h3><p>在主节点上执行这行命令将主节点的镜像拉取下来：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过 kubeadm version 确定版本号</span></span><br><span class="line"><span class="built_in">sudo</span> kubeadm config images pull \</span><br><span class="line">--image-repository=registry.aliyuncs.com/google_containers \</span><br><span class="line">--kubernetes-version=v1.28.15 \</span><br><span class="line">--cri-socket=unix:///run/containerd/containerd.sock</span><br></pre></td></tr></table></figure><p>执行集群初始化，注意IP和版本以及网络地址（network、service 可保持默认，需要与其他对应）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> kubeadm init \</span><br><span class="line">--apiserver-advertise-address=192.168.159.200 \</span><br><span class="line">--image-repository=registry.aliyuncs.com/google_containers \</span><br><span class="line">--kubernetes-version=v1.28.15 \</span><br><span class="line">--service-cidr=10.96.0.0/12 \</span><br><span class="line">--pod-network-cidr=10.244.0.0/16 \</span><br><span class="line">--cri-socket=unix:///run/containerd/containerd.sock</span><br></pre></td></tr></table></figure><p>相关参数解释：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>apiserver-advertise-address：集群广播地址，用 master 节点的内网 IP。</p></li><li class="lvl-2"><p>image-repository：由于默认拉取镜像地址 <a href="http://k8s.gcr.io">k8s.gcr.io</a> 国内无法访问，这里指定阿里云镜像仓库地址。</p></li><li class="lvl-2"><p>kubernetes-version： K8s 版本，与上面安装的软件版本一致。</p></li><li class="lvl-2"><p>service-cidr：集群 Service 网段。</p></li><li class="lvl-2"><p>pod-network-cidr：集群 Pod 网段。</p></li><li class="lvl-2"><p>cri-socket：指定 cri-socket 接口，我们这里使用 unix:///var/run/cri-dockerd.sock。</p></li></ul></blockquote><p>初始化完成后如图所示：会出现两条命令，需要记录下来。</p><img src="/imgs/image-20250719175104305.png" alt="image-20250719175104305" style="zoom:50%;" /><p>在主节点上执行以下操作：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这个命令句是  kubeadm init 执行后打印的：看上图</span></span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure><h3 id="节点安装">节点安装</h3><p>在所有工作节点上执行这行命令（注意修改为自己的token）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这个命令句是  kubeadm init 执行后打印的：看上图，初始化完后的视图</span></span><br><span class="line">kubeadm <span class="built_in">join</span> 192.168.159.200:6443 \</span><br><span class="line">--token kxzrga.d74axaspi1patvof \</span><br><span class="line">--discovery-token-ca-cert-hash sha256:062b1ad988e637ae9cbeaacf0a89a35fbb5fe582ebb55768fe0ac7c7e6f2ee45 \</span><br><span class="line">--cri-socket=unix:///run/containerd/containerd.sock</span><br></pre></td></tr></table></figure><h3 id="集群查看">集群查看</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在主节点上查看所有节点：</span></span><br><span class="line">kubectl get nodes -o wide</span><br><span class="line"></span><br><span class="line"><span class="comment"># 节点</span></span><br><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 集群和dns信息</span></span><br><span class="line">kubectl cluster-info</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20250720172436281.png" alt="image-20250720172436281"></p><h3 id="网络问题">网络问题</h3><p>couldn’t get current server API group list: Get “<a href="http://localhost:8080/api?timeout=32s">http://localhost:8080/api?timeout=32s</a>”: dial tcp 127.0.0.1:8080: connect: connection refused</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># kubectl 没有使用到证书与k8s api通信，在初始化集群的时候要想使用kubectl</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 解决方法</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export KUBECONFIG=/etc/kubernetes/kubelet.conf&quot;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h3 id="NotReady（pod）">NotReady（pod）</h3><p>某些关键的 pod 没有运行起来，可以用以下方式调查原因：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看pod运行状态</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl get pods</span><br><span class="line"><span class="built_in">sudo</span> kubectl get pod --all-namespaces</span><br><span class="line"></span><br><span class="line"><span class="comment">#kube-system的 pod 状态</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl get pod -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看pod节点详情 sudo kubectl describe pod &lt;NAMESPACE_NAME&gt; -n kube-system</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl describe pod coredns-66f779496c-fjq22 -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器日志运行日志sudo kubectl logs -f -n &lt;NAMESPACE&gt; &lt;NAMESPACE_NAME&gt;</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl logs -f -n kube-system coredns-66f779496c-fjq22</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查资源限制：检查Pod的资源配置是否合理sudo kubectl get pod &lt;pod-name&gt; -o yaml</span></span><br><span class="line"><span class="comment"># 查看resources字段，确认CPU和内存限制是否满足容器需求。</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl get pod coredns-66f779496c-fjq22 -o yaml</span><br></pre></td></tr></table></figure><p>资源查看：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查节点Taints配置</span></span><br><span class="line">kubectl describe node slave201 |grep Taint</span><br><span class="line"><span class="comment"># 如果输出中包含类似 Taints: node-role.kubernetes.io/master:NoSchedule，则说明节点设置了Taints</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证CoreDNS Toleration设置</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl edit deployment coredns -n kube-system</span><br><span class="line"><span class="comment"># 检查CoreDNS的Deployment或DaemonSet YAML文件，确保其包含正确的Toleration配置。以下是示例配置：</span></span><br><span class="line"><span class="comment"># tolerations:</span></span><br><span class="line"><span class="comment">#   - key: CriticalAddonsOnly</span></span><br><span class="line"><span class="comment">#     operator: Exists</span></span><br><span class="line"><span class="comment">#   - effect: NoSchedule</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 确认资源充足</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl describe pod coredns-66f779496c-rhnb9 -n kube-system</span><br><span class="line"><span class="comment"># 如果输出中包含Insufficient cpu，则说明节点资源不足</span></span><br></pre></td></tr></table></figure><h3 id="Pending（CoreDNS）"><a href="http://docs.kubernetes.org.cn/827.html">Pending（CoreDNS）</a></h3><blockquote><p><strong>问题</strong>：coredns Pending</p><p>3 node(s) had untolerated taint {<a href="http://node.kubernetes.io/not-ready:">node.kubernetes.io/not-ready:</a> }. preemption: 0/3 nodes are available: 3 Preemption is not helpful for scheduling.</p><img src="/imgs/image-20250719214020713.png" alt="image-20250719214020713" style="zoom:67%;" /><p><strong>解决</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#########################################  查看 CoreDNS 状态</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl get pod --all-namespaces</span><br><span class="line"><span class="built_in">sudo</span> kubectl get pod -n kube-system</span><br><span class="line"><span class="built_in">sudo</span> kubectl get pods -n kube-system | grep coredns</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 CoreDNS 服务是否正常运行：</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl get svc -n kube-system | grep kube-dns</span><br><span class="line"></span><br><span class="line"><span class="comment">#  CoreDNS 配置</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl edit configmap coredns -n kube-system</span><br><span class="line"><span class="comment"># 常见配置项说明</span></span><br><span class="line"><span class="comment"># kubernetes：解析 Kubernetes 内部域名。</span></span><br><span class="line"><span class="comment"># forward：将未匹配的域名请求转发到上游 DNS。</span></span><br><span class="line"><span class="comment"># cache：启用 DNS 缓存，提高查询效率。</span></span><br><span class="line"><span class="comment"># reload：自动加载配置变更。</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl edit deployment coredns -n kube-system</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">######################################### 解决 DNS 功能</span></span><br><span class="line"><span class="comment"># 报错内容：3 node(s) had untolerated taint &#123;env_role: &#125;. preemption: 0/3 nodes are available: 3 Preemption is not helpful for scheduling..</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl describe pod coredns-58fbbbd8c5-9f9hl -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查一下看看节点是否被打污点了: node节点变成了NoSchedule</span></span><br><span class="line">kubectl describe node master200 |grep Taint</span><br><span class="line"></span><br><span class="line"><span class="comment"># 出错：去掉污点</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl taint node master200 env_role:NoSchedule-</span><br><span class="line"><span class="built_in">sudo</span> kubectl taint node slave201 env_role:NoSchedule-</span><br><span class="line"><span class="built_in">sudo</span> kubectl taint node slave202 env_role:NoSchedule-</span><br></pre></td></tr></table></figure></blockquote><h3 id="启动">启动</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart kubelet</span><br><span class="line"><span class="built_in">sudo</span> systemctl restart containerd</span><br></pre></td></tr></table></figure><h2 id="网络插件"><a href="https://kubernetes.io/zh-cn/docs/concepts/cluster-administration/addons/">网络插件</a></h2><p>除了coredns必选外，其他三个插件选其一即可。</p><p><strong>检查 <code>kubelet</code> 是否正常</strong></p><p>CNI 插件依赖 <code>kubelet</code>，如果 <code>kubelet</code> 没有正确指定 CNI 目录，则会失败：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">journalctl -u kubelet -f | grep cni</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果看到如下报错：failed to read CNI config /etc/cni/net.d: no such file or directory</span></span><br><span class="line"><span class="comment"># 则说明 CNI 目录没有配置正确，需要重启 `kubelet`：</span></span><br><span class="line">systemctl restart kubelet</span><br><span class="line"></span><br><span class="line"><span class="comment"># Kubelet 需要在 /opt/cni/bin/ 目录找到 CNI 可执行文件：如果为空，则 CNI 没有正确安装，需要重新安装 CNI 插件。</span></span><br><span class="line"><span class="built_in">ls</span> -l /opt/cni/bin/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 /etc/cni/net.d/ 是否有 CNI 配置文件：正常情况下应有 CNI 配置文件,如果没有，请重新安装 CNI 插件。</span></span><br><span class="line"><span class="built_in">ls</span> -l /etc/cni/net.d/</span><br></pre></td></tr></table></figure><h3 id="coredns">coredns</h3><p>DNS 是使用集群插件 管理器自动启动的内置的 Kubernetes 服务。</p><blockquote><p>从 Kubernetes v1.12 开始，CoreDNS 是推荐的 DNS 服务器，取代了 kube-dns。 如果 你的集群原来使用 kube-dns，你可能部署的仍然是 kube-dns 而不是 CoreDNS。</p></blockquote><p>重新安装  <a href="https://docker.aityp.com/image/quay.io/prometheus/busybox:latest">镜像</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除Deployment和ConfigMap</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl delete deployment coredns -n kube-system \</span><br><span class="line"><span class="built_in">sudo</span> kubectl delete configmaps coredns -n kube-system</span><br><span class="line"><span class="comment"># 清理集群角色和绑定</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl delete clusterrolebindings system:coredns \</span><br><span class="line"><span class="built_in">sudo</span> kubectl delete clusterroles system:coredns</span><br><span class="line"><span class="comment"># 删除ServiceAccount</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl delete serviceaccounts coredns -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新CoreDNS配置并验证，Kubernetes会自动重新创建CoreDNS Pod</span></span><br><span class="line"><span class="comment"># sudo kubectl delete pod -l k8s-app=kube-dns -n kube-system</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载部署脚本文件：</span></span><br><span class="line">wget https://raw.githubusercontent.com/coredns/deployment/master/kubernetes/deploy.sh</span><br><span class="line"><span class="built_in">chmod</span> +x deploy.sh</span><br><span class="line">apt -y install jq</span><br><span class="line"><span class="comment"># 下载coredns.yaml.sed文件： -O coredns.yaml</span></span><br><span class="line">wget https://raw.githubusercontent.com/coredns/deployment/master/kubernetes/coredns.yaml.sed</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改clusterIP（如果需要）： 默认的clusterIP为10.96.0.10，如果需要修改，可以执行以下命令：</span></span><br><span class="line">./deploy.sh -i 10.96.0.10 &gt; coredns.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更换源 image: coredns/coredns:1.9.4  </span></span><br><span class="line"><span class="comment"># 为    image: swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/coredns/coredns:1.9.4</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl apply -f coredns.yaml</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> kubectl get pod --all-namespaces</span><br><span class="line"><span class="built_in">sudo</span> kubectl get pods -n kube-system -w</span><br><span class="line"><span class="built_in">sudo</span> kubectl get pods -n kube-system -l k8s-app=kube-dns</span><br><span class="line"></span><br><span class="line"><span class="comment">######################################### 验证 DNS 功能</span></span><br><span class="line">vim busybox.yaml</span><br><span class="line"><span class="comment"># 输入 :set paste解决编辑YML文件时，遇到自动缩进导致格式混乱的问题</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">name: busybox</span><br><span class="line">namespace: default</span><br><span class="line">spec:</span><br><span class="line">containers:</span><br><span class="line">  - name: busybox</span><br><span class="line">    image: swr.cn-north-4.myhuaweicloud.com/ddn-k8s/quay.io/prometheus/busybox</span><br><span class="line">    <span class="built_in">command</span>:</span><br><span class="line">      - <span class="built_in">sleep</span></span><br><span class="line">      - <span class="string">&quot;3600&quot;</span></span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">  restartPolicy: Always</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> kubectl apply -f busybox.yaml</span><br><span class="line"><span class="built_in">sudo</span> watch kubectl get pods busybox</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一旦该 pod 运行，您就可以在环境中执行 nslookup。如果您看到Server的内容，则 DNS 工作正常</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl <span class="built_in">exec</span> -ti busybox -- nslookup kubernetes.default</span><br></pre></td></tr></table></figure><h3 id="flannel"><a href="https://github.com/flannel-io/flannel">flannel</a></h3><p>由 CoreOS 开发的项目 Flannel，可能是最直接和最受欢迎的 CNI 插件。</p><blockquote><p>它是容器编排系统中最成熟的网络结构示例之一，旨在实现更好的容器间和主机间网络。随着 CNI 概念的兴起，Flannel CNI 插件算是早期的入门。</p><p>与其他方案相比，Flannel 相对容易安装和配置。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">curl -LO https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class="line"><span class="comment"># 修改 kube-flannel.yml </span></span><br><span class="line"><span class="comment"># 将 image: quay.io/coreos/flannel:v0.13.1-rc2 修改为 </span></span><br><span class="line"><span class="comment">#  image: swr.cn-north-4.myhuaweicloud.com/ddn-k8s/quay.io/coreos/flannel:v0.13.1-rc2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> kubectl apply -f kube-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="comment">#监控安装过程</span></span><br><span class="line"><span class="built_in">sudo</span> watch kubectl get all -o wide -n kube-flannel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看pod状态</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl get pod -n kube-flannel</span><br><span class="line"><span class="built_in">sudo</span> kubectl get pod --all-namespaces</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看服务节点状态</span></span><br><span class="line">kubectl get nodes</span><br><span class="line">kubectl get nodes -o wide</span><br></pre></td></tr></table></figure><h3 id="calico"><a href="https://docs.tigera.io/calico/latest/getting-started/kubernetes/quickstart">calico</a></h3><p>Calico 是 Kubernetes 生态系统中另一种流行的网络选择。</p><blockquote><p>虽然 Flannel 被公认为是最简单的选择，但 Calico 以其性能、灵活性而闻名。Calico 的功能更为全面，不仅提供主机和 pod 之间的网络连接，还涉及网络安全和管理。Calico CNI 插件在 CNI 框架内封装了 Calico 的功能。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装Tigera Calico操作符和自定义资源</span></span><br><span class="line">curl -LO https://raw.githubusercontent.com/projectcalico/calico/v3.30.2/manifests/tigera-operator.yaml</span><br><span class="line"><span class="comment"># 修改镜像quay.io/tigera/operator:v1.38.3 到国内 https://docker.aityp.com/</span></span><br><span class="line"><span class="comment"># image: swr.cn-north-4.myhuaweicloud.com/ddn-k8s/quay.io/tigera/operator:v1.38.3</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl apply -f tigera-operator.yaml</span><br><span class="line"><span class="built_in">sudo</span> kubectl delete -f tigera-operator.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载客户端资源文件</span></span><br><span class="line">curl -LO https://raw.githubusercontent.com/projectcalico/calico/v3.30.2/manifests/custom-resources.yaml</span><br><span class="line"><span class="comment"># 修改pod的网段地址</span></span><br><span class="line">sed -i <span class="string">&#x27;s/cidr: 192.168.0.0/cidr: 10.244.0.0/g&#x27;</span> custom-resources.yaml</span><br><span class="line"><span class="built_in">sudo</span> kubectl apply -f custom-resources.yaml</span><br><span class="line"><span class="built_in">sudo</span> kubectl delete -f custom-resources.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监控</span></span><br><span class="line"><span class="built_in">sudo</span> watch kubectl get all -o wide -n calico-system</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> kubectl describe pod csi-node-driver-ks4k9 -n calico-system</span><br><span class="line"><span class="built_in">sudo</span> kubectl get pod -n calico-system</span><br><span class="line"><span class="built_in">sudo</span> kubectl get pod --all-namespaces</span><br></pre></td></tr></table></figure><h3 id="cilium">cilium</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/cilium/cilium/v1.12/install/kubernetes/quick-install.yaml</span><br></pre></td></tr></table></figure><h2 id="Dashboard"><a href="https://github.com/kubernetes/dashboard/releases">Dashboard</a></h2><p>一定要与k8s版本对应，在官网查看支持的版本。</p><p><img src="/imgs/image-20250720163701810.png" alt="image-20250720163701810"></p><h3 id="安装插件">安装插件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看k8s 版本Version: v1.28.15</span></span><br><span class="line">kubectl version</span><br><span class="line"></span><br><span class="line">wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml</span><br><span class="line"><span class="comment"># 把recommended.yaml里访问方式调整为nodeport,是集群外部能否访问</span></span><br><span class="line"><span class="comment"># 添加 type 和 nodePort 节点</span></span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  ports:</span><br><span class="line">    - port: 443</span><br><span class="line">      targetPort: 8443</span><br><span class="line">      nodePort: 30012</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改镜像</span></span><br><span class="line"><span class="comment"># image 前加 swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/， 如下：</span></span><br><span class="line"><span class="comment"># image: swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/kubernetesui/dashboard:v2.7.0</span></span><br><span class="line"><span class="comment"># image: swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/kubernetesui/metrics-scraper:v1.0.8</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> kubectl apply -f recommended.yaml</span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl get all -n kubernetes-dashboard</span><br><span class="line"><span class="comment"># 端口信息</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl get pod,svc -n kubernetes-dashboard</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问： https://192.168.159.200:30012/</span></span><br></pre></td></tr></table></figure><h3 id="获取token：方式一">获取token：方式一</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输入 :set paste解决编辑YML文件时，遇到自动缩进导致格式混乱的问题</span></span><br><span class="line">vim admin-token.yaml</span><br><span class="line"><span class="comment"># 粘贴以下内容</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: admin</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: admin</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster-admin</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: admin</span><br><span class="line">    namespace: kubernetes-dashboard</span><br><span class="line">  </span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  name: kubernetes-dashboard-token</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/service-account.name: <span class="string">&quot;admin&quot;</span></span><br><span class="line"><span class="built_in">type</span>: kubernetes.io/service-account-token</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> kubectl apply -f admin-token.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看kubernetes-dashboard下面的secret</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl get secret -n kubernetes-dashboard</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看登录token(获取令牌)</span></span><br><span class="line"><span class="built_in">sudo</span> kubectl describe secret kubernetes-dashboard-token -n kubernetes-dashboard</span><br><span class="line"><span class="built_in">sudo</span> kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep admin-user | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="获取token：方式二">获取token：方式二</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建Service Account</span></span><br><span class="line">kubectl create serviceaccount dashboard-admin-sa -n kubernetes-dashboard</span><br><span class="line"><span class="comment"># 绑定ClusterRole</span></span><br><span class="line">kubectl create clusterrolebinding dashboard-admin-sa-binding \</span><br><span class="line">  --clusterrole=cluster-admin \</span><br><span class="line">  --serviceaccount=kubernetes-dashboard:dashboard-admin-sa</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 获取Token信息</span></span><br><span class="line">kubectl -n kubernetes-dashboard get secret $(kubectl -n kubernetes-dashboard get sa dashboard-admin-sa -o jsonpath=<span class="string">&quot;&#123;.secrets[0].name&#125;&quot;</span>) -o jsonpath=<span class="string">&quot;&#123;.data.token&#125;&quot;</span> | <span class="built_in">base64</span> --decode</span><br></pre></td></tr></table></figure><h3 id="常见问题及解答">常见问题及解答</h3><table><thead><tr><th>问题</th><th>答案</th></tr></thead><tbody><tr><td>1. 创建Service Account时提示权限不足</td><td>确保你有足够的权限在集群中创建Service Account。如果你是集群管理员，可以尝试使用<code>cluster-admin</code>权限。</td></tr><tr><td>2. 获取Token信息时提示找不到Secret</td><td>确认Service Account名称是否正确，且是否已经成功创建。可以通过<code>kubectl get sa</code>命令查看Service Account列表。</td></tr><tr><td>3. 登录时提示Token无效</td><td>确认Token信息是否正确复制，且Token是否已经过期。Token的有效期通常是24小时，过期后需要重新创建。</td></tr><tr><td>4. 无法打开Kubernetes Dashboard</td><td>确认Kubernetes Dashboard是否已经正确安装并启动。可以通过<code>kubectl get pods -n kubernetes-dashboard</code>命令查看Dashboard的运行状态。</td></tr><tr><td>5. 登录后无法看到集群资源</td><td>确认Service Account是否已经绑定到正确的ClusterRole，且ClusterRole是否拥有足够的权限。</td></tr></tbody></table><h3 id="效果展示">效果展示</h3><p><img src="/imgs/image-20250720172611409.png" alt="image-20250720172611409"></p><p><img src="/imgs/image-20250720172701262.png" alt="image-20250720172701262"></p><h2 id="部署nginx">部署nginx</h2><p><code>vim nginx-deploy.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx-deploy</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-deploy</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx-deploy</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx-deploy</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">registry.cn-shenzhen.aliyuncs.com/xiaohh-docker/nginx:1.25.4</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx-deploy</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-svc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">nodePort:</span> <span class="number">30080</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx-deploy</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br></pre></td></tr></table></figure><p>部署并查看</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> kubectl apply -f nginx-deploy.yaml</span><br><span class="line"><span class="built_in">sudo</span> kubectl get all -o wide</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问</span></span><br><span class="line">kubectl get svc</span><br><span class="line">kubectl describe service nginx-svc</span><br><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 页面  http://192.168.159.200:30080/</span></span><br></pre></td></tr></table></figure><img src="/imgs/image-20250720161241610.png" alt="image-20250720161241610" style="zoom:57%;" />]]></content>
      
      
      <categories>
          
          <category> CICD </category>
          
          <category> K8S </category>
          
      </categories>
      
      
        <tags>
            
            <tag> containerd </tag>
            
            <tag> docker-compose </tag>
            
            <tag> k8s </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> Kubernetes </tag>
            
            <tag> CoreDNS </tag>
            
            <tag> Calico </tag>
            
            <tag> Dashboard </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web 系统中 CPU 飙高的可能原因分析</title>
      <link href="/2025/09/957a28884b7b4f9b92591bf81eb174fd/"/>
      <url>/2025/09/957a28884b7b4f9b92591bf81eb174fd/</url>
      
        <content type="html"><![CDATA[<p>CPU 飙高（CPU 使用率持续超过 80%，甚至接近100%）是系统性能中最常见的问题，可能影响系统响应速度、服务可用性甚至导致宕机。</p><p>在 Java Web 系统中，若同时使用 Redis、MySQL、ES等中间件，CPU 飙升的原因可能不仅来自 Java 应用本身，也可能由这些外部组件的交互、配置或异常行为引发，需结合相关工具，进行<strong>端到端根因分析</strong>，才能精准定位和解决。。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>Java 线程堆栈（jstack/Arthas）</p></li><li class="lvl-2"><p>GC 情况（jstat）</p></li><li class="lvl-2"><p>中间件慢查询日志（Redis/MySQL/ES）</p></li><li class="lvl-2"><p>连接池/线程池监控</p></li><li class="lvl-2"><p>系统资源指标（CPU、上下文切换、I/O）</p></li></ul></blockquote><p>以下从 <strong>Java 应用层、Redis、MySQL、系统交互层</strong> 等维度深入分析 CPU 飙升的可能原因。</p><h2 id="Java-应用层">Java 应用层</h2><p>高并发、高吞吐的业务消耗较多CPU资源，如果CPU资源未达到瓶颈，属于正常业务场景。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看 cpu 占用率高的线程</span></span><br><span class="line">ps H -eo user,pid,ppid,tid,<span class="keyword">time</span>,%cpu,cmd --<span class="built_in">sort</span>=%cpu</span><br><span class="line"></span><br><span class="line"><span class="comment">#  查看占用内存最多的程序</span></span><br><span class="line">ps aux|<span class="built_in">head</span> -1;ps aux|grep -v PID|<span class="built_in">sort</span> -rn -k +4|<span class="built_in">head</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看占用cpu最多的程序</span></span><br><span class="line">ps aux|<span class="built_in">head</span> -1;ps aux|grep -v PID|<span class="built_in">sort</span> -rn -k +3|<span class="built_in">head</span></span><br></pre></td></tr></table></figure><h3 id="死循环或业务逻辑异常">死循环或业务逻辑异常</h3><ul class="lvl-0"><li class="lvl-2"><p>某个 Controller 或 Service 方法陷入死循环（如 while(true)、递归无终止）。</p></li><li class="lvl-2"><p>复杂业务逻辑（如多重嵌套循环、大 List 遍历、未分页的全表遍历）。</p></li><li class="lvl-2"><p>递归调用无终止条件或深度过大。</p></li><li class="lvl-2"><p>正则表达式回溯爆炸（如 <code>.*.*.*</code> 匹配长字符串）。</p></li></ul><h3 id="GC-频繁（Full-GC-Young-GC）">GC 频繁（Full GC / Young GC）</h3><ul class="lvl-0"><li class="lvl-2"><p>内存泄漏 → 对象堆积 → 触发 Full GC → STW + CPU 飙升。</p></li><li class="lvl-2"><p>大对象分配、缓存未清理、MyBatis 一级缓存过大等。</p></li><li class="lvl-2"><p>GC 线程本身是 CPU 密集型（尤其是 ParallelGC、G1 并发阶段）。</p></li><li class="lvl-2"><p>内存泄漏或对象创建过快，导致 Full GC 频繁触发。</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过 `jstat`、`jstack`、GC 日志分析。</span></span><br><span class="line">jstat -gcutil &lt;pid&gt; 1000  <span class="comment"># 查看 GC 频率和耗时</span></span><br><span class="line">jmap -histo:live &lt;pid&gt;    <span class="comment"># 查看对象分布</span></span><br></pre></td></tr></table></figure><h3 id="线程池配置不当-锁竞争">线程池配置不当 / 锁竞争</h3><ul class="lvl-0"><li class="lvl-2"><p>线程池过小 → 请求堆积 → 重试/超时 → CPU 忙等（瞬时大量请求涌入，线程池满负荷运行）。</p></li><li class="lvl-2"><p>synchronized / ReentrantLock 竞争激烈 → 线程 BLOCKED → 上下文切换频繁 → CPU 飙升。</p></li><li class="lvl-2"><p>数据库连接池耗尽 → 线程阻塞等待 → 后续请求堆积。</p></li><li class="lvl-2"><p>未做限流、降级或熔断机制，导致 CPU 被打满。</p></li><li class="lvl-2"><p>同步阻塞操作过多（如同步 I/O、锁竞争），线程频繁切换。</p></li></ul><blockquote><p>排查：<code>jstack</code> 查看大量 BLOCKED/WAITING 线程；</p><p>Arthas <code>thread -n 3</code> 查看最忙线程。</p></blockquote><h3 id="序列化-反序列化开销大">序列化/反序列化开销大</h3><ul class="lvl-0"><li class="lvl-2"><p>大量 JSON（如 FastJSON/Jackson）解析大对象（如 ES 返回万条数据）。</p></li><li class="lvl-2"><p>对象深度嵌套、循环引用、无缓存的反射调用。</p></li></ul><h3 id="算法复杂度高">算法复杂度高</h3><ul class="lvl-0"><li class="lvl-2"><p>使用了时间复杂度为 O(n²)、O(n³) 甚至更高的算法处理大数据量。</p></li><li class="lvl-2"><p>未优化的排序、搜索、正则匹配等操作在高频调用下拖垮 CPU。</p></li></ul><h3 id="Java实例CPU过高的排查方法">Java实例CPU过高的排查方法</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">top</span><br><span class="line">top -Hp 4042</span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%x\n&quot;</span>  14068  <span class="comment"># 36f4</span></span><br><span class="line">jstack 4042 | grep -a 36f4</span><br><span class="line">jstack 4042 &gt; /opt/temp.txt</span><br></pre></td></tr></table></figure><ol><li class="lvl-3"><p>使用<strong>top</strong>命令找到占用CPU较高的进程，并记录下 PID（进程号）</p><p><code>ps H -eo user,pid,ppid,tid,time,%cpu,cmd --sort=%cpu</code>  得到  4042</p><blockquote><p>或者根据 <code>jps -l</code> ，或 <code>ps -ef | grep java</code> 命令找出java应用程序对应的进程ID号</p></blockquote></li><li class="lvl-3"><p>根据进程ID查找其下的全部线程</p><p><code>top -Hp PID</code>  按照CPU使用率倒序排序  ， 如：<code>top -Hp 4042</code>  得到 14068</p><blockquote><p>或者用<strong>jstack</strong> 命令，直接查询线程状态</p></blockquote></li><li class="lvl-3"><p>将线程ID，转换为16进制</p><p><code>printf &quot;%x\n&quot;  PID</code>，如：<code>printf &quot;%x\n&quot;  14068</code>  得到  36f4</p></li><li class="lvl-3"><p>定位到具体的线程</p><p><code>jstack 进程ID| grep -a 16进制线程ID</code>， 如：<code>jstack 4042 | grep -a 36f4</code></p><blockquote><p>可能出错： <code>Unable to open socket file: target process not responding or HotSpot VM not loaded</code><br>原因分析：</p><ul class="lvl-3"><li class="lvl-2">jvm运行时会生成目录<code>/tmp/hsperfdata_&lt;username&gt;/&lt;pid&gt;</code>，用于存放jvm进程信息。</li><li class="lvl-2">jps、jstack等工具读取该目录下的pid文件获取连接信息。</li><li class="lvl-2">操作系统为了防止/tmp目录文件过多，有删除管理机制：每天用tmpwatch命令检查并删除 /tmp下超过240小时未访问过的文件和目录。</li></ul><p>解决方法：</p><ol><li class="lvl-3"><p>编辑配置，<code>vim /etc/cron.daily/tmpwatch</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加排除规则。使用 --exclude 参数来排除 hsperfdata 目录</span></span><br><span class="line">/usr/sbin/tmpwatch <span class="string">&quot;<span class="variable">$flags</span>&quot;</span> 240 /tmp --exclude=/tmp/hsperfdata_*    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 排除所有用户下的该目录：</span></span><br><span class="line">/usr/sbin/tmpwatch <span class="string">&quot;<span class="variable">$flags</span>&quot;</span> 240 /tmp --exclude=<span class="string">&#x27;^/tmp/hsperfdata_&#x27;</span></span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p>或者 更改 JVM 的临时目录<code>java -Djava.io.tmpdir=/data/tmpdir -jar demo.jar</code></p></li></ol></blockquote></li><li class="lvl-3"><p>将某个进程的全部堆栈信息放入临时文件</p><p><code>jstack PID &gt;  /opt/temp.txt</code> ，如：<code>jstack 4042 &gt; /opt/temp.txt</code></p></li><li class="lvl-3"><p>使用vi命令查看该文件，然后输入线程转换后的16进制数字搜索，<strong>查看线程状态</strong>，如：1006</p><p><img src="/imgs/image-20210627180320327.png" alt="image-20210627180320327"></p><blockquote><ul class="lvl-3"><li class="lvl-2"><p>线程名称：SimplePauseDetectorThread_1</p></li><li class="lvl-2"><p>线程类型：daemon</p></li><li class="lvl-2"><p>优先级prio: 5，默认是5</p></li><li class="lvl-2"><p>jvm线程id：tid=0x00007f…，jvm内部线程的唯一标识（通过java.lang.Thread.getId()获取，通常用自增方式实现。）</p></li><li class="lvl-2"><p>对应系统线程id（NativeThread ID）：nid=0xbd2，和top命令查看的线程pid对应，不过一个是10进制，一个是16进制。（通过命令：top -H -p pid，可以查看该进程的所有线程信息）</p></li><li class="lvl-2"><p>线程状态：waiting on condition / Object.wait() / waiting for monitor entry</p></li><li class="lvl-2"><p>起始栈地址：[0x00007f…]</p></li></ul><p>对于<strong>thread dump</strong>信息，主要关注的是线程的状态和其执行堆栈，堆栈信息应该逆向解读（从下往上）</p></blockquote></li></ol><h2 id="DB-层相关原因">DB 层相关原因</h2><p>在使用 MySQL 的过程中会遇到各种瓶颈问题，常见的是 IO 瓶颈，但是有时候会出现服务器 CPU 使用率超过 100%，应用页面访问慢，登录服务器负载很高。</p><h3 id="慢查询导致线程阻塞">慢查询导致线程阻塞</h3><ul class="lvl-0"><li class="lvl-2"><p>未加索引、索引失效、关联查询复杂 → SQL 执行慢 → Java 线程阻塞等待 → 请求堆积 → CPU 飙升（忙等/重试）。</p></li><li class="lvl-2"><p>MyBatis 生成 N+1 查询，循环中查数据库。</p></li></ul><blockquote><ul class="lvl-1"><li class="lvl-2"><p>MySQL <code>slow_query_log</code>、<code>SHOW PROCESSLIST</code></p></li><li class="lvl-2"><p>Arthas <code>monitor</code> 或 <code>trace</code> 拦截 Mapper 方法耗时</p></li><li class="lvl-2"><p><code>EXPLAIN</code> 分析执行计划</p></li></ul></blockquote><h3 id="连接池耗尽-事务未提交">连接池耗尽 / 事务未提交</h3><ul class="lvl-0"><li class="lvl-2"><p>Druid/HikariCP 连接池 maxActive 设置过小 → 获取连接阻塞。</p></li><li class="lvl-2"><p>事务未提交（如忘记 commit 或异常未回滚）→ 连接占用 → 后续线程阻塞。</p></li></ul><blockquote><ul class="lvl-1"><li class="lvl-2"><p>监控活跃连接数、等待线程数。</p></li><li class="lvl-2"><p>日志搜索 “wait millis”、“getConnection timeout”。</p></li></ul></blockquote><h3 id="大结果集查询-Java-处理开销">大结果集查询 + Java 处理开销</h3><ul class="lvl-0"><li class="lvl-2"><p><code>SELECT * FROM table</code> 无分页 → 返回 10 万行 → Java 端循环处理 → CPU 飙升。</p></li><li class="lvl-2"><p>ResultSet 未及时关闭 → 内存 + CPU 双重压力。</p></li></ul><h3 id="DB实例CPU过高的排查方法">DB实例CPU过高的排查方法</h3><p>SQL 问题导致 CPU 使用率过高是最常见的现象，比如 group by、order by、join 等，这些很大程度影响 SQL 执行效率，从而占用大量的系统资源。</p><ul class="lvl-0"><li class="lvl-2"><p><strong>SQL分析</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> # 查看 MySQL 进程（两种方式）</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">full</span> processlist; </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.processlist;</span><br><span class="line">     # command：执行的数据库操作类型</span><br><span class="line">     # sleep：休眠状态</span><br><span class="line">     # Query：查询状态</span><br><span class="line">     # <span class="keyword">connect</span>：连接状态</span><br><span class="line">     # <span class="type">time</span>：已经执行的时间，单位秒</span><br><span class="line">     # info：已经执行的 <span class="keyword">SQL</span></span><br><span class="line">     # state：<span class="keyword">SQL</span> 执行的状态，结果是 <span class="keyword">SQL</span> 语句整个执行状态中的一个，其中包含很多状态</span><br><span class="line"></span><br><span class="line"># 根据问题线程 id 定位 MySQL 中的 <span class="keyword">SQL</span>：</span><br><span class="line"><span class="keyword">select</span> a.user,a.host,a.db,b.thread_os_id,b.thread_id,a.id processlist_id,a.command,a.time,a.state,a.info <span class="keyword">from</span> information_schema.processlist a,performance_schema.threads b </span><br><span class="line"><span class="keyword">where</span> a.id <span class="operator">=</span> b.processlist_id <span class="keyword">and</span> b.thread_os_id<span class="operator">=</span><span class="number">32272</span>;</span><br><span class="line"></span><br><span class="line">#根据问题线程 id 查看其他监控指标：</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> performance_schema.events_statements_current </span><br><span class="line"><span class="keyword">where</span> thread_id <span class="keyword">in</span> </span><br><span class="line">    (<span class="keyword">select</span> thread_id <span class="keyword">from</span> performance_schema.threads <span class="keyword">where</span> thread_os_id <span class="operator">=</span> <span class="number">32272</span>)\G;</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p><strong>慢查询日志</strong></p><p>开启慢日志记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 开启慢日志记录</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> slow_query_log<span class="operator">=</span><span class="keyword">ON</span>;</span><br><span class="line"></span><br><span class="line"># 查看慢日志信息，日志中记录了慢<span class="keyword">SQl</span></span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;slow_query_log%&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p><strong>排查日志</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 更改排查日志为 <span class="keyword">TABLE</span> 方式，默认为 FILE 方式</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> log_output<span class="operator">=</span><span class="string">&#x27;TABLE&#x27;</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> general_log<span class="operator">=</span><span class="keyword">ON</span>;</span><br><span class="line"></span><br><span class="line"># 查询排查日志内容：</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> mysql.general_log <span class="keyword">ORDER</span> <span class="keyword">BY</span> event_time <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p><strong>其他配置</strong></p></li></ul><ol><li class="lvl-3"><p>检查 MySQL <strong>连接数</strong>当前使用是否超过限制。如果超出限制，而且之前的连接没有得到释放，那新的连接肯定会连接不到，造成连接延迟，影响效率。</p></li><li class="lvl-3"><p>MySQL 的 timeout 参数设置问题</p><ul class="lvl-2"><li class="lvl-5"><p>wait_timeout：MySQL 在关闭一个非交互的连接之前所要等待的秒数，其取值范围在 windows 系统中为 1-2147483，linux 系统中为 1-31536000，默认值 28800。</p></li><li class="lvl-5"><p>interactive_time：MySQL 在关闭一个交互的连接之前所要等待的秒数（如 mysql gui tool 中的连接），其取值范围随 wait_timeout 变动，默认值 28800。</p></li></ul><blockquote><p><strong>交互连接</strong>：即在 mysql_real_connect() 函数中使用了 CLIENT_INTERACTIVE 选项。通过 MySQL 客户端连接数据库。</p><p><strong>非交互式连接</strong>：通过 jdbc 连接数据库。</p><p>在 MySQL 默认设置下，当一个连接的空闲时间超过 8 小时后，当业务出现了高峰期，肯定会造成有太多的 TCP 连接没关闭，数据库连接数会不够用。从而会产生 CPU 占用过高，服务器告警等问题。</p><p>访问一次对数据库操作量不大，查询完数据就完成 ok 了，wait_timeout 设置在 120s 内。</p><p>在 MySQL 的官网，修改以上两个参数必须修改 interactive_timeout。如果修改 interactive_timeout，则 wait_timeout 也发生变化，如果只修改 wait_timeout，不生效。</p></blockquote></li></ol><h2 id="Redis-相关原因">Redis 相关原因</h2><p>使用不当，例如高消耗命令、热Key、大Key等，导致CPU使用率异常升高。当平均CPU使用率高于70%、连续5分钟内的CPU平均峰值使用率高于90%时。</p><p>CPU使用率高，主要分为以下三种现象：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>某个时间段</strong>，<strong>CPU使用率突然升高</strong>。高并发，数据查询操作频繁。</p></li><li class="lvl-2"><p><strong>某个数据节点的CPU使用率较高</strong>。可能是数据热点和倾斜问题。</p></li><li class="lvl-2"><p><strong>某个Proxy节点的CPU使用率较高</strong>。负载均衡问题，可能是某个IP的攻击或爬虫。</p></li></ul></blockquote><p><strong>导致CPU使用率异常的主要因素</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>高消耗命令</strong>：即时间复杂度为O(N)的命令，其中N为较大值。通常情况下，命令的时间复杂度越高，在执行时会消耗越多的资源，从而导致CPU使用率上升。例如KEYS、HGETALL或使用MGET、MSET、HMSET、HMGET一次操作大量Key等。</p><p>由于命令执行单元为单线程的特性，实例在执行高消耗命令时会引发排队导致应用响应变慢。极端情况下，甚至可能导致实例被整体阻塞，引发应用超时中断或流量跳过缓存层直接到达后端的数据库侧，引发雪崩效应。</p></li><li class="lvl-2"><p><strong>热Key</strong>：某个或某部分Key的请求访问次数显著超过其他Key时，代表此时可能产生了热Key。热Key将会消耗实例的大量CPU资源，从而影响其他Key的访问时延。并且，在集群架构中，如果热Key较为集中地分布在部分数据分片节点，可能会导致CPU使用率倾斜（个别分片的CPU使用率远超其他分片）。</p></li><li class="lvl-2"><p><strong>大Key</strong>：大Key会占用更多的内存，同时，对大Key的访问会显著增加实例的CPU负载和流量。大Key在一定程度上更容易形成热点从而造成CPU使用率高。如果大Key较为集中地分布在部分数据分片节点，可能会导致CPU使用率倾斜、带宽使用率倾斜及内存使用率倾斜。</p></li><li class="lvl-2"><p><strong>短连接</strong>：频繁地建立连接，导致实例的大量资源消耗在连接处理上。</p></li><li class="lvl-2"><p><strong>AOF</strong>：实例默认开启了AOF（append-only file），当实例处于高负载状态时，AOF的写盘行为将会导致CPU使用率升高及实例整体的响应时延增加。</p></li></ul></blockquote><h3 id="大-Key-热-Key-操作阻塞">大 Key / 热 Key 操作阻塞</h3><ul class="lvl-0"><li class="lvl-2"><p>单个 Key 数据过大（如 List 有 100 万元素），执行 <code>LRANGE</code>、<code>HGETALL</code> 等命令阻塞 Redis 单线程。</p></li><li class="lvl-2"><p>导致 Java 客户端线程长时间等待 → 超时重试 → CPU 飙升。</p></li></ul><blockquote><ul class="lvl-1"><li class="lvl-2"><p>Redis <code>SLOWLOG GET 10</code></p></li><li class="lvl-2"><p><code>redis-cli --bigkeys</code></p></li><li class="lvl-2"><p>监控 QPS、响应时间突增</p></li></ul></blockquote><h3 id="连接泄露-连接池耗尽">连接泄露 / 连接池耗尽</h3><ul class="lvl-0"><li class="lvl-2"><p>Jedis/Lettuce 连接未正确释放 → 连接池耗尽 → 获取连接阻塞 → 线程堆积 → CPU 忙等。</p></li><li class="lvl-2"><p>Lettuce 异步回调未处理异常 → 回调线程池被打满。</p></li></ul><blockquote><ul class="lvl-1"><li class="lvl-2"><p>日志中是否有 <code>Timeout waiting for connection</code>。</p></li><li class="lvl-2"><p>监控 Redis 连接数（<code>INFO clients</code>）。</p></li><li class="lvl-2"><p>Arthas <code>watch</code> 拦截 getConnection 方法。</p></li></ul></blockquote><h3 id="频繁-Pipeline-批量操作未优化">频繁 Pipeline / 批量操作未优化</h3><ul class="lvl-0"><li class="lvl-2"><p>一次 Pipeline 执行上千条命令，虽高效但若数据量大，序列化/网络开销仍高。</p></li><li class="lvl-2"><p>客户端 CPU 消耗在网络编解码或数据组装上。</p></li></ul><h3 id="Redis实例CPU过高的排查方法">Redis实例CPU过高的排查方法</h3><p>业务运行超预期，Redis开源版实例的CPU资源无法满足业务需求，可通过增加分片数、副本数。</p><h4 id="启用监控">启用监控</h4><p>可以使用metricbeat+filebeat+monitori进行监控。也可以通过redis proxy 进行代理监控。</p><h4 id="CPU使用率突然升高">CPU使用率突然升高</h4><ul class="lvl-0"><li class="lvl-2"><p><strong>排查并禁用高消耗命令</strong></p><ol><li class="lvl-5"><p>通过性能监控功能，确认CPU使用率高的具体时间段。</p></li><li class="lvl-5"><p>通过下述方法，找出高消耗的命令：</p><p>慢日志功能会记录执行超过指定时间阈值的命令。根据指定时间段和节点的慢查询语句和执行时长，可找出执行时间较长的高消耗命令。redis.conf 慢日志配置 和 查询</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行时间大于多少微秒(microsecond，1秒 = 1,000,000 微秒)的查询进行记录。</span></span><br><span class="line">slowlog-log-lower-than 1000</span><br><span class="line"><span class="comment">#最多能保存多少条日志</span></span><br><span class="line">slowlog-max-len 200</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印所有 slow log ，最大长度取决于 slowlog-max-len 选项的值</span></span><br><span class="line">SLOWLOG GET</span><br><span class="line"><span class="comment"># 只打印指定数量的 slow log日志。</span></span><br><span class="line">SLOWLOG GET number</span><br></pre></td></tr></table></figure></li><li class="lvl-5"><p>评估并禁用高风险命令和高消耗命令，例如FLUSHALL、KEYS、HGETALL等。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改配置文件redis.conf，添加如下内容，禁用命令</span></span><br><span class="line">rename-command KEYS     &quot;&quot;</span><br><span class="line">rename-command FLUSHALL &quot;&quot;</span><br><span class="line">rename-command FLUSHDB  &quot;&quot;</span><br><span class="line">rename-command CONFIG   &quot;&quot;</span><br></pre></td></tr></table></figure></li><li class="lvl-5"><p>根据业务情况，调整实例为读写分离架构，对高消耗命令或应用进行分流。</p></li></ol></li><li class="lvl-2"><p><strong>排查并优化短连接</strong></p><ol><li class="lvl-5">通过性能监控功能，确认CPU使用率高的具体时间段。</li><li class="lvl-5">在性能监控页面，查看是否有CPU使用率较高，连接数较高，但QPS（每秒访问次数）未达到预期的现象。如果有，说明可能存在短连接</li><li class="lvl-5">将短连接调整为长连接，例如使用JedisPool连接池连接。</li></ol></li><li class="lvl-2"><p><strong>关闭AOF</strong></p><p>实例默认开启了AOF（append-only file），当实例处于高负载状态时，频繁地执行AOF会一定程度上导致CPU使用率升高。</p><p>在业务允许的前提下，您可以考虑关闭持久化。另外将实例的数据备份时间设定到低访问/维护时间窗口内，降低影响。</p></li></ul><h4 id="节点CPU使用率不一致">节点CPU使用率不一致</h4><p>如果实例为<strong>集群架构</strong>或<strong>读写分离架构</strong>，实例的部分数据分片节点的CPU使用率高，而其他数据分片节点的CPU使用率较低</p><ul class="lvl-0"><li class="lvl-2"><p><strong>排查并禁用高消耗命令</strong></p><p>方法如上</p></li><li class="lvl-2"><p><strong>排查并优化热点Key</strong></p><ol><li class="lvl-5">通过性能监控功能，确认CPU使用率高的具体时间段。</li><li class="lvl-5">在实时Top Key统计的历史页面，选择CPU使用率高的数据节点，可看到CPU使用率高的时间段内有哪些热点Key。</li></ol><blockquote><ul class="lvl-3"><li class="lvl-2"><p>启用代理查询缓存功能（Proxy Query Cache），代理节点会缓存热点Key对应的请求和查询结果，当在有效时间内收到同样的请求时直接返回结果至客户端，无需和后端的数据分片交互，可改善对热点Key的发起大量读请求导致的访问倾斜。</p></li><li class="lvl-2"><p>如果热Key的产生来自于读请求，您可以将实例改造成读写分离架构来降低每个数据分片的读请求压力。</p></li></ul></blockquote></li><li class="lvl-2"><p><strong>排查并优化大Key</strong></p></li></ul><ol><li class="lvl-3"><p>Redis自带的 <code>BIGKEYS</code> 命令可以查询当前Redis中所有key的信息，对整个数据库中的键值对大小情况进行统计分析。会输出每种数据类型中最大的 big key 的信息，对于 String 类型来说，会输出最大 big key 的字节长度，对于集合类型来说，会输出最大 big key 的元素个数。<br><strong><code>BIGKEYS</code>命令会扫描整个数据库，这个命令本身会阻塞Redis</strong>，找出所有的大键，并将其以一个列表的形式返回给客户端。<br><code>redis-cli --bigkeys</code></p></li><li class="lvl-3"><p>Redis4.0之前，使用命令<code>debug object key</code>查看某个key的详细信息，包括该key的value大小等</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; DEBUG OBJECT key1</span><br><span class="line">Value at:0xb6838d20 refcount:1 encoding:raw serializedlength:9 lru:283790 lru_seconds_idle:150</span><br><span class="line"><span class="comment"># Value at:0xb6838d20：key 所在的内存地址。</span></span><br><span class="line"><span class="comment"># refcount:1：引用计数，表示该对象被引用的次数。</span></span><br><span class="line"><span class="comment"># encoding:raw：编码类型，这里是 raw ，表示这个字符串对象的编码类型。</span></span><br><span class="line"><span class="comment"># serializedlength:9：序列化后的长度。</span></span><br><span class="line"><span class="comment"># lru:283790：LRU （Least Recently Used）信息，即最近最少使用算法的相关信息，在内存淘汰策略中会用到。</span></span><br><span class="line"><span class="comment"># lru_seconds_idle:150：该 key 已空闲多久（单位为秒），也就是自从最后一次访问已经过去多少秒。</span></span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p>4.0版本及以上，更推荐使用<code>memory usag</code>命令。memory usage命令采用抽样的方式，默认抽样5个元素，所以计算是近似值，我们也可以手动指定抽样的个数。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; memory usage k1</span><br><span class="line">(<span class="built_in">integer</span>) 57<span class="comment"># 这里k1 value占用57字节内存</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; MEMORY usage hkey SAMPLES  1000</span><br><span class="line">(<span class="built_in">integer</span>) 617977753<span class="comment"># 指定SAMPLES为1000，分析hkey键内存占用617977753字节</span></span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p>通过工具 rdbtools 分析大key，可以分析静态rdb文件并生成csv格式的内存报告<br><code>rdb -c memory dump.rdb &gt; memory.csv</code></p></li></ol><p><strong>解决方法</strong></p><blockquote><ol><li class="lvl-3"><p>避免使用过大的value。如果需要存储大量的数据，可以将其拆分成多个小的value。</p></li><li class="lvl-3"><p>避免使用不必要的数据结构。例如，如果只需要存储一个字符串，就不要使用Hash或者List等数据结构。</p></li><li class="lvl-3"><p>定期清理过期的key。如果Redis中存在大量的过期key，就会导致Redis的性能下降。</p></li><li class="lvl-3"><p>对象压缩。</p></li></ol></blockquote><p>当发现存在Big Key问题时，我们需要及时采取措施来解决这个问题。下面列出几种可行的解决思路：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>分割大key</strong><br>将Big Key拆分成多个小key。这个方法比较简单，但是需要修改应用程序的代码。就像是把一个大蛋糕切成小蛋糕一样。或者尝试将Big Key转换成Redis的其他数据结构。例如，将Big Key转换成Hash，List或者Set等数据结构。</p></li><li class="lvl-2"><p><strong>对象压缩</strong><br>如果大key的产生原因主要是由于对象序列化后的体积过大，可以考虑使用压缩算法来减小对象的大小。需要在客户端使用一些压缩算法对数据进行压缩和解压缩操作，例如LZF、Snappy等。</p></li><li class="lvl-2"><p><strong>直接删除</strong><br>Redis 4.0+的版本，直接使用 <code>unlink</code>命令异步删除大key。<br>4.0以下的版本 可以考虑使用 <code>scan</code>命令，分批次删除。</p></li></ul><h2 id="系统交互与架构层面">系统交互与架构层面</h2><h3 id="缓存穿透-缓存雪崩">缓存穿透 / 缓存雪崩</h3><ul class="lvl-0"><li class="lvl-2"><p>Redis 缓存穿透 → 大量请求打到 MySQL → MySQL 压力大 → 响应慢 → Java 线程阻塞 → CPU 飙升。</p></li><li class="lvl-2"><p>缓存雪崩 → 同时失效 → 所有请求查 DB → DB 崩 → 应用重试 → CPU 打满。</p></li></ul><blockquote><p>解决方式：布隆过滤器、空值缓存、随机过期时间。</p></blockquote><h3 id="服务雪崩-级联故障">服务雪崩 / 级联故障</h3><ul class="lvl-0"><li class="lvl-2"><p>ES 查询慢 → 接口超时 → 重试 → MySQL 被拖慢 → Redis 连接池耗尽 → 整个系统线程阻塞 → CPU 飙升。</p></li></ul><blockquote><p>解决方式：熔断（Hystrix/Sentinel）、降级、超时控制。</p></blockquote><h3 id="异步任务堆积">异步任务堆积</h3><ul class="lvl-0"><li class="lvl-2"><p>使用 <code>@Async</code> 或线程池处理异步任务（如写 ES、发消息），若任务执行慢 → 任务堆积 → 线程持续运行 → CPU 飙升。</p></li></ul><blockquote><p>排查方式：监控线程池队列大小、活跃线程数。</p></blockquote><h2 id="诊断工具链">诊断工具链</h2><table><thead><tr><th>场景</th><th>工具</th></tr></thead><tbody><tr><td>Java 线程分析</td><td><code>jstack</code>、Arthas<code>thread</code>、`jstack</td></tr><tr><td>GC 分析</td><td><code>jstat -gcutil</code>、GC 日志 + GCeasy 分析</td></tr><tr><td>方法耗时</td><td>Arthas<code>trace</code>、<code>monitor</code>、<code>watch</code></td></tr><tr><td>Redis 诊断</td><td><code>redis-cli --bigkeys</code>、<code>SLOWLOG</code>、<code>INFO</code>、RedisInsight</td></tr><tr><td>MySQL 诊断</td><td><code>slow_query_log</code>、<code>SHOW PROCESSLIST</code>、<code>EXPLAIN</code>、Arthas 拦截 SQL</td></tr><tr><td>ES 诊断</td><td>Kibana Monitoring、慢日志、<code>_nodes/hot_threads</code></td></tr><tr><td>系统级</td><td><code>top -H</code>、<code>pidstat -t -p &lt;java_pid&gt;</code>、<code>perf record</code>、<code>vmstat 1</code></td></tr></tbody></table><h2 id="典型排查流程（实战步骤）">典型排查流程（实战步骤）</h2><ol><li class="lvl-3"><p><code>top</code> → 找到 Java 进程 PID，确认 CPU 高的是 Java 进程。</p></li><li class="lvl-4"><p><code>top -H -p &lt;pid&gt;</code> → 找到最耗 CPU 的线程 TID。</p></li><li class="lvl-4"><p><code>printf &quot;%x\n&quot; &lt;tid&gt;</code> → 转为 16 进制。</p></li><li class="lvl-3"><p>查看线程堆栈：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstack &lt;pid&gt; | grep &lt;hex_tid&gt; -A 30</span><br></pre></td></tr></table></figure><blockquote><ul class="lvl-3"><li class="lvl-2"><p>如果是 <code>GC task thread</code> → 查 GC。</p></li><li class="lvl-2"><p>如果是业务线程 → 看是否在循环、等锁、处理大对象。</p></li></ul></blockquote></li><li class="lvl-4"><p>检查 GC：<code>jstat -gcutil &lt;pid&gt; 1000</code> → 看 YGC/FGC 频率。</p></li><li class="lvl-4"><p>检查外部调用：</p></li></ol><ul class="lvl-0"><li class="lvl-5"><p>Arthas <code>trace com.xxx.service.* *</code> → 看哪个方法耗时高。</p></li><li class="lvl-5"><p>检查 Redis/MySQL/ES 慢日志。</p></li></ul><ol start="7"><li class="lvl-4"><p>检查连接池、线程池监控指标（如 Druid 监控页、HikariCP JMX）。</p></li><li class="lvl-4"><p>检查系统日志、业务日志是否有异常堆栈或超时记录。</p></li></ol><h2 id="优化与预防建议">优化与预防建议</h2><ul class="lvl-0"><li class="lvl-3"><p><strong>代码层</strong>：避免大循环、大对象、深递归；合理分页；异步化耗时操作。</p></li><li class="lvl-3"><p><strong>缓存层</strong>：避免大 Key；设置过期时间；使用本地缓存（Caffeine）减轻 Redis 压力。</p></li><li class="lvl-3"><p><strong>数据库层</strong>：SQL 优化 + 索引；避免 SELECT *，避免深度分页；使用连接池监控。</p></li><li class="lvl-2"><p><strong>架构层</strong>：</p><ul class="lvl-2"><li class="lvl-4">加入熔断降级（Sentinel）。</li><li class="lvl-4">设置合理的超时（Feign、RestTemplate、Redis、DB）。</li><li class="lvl-4">异步化 + 削峰填谷（MQ）。</li></ul></li><li class="lvl-2"><p><strong>监控层</strong>：</p><ul class="lvl-2"><li class="lvl-4">接入 Prometheus + Grafana + AlertManager。</li><li class="lvl-4">APM（SkyWalking/Pinpoint）监控全链路性能。</li><li class="lvl-4">日志中心（ELK）分析异常模式。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 性能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 锁竞争 </tag>
            
            <tag> CPU飙高 </tag>
            
            <tag> CPU密集型 </tag>
            
            <tag> 阻塞 </tag>
            
            <tag> 长连接 </tag>
            
            <tag> GC频繁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>缓存淘汰之 LRU 算法的几种实现方案</title>
      <link href="/2025/09/0ef61c38eadc4998bd8330a817b4f01d/"/>
      <url>/2025/09/0ef61c38eadc4998bd8330a817b4f01d/</url>
      
        <content type="html"><![CDATA[<p>LRU，全称 <strong>Least Recently Used</strong>，即<strong>最近最少使用</strong>。它是一种常用的缓存淘汰算法，也常用于虚拟内存管理。</p><p><strong>核心思想</strong>：LRU 认为“<strong>最近被使用过的数据，在将来被再次访问的概率更高；而很久没被访问的数据，将来被访问的概率也更低</strong>”。因此，当缓存空间已满，需要淘汰旧数据来存入新数据时，它会优先淘汰那个“最近最少使用”的数据。</p><h2 id="算法原理与数据结构">算法原理与数据结构</h2><p>为了实现 LRU，我们需要高效地完成两件事：</p><ol><li class="lvl-3"><p><strong>快速查找</strong>：判断一个数据是否在缓存中。</p></li><li class="lvl-3"><p><strong>快速排序</strong>：能清晰地记录数据的访问顺序（最近使用的和很久未使用的），并在需要时快速淘汰最久未使用的数据。</p></li></ol><p>单纯使用数组或链表都无法同时满足这两点。因此，LRU 通常由 <strong>哈希表（Hash Table）</strong> 和 <strong>双向链表（Doubly Linked List）</strong> 两种数据结构结合实现。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>双向链表（用于排序）</strong>：</p><ul class="lvl-3"><li class="lvl-4"><strong>作用</strong>：模拟访问顺序。链表头部是 <strong>最近使用的（Most Recently Used, MRU）</strong>，尾部是 <strong>最久未使用的（LRU）</strong>。</li><li class="lvl-4"><strong>操作</strong>：<ul class="lvl-5"><li class="lvl-6">每当一个数据被访问（<code>get</code>）或添加（<code>put</code>），它就被移动到链表头部。</li><li class="lvl-6">当需要淘汰数据时，直接删除链表尾部的节点。</li></ul></li><li class="lvl-4"><strong>为什么是双向链表？</strong> 因为删除一个节点（尤其是中间节点）需要知道其前驱节点，单链表无法在 O(1) 时间内完成。</li></ul></li><li class="lvl-2"><p><strong>哈希表（用于快速查找）</strong>：</p><ul class="lvl-3"><li class="lvl-4"><strong>作用</strong>：提供 Key 到 <strong>链表节点</strong> 的快速映射。</li><li class="lvl-4"><strong>操作</strong>：通过 Key 可以立刻找到对应的链表节点，从而在 O(1) 时间内获取值或定位节点以便将其移动到头部。</li></ul></li></ul></blockquote><h2 id="三种实现方案">三种实现方案</h2><p>可以选择链表或者是数组来构建</p><blockquote><ol><li class="lvl-3"><p><strong>数组实现</strong>，构建数组，其中每一个数据项标记一个访问时间戳，每次插入新数据项的时候，先把数组中存在的数据项的时间戳自增，并将新数据项的时间戳置为0并插入到数组中。每次访问数组中的数据项的时候，将被访问的数据项的时间戳置为0。当数组空间已满时，将时间戳最大的数据项淘汰（<em>插入、删除，时间复杂度O(n)</em>）。</p></li><li class="lvl-3"><p><strong>链表实现</strong>，每次新插入数据的时候将新数据插到链表的头部；每次缓存命中（即数据被访问），则将数据移到链表头部；那么当链表满的时候，就将链表尾部的数据丢弃（<em>访问时间复杂度为O(n)</em>）。</p></li><li class="lvl-3"><p><strong>链表+hash</strong>。当需要插入新的数据项的时候，如果新数据项在链表中存在（一般称为命中），则把该节点移到链表头部，如果不存在，则新建一个节点，放到链表头部，若缓存满了，则把链表最后一个节点删除即可。在访问数据的时候，如果数据项在链表中存在，则把该节点移到链表头部，否则返回-1。这样一来在链表尾部的节点就是最近最久未访问的数据项。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过HashMap中`key`存储Node的`key`,`value`存储Node来建立Map对Node的映射关系</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>&lt;K,V&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> K key;</span><br><span class="line">    <span class="keyword">private</span> V value;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;K,V&gt; prev;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;K,V&gt; next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote><img src="/imgs/2054920-d65a5fd3c5d276fd.png" alt="img" style="zoom: 67%;" /><blockquote><p>1、新数据插入到链表头部；<br>2、每当缓存命中（即缓存数据被访问），则将数据移到链表头部；<br>3、当链表满的时候，将链表尾部的数据丢弃。</p></blockquote><h3 id="基于数组实现">基于数组实现</h3><p>利用数组 + 时间戳 实现。避免了数组下标值的移动，但是需要遍历所有值，并比较时间戳大小。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;   基于数组实现lru   &lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 用一个数组来存储数据，给每一个数据项标记一个访问时间戳，每次插入新数据项的时候，先把数组中存在的数据项的时间戳自增，</span></span><br><span class="line"><span class="comment"> * 并将新数据项的时间戳置为0并插入到数组中。每次访问数组中的数据项的时候，将被访问的数据项的时间戳置为0</span></span><br><span class="line"><span class="comment"> * 当数组空间已满时，将时间戳最大的数据项淘汰。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Haeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> haeng2030@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/7/12 16:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrLruDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ArrLru</span> <span class="variable">arrLru</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrLru</span>(<span class="number">3</span>);</span><br><span class="line">        arrLru.add(<span class="number">11</span>);</span><br><span class="line">        arrLru.add(<span class="number">22</span>);</span><br><span class="line">        arrLru.add(<span class="number">33</span>);</span><br><span class="line">        arrLru.add(<span class="number">33</span>);</span><br><span class="line"></span><br><span class="line">        arrLru.print();</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line">        System.out.println(arrLru.get());</span><br><span class="line">        System.out.println(arrLru.get(<span class="number">22</span>));</span><br><span class="line"></span><br><span class="line">        arrLru.add(<span class="number">44</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line">        arrLru.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArrLru</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrLruNode[] datas;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> maxSize;    <span class="comment">// 数组最大大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;       <span class="comment">// 数组实际大小</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrLru</span><span class="params">(<span class="type">int</span> maxSize)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.maxSize = maxSize;</span><br><span class="line">        <span class="built_in">this</span>.datas = <span class="keyword">new</span> <span class="title class_">ArrLruNode</span>[maxSize];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Arrays.toString(datas));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> size;</span><br><span class="line">        <span class="keyword">if</span> (size == maxSize) &#123;  <span class="comment">// 满了</span></span><br><span class="line">            index = maxTS();  <span class="comment">// 替换最大遗漏的</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; datas.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (datas[i] == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (datas[i].value == value) &#123;</span><br><span class="line">                datas[i].ts = <span class="number">0</span>;</span><br><span class="line">                index = -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                datas[i].ts++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            datas[index] = <span class="keyword">new</span> <span class="title class_">ArrLruNode</span>(value);</span><br><span class="line">            size++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得最新使用的数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; datas.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (datas[i] == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (datas[i].ts == <span class="number">0</span>) &#123;</span><br><span class="line">                datas[i].ts = <span class="number">0</span>;</span><br><span class="line">                index = i;</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                datas[i].ts++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">idnex</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; datas.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (datas[i] == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (datas[i].value == value) &#123;</span><br><span class="line">                idnex = i;</span><br><span class="line">                datas[i].ts = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                datas[i].ts++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> idnex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得时间戳最大的（下标）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxTS</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">maxUserd</span> <span class="operator">=</span> datas[index].ts;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; datas.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (datas[i].ts &gt; maxUserd) &#123;</span><br><span class="line">                index = i;</span><br><span class="line">                maxUserd = datas[i].ts;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NoArgsConstructor</span></span><br><span class="line">    <span class="meta">@ToString</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ArrLruNode</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> value;       <span class="comment">// 储存数据</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">long</span> ts;      <span class="comment">// 使用时间戳</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ArrLruNode</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于链表实现">基于链表实现</h3><p>利用链表快捷的删除和插入特性实现，不涉及数据的下标移动计算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;   基于链表实现lru   &lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 每次新插入数据的时候将新数据插到链表的头部；每次缓存命中（即数据被访问），则将数据移到链表头部；那么当链表满的时候，就将链表尾部的数据丢弃。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Haeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> haeng2030@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/7/24 20:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListLru</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        LruNode&lt;String, Integer&gt; lru = <span class="keyword">new</span> <span class="title class_">LruNode</span>&lt;&gt;(<span class="number">8</span>);</span><br><span class="line">        lru.add(<span class="string">&quot;11&quot;</span>, <span class="number">11</span>);</span><br><span class="line">        lru.add(<span class="string">&quot;22&quot;</span>, <span class="number">22</span>);</span><br><span class="line">        lru.add(<span class="string">&quot;33&quot;</span>, <span class="number">33</span>);</span><br><span class="line">        lru.add(<span class="string">&quot;55&quot;</span>, <span class="number">55</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(lru.get(<span class="string">&quot;33&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------------------&quot;</span>);</span><br><span class="line">        System.out.println(lru.getHead());</span><br><span class="line">        System.out.println(lru.getTail());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        lru.print();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LruNode</span>&lt;K, V&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> ListLruNode&lt;K, V&gt; head;</span><br><span class="line">    <span class="keyword">private</span> ListLruNode&lt;K, V&gt; tail;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> maxSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LruNode</span><span class="params">(<span class="type">int</span> maxSize)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.maxSize = maxSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ListLruNode&lt;K, V&gt; <span class="title function_">getHead</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ListLruNode&lt;K, V&gt; <span class="title function_">getTail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加（当已存在key，当满了）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(K k, V v)</span> &#123;</span><br><span class="line">        ListLruNode&lt;K, V&gt; node = <span class="keyword">new</span> <span class="title class_">ListLruNode</span>&lt;&gt;(k, v);</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">            head = node;</span><br><span class="line">            head.next = tail;</span><br><span class="line">            tail = node;</span><br><span class="line">            tail.pre = head;</span><br><span class="line">            size = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListLruNode&lt;K, V&gt; parent = head;</span><br><span class="line">        <span class="keyword">if</span> (parent.key.equals(k)) &#123;</span><br><span class="line">            parent.value = v;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (parent.remove(k)) <span class="comment">// 移除已经存在的（根据key）</span></span><br><span class="line">            size--;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (size == maxSize) &#123; <span class="comment">// 满了</span></span><br><span class="line">            parent.remove();</span><br><span class="line">            size--;</span><br><span class="line">        &#125;</span><br><span class="line">        tail = parent.getTail();</span><br><span class="line"></span><br><span class="line">        node.next = parent; <span class="comment">// 插入头部</span></span><br><span class="line">        node.next.pre = node;</span><br><span class="line">        head = node;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据k获取</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(K k)</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        ListLruNode&lt;K, V&gt; parent = head;</span><br><span class="line">        <span class="keyword">if</span> (parent == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        ListLruNode&lt;K, V&gt; node = parent.get(k);</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node.key.equals(head.key))</span><br><span class="line">            <span class="keyword">return</span> node.value;</span><br><span class="line"></span><br><span class="line">        tail = parent.getTail();</span><br><span class="line"></span><br><span class="line">        node.next = head; <span class="comment">// 替换头节点</span></span><br><span class="line">        head.pre = node;</span><br><span class="line">        head = node;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        ListLruNode&lt;K, V&gt; parent = head;</span><br><span class="line">        <span class="keyword">if</span> (parent == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(parent);</span><br><span class="line"></span><br><span class="line">            parent = parent.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链表节点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListLruNode</span>&lt;K, V&gt; <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> K key;</span><br><span class="line">    <span class="keyword">public</span> V value;</span><br><span class="line">    <span class="keyword">public</span> ListLruNode&lt;K, V&gt; pre;</span><br><span class="line">    <span class="keyword">public</span> ListLruNode&lt;K, V&gt; next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListLruNode</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListLruNode</span><span class="params">(ListLruNode&lt;K, V&gt; node)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.key = node.key;</span><br><span class="line">        <span class="built_in">this</span>.value = node.value;</span><br><span class="line">        <span class="built_in">this</span>.next = node.next;</span><br><span class="line">        <span class="built_in">this</span>.pre = node.pre;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ListLruNode&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;key=&quot;</span> + key +</span><br><span class="line">                <span class="string">&quot;, value=&quot;</span> + value +</span><br><span class="line"><span class="comment">//                &quot;, pre=&quot; + pre +</span></span><br><span class="line">                <span class="string">&quot;, next=&quot;</span> + next +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> ListLruNode&lt;K, V&gt; <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line"><span class="comment">//        ListLruNode&lt;K, V&gt; node = new ListLruNode&lt;&gt;(this);</span></span><br><span class="line">        ListLruNode&lt;K, V&gt; node = (ListLruNode&lt;K, V&gt;) <span class="built_in">super</span>.clone(); <span class="comment">// 浅拷贝</span></span><br><span class="line">        node.key = <span class="built_in">this</span>.key;</span><br><span class="line">        node.value = <span class="built_in">this</span>.value;</span><br><span class="line"><span class="comment">// 深拷贝</span></span><br><span class="line">        node.pre = <span class="built_in">this</span>.pre;</span><br><span class="line">        node.next = <span class="built_in">this</span>.next;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 迭代获取</span></span><br><span class="line">    <span class="keyword">public</span> ListLruNode&lt;K, V&gt; <span class="title function_">get</span><span class="params">(K k)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.key.equals(k)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.pre != <span class="literal">null</span>)</span><br><span class="line">                <span class="built_in">this</span>.pre.next = <span class="built_in">this</span>.next; <span class="comment">// 移除该节点</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.next == <span class="literal">null</span> ? <span class="literal">null</span> : <span class="built_in">this</span>.next.get(k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得最后一个节点</span></span><br><span class="line">    <span class="keyword">public</span> ListLruNode&lt;K, V&gt; <span class="title function_">getTail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.next != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.next.getTail();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移除最后一个节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.next.remove();</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">this</span>.pre.next = <span class="literal">null</span>; <span class="comment">// 移除最后一个</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移除已存在的key节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(K k)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.key.equals(k)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.pre != <span class="literal">null</span>) &#123; <span class="comment">// 非头部</span></span><br><span class="line">                <span class="built_in">this</span>.pre.next = <span class="built_in">this</span>.next; <span class="comment">// 移除该节点</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.next != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.next.remove(k);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于链表-Hash实现">基于链表+Hash实现</h3><p>基于双链表和hash数组实现</p><p>其核心实现结合了<strong>哈希表（快速查找）<strong>和</strong>双向链表（维护访问顺序）</strong> 两种数据结构，使得所有操作都能在常数时间内完成。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>HashMap</strong>：存储 key → Node，实现 O(1) 查找。</p></li><li class="lvl-2"><p><strong>双向链表</strong>：维护访问顺序，头节点为最新访问，尾节点为最久未访问。</p></li><li class="lvl-2"><p>每次访问或插入，将节点移到头部；容量超限时，删除尾部节点。</p></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;   基于数组、链表和hash实现lru   &lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 用一个数组来存储链表节点数据，每次hash直接定位到该链表。hash冲突用双向链表。</span></span><br><span class="line"><span class="comment"> * 每次将插入、最新查找的节点添加至链表头部</span></span><br><span class="line"><span class="comment"> * 当链表数量达到最大值时，将末尾链表节点移除。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Haeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> haeng2030@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/7/12 16:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrLruMapDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 输出结果： 1，2，null，3，4</span></span><br><span class="line">        ArrLruMap&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">ArrLruMap</span>&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">        map.add(<span class="string">&quot;1&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        map.add(<span class="string">&quot;2&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(map.get(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">        map.add(<span class="string">&quot;3&quot;</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(map.get(<span class="string">&quot;2&quot;</span>));</span><br><span class="line">        map.add(<span class="string">&quot;4&quot;</span>, <span class="number">4</span>);</span><br><span class="line">        System.out.println(map.get(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">        System.out.println(map.get(<span class="string">&quot;3&quot;</span>));</span><br><span class="line">        System.out.println(map.get(<span class="string">&quot;4&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line">        map.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArrLruMap</span>&lt;K, V&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrLruMapNode&lt;K, V&gt;[] datas;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> maxSize;    <span class="comment">// 数组最大大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> size;       <span class="comment">// 数组实际大小</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrLruMap</span><span class="params">(<span class="type">int</span> maxSize)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.maxSize = maxSize;</span><br><span class="line">        <span class="built_in">this</span>.datas = <span class="keyword">new</span> <span class="title class_">ArrLruMapNode</span>[maxSize];</span><br><span class="line">        head = <span class="keyword">new</span> <span class="title class_">ArrLruMapNode</span>&lt;&gt;();</span><br><span class="line">        tail = <span class="keyword">new</span> <span class="title class_">ArrLruMapNode</span>&lt;&gt;();</span><br><span class="line">        head.after = tail;</span><br><span class="line">        tail.before = head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrLruMapNode&lt;K, V&gt; head;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrLruMapNode&lt;K, V&gt; tail;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getIndex</span><span class="params">(K key)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> (h = (key.hashCode() ^ <span class="number">32</span>) % maxSize) &lt; <span class="number">0</span> ? (h * -<span class="number">1</span>) : h;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Arrays.toString(datas));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;key must not null&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> getIndex(key);</span><br><span class="line">        ArrLruMapNode&lt;K, V&gt; data = datas[index];</span><br><span class="line">        ArrLruMapNode&lt;K, V&gt; node = <span class="keyword">new</span> <span class="title class_">ArrLruMapNode</span>&lt;&gt;(key, value);</span><br><span class="line">        ArrLruMapNode&lt;K, V&gt; temp = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (data == <span class="literal">null</span>) &#123; <span class="comment">// 新添加</span></span><br><span class="line">            datas[index] = node;</span><br><span class="line">            addToHead(node);</span><br><span class="line">            temp = node;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 更新存在的</span></span><br><span class="line">            <span class="comment">// 查找是否存在，如果不存在直接加入，否则就移除并加至头部</span></span><br><span class="line">            temp = replaceAndGet(data, key, value);</span><br><span class="line">            <span class="keyword">if</span> (temp != <span class="literal">null</span>) &#123;</span><br><span class="line">                temp.next = node;</span><br><span class="line">                node.pre = temp;</span><br><span class="line"></span><br><span class="line">                addToHead(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (temp != <span class="literal">null</span>)</span><br><span class="line">            size++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (size &gt; maxSize) &#123;  <span class="comment">// 满了</span></span><br><span class="line">            removeLast();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将节点插入到头部</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addToHead</span><span class="params">(ArrLruMapNode&lt;K, V&gt; node)</span> &#123;</span><br><span class="line">        head.after.before = node;</span><br><span class="line">        node.after = head.after;</span><br><span class="line"></span><br><span class="line">        head.after = node;</span><br><span class="line">        node.before = head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移除以前的，并加至头部</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">moveToHead</span><span class="params">(ArrLruMapNode&lt;K, V&gt; node, <span class="type">boolean</span> toHead)</span> &#123;</span><br><span class="line">        node.after.before = node.before;</span><br><span class="line">        node.before.after = node.after;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (toHead)</span><br><span class="line">            addToHead(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果存在，将已存在节点的值替换并移到头部。</span></span><br><span class="line">    <span class="comment">// 如贵不存在，返回拉链表的最后一个节点</span></span><br><span class="line">    <span class="keyword">private</span> ArrLruMapNode&lt;K, V&gt; <span class="title function_">replaceAndGet</span><span class="params">(ArrLruMapNode&lt;K, V&gt; root, K key, V value)</span> &#123;</span><br><span class="line">        ArrLruMapNode&lt;K, V&gt; node = root;</span><br><span class="line">        ArrLruMapNode&lt;K, V&gt; next = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.key.equals(key)) &#123;</span><br><span class="line"></span><br><span class="line">                node.value = value;</span><br><span class="line">                moveToHead(node, <span class="literal">true</span>);</span><br><span class="line">                next = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            next = node;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果存在，将指定的节点移至头部并返回</span></span><br><span class="line">    <span class="keyword">private</span> ArrLruMapNode&lt;K, V&gt; <span class="title function_">moveAndGet</span><span class="params">(ArrLruMapNode&lt;K, V&gt; root, K key)</span> &#123;</span><br><span class="line">        ArrLruMapNode&lt;K, V&gt; node = root;</span><br><span class="line">        ArrLruMapNode&lt;K, V&gt; temp = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.key.equals(key)) &#123;</span><br><span class="line"></span><br><span class="line">                moveToHead(node, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">                temp = node;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移除最后一个</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">removeLast</span><span class="params">()</span> &#123;</span><br><span class="line">        remove(tail.before);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移除指定节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(ArrLruMapNode&lt;K, V&gt; node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> getIndex(node.key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node.next == <span class="literal">null</span> &amp;&amp; node.pre == <span class="literal">null</span>) &#123;</span><br><span class="line">            datas[index] = <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node.next != <span class="literal">null</span>)</span><br><span class="line">                node.next.pre = node.pre;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node.pre != <span class="literal">null</span>)</span><br><span class="line">                node.pre.next = node.next;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node.pre == <span class="literal">null</span>)</span><br><span class="line">                datas[index] = node.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 移除链表中已存在的</span></span><br><span class="line">        moveToHead(node, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        size--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得指定数据</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(K key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;key must not null&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ArrLruMapNode&lt;K, V&gt; node = head.after;</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="literal">null</span> &amp;&amp; key.equals(node.key))</span><br><span class="line">            <span class="keyword">return</span> node.value;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> getIndex(key);</span><br><span class="line">        node = datas[index];</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        node = moveAndGet(node, key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node == <span class="literal">null</span> ? <span class="literal">null</span> : node.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节点</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ArrLruMapNode</span>&lt;K, V&gt; &#123;</span><br><span class="line">        K key;</span><br><span class="line">        <span class="type">int</span> hash;</span><br><span class="line">        <span class="keyword">volatile</span> V value;       <span class="comment">// 储存数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 双链表</span></span><br><span class="line">        <span class="keyword">volatile</span> ArrLruMapNode&lt;K, V&gt; before;</span><br><span class="line">        <span class="keyword">volatile</span> ArrLruMapNode&lt;K, V&gt; after;</span><br><span class="line">        <span class="comment">// hash冲突拉链链表</span></span><br><span class="line">        <span class="keyword">volatile</span> ArrLruMapNode&lt;K, V&gt; next;</span><br><span class="line">        <span class="keyword">volatile</span> ArrLruMapNode&lt;K, V&gt; pre;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ArrLruMapNode</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ArrLruMapNode</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Java-中如何应用">Java 中如何应用</h2><table><thead><tr><th>方式</th><th>优点</th><th>缺点</th><th>适用场景</th></tr></thead><tbody><tr><td>LinkedHashMap</td><td>简单、内置、代码少</td><td>非线程安全</td><td>简单单线程场景</td></tr><tr><td>手动双向链表</td><td>可控性强，适合面试</td><td>代码复杂，易出错</td><td>学习/面试/定制需求</td></tr><tr><td>Guava Cache</td><td>功能丰富，成熟稳定</td><td>性能略逊于 Caffeine</td><td>一般项目</td></tr><tr><td>Caffeine</td><td>高性能，功能强，推荐生产使用</td><td>需要引入第三方依赖</td><td>生产环境高性能缓存</td></tr></tbody></table><h3 id="使用内置类：LinkedHashMap">使用内置类：<code>LinkedHashMap</code></h3><p>最简单、最常用的方式。<code>LinkedHashMap</code> 内部维护了插入或访问顺序，通过重写 <code>removeEldestEntry()</code> 方法可以实现自动淘汰最久未使用的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LRUCache</span>&lt;K, V&gt; <span class="keyword">extends</span> <span class="title class_">LinkedHashMap</span>&lt;K, V&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LRUCache</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="comment">// accessOrder = true 表示按访问顺序排序（LRU核心）</span></span><br><span class="line">        <span class="built_in">super</span>(capacity, <span class="number">0.75f</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">removeEldestEntry</span><span class="params">(Map.Entry&lt;K, V&gt; eldest)</span> &#123;</span><br><span class="line">        <span class="comment">// 当 size &gt; capacity 时，移除最老的元素</span></span><br><span class="line">        <span class="keyword">return</span> size() &gt; capacity;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用第三方库">使用第三方库</h3><ul class="lvl-0"><li class="lvl-2"><p><strong>Guava</strong></p><p>Guava 的 <code>Cache</code> 支持多种淘汰策略（包括 LRU），还支持过期时间、加载函数等高级功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.cache.Cache;</span><br><span class="line"><span class="keyword">import</span> com.google.common.cache.CacheBuilder;</span><br><span class="line"></span><br><span class="line">Cache&lt;Integer, String&gt; cache = CacheBuilder.newBuilder()</span><br><span class="line">    .maximumSize(<span class="number">100</span>)</span><br><span class="line">    .build();</span><br><span class="line"></span><br><span class="line">cache.put(<span class="number">1</span>, <span class="string">&quot;A&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> cache.getIfPresent(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p><strong>Caffeine</strong></p><p>Caffeine 是目前 Java 生态中性能最好的本地缓存库，基于 Guava 改进，支持 Window TinyLFU 等更优算法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.github.benmanes.caffeine.cache.Cache;</span><br><span class="line"><span class="keyword">import</span> com.github.benmanes.caffeine.cache.Caffeine;</span><br><span class="line"></span><br><span class="line">Cache&lt;Integer, String&gt; cache = Caffeine.newBuilder()</span><br><span class="line">    .maximumSize(<span class="number">100</span>)</span><br><span class="line">    .build();</span><br><span class="line"></span><br><span class="line">cache.put(<span class="number">1</span>, <span class="string">&quot;A&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> cache.getIfPresent(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 缓存淘汰 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LRU </tag>
            
            <tag> 缓存淘汰 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 数据库性能全面优化方案</title>
      <link href="/2025/09/a3d9c654efa843ed8446359ed76b5d81/"/>
      <url>/2025/09/a3d9c654efa843ed8446359ed76b5d81/</url>
      
        <content type="html"><![CDATA[<p>以下是全面、实用、分层次的 MySQL 性能优化解决方案，以及相关原理。</p><p>以 MySQL 5.7 为例说明。</p><h2 id="常用的优化方案">常用的优化方案</h2><h3 id="SQL-语句优化（最直接有效）">SQL 语句优化（最直接有效）</h3><ol><li class="lvl-3"><p><strong>避免全量查询</strong></p><p>避免查询多余的数据，尤其是敏感和 text 类型数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 不推荐</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 推荐：只查询需要的字段</span></span><br><span class="line"><span class="keyword">SELECT</span> id, name, email <span class="keyword">FROM</span> users;</span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p><strong>使用 EXPLAIN 分析执行计划</strong></p><p>分析 SQL 执行情况，以及索引利用率和连表查询性能等。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 关注：`type`（是否全表扫描）、`key`（是否用索引）、`rows`（扫描行数）、`Extra`（是否用临时表/文件排序）</span></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> user_id <span class="operator">=</span> <span class="number">100</span>;</span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p><strong>避免在 WHERE 中对字段进行函数操作或计算</strong></p><p>低版本 MySQL 不支持函数索引，会导致索引失效。MySQL8 有所改善。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 索引失效</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> <span class="keyword">YEAR</span>(created_at) <span class="operator">=</span> <span class="number">2024</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 改写为范围查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> created_at <span class="operator">&gt;=</span> <span class="string">&#x27;2024-01-01&#x27;</span> <span class="keyword">AND</span> created_at <span class="operator">&lt;</span> <span class="string">&#x27;2025-01-01&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p><strong>避免使用 OR</strong></p><p>会导致索引失效，MySQL8 有所改善。可改写为 UNION 或 IN，或其他字段添加索引。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 可能导致索引失效</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;Alice&#x27;</span> <span class="keyword">OR</span> age <span class="operator">=</span> <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 改用 UNION（如果字段都有索引）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;Alice&#x27;</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> age <span class="operator">=</span> <span class="number">25</span>;</span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p><strong>使用 LIMIT 分页优化</strong>（避免 OFFSET 大偏移）</p><p>涉及&quot;深度分页&quot;问题，可参照  <a href="https://hangline.github.io/2025/09/05/b35492bf2a96482e86fe1e77b2bc7812/">海量数据的深度分页查询解决方案</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 慢（深度分页）：OFFSET 100000</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> orders <span class="keyword">ORDER</span> <span class="keyword">BY</span> id LIMIT <span class="number">100000</span>, <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 优化：记住上一页最大ID</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> id <span class="operator">&gt;</span> <span class="number">100000</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> id LIMIT <span class="number">20</span>;</span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p><strong>避免复杂 CASE WHEN / IF 判断</strong>（尤其在 WHERE 或 JOIN 中）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 性能差：</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> orders</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">CASE</span> </span><br><span class="line">        <span class="keyword">WHEN</span> status <span class="operator">=</span> <span class="string">&#x27;paid&#x27;</span> <span class="keyword">AND</span> amount <span class="operator">&gt;</span> <span class="number">100</span> <span class="keyword">THEN</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">WHEN</span> status <span class="operator">=</span> <span class="string">&#x27;pending&#x27;</span> <span class="keyword">AND</span> created_at <span class="operator">&gt;</span> NOW() <span class="operator">-</span> <span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">DAY</span> <span class="keyword">THEN</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">ELSE</span> <span class="number">0</span> </span><br><span class="line">      <span class="keyword">END</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-------------------------------------------------------</span></span><br><span class="line"><span class="comment">-- 改写为逻辑表达式：</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> orders</span><br><span class="line"><span class="keyword">WHERE</span> (status <span class="operator">=</span> <span class="string">&#x27;paid&#x27;</span> <span class="keyword">AND</span> amount <span class="operator">&gt;</span> <span class="number">100</span>)</span><br><span class="line">   <span class="keyword">OR</span> (status <span class="operator">=</span> <span class="string">&#x27;pending&#x27;</span> <span class="keyword">AND</span> created_at <span class="operator">&gt;</span> NOW() <span class="operator">-</span> <span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">DAY</span>);</span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p><strong>避免高频的统计计算和字符截取</strong></p><p>如果某些计算是高频使用的，可以<strong>在写入时计算好并存储</strong>。或者定时或实时建立统计表（按天、按月）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 每次查询都计算：</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(create_time), <span class="keyword">MONTH</span>(create_time), <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> orders</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">YEAR</span>(create_time), <span class="keyword">MONTH</span>(create_time);</span><br><span class="line"></span><br><span class="line"><span class="comment">---------------------------预计算 + 冗余字段（空间换时间）-------------------------------------</span></span><br><span class="line"><span class="comment">-- 建表时或通过触发器/应用层写入</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> orders <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> order_year_month <span class="type">INT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询时直接使用</span></span><br><span class="line"><span class="keyword">SELECT</span> order_year_month, <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> orders</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> order_year_month;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 对该字段加索引</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_order_ym <span class="keyword">ON</span> orders(order_year_month);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 使用生成列：MySQL 支持虚拟列或存储列，自动计算并可加索引</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> orders </span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">COLUMN</span> order_year_month <span class="type">INT</span> </span><br><span class="line">GENERATED ALWAYS <span class="keyword">AS</span> (<span class="keyword">YEAR</span>(create_time) <span class="operator">*</span> <span class="number">100</span> <span class="operator">+</span> <span class="keyword">MONTH</span>(create_time)) STORED;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_order_ym <span class="keyword">ON</span> orders(order_year_month);</span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p><strong>使用临时表 / 中间表预处理复杂逻辑</strong></p><p>可分步优化、避免单条 SQL 过于复杂。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Step 1: 预处理中间结果到临时表</span></span><br><span class="line"><span class="keyword">CREATE</span> TEMPORARY <span class="keyword">TABLE</span> temp_filtered_orders <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> id, user_id, amount, </span><br><span class="line">       <span class="keyword">CASE</span> <span class="keyword">WHEN</span> amount <span class="operator">&gt;</span> <span class="number">100</span> <span class="keyword">THEN</span> <span class="string">&#x27;high&#x27;</span> <span class="keyword">ELSE</span> <span class="string">&#x27;low&#x27;</span> <span class="keyword">END</span> <span class="keyword">AS</span> level</span><br><span class="line"><span class="keyword">FROM</span> orders </span><br><span class="line"><span class="keyword">WHERE</span> create_time <span class="operator">&gt;=</span> <span class="string">&#x27;2024-01-01&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Step 2: 对临时表加索引（可选）</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_temp_user <span class="keyword">ON</span> temp_filtered_orders(user_id);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Step 3: 基于临时表做后续 JOIN / GROUP / 统计</span></span><br><span class="line"><span class="keyword">SELECT</span> u.name, t.level, <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> temp_filtered_orders t</span><br><span class="line"><span class="keyword">JOIN</span> users u <span class="keyword">ON</span> t.user_id <span class="operator">=</span> u.id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> u.name, t.level;</span><br></pre></td></tr></table></figure></li></ol><h3 id="索引优化（性能提升关键）">索引优化（性能提升关键）</h3><p><strong>不适合建立索引的列</strong></p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>tinyint 或 用以标致类型的int列。比如用以保存性别，选择性过大，最小都是超过25%了，因此没有设置索引的必要。</p></li><li class="lvl-2"><p>更新频繁的字段。</p></li><li class="lvl-2"><p>不会出现在where子句中的字段。</p></li><li class="lvl-2"><p>数据可能为null或空或0的字段</p></li><li class="lvl-2"><p>存储占用过大的，如：text，json</p></li></ul></blockquote><p><strong>适合建立索引的列</strong></p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>字段离散度越高，越适合选作索引的关键字。如主键和唯一字段（主键索引自动创建）。</p></li><li class="lvl-2"><p>很少更新的字段（因为也会牵连更新索引）。</p></li><li class="lvl-2"><p>占用存储空间少的字段。</p></li><li class="lvl-2"><p>存储空间固定的字段。</p></li><li class="lvl-2"><p>Where子句中经常使用的字段，分组字段、排序字段和多表连接字段（外键索引自动创建）。</p></li><li class="lvl-2"><p>尽量使用联合索引（前缀）</p></li></ul></blockquote><ol><li class="lvl-3"><p><strong>为常用 WHERE、JOIN、ORDER BY 字段建索引</strong></p><p>索引建立的规则需要遵守以上，否则可能适得其反，会被优化器所优化。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_user_email <span class="keyword">ON</span> users(email);</span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_order_user_status <span class="keyword">ON</span> orders(user_id, status);</span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p><strong>使用复合索引</strong>（联合索引），注意最左前缀原则</p><p>优先考虑使用联合索引，尤其是有类型状态的字段。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询条件 WHERE a=? AND b=? → 建立 (a, b)</span></span><br><span class="line"><span class="comment">-- 查询条件 WHERE b=? AND a=? → 同样可用 (a, b)，MySQL 会自动优化顺序（优化器）</span></span><br><span class="line"><span class="comment">-- 查询条件 WHERE b=? → 无法使用 (a, b) 索引，MySQL8 中有所优化，可能会用到</span></span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p><strong>避免过多索引</strong>（写操作变慢，空间占用大）</p><p>一般单表索引不超过 5 个，根据查询频率和区分度选择，优先使用联合索引</p></li><li class="lvl-3"><p><strong>使用覆盖索引</strong>（Covering Index）避免回表</p><p>尽量将查询字段都包含在索引中。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 如果索引包含 SELECT 所有字段，无需回表查主键</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_covering <span class="keyword">ON</span> orders(user_id, status, amount);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> user_id, status, amount <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> user_id <span class="operator">=</span> <span class="number">100</span>; <span class="comment">-- 走覆盖索引</span></span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p><strong>定期分析和重建索引</strong>（碎片整理）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ANALYZE <span class="keyword">TABLE</span> orders;  <span class="comment">-- 更新统计信息</span></span><br><span class="line">OPTIMIZE <span class="keyword">TABLE</span> orders; <span class="comment">-- 重建表和索引（锁表，谨慎使用）</span></span><br><span class="line"><span class="comment">-- 或使用在线工具：pt-online-schema-change / gh-ost</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="表结构与设计优化（思想习惯）">表结构与设计优化（思想习惯）</h3><ol><li class="lvl-3"><p><strong>选择合适的数据类型</strong></p><blockquote><ul class="lvl-3"><li class="lvl-2">使用 <code>TINYINT</code> 代替 <code>INT</code> 存布尔值</li><li class="lvl-2">使用 <code>VARCHAR(N)</code> 而不是 <code>TEXT</code>（如果长度可控）</li><li class="lvl-2">使用 <code>DATETIME</code> 而不是字符串存时间</li><li class="lvl-2">使用 <code>UNSIGNED</code> 无符号整数扩大范围</li></ul></blockquote></li><li class="lvl-3"><p><strong>避免 NULL，设置默认值</strong></p><p>NULL 会增加判断复杂度，索引效率略低，且可能存在歧义性。</p></li><li class="lvl-3"><p><strong>拆分大字段或大表</strong>（垂直/水平分表）</p><p>对于半结构化 JSON 大数据，可以选择存储在非关系型数据库中。</p><blockquote><ul class="lvl-3"><li class="lvl-2"><p>TEXT/BLOB 字段可拆到扩展表</p></li><li class="lvl-2"><p>历史数据归档（如 orders → orders_2024, orders_2023）</p></li></ul></blockquote></li><li class="lvl-3"><p><strong>使用合适存储引擎</strong></p><p>只有插入和查询的 日志类数据，可以使用 MyISAM 引擎</p><blockquote><ul class="lvl-3"><li class="lvl-2"><p>一般用 <strong>InnoDB</strong>（支持事务、行锁、外键）</p></li><li class="lvl-2"><p>读多写少且无事务可用 MyISAM（已基本淘汰）</p></li></ul></blockquote></li></ol><h3 id="MySQL-配置参数优化（底层原理）">MySQL 配置参数优化（底层原理）</h3><p>MySQL的<code>innodb_flush_method</code>参数控制着innodb数据文件及redo log的打开、刷写模式</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>redo log 物理日志</strong>（保证持久性），记录的是数据页的物理修改，而不是某一行或某几行修改，它用来恢复提交后的物理数据页(只能恢复到最后一次提交的位置)。</p></li><li class="lvl-2"><p><strong>undo 逻辑日志</strong> （保证原子性），用来回滚行记录到某个版本，根据每行记录进行记录。</p></li></ul></blockquote><h4 id="缓冲池（最重要）">缓冲池（最重要）</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">innodb_buffer_pool_size</span> = <span class="number">70</span>%-<span class="number">80</span>% of total RAM （专用数据库服务器）</span><br></pre></td></tr></table></figure><p>Buffer Pool 大小，会影响缓存命中率</p><blockquote><ol><li class="lvl-3"><p>在事务执行过程中，所有对数据页的修改都会先生成 redo log 记录，并写入 log buffer；在事务提交时，根据配置决定是否将 log buffer 中的日志刷入磁盘上的 redo log 文件（ib_logfile）。</p></li><li class="lvl-3"><p>事务执行期间，数据页的修改是在 Buffer Pool 中的“脏页”上直接进行的；事务提交时，并不会立即将这些脏页写回磁盘，而是标记为“可刷盘”，由后台线程（如 checkpoint、LRU flusher）异步写入。</p></li></ol></blockquote><h4 id="日志与刷盘策略（平衡性能与安全）">日志与刷盘策略（平衡性能与安全）</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安全（默认），设为2可提速（小概率丢数据）</span></span><br><span class="line"><span class="attr">innodb_flush_log_at_trx_commit</span> = <span class="number">1</span></span><br><span class="line"><span class="comment"># 安全，设为0或N可提速</span></span><br><span class="line"><span class="attr">sync_binlog</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>这两个参数是控制MySQL 磁盘写入策略以及数据安全性的关键参数：</p><blockquote><p>InnoDB默认开启内部的XA事务（基于redo log和undo log），采用日志先行的策略。</p><p>在未开启binlog的情况下，数据变更（增，删，改）会在内存中操作，并将事务顺序写入到redo log中，这时就会认为事务已经完成，响应事务提交成功。然后在以下参数设置条件下，才将内存中数据刷新合并到磁盘中。</p><p>在持久化到磁盘的过程中，如果服务器宕机等导致内存中数据丢失，该数据就会丢失。这种丢失是可以通过 recovery 重做日志，找回数据的。</p><p>缓存刷新的参数： <code>innodb_flush_log_at_trx_commit</code>（刷新方式）   <code>innodb_flush_log_at_timeout</code>（刷新频率）</p><ul class="lvl-1"><li class="lvl-2"><p><strong>innodb_flush_log_at_trx_commit=1</strong>（默认），每次事务提交，把log buffer刷到文件系统中去，并且调用文件系统的“flush”操作将缓存刷新到磁盘（如果底层硬件提供的IOPS比较差，MySQL并发会由于硬件IO而无法提升）。</p></li><li class="lvl-2"><p><strong>innodb_flush_log_at_trx_commit=0</strong>，每隔一秒，把log buffer刷到文件系统，并且调用文件系统的“flush”将缓存刷新到磁盘（可能丢失1秒的事务数据）。</p></li><li class="lvl-2"><p><strong>innodb_flush_log_at_trx_commit=2</strong>（推荐），每次事务提交，把log buffer刷到文件系统，但每隔一秒调用文件系统的“flush”将缓存刷新到磁盘（如果只是MySQL数据库挂掉了，由于文件系统没有问题，那么对应的事务数据并没有丢失。如果操作系统挂掉或重启，可能丢失1秒的事务数据）</p></li></ul></blockquote><p><strong>sync_binlog</strong></p><blockquote><p>sync_binlog 的默认值是0，像操作系统刷其他文件的机制一样，MySQL不会同步到磁盘中而是依赖操作系统来刷新binary log。</p><p>当sync_binlog =N (N&gt;0) ，MySQL 在每写 N次 二进制日志binary log时，会使用fdatasync()函数将它的写二进制日志binary log同步到磁盘中去。</p><p><mark>注:</mark>  如果启用了autocommit，那么每一个语句statement就会有一次写操作；否则每个事务对应一个写操作。</p></blockquote><h4 id="脏页控制（数据页）">脏页控制（数据页）</h4><p>把内存中被修改过，跟磁盘中的数据页不一致的数据页称为脏页</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 告知磁盘 I/O 能力：默认 200，SSD 建议 1000~5000</span></span><br><span class="line"><span class="attr">innodb_io_capacity</span>=<span class="number">2000</span></span><br><span class="line"><span class="comment"># 控制突发刷盘能力：默认 2000，可设为 io_capacity 的 2~5 倍</span></span><br><span class="line"><span class="attr">innodb_io_capacity_max</span>=<span class="number">3000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 脏页比例软上限：默认 75%（5.7）或 90%（8.0），建议 70~85%</span></span><br><span class="line"><span class="attr">innodb_max_dirty_pages_pct</span>=<span class="number">80</span></span><br><span class="line"><span class="comment"># 脏页刷盘起始水位：默认 0，建议设为 10~20，避免突增抖动</span></span><br><span class="line"><span class="attr">innodb_max_dirty_pages_pct_lwm</span>=<span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自适应刷盘：默认 ON，推荐保持开启</span></span><br><span class="line"><span class="attr">innodb_adaptive_flushing</span>=<span class="literal">ON</span></span><br><span class="line"><span class="comment"># 监控刷盘延迟：越大表示刷盘越滞后，应 &lt; 70% of redo log size</span></span><br><span class="line">Innodb_checkpoint_age=</span><br></pre></td></tr></table></figure><blockquote><ul class="lvl-1"><li class="lvl-2"><p><code>innodb_io_capacity</code> 参数用于告诉 InnoDB 存储引擎底层磁盘设备的 I/O 能力（单位：IOPS），InnoDB 会据此控制后台线程（如 Page Cleaner）每秒刷脏页的数量，从而避免过度消耗 I/O 资源或刷盘不足。 该参数值设置过小，会导致 InnoDB 低估磁盘 I/O 能力，从而限制后台刷脏页的速度，使得脏页积累速度超过刷盘速度，最终引发 Redo Log 空间不足、Checkpoint 延迟、写入阻塞等问题。</p></li><li class="lvl-2"><p><code>innodb_max_dirty_pages_pct</code> 是 Buffer Pool 中脏页比例的“软上限”，默认值在 MySQL 5.6+ 是 75%，在 MySQL 8.0 中默认是 90%。当脏页比例达到或超过该值时，InnoDB 会主动加大刷盘力度，但不会完全禁止新脏页产生。</p></li><li class="lvl-2"><p>InnoDB 内部会根据当前脏页比例 M，结合 <code>innodb_max_dirty_pages_pct</code> 和 <code>innodb_max_dirty_pages_pct_lwm</code>（低水位线，默认 0），通过一个内部算法（非公开公式）计算出一个“刷盘压力因子”，用于动态调节 Page Cleaner 线程的刷盘速度。这个因子影响每秒刷多少页，但不是简单的 0~100 百分比映射。</p></li><li class="lvl-2"><p>页比例是监控指标，不是配置参数。通过查询 <code>Innodb_buffer_pool_pages_dirty / Innodb_buffer_pool_pages_total</code> 来监控当前脏页比例，但不能“通过它去设置”任何参数 —— 设置上限应使用 <code>innodb_max_dirty_pages_pct</code>。</p></li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 监控指标：</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;Innodb_buffer_pool_pages_dirty&#x27;</span>;</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;Innodb_checkpoint_age&#x27;</span>;</span><br><span class="line"><span class="comment">-- checkpoint_age 越大，说明刷盘越滞后</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看当前脏页比例</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    VARIABLE_VALUE <span class="keyword">AS</span> dirty_pages </span><br><span class="line"><span class="keyword">FROM</span> information_schema.GLOBAL_STATUS </span><br><span class="line"><span class="keyword">WHERE</span> VARIABLE_NAME <span class="operator">=</span> <span class="string">&#x27;Innodb_buffer_pool_pages_dirty&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    VARIABLE_VALUE <span class="keyword">AS</span> total_pages </span><br><span class="line"><span class="keyword">FROM</span> information_schema.GLOBAL_STATUS </span><br><span class="line"><span class="keyword">WHERE</span> VARIABLE_NAME <span class="operator">=</span> <span class="string">&#x27;Innodb_buffer_pool_pages_total&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 计算比例</span></span><br><span class="line"><span class="keyword">SELECT</span> ROUND(</span><br><span class="line">    (dirty_pages <span class="operator">/</span> total_pages) <span class="operator">*</span> <span class="number">100</span>, <span class="number">2</span></span><br><span class="line">) <span class="keyword">AS</span> dirty_pct</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">        (<span class="keyword">SELECT</span> VARIABLE_VALUE <span class="keyword">FROM</span> information_schema.GLOBAL_STATUS <span class="keyword">WHERE</span> VARIABLE_NAME <span class="operator">=</span> <span class="string">&#x27;Innodb_buffer_pool_pages_dirty&#x27;</span>) <span class="keyword">AS</span> dirty_pages,</span><br><span class="line">        (<span class="keyword">SELECT</span> VARIABLE_VALUE <span class="keyword">FROM</span> information_schema.GLOBAL_STATUS <span class="keyword">WHERE</span> VARIABLE_NAME <span class="operator">=</span> <span class="string">&#x27;Innodb_buffer_pool_pages_total&#x27;</span>) <span class="keyword">AS</span> total_pages</span><br><span class="line">) t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;Innodb_buffer_pool_pages_%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>脏页刷盘触发的条件：</p><table><thead><tr><th>触发条件</th><th>是否字段</th><th>是否阻塞用户线程</th><th>说明</th></tr></thead><tbody><tr><td>Checkpoint 推进</td><td>是</td><td>否（异步）</td><td>最主要机制，由 redo log 空间或脏页比例驱动</td></tr><tr><td>Buffer Pool 满（LRU淘汰）</td><td>是</td><td>是（可能等待）</td><td>高并发写 + 缓冲池小 → 性能瓶颈</td></tr><tr><td>脏页比例超阈值</td><td>是</td><td>否（异步）</td><td>由<code>innodb_max_dirty_pages_pct</code>控制</td></tr><tr><td>Page Cleaner 定时任务</td><td>是</td><td>否</td><td>每秒后台刷脏，受 I/O capacity 控制</td></tr><tr><td>实例关闭（SHUTDOWN）</td><td>是</td><td>是（阻塞）</td><td>Sharp Checkpoint，刷所有脏页</td></tr><tr><td>手动命令（FLUSH/OPTIMIZE）</td><td>否</td><td>是</td><td>运维操作，谨慎执行</td></tr><tr><td>Redo Log 空间不足</td><td>是</td><td>可能阻塞写入</td><td>强制推进 checkpoint，刷对应脏页</td></tr></tbody></table><blockquote><p>mysql <strong>连坐机制</strong>：如果要刷盘的脏页相邻的数据页恰好也是脏页，就一起写入磁盘，如果邻居的邻居也是如此。</p><p>在机械硬盘时代这个策略可以减少随机IO，但如果使用固态硬盘的话随机IO的性能往往比较高，所以使用这个策略反而拖累了查询性能。因此可以通过 <code>innodb_flush_neighbors</code> 关闭这个“连坐”的策略。</p></blockquote><h4 id="连接与线程">连接与线程</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据业务调整</span></span><br><span class="line"><span class="attr">max_connections</span> = <span class="number">500</span></span><br><span class="line"><span class="comment"># 缓存线程避免频繁创建</span></span><br><span class="line"><span class="attr">thread_cache_size</span> = <span class="number">50</span></span><br></pre></td></tr></table></figure><h4 id="临时表与排序">临时表与排序</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tmp_table_size</span> = <span class="number">64</span>M</span><br><span class="line"><span class="attr">max_heap_table_size</span> = <span class="number">64</span>M</span><br><span class="line"><span class="comment"># 每连接分配，不宜过大</span></span><br><span class="line"><span class="attr">sort_buffer_size</span> = <span class="number">2</span>M</span><br></pre></td></tr></table></figure><p>修改后重启或 <code>SET GLOBAL</code> 生效，建议压测验证。</p><h3 id="监控与慢查询优化（手段穷极）">监控与慢查询优化（手段穷极）</h3><ol><li class="lvl-3"><p>开启慢查询日志</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">slow_query_log</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">slow_query_log_file</span> = /var/log/mysql/slow.log</span><br><span class="line"><span class="attr">long_query_time</span> = <span class="number">1</span>                  <span class="comment"># 超过1秒记录</span></span><br><span class="line"><span class="attr">log_queries_not_using_indexes</span> = <span class="number">1</span>    <span class="comment"># 记录未用索引的查询</span></span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p>使用工具分析慢查询</p><blockquote><ul class="lvl-3"><li class="lvl-2"><code>mysqldumpslow</code>（MySQL自带）</li><li class="lvl-2"><code>pt-query-digest</code>（Percona Toolkit，推荐）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pt<span class="operator">-</span>query<span class="operator">-</span>digest <span class="operator">/</span>var<span class="operator">/</span>log<span class="operator">/</span>mysql<span class="operator">/</span>slow.log</span><br></pre></td></tr></table></figure></blockquote></li><li class="lvl-3"><p>监控工具</p><blockquote><ul class="lvl-3"><li class="lvl-2"><strong>实时监控</strong>：<code>SHOW PROCESSLIST</code>, <code>SHOW STATUS</code>, <code>SHOW ENGINE INNODB STATUS</code></li><li class="lvl-2">可视化监控：<ul class="lvl-5"><li class="lvl-4">Prometheus + Grafana + mysqld_exporter</li><li class="lvl-4">Percona PMM（推荐）</li><li class="lvl-4">MySQL Workbench Performance Dashboard</li></ul></li></ul></blockquote></li></ol><h3 id="架构层优化（高并发-大数据）">架构层优化（高并发/大数据）</h3><ol><li class="lvl-3"><p><strong>读写分离</strong></p><p>主库写，多个从库读（通过 ProxySQL / MaxScale / 中间件路由）</p></li><li class="lvl-3"><p><strong>分库分表</strong></p><ul class="lvl-2"><li class="lvl-5">使用 ShardingSphere / MyCat / Vitess 等中间件</li><li class="lvl-5">按用户ID、时间等维度拆分</li></ul></li><li class="lvl-3"><p><strong>引入缓存层</strong></p><ul class="lvl-2"><li class="lvl-5">Redis / Memcached 缓存热点数据</li><li class="lvl-5">缓存查询结果或对象，减轻数据库压力</li></ul></li><li class="lvl-4"><p><strong>异步化与队列</strong></p></li></ol><ul class="lvl-0"><li class="lvl-5"><p>非核心写操作走消息队列（如 Kafka、RabbitMQ）</p></li><li class="lvl-5"><p>延迟写、批量写优化吞吐</p></li></ul><ol start="5"><li class="lvl-4"><p><strong>数据归档与冷热分离</strong></p></li></ol><ul class="lvl-0"><li class="lvl-5"><p>历史数据迁移到归档库或数仓（ClickHouse / Hive）</p></li><li class="lvl-5"><p>在线库只保留热数据</p></li></ul><h2 id="实用的优化方案">实用的优化方案</h2><p>实际中经常碰到的问题和优化方案。</p><h3 id="如何提高数据插入效率">如何提高数据插入效率</h3><ul class="lvl-0"><li class="lvl-2"><p>合并insert语句（批量插入）。日志量减少（binlog、undolog），日志刷盘数量和频率就减少，SQL解析也减少。</p></li><li class="lvl-2"><p>适当调高缓冲区参数值  <code>bulk_insert_buffer_size</code>。批量插入时支持更多数据。</p></li><li class="lvl-2"><p>设置 事务日志刷盘策略  <code>innodb_flush_log_at_trx_commit = 0</code>，默认为1。</p><blockquote><p>=1：每个事务提交都会刷新日志（buffer -&gt; file），和文件同步磁盘。<br>=0：每秒执行一次刷新，和文件到磁盘同步。<br>=2：每个事务会刷新日志（buffer -&gt; file），但不会立即同步磁盘。文件到磁盘同步，是每秒一次</p></blockquote></li><li class="lvl-2"><p>手动提交事务（执行完成后，统一提交事务）。</p></li></ul><h3 id="频繁更新数据的优化方案">频繁更新数据的优化方案</h3><p>频繁更新数据库可通过<strong>索引、减少锁定时间、使用批量更新、优化SQL查询、分区表和分布式数据库</strong>等手段提高性能和效率。</p><blockquote><p>其中，优化索引是一个最为基础且有效的方法，通过对数据库表进行适当的索引设计，可以显著减少查询和更新操作的时间。</p><p>索引优化不仅能加快查询速度，还能减少数据库的负载。选择合适的索引类型（如B-树索引、哈希索引等）以及正确地为表中的关键字段设置索引，可以使数据库在处理频繁更新操作时更加高效。特别是对于主键和外键的索引优化，能极大地提高数据访问和修改的速度。</p></blockquote><p><strong>优化索引</strong></p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>选择合适的索引类型</strong></p><ul class="lvl-3"><li class="lvl-4"><strong>B-树索引</strong>：适用于大多数查询操作，特别是在范围查询和排序操作中表现优异。</li><li class="lvl-4"><strong>哈希索引</strong>：适用于等值查询，但不适用于范围查询。</li><li class="lvl-4"><strong>全文索引</strong>：适用于文本搜索操作，如在文章中搜索关键词。</li></ul></li><li class="lvl-2"><p><strong>为关键字段设置索引</strong></p><p>对于主键和外键字段，设置索引可以极大地提高数据的访问和修改速度。</p><ul class="lvl-3"><li class="lvl-4"><p><strong>主键索引</strong>：主键通常是唯一的，可以显著加快数据查询和更新操作。</p></li><li class="lvl-4"><p><strong>外键索引</strong>：外键索引可以加快表之间的关联查询操作，提高数据一致性。</p></li></ul></li></ul></blockquote><p><strong>减少锁定时间</strong></p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>使用行级锁</strong>：只锁定被修改的行，减少锁定冲突，锁定时间越短，数据库并发性能就越高。</p></li><li class="lvl-2"><p><strong>使用乐观锁</strong>：乐观锁是一种减少锁定时间的策略，它假设数据冲突的概率较低，在提交数据时才进行冲突检测。</p></li></ul></blockquote><p><strong>使用批量更新</strong></p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>批量插入和更新</strong>：将多条插入操作合并为一条，可以减少数据库的I/O操作，可以显著提高数据库的性能。</p></li><li class="lvl-2"><p><strong>使用事务控制</strong>：使用事务控制可以确保数据的完整性和一致性，同时可以减少锁定时间，提高数据库的性能。</p></li></ul></blockquote><p><strong>优化SQL查询</strong></p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>避免使用复杂的嵌套查询</strong>：复杂的嵌套查询会导致数据库性能下降，尽量避免使用复杂的嵌套查询。</p></li><li class="lvl-2"><p><strong>使用查询缓存</strong>：查询缓存是一种提高数据库性能的有效方法，它将查询结果缓存到内存中，减少数据库I/O操作。</p></li></ul></blockquote><p><strong>分区表和分布式数据库</strong></p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>分区表</strong>：分区表是一种将大表拆分为多个小表的策略，减少查询和更新操作的时间，提高数据库的性能。</p></li><li class="lvl-2"><p><strong>分布式数据库</strong>：分布式数据库是一种将数据分布到多个节点上的策略，可以显著提高数据库的性能和可扩展性。</p></li></ul></blockquote><p><strong>使用缓存</strong></p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>应用层缓存</strong>：在应用层使用缓存可以减少对数据库的访问，提高系统的性能。</p></li><li class="lvl-2"><p><strong>数据库层缓存</strong>：在数据库层使用缓存可以减少数据库的I/O操作，提高数据库的性能。</p></li></ul></blockquote><p><strong>数据库集群和负载均衡</strong></p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>数据库集群</strong>：数据库集群是一种将多个数据库服务器组合在一起的策略，可以显著提高数据库的性能和可用性。</p></li><li class="lvl-2"><p><strong>负载均衡</strong>：负载均衡是一种将请求分发到多个服务器上的策略，可以显著提高系统的性能和可用性。</p></li></ul></blockquote><p><strong>数据库监控和调优</strong></p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>数据库监控</strong>：数据库监控是一种实时监控数据库性能的策略，可以及时发现和解决性能问题。</p></li><li class="lvl-2"><p><strong>数据库调优</strong>：数据库调优是一种通过调整数据库配置和参数来提高性能的策略。</p></li></ul></blockquote><p><strong>使用高效的存储引擎</strong></p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>选择合适的存储引擎</strong>：不同的存储引擎适用于不同的应用场景，选择合适的存储引擎可以显著提高数据库的性能。</p></li><li class="lvl-2"><p><strong>优化存储引擎配置</strong>：优化存储引擎的配置可以提高数据库的性能和稳定性。</p></li></ul></blockquote><p><strong>数据归档和清理</strong></p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>定期归档数据</strong>：定期归档不常用的数据，可以减少数据库的负载，提高数据库的性能。</p></li><li class="lvl-2"><p><strong>定期清理数据</strong>：定期清理无用的数据，可以减少数据库的存储空间，提高数据库的性能。</p></li></ul></blockquote><p><strong>数据库设计优化</strong></p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>规范化数据库设计</strong>：通过规范化数据库设计，可以减少数据冗余，提高数据库的性能和一致性。</p></li><li class="lvl-2"><p><strong>反规范化设计</strong>：在某些情况下，通过反规范化设计可以提高数据库的查询性能。</p></li></ul></blockquote><h3 id="内存碎片的优化方案">内存碎片的优化方案</h3><p>MySQL碎片指的是MySQL数据文件中一些不连续的空白空间，这些空间无法再被全部利用，久而久之越来越多越来越零碎。</p><p>MySQL 碎片的本质是“空间分配与回收不同步”或“空间利用率下降”。</p><h4 id="碎片产生的原因">碎片产生的原因</h4><p>MySQL 中的“碎片”通常是指由于数据的频繁增删改操作，导致存储空间未能被高效利用，从而在磁盘或内存中产生不连续、空闲但无法被有效重用的空间。碎片主要影响性能和存储效率。</p><blockquote><p>当执行插入操作时，MySQL会尝试使用空白空间，如果插入的数据刚好按照索引排序落在被删除数据的区间，可能会复用这个位置，但如果某个空白空间一直没有被大小合适的数据占用，仍然无法将其彻底占用，就形成了碎片；</p><p>【MySQL的几种删除情况】</p><blockquote><ul class="lvl-2"><li class="lvl-2"><p>drop、truncate    不管是InnoDB还是MyISAM都立刻释放磁盘空间</p></li><li class="lvl-2"><p>delete from table_name  删除全部表数据，MyISAM立刻释放磁盘空间，InnoDB不会立刻释放磁盘空间</p></li><li class="lvl-2"><p>delete from table_name where xxx     带条件的删除不管是InnoDB还是MyISAM都不会立刻释放</p></li><li class="lvl-2"><p>delete from table_name     虽然未立刻释放磁盘空间，但下次插入的时候仍然可以使用这部分空间</p></li></ul></blockquote></blockquote><p>以下是 MySQL 碎片产生的主要原因：</p><p>一、<strong>数据删除操作</strong>（DELETE）</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>删除记录后，原数据页中的空间并不会立即归还给操作系统，而是标记为“可重用”。磁盘的文件大小不会收缩。InnoDB的Purge线程会异步的来清理这些没用的索引键和行。</p></li><li class="lvl-2"><p>如果后续插入的数据大小不匹配或插入位置不连续，就会形成“空洞”，即碎片。</p></li><li class="lvl-2"><p>大量 DELETE 操作后未进行优化，碎片会持续累积。</p></li></ul></blockquote><p>二、<strong>数据更新导致行变长</strong>（UPDATE）</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>当 UPDATE 操作使某行数据长度增加（如 VARCHAR 字段内容变长），原位置空间不足时，MySQL 会将该行迁移到新的数据页，原位置留下空洞。</p></li><li class="lvl-2"><p>尤其在 InnoDB 中，行溢出或页分裂会加剧碎片。</p></li></ul><p>Innodb的最小物理存储分配单位是页(page)，而UPDATE也可能导致页分裂，频繁的页分裂，页会变得稀疏，并且被不规则的填充，所以最终数据会有碎片。例如原始数据长度varchar(100)，大规模更新数据长度为50，这样的话，有50的空间被空白了，新入库的数据不能完全利用剩余的50，这就会产生碎片。</p></blockquote><p>三、<strong>频繁的插入和删除交替操作</strong>（INSERT/DELETE）</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>高频的写入和删除会导致数据页中留下大量不连续的小块空闲空间。</p></li><li class="lvl-2"><p>这些空间可能因为太小或位置分散，无法容纳新插入的行，造成空间浪费。</p></li></ul></blockquote><p>四、<strong>自增主键中断或非顺序插入</strong></p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>按顺序写入可以减少碎片，但如果中间有删除或使用 UUID、随机主键等无序插入，会导致页内或页间数据不连续。</p></li><li class="lvl-2"><p>非顺序插入容易引发页分裂（Page Split），进而产生碎片。</p></li></ul></blockquote><p>五、<strong>页分裂</strong>（Page Split） —— InnoDB 特有</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>当一个数据页已满，而新数据需要插入到该页的中间位置时，InnoDB 会将该页一分为二（页分裂），腾出空间。</p></li><li class="lvl-2"><p>分裂后两个页可能都未填满，形成内部碎片。</p></li><li class="lvl-2"><p>频繁分裂会加剧碎片化并影响查询性能。</p></li></ul></blockquote><p>六、<strong>表结构变更</strong>（如 ALTER TABLE）</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>某些 ALTER 操作（如添加字段、修改类型）可能导致表重建或行格式变化，产生临时碎片。</p></li><li class="lvl-2"><p>在线 DDL 操作过程中也可能因中间状态产生碎片。</p></li></ul></blockquote><p>七、<strong>未及时重建表</strong></p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>MySQL 不会自动整理碎片，长期运行的表若未定期优化，碎片会持续积累。</p></li><li class="lvl-2"><p>OPTIMIZE TABLE 或 ALTER TABLE … ENGINE=InnoDB 可重建表、整理碎片，但需手动或定时执行。</p></li></ul></blockquote><p>八、<strong>存储引擎特性</strong>（如 MyISAM vs InnoDB）</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>MyISAM：删除记录后留下空洞，碎片明显，需定期执行 OPTIMIZE。</p></li><li class="lvl-2"><p>InnoDB：虽然有“插入缓冲”和“页合并”机制，但高并发写入或大量更新仍会产生碎片，尤其在独立表空间（file-per-table）模式下。</p></li></ul></blockquote><p>九、<strong>大对象字段的存储和更新</strong>（BLOB/TEXT）</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>大字段可能导致行溢出（off-page storage），更新时容易造成原页空间浪费。</p></li><li class="lvl-2"><p>频繁更新大字段会加剧碎片问题。</p></li></ul></blockquote><p>十、<strong>事务回滚或 MVCC 机制残留</strong></p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>InnoDB 的多版本并发控制（MVCC）会保留旧版本数据，直到无事务引用。</p></li><li class="lvl-2"><p>回滚段或 undo log 中旧数据占用空间，若清理不及时，也可能形成逻辑碎片（不影响数据页，但占用存储）。</p></li></ul></blockquote><h4 id="碎片会带来什么问题">碎片会带来什么问题</h4><p>MySQL 中的“碎片”虽然不会直接导致数据丢失或系统崩溃，但会带来一系列<strong>性能下降、资源浪费和运维复杂性增加</strong>的问题。</p><p>以下是碎片带来的主要负面影响：</p><p>一、<strong>性能下降</strong>（最核心问题）</p><blockquote><ol><li class="lvl-3"><p><strong>查询性能降低</strong></p><ul class="lvl-3"><li class="lvl-5"><p>碎片导致数据在磁盘或内存中<strong>物理不连续</strong>，查询时需要读取更多数据页才能获取完整结果。</p></li><li class="lvl-5"><p>尤其影响范围查询（<code>BETWEEN</code>、<code>&gt;</code>、<code>&lt;</code>）和全表扫描，I/O 次数增加，响应时间变长。</p></li></ul></li><li class="lvl-3"><p><strong>索引效率降低</strong></p><ul class="lvl-3"><li class="lvl-5"><p>索引结构（如 B+ 树）若因碎片导致节点分散，会增加树的高度或节点访问次数。</p></li><li class="lvl-5"><p>查询时需要加载更多索引页到内存，缓存命中率下降，执行计划变慢。</p></li></ul></li><li class="lvl-3"><p><strong>缓冲池利用率下降</strong>（Buffer Pool）</p><ul class="lvl-3"><li class="lvl-5"><p>InnoDB 缓冲池缓存的是数据页。碎片页中有效数据少，大量缓存空间被“空洞”占用。</p></li><li class="lvl-5"><p>导致真正需要的数据页无法被缓存，频繁从磁盘读取，拖慢整体性能。</p></li></ul></li></ol></blockquote><p>二、<strong>存储空间浪费</strong></p><blockquote><ol><li class="lvl-3"><p><strong>占用额外磁盘空间</strong></p><ul class="lvl-3"><li class="lvl-5"><p><code>Data_free</code>（表中未使用但未释放的空间）持续增长，实际数据量远小于表文件大小。</p></li><li class="lvl-5"><p>举例：一个 10GB 的表，可能只有 6GB 是真实数据，其余 4GB 是碎片空洞。</p></li></ul></li><li class="lvl-3"><p><strong>备份/迁移成本增加</strong></p><ul class="lvl-3"><li class="lvl-5"><p>备份工具（如 mysqldump、xtrabackup）会备份整个表文件（含碎片），导致备份文件更大、耗时更长。</p></li><li class="lvl-5"><p>数据迁移、复制、同步也会因体积膨胀而效率降低。</p></li></ul></li></ol></blockquote><p>三、<strong>写入性能受影响</strong></p><blockquote><ol><li class="lvl-3"><p><strong>插入效率降低</strong></p><ul class="lvl-3"><li class="lvl-5"><p>当新数据无法填入现有碎片空洞时，MySQL 需分配新页，增加 I/O 和页管理开销。</p></li><li class="lvl-5"><p>频繁页分裂（Page Split）也会拖慢 INSERT/UPDATE 操作。</p></li></ul></li><li class="lvl-3"><p><strong>更新操作成本上升</strong>：如果更新导致行迁移（Migration），需要写入新页 + 维护指针 + 清理旧位置，开销更大。</p></li></ol></blockquote><p>四、<strong>维护成本增加</strong></p><blockquote><ol><li class="lvl-3"><p><strong>需要定期人工干预</strong></p><ul class="lvl-3"><li class="lvl-5"><p>必须定期执行 <code>OPTIMIZE TABLE</code> 或重建表，否则碎片持续累积。</p></li><li class="lvl-5"><p>大表优化耗时长、锁表风险高（尤其 MyISAM），影响业务可用性。</p></li></ul></li><li class="lvl-3"><p><strong>监控和诊断复杂化</strong></p><ul class="lvl-3"><li class="lvl-5"><p>需监控 <code>information_schema.TABLES.Data_free</code>、表大小增长率、查询执行时间变化等指标。</p></li><li class="lvl-5"><p>性能问题排查时，碎片可能成为“隐藏元凶”，增加诊断难度。</p></li></ul></li></ol></blockquote><p>五、<strong>扩展性和高可用受影响</strong></p><blockquote><ol><li class="lvl-3"><p><strong>主从复制延迟可能加剧</strong>：大量碎片表在主库执行 <code>OPTIMIZE </code>会产生大量 binlog，从库重放时会造成复制延迟。</p></li><li class="lvl-3"><p><strong>云数据库/容器环境成本上升</strong></p></li></ol><ul class="lvl-1"><li class="lvl-2"><p>在按存储计费的云环境（如 AWS RDS、阿里云 RDS）中，碎片导致“虚胖”表，多花冤枉钱。</p></li><li class="lvl-2"><p>容器存储卷空间被无效占用，影响弹性扩缩容。</p></li></ul></blockquote><p>六、极端情况：<strong>系统稳定性风险</strong></p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>表空间文件（如 ibdata1 或 .ibd 文件）过度膨胀，可能占满磁盘，导致数据库写入失败或服务中断。</p></li><li class="lvl-2"><p>自动扩容机制若未配置，可能引发严重生产事故。</p></li></ul></blockquote><h4 id="如何清理碎片">如何清理碎片</h4><p>清理 MySQL 中的碎片是数据库日常维护的重要任务，目的是<strong>回收无效空间、提升查询性能、减少存储占用、优化缓存效率</strong>。</p><p>不同存储引擎（如 InnoDB、MyISAM）清理方式略有不同，以下是完整、实用的碎片清理方案：</p><p><strong>一、OPTIMIZE TABLE</strong>（通用方法）</p><p>推荐用于 MyISAM 和部分 InnoDB，Optimize语句可以<strong>重新组织表和索引</strong>的物理存储，减少存储空间，提高访问的IO效率</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">OPTIMIZE <span class="keyword">TABLE</span> table_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 示例：</span></span><br><span class="line">OPTIMIZE <span class="keyword">TABLE</span> orders;</span><br><span class="line"><span class="comment">-- +----------------+----------+----------+---------------------------------------------------+</span></span><br><span class="line"><span class="comment">-- | Table          | Op       | Msg_type | Msg_text                                              </span></span><br><span class="line"><span class="comment">-- +----------------+----------+----------+---------------------------------------------------+</span></span><br><span class="line"><span class="comment">-- | test.orders    | optimize | status   | OK                                 </span></span><br><span class="line"><span class="comment">-- +----------------+----------+----------+---------------------------------------------------+</span></span><br></pre></td></tr></table></figure><blockquote><ul class="lvl-1"><li class="lvl-2"><p>重建表结构、整理碎片、回收未使用空间。</p></li><li class="lvl-2"><p>对 MyISAM：效果显著，会重建索引和数据文件。</p></li><li class="lvl-2"><p>对 InnoDB（独立表空间模式 innodb_file_per_table=1）才有作用：等价于 <code>ALTER TABLE ... FORCE</code>，重建表和索引。</p></li></ul></blockquote><p><strong>注意事项</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>锁表操作</strong>：执行期间表会被锁定（MyISAM 全锁，InnoDB 可能短暂锁）。数据量越大的表，优化耗时越长，百万条数据大约耗时30s(约25000-30000行/秒)。在磁盘优化时，所有的增删操作将受限。</p></li><li class="lvl-2"><p><strong>空间要求</strong>：需要额外磁盘空间存放临时表（约等于原表大小）。剩余空间必须 &gt; 被optimize的表大小</p></li><li class="lvl-2"><p><strong>权限要求</strong>：使用这个语句需要对目标表具有select、insert权限</p></li><li class="lvl-2"><p><strong>主从复制</strong>：会记录到 binlog，在从库重放，可能引起复制延迟。</p></li><li class="lvl-2"><p><strong>大表慎用</strong>：建议在业务低峰期执行。</p></li></ul></blockquote><p><strong>二、重建表</strong>（InnoDB 专用方法）</p><p>更灵活、推荐用于生产环境</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 使用 ALTER TABLE 重建，本质上是recreate，期间支持DML查询和更新操作</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> table_name ENGINE<span class="operator">=</span>InnoDB;</span><br><span class="line"><span class="comment">-- MySQL 5.7+ 支持的语法，明确表示强制重建表，等价于更改引擎为当前引擎</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> table_name FORCE;</span><br><span class="line"></span><br><span class="line"><span class="comment">----------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用在线 DDL（MySQL 5.6+，推荐）</span></span><br><span class="line"><span class="comment">-- ALGORITHM=INPLACE：原地重建，减少空间占用。LOCK=NONE：尽量不锁表（取决于操作类型和版本）。</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> table_name ENGINE<span class="operator">=</span>InnoDB, ALGORITHM<span class="operator">=</span>INPLACE, LOCK<span class="operator">=</span><span class="keyword">NONE</span>;</span><br></pre></td></tr></table></figure><blockquote><ul class="lvl-1"><li class="lvl-2"><p>更可控，支持在线操作（部分场景）。</p></li><li class="lvl-2"><p>可结合其他 DDL 一起执行（如加索引、改字段）。</p></li></ul></blockquote><p><strong>操作过程</strong>：</p><blockquote><ol><li class="lvl-3"><p>获取MDL（meta data lock）写锁，innodb内部创建与原表结构相同的临时文件</p></li><li class="lvl-3"><p>拷贝数据前，MDL写锁退化成读锁，支持DML更新操作</p></li><li class="lvl-3"><p>根据主键递增顺序，将数据读出并写到临时文件，直到全部写入，并且拷贝期间的DML更新操作会记录到Row log中</p></li><li class="lvl-3"><p>上锁，再将Row log中的数据应用到临时文件</p></li><li class="lvl-3"><p>互换原表和临时表的名字</p></li><li class="lvl-3"><p>删除临时表</p></li></ol></blockquote><p><strong>三、分区表碎片清理</strong>（针对 RANGE/LIST 分区）</p><p>如果表是分区表，可以<strong>只优化特定碎片严重的分区</strong>，减少影响：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> table_name OPTIMIZE <span class="keyword">PARTITION</span> partition_name;</span><br><span class="line"><span class="comment">-- 或</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> table_name REBUILD <span class="keyword">PARTITION</span> partition_name;</span><br></pre></td></tr></table></figure><blockquote><p>适用于日志表、时间分表等场景，按月/日分区，只清理历史分区。</p></blockquote><p><strong>四、批量清理多个表的碎片</strong></p><p>方法1：SQL 脚本自动生成优化语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;OPTIMIZE TABLE &#x27;</span>, table_schema, <span class="string">&#x27;.&#x27;</span>, table_name, <span class="string">&#x27;;&#x27;</span>) <span class="keyword">AS</span> sql_stmt</span><br><span class="line"><span class="keyword">FROM</span> information_schema.tables</span><br><span class="line"><span class="keyword">WHERE</span> table_schema <span class="operator">=</span> <span class="string">&#x27;your_database&#x27;</span></span><br><span class="line">  <span class="keyword">AND</span> data_free <span class="operator">&gt;</span> <span class="number">1024</span> <span class="operator">*</span> <span class="number">1024</span> <span class="operator">*</span> <span class="number">100</span>  <span class="comment">-- 碎片大于100MB的表</span></span><br><span class="line">  <span class="keyword">AND</span> engine <span class="keyword">IN</span> (<span class="string">&#x27;InnoDB&#x27;</span>, <span class="string">&#x27;MyISAM&#x27;</span>);</span><br></pre></td></tr></table></figure><p>方法2：Shell 脚本 + MySQL 命令行（定时任务）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">DB_USER=<span class="string">&quot;root&quot;</span></span><br><span class="line">DB_PASS=<span class="string">&quot;password&quot;</span></span><br><span class="line">DB_NAME=<span class="string">&quot;your_db&quot;</span></span><br><span class="line"></span><br><span class="line">mysql -u<span class="variable">$DB_USER</span> -p<span class="variable">$DB_PASS</span> -Nse <span class="string">&quot;</span></span><br><span class="line"><span class="string">SELECT CONCAT(&#x27;OPTIMIZE TABLE &#x27;, table_schema, &#x27;.&#x27;, table_name, &#x27;;&#x27;)</span></span><br><span class="line"><span class="string">FROM information_schema.tables</span></span><br><span class="line"><span class="string">WHERE table_schema = &#x27;<span class="variable">$DB_NAME</span>&#x27;</span></span><br><span class="line"><span class="string">  AND data_free &gt; 100*1024*1024</span></span><br><span class="line"><span class="string">  AND engine IN (&#x27;InnoDB&#x27;,&#x27;MyISAM&#x27;);</span></span><br><span class="line"><span class="string">&quot;</span> | mysql -u<span class="variable">$DB_USER</span> -p<span class="variable">$DB_PASS</span></span><br></pre></td></tr></table></figure><blockquote><p>建议每周或每月低峰期执行一次。</p></blockquote><p><strong>五、监控碎片程度</strong>（执行前判断是否需要清理）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看表碎片大小（Data_free）：</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    table_name,</span><br><span class="line">    engine,</span><br><span class="line">    data_length,</span><br><span class="line">    index_length,</span><br><span class="line">    data_free,</span><br><span class="line">    ROUND(data_free <span class="operator">/</span> (data_length <span class="operator">+</span> index_length) <span class="operator">*</span> <span class="number">100</span>, <span class="number">2</span>) <span class="keyword">AS</span> frag_percent</span><br><span class="line"><span class="keyword">FROM</span> information_schema.tables</span><br><span class="line"><span class="keyword">WHERE</span> table_schema <span class="operator">=</span> <span class="string">&#x27;your_database&#x27;</span></span><br><span class="line">  <span class="keyword">AND</span> data_free <span class="operator">&gt;</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> data_free <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 通过 `show table status like &#x27;表名&#x27;` 查看表的状态，如果data_free字段不为0则表示有碎片存在</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    CONCAT( <span class="keyword">TRUNCATE</span> ( <span class="built_in">SUM</span>( data_length ) <span class="operator">/</span> <span class="number">1024</span> <span class="operator">/</span> <span class="number">1024</span>, <span class="number">2</span> ), <span class="string">&#x27;MB&#x27;</span> ) <span class="keyword">AS</span> data_size,</span><br><span class="line">    CONCAT( <span class="keyword">TRUNCATE</span> ( <span class="built_in">SUM</span>( data_free ) <span class="operator">/</span> <span class="number">1024</span> <span class="operator">/</span> <span class="number">1024</span>, <span class="number">2</span> ), <span class="string">&#x27;MB&#x27;</span> ) <span class="keyword">AS</span> data_free,</span><br><span class="line">    CONCAT( <span class="keyword">TRUNCATE</span> ( <span class="built_in">SUM</span>( index_length ) <span class="operator">/</span> <span class="number">1024</span> <span class="operator">/</span> <span class="number">1024</span>, <span class="number">2</span> ), <span class="string">&#x27;MB&#x27;</span> ) <span class="keyword">AS</span> index_size </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    information_schema.TABLES </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    TABLE_NAME <span class="operator">=</span> <span class="string">&#x27;tableName&#x27;</span>; </span><br></pre></td></tr></table></figure><blockquote><p>建议：碎片率 &gt; 10% 或碎片大小 &gt; 1GB 的表优先优化。</p></blockquote><p>六、特殊情况处理</p><ol><li class="lvl-3"><p><strong>共享表空间碎片</strong>（ibdata1）</p><blockquote><p>此操作风险高，仅建议在维护窗口或新系统部署时进行。</p><ul class="lvl-3"><li class="lvl-2"><p>如果使用系统表空间（innodb_file_per_table=OFF），所有表数据存在 ibdata1，碎片无法单独清理。</p></li><li class="lvl-2"><p>解决方案：</p><ol><li class="lvl-5">备份所有数据（mysqldump）</li><li class="lvl-5">停止 MySQL，删除 ibdata1、ib_logfile*</li><li class="lvl-5">启用 <code>innodb_file_per_table=ON</code></li><li class="lvl-5">恢复数据 → 每个表独立 .ibd 文件，可单独优化</li></ol></li></ul></blockquote></li><li class="lvl-3"><p>大表优化太慢？</p><p>使用 <strong>pt-online-schema-change</strong>（Percona Toolkit）工具在线重建表，几乎无锁：支持大表在线优化，不影响业务读写。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pt<span class="operator">-</span>online<span class="operator">-</span>schema<span class="operator">-</span>change <span class="comment">--alter &quot;ENGINE=InnoDB&quot; D=your_db,t=your_table --execute</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>预防碎片的最佳实践</strong>（治本之策）</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><strong>使用自增主键</strong></td><td>保证数据顺序插入，减少页分裂</td></tr><tr><td><strong>避免频繁 UPDATE 大字段</strong></td><td>如 TEXT/BLOB，更新易导致行迁移</td></tr><tr><td><strong>定期归档历史数据</strong></td><td>减少活跃数据量，降低碎片产生速度</td></tr><tr><td><strong>合理设置页填充因子</strong></td><td>InnoDB 默认已优化，一般无需调整</td></tr><tr><td><strong>使用 SSD + 合理 buffer pool</strong></td><td>减轻碎片对 I/O 的影响</td></tr><tr><td><strong>监控 + 自动化脚本</strong></td><td>定期检查碎片，自动触发优化</td></tr></tbody></table><p><strong>碎片清理操作速查表</strong></p><table><thead><tr><th>场景</th><th>推荐命令</th><th>说明</th></tr></thead><tbody><tr><td>小表 / MyISAM 表</td><td><code>OPTIMIZE TABLE t;</code></td><td>简单直接，会锁表</td></tr><tr><td>InnoDB 表重建</td><td><code>ALTER TABLE t ENGINE=InnoDB;</code></td><td>更灵活，支持在线选项</td></tr><tr><td>在线无锁优化</td><td><code>ALTER TABLE t ENGINE=InnoDB, ALGORITHM=INPLACE, LOCK=NONE;</code></td><td>MySQL 5.6+</td></tr><tr><td>分区表优化</td><td><code>ALTER TABLE t OPTIMIZE PARTITION p0;</code></td><td>针对性清理</td></tr><tr><td>批量清理</td><td>用 SQL 生成脚本 + 定时任务</td><td>自动化运维</td></tr><tr><td>超大表在线优化</td><td><code>pt-online-schema-change</code></td><td>第三方工具，推荐生产环境</td></tr></tbody></table><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>监控先行</strong>：不要盲目优化，先查碎片率和大小。</p></li><li class="lvl-2"><p><strong>低峰操作</strong>：选择业务低谷期执行，避免影响线上服务。</p></li><li class="lvl-2"><p><strong>备份保障</strong>：重要表优化前做备份。</p></li><li class="lvl-2"><p><strong>自动化 + 预防</strong>：建立定期维护机制 + 优化表设计，从源头减少碎片。</p></li></ul></blockquote><h3 id="其他实用技巧">其他实用技巧</h3><ul class="lvl-0"><li class="lvl-2"><p><strong>使用连接池</strong>：避免频繁创建/销毁连接（HikariCP、Druid）</p></li><li class="lvl-2"><p><strong>避免大事务</strong>：拆分成小事务，减少锁竞争和回滚段压力</p></li><li class="lvl-2"><p><strong>合理使用锁</strong>：避免 <code>SELECT ... FOR UPDATE</code> 滥用</p></li><li class="lvl-2"><p><strong>批量操作</strong>：INSERT/UPDATE 使用批量语句，减少交互次数</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> DB </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL性能优化 </tag>
            
            <tag> MySQL索引 </tag>
            
            <tag> 刷盘策略 </tag>
            
            <tag> 内存碎片 </tag>
            
            <tag> 批量插入 </tag>
            
            <tag> 频繁更新 </tag>
            
            <tag> 慢查询 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分库分表之跨表分页查询解决方案</title>
      <link href="/2025/09/351e0f653b484f3cb3ed3c71e3c1bb5a/"/>
      <url>/2025/09/351e0f653b484f3cb3ed3c71e3c1bb5a/</url>
      
        <content type="html"><![CDATA[<p>分库与分表的目的在于，减小数据库的单库单表负担，提高查询性能，缩短查询时间。</p><blockquote><p>热数据：使用MySQL进行存储，分库分表；</p><p>冷数据：ES 或 TiDB或Hive存储；</p></blockquote><h2 id="分库分表的基本概念">分库分表的基本概念</h2><h3 id="分库">分库</h3><p>数据表分布到不同库中，减轻单一库的压力，提高数据性能和安全性。</p><p>分库带来的问题和挑战：</p><blockquote><p><strong>数据迁移与扩容问题</strong>：一般做法是通过程序先读出数据，然后按照指定的分表策略再将数据写入到各个分表中。<br><strong>分页与排序问题</strong>：需要在不同的分表中将数据进行排序并返回，并将不同分表返回结果集进行汇总和再次排序，最后再返回给用户。<br><strong>分布式全局唯一ID</strong>：UUID、GUID等</p></blockquote><h3 id="分表（水平-垂直）">分表（水平+垂直）</h3><p>分表可以减少数据库的单表负担，将压力分散到不同的表上，减少单表数据量，提高查询性能，缩短查询时间和缓解表锁的问题。</p><p><strong>水平分表（同列拆数据）</strong>：Hash取模分表就属于随机水平分表，而时间维度分表则属于连续水平分表（车辆轨迹）。</p><p><strong>垂直分表（不同列拆列）</strong>：将不常用的字段单独拆分到另外一张扩展表. 将大文本的字段单独拆分到另外一张扩展表, 将不经常修改的字段放在同一张表中，将经常改变的字段放在另一张表中，将列表的共用字段放一起（车辆、摄像头、果壳箱告警）。</p><blockquote><p>对于海量用户场景，可以考虑hash取模分表，数据相对比较均匀，不容易出现热点和并发访问的瓶颈。</p><p>库内分表仅仅是解决了单表数据过大的问题，但并没有把单表的数据分散到不同的物理机上，因此并不能减轻 MySQL 服务器的压力，仍然存在同一个物理机上的资源竞争和瓶颈，包括 CPU、内存、磁盘 IO、网络带宽等。</p></blockquote><p>一张表分很多表后，每一个小表都是完整的一张表，对应三个文件（MyISAM引擎：.MYD数据文件，.MYI索引文件，.frm表结构文件）。</p><h3 id="分片（跨库-水平分表）">分片（跨库-水平分表）</h3><p>分片是将一个逻辑上的数据库或表切分成多个物理上的数据库或表，每个分片都包含一部分数据。分片可以跨多个数据库服务器，甚至跨多个数据中心。分片通常基于某种策略（如哈希、范围等）将数据分散到不同的分片中。</p><p>MySQL5以后支持分区，但是不支持二级分区，并且单机MySQL的性能远远不如Oracle，所以分区并不能解决性能问题。</p><p>分片就是分库+分表，属于水平切分，将表中数据按照某种规则放到多个库中，既分表又分库。</p><p>分片关注于跨多个数据库服务器的水平扩展和数据隔离</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>水平扩展</strong>：通过增加数据库服务器数量，实现水平扩展，提高系统的整体性能。</p></li><li class="lvl-2"><p><strong>数据隔离</strong>：不同的分片可以部署在不同的地理位置，实现数据的物理隔离和容灾备份。</p></li><li class="lvl-2"><p><strong>降低单点故障风险</strong>：由于数据被分散到多个分片中，单个分片的故障不会影响整个系统的运行。</p></li></ul></blockquote><p>常见的分片策略有：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>范围分片</strong>：根据数据的某个字段（如时间戳、用户ID等）的值范围将数据分散到不同的分片中。这种方法适用于连续增长的数据，但可能导致数据倾斜。</p></li><li class="lvl-2"><p><strong>哈希分片</strong>：使用哈希函数将数据分散到不同的分片中。这种方法可以确保数据的均匀分布，但可能导致跨分片查询的性能问题。</p></li><li class="lvl-2"><p><strong>目录分片</strong>：使用一个额外的目录表来记录数据在不同分片中的分布情况。这种方法可以提供更灵活的分片策略，但增加了查询的复杂度。</p></li></ul></blockquote><p>在实现分片时，可以使用中间件（如MyCAT、Sharding-JDBC等）或自定义代码来管理数据的路由和分片。中间件通常提供了丰富的分片策略和配置选项，可以方便地实现分片功能。</p><h3 id="分区（单库-水平分表）">分区（单库-水平分表）</h3><p>MySQL分区表是将一个表物理上分割成多个较小的、更易于管理的片段，这些片段称为分区。</p><p>分区主要关注于单个数据库服务器的性能提升和管理效率</p><p>MySQL支持多种分区类型，如RANGE、LIST、HASH、KEY等。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>性能提升</strong>：通过减少I/O操作、提高查询缓存效率等方式，提升查询性能。</p></li><li class="lvl-2"><p><strong>管理方便</strong>：可以单独对分区进行备份、恢复、删除等操作，提高管理效率。</p></li><li class="lvl-2"><p><strong>减少锁争用</strong>：在并发查询时，不同的分区可以并行处理，减少锁争用。</p></li></ul></blockquote><p>应用</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>日志表</strong>：如MySQL的慢查询日志表，可以按时间范围进行分区，便于管理和查询。</p></li><li class="lvl-2"><p><strong>历史数据表</strong>：对于按时间存储的历史数据，可以使用RANGE分区，将不同时间段的数据存储在不同的分区中。</p></li><li class="lvl-2"><p><strong>大数据表</strong>：对于数据量非常大的表，可以使用HASH或KEY分区，将数据分散到多个分区中，提高查询性能。</p></li></ul></blockquote><h2 id="分库分表的挑战">分库分表的挑战</h2><p>引入分库分表之后，会给系统带来什么挑战呢？</p><ul class="lvl-0"><li class="lvl-2"><p><strong>分页查询</strong>：数据分布到多个表中，导致分页查询受限，需要扫描各个分表再聚合结果。还涉及到深度分页问题。</p></li><li class="lvl-2"><p><strong>join 操作</strong>：同一个数据库中的表分布在了不同的数据库中，导致无法使用 join 操作。这样就导致我们需要手动进行数据的封装，比如你在一个数据库中查询到一个数据之后，再根据这个数据去另外一个数据库中找对应的数据。</p><blockquote><p>建议尽量不使用 join 操作。因为效率低，并且会对分库分表造成影响。对于需要用到 join 操作的地方，可以采用多次查询业务层进行数据组装的方法。不过，这种方法需要考虑业务上多次查询的事务性的容忍度。</p></blockquote></li><li class="lvl-2"><p><strong>事务问题</strong>：同一个数据库中的表分布在了不同的库中，操作涉及到多个数据库，数据库自带的事务就无法满足我们的要求了。这个时候，我们就需要引入分布式事务了。</p></li><li class="lvl-2"><p><strong>分布式 ID</strong>：分库之后， 数据遍布在不同服务器上的数据库，数据库的自增主键已经没办法满足生成的主键唯一了。</p></li><li class="lvl-2"><p><strong>跨库聚合查询</strong>：分库分表会导致常规聚合查询操作，如 group by，order by 等变得异常复杂。这是因为这些操作需要在多个分片上进行数据汇总和排序。为了实现这些操作，需要编写复杂的业务代码，或者使用中间件来协调分片间的通信和数据传输。这样会增加开发和维护的成本，以及影响查询的性能和可扩展性。</p></li></ul><h2 id="分库分表的建议">分库分表的建议</h2><p>遇到下面几种场景可以考虑分库分表：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>单表的数据达到千万级别以上，数据库读写速度比较缓慢。</p></li><li class="lvl-2"><p>数据库中的数据占用的空间越来越大，备份时间越来越长。</p></li><li class="lvl-2"><p>应用的并发量太大（应该优先考虑其他性能优化方法，而非分库分表）。</p></li></ul></blockquote><p>不过，分库分表的成本太高，如非必要尽量不要采用。而且，并不一定是单表千万级数据量就要分表。</p><h3 id="分页方案选型建议">分页方案选型建议</h3><table><thead><tr><th>业务场景</th><th>推荐方案</th><th>说明</th></tr></thead><tbody><tr><td>移动端下拉加载</td><td>游标分页 or 禁止跳页</td><td>性能最佳，用户体验好</td></tr><tr><td>后台管理系统（需跳页）</td><td>二次查询法 + 限制最大页码</td><td>平衡功能与性能</td></tr><tr><td>企业级复杂分页</td><td>ShardingSphere / MyCat</td><td>透明化，减少开发成本</td></tr><tr><td>海量数据实时排序</td><td>优先队列流式合并</td><td>适合推荐、排行榜场景</td></tr><tr><td>数据分析/报表</td><td>异步导出 or 预计算</td><td>避免在线分页，改用离线处理</td></tr></tbody></table><blockquote><ol><li class="lvl-3"><p><strong>避免深分页</strong>：前端限制最大页码（如 ≤ 100页），或引导用户用筛选条件缩小范围。</p></li><li class="lvl-3"><p><strong>索引优化</strong>：确保排序字段、分片键有联合索引。</p></li><li class="lvl-3"><p><strong>缓存分页结果</strong>：对前几页数据缓存到 Redis（尤其热门查询）。</p></li><li class="lvl-3"><p><strong>异步预加载</strong>：用户浏览第1页时，后台预加载第2页。</p></li><li class="lvl-3"><p><strong>数据归档</strong>：历史数据迁移到冷库，减少分片数据量。</p></li></ol></blockquote><h2 id="分库分表的解决方案">分库分表的解决方案</h2><p>常见分页查询方案对比</p><table><thead><tr><th>方案</th><th>适用场景</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>1. 全局有序ID + 游标分页</td><td>主键/时间戳有序</td><td>性能好、无跳页</td><td>不支持跳页、需有序字段</td></tr><tr><td>2. 二次查询法（排序归并）</td><td>任意排序字段</td><td>支持任意排序、跳页</td><td>性能较差、内存压力大</td></tr><tr><td>3. 禁止跳页 + 页码缓存</td><td>App/小程序下拉场景</td><td>用户体验好、性能高</td><td>不支持传统页码跳转</td></tr><tr><td>4. 全局汇总中间件</td><td>复杂聚合分页</td><td>功能强大</td><td>架构复杂、成本高</td></tr><tr><td>5. 并行查询 + 优先队列</td><td>大数据量排序分页</td><td>实时性好</td><td>实现复杂、资源消耗大</td></tr></tbody></table><h3 id="方案1：游标分页（推荐）">方案1：游标分页（推荐）</h3><p>适用于：主键自增、时间戳、全局唯一有序字段（如订单号、创建时间）</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>不使用 <code>OFFSET</code>，而是记录上一页最后一条记录的排序值（如 <code>id &gt; 1000</code>）。</p></li><li class="lvl-2"><p>下一页从该值之后开始查，每页固定大小。</p></li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 第一页</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> order_shard_01 </span><br><span class="line"><span class="keyword">WHERE</span> create_time <span class="operator">&gt;=</span> <span class="string">&#x27;2024-01-01&#x27;</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> create_time <span class="keyword">DESC</span>, id <span class="keyword">DESC</span> </span><br><span class="line">LIMIT <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 假设最后一条记录是 create_time=&#x27;2024-06-01 10:00:00&#x27;, id=5000</span></span><br><span class="line"><span class="comment">-- 第二页</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> order_shard_01 </span><br><span class="line"><span class="keyword">WHERE</span> (create_time <span class="operator">&lt;</span> <span class="string">&#x27;2024-06-01 10:00:00&#x27;</span>) </span><br><span class="line">   <span class="keyword">OR</span> (create_time <span class="operator">=</span> <span class="string">&#x27;2024-06-01 10:00:00&#x27;</span> <span class="keyword">AND</span> id <span class="operator">&lt;</span> <span class="number">5000</span>)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> create_time <span class="keyword">DESC</span>, id <span class="keyword">DESC</span> </span><br><span class="line">LIMIT <span class="number">20</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求参数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PageRequest</span> &#123;</span><br><span class="line">    Long lastId;      <span class="comment">// 上一页最后一条ID（游标）</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">pageSize</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PageResult</span> &#123;</span><br><span class="line">    List&lt;Order&gt; data;</span><br><span class="line">    Long nextCursor;  <span class="comment">// 下一页游标（最后一条ID）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务层</span></span><br><span class="line"><span class="keyword">public</span> PageResult <span class="title function_">listOrders</span><span class="params">(PageRequest req)</span> &#123;</span><br><span class="line">    List&lt;Order&gt; allResults = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 并行查询所有分片</span></span><br><span class="line">    <span class="keyword">for</span> (String shardTable : getShardTables()) &#123;</span><br><span class="line">        List&lt;Order&gt; shardData = jdbcTemplate.query(</span><br><span class="line">            <span class="string">&quot;SELECT * FROM &quot;</span> + shardTable + </span><br><span class="line">            <span class="string">&quot; WHERE id &lt; ? ORDER BY id DESC LIMIT ?&quot;</span>,</span><br><span class="line">            req.lastId == <span class="literal">null</span> ? Long.MAX_VALUE : req.lastId,</span><br><span class="line">            req.pageSize + <span class="number">1</span>,  <span class="comment">// 多查1条用于判断是否有下一页</span></span><br><span class="line">            orderRowMapper</span><br><span class="line">        );</span><br><span class="line">        allResults.addAll(shardData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 全局排序</span></span><br><span class="line">    allResults.sort((a, b) -&gt; Long.compare(b.getId(), a.getId()));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 截取分页</span></span><br><span class="line">    List&lt;Order&gt; pageData = allResults.stream()</span><br><span class="line">        .limit(req.pageSize)</span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算下一页游标</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">nextCursor</span> <span class="operator">=</span> pageData.size() &gt;= req.pageSize ? </span><br><span class="line">                      pageData.get(pageData.size() - <span class="number">1</span>).getId() : <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageResult</span>(pageData, nextCursor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优点</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>性能极佳（走索引，无 OFFSET）</p></li><li class="lvl-2"><p>天然避免数据重复/遗漏</p></li><li class="lvl-2"><p>支持无限下拉（App/小程序常用）</p></li></ul></blockquote><p><strong>缺点</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>不支持“跳到第100页”</p></li><li class="lvl-2"><p>要求排序字段全局唯一或组合唯一（避免边界重复，如 <code>create_time + id</code>），确保唯一性。</p></li><li class="lvl-2"><p>要求客户端传入上一页最后一条的完整排序字段值。</p></li></ul></blockquote><h3 id="方案2：二次查询法（排序归并分页）">方案2：二次查询法（排序归并分页）</h3><p>适用于：必须支持“跳页”、排序字段无序或非全局唯一</p><blockquote><ol><li class="lvl-3"><p>第一轮：每个分片查“可能相关”的数据（带冗余）</p><ul class="lvl-3"><li class="lvl-5">比如要第3页（每页10条），则每个分片查前 30+10=40 条（offset=0, limit=40）</li></ul></li><li class="lvl-3"><p>第二轮：内存中合并排序，取全局第21~30条</p></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Step 1: 并行查询每个分片的前 N 条（N = offset + limit）</span></span><br><span class="line">List&lt;Future&lt;List&lt;Record&gt;&gt;&gt; futures = shards.stream()</span><br><span class="line">    .map(shard -&gt; executor.submit(() -&gt; </span><br><span class="line">        query(<span class="string">&quot;SELECT * FROM &quot;</span> + shard + <span class="string">&quot; ORDER BY score DESC LIMIT &quot;</span> + (offset + limit))</span><br><span class="line">    )).collect(toList());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step 2: 合并所有结果，全局排序</span></span><br><span class="line">List&lt;Record&gt; allRecords = mergeAndSort(futures.get());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step 3: 截取最终分页</span></span><br><span class="line"><span class="keyword">return</span> allRecords.subList(offset, offset + limit);</span><br></pre></td></tr></table></figure><p><strong>优点</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>支持任意跳页</p></li><li class="lvl-2"><p>适用任意排序字段</p></li></ul></blockquote><p><strong>缺点</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>性能随页码增大急剧下降（深分页问题），可设置最大可跳页数（如最多100页），避免恶意深分页。</p></li><li class="lvl-2"><p>内存压力大（需缓存 offset+limit 条记录），使用缓存中间页结果（如 Redis 缓存第1~10页数据）。</p></li><li class="lvl-2"><p>数据量大时可能 OOM</p></li></ul></blockquote><h3 id="方案3：禁止跳页-页码缓存（App常用）">方案3：禁止跳页 + 页码缓存（App常用）</h3><p>适用于：移动端、信息流、下拉加载场景</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>前端不提供“跳页”按钮，只提供“加载更多”。</p></li><li class="lvl-2"><p>后端使用游标分页（方案1）。</p></li><li class="lvl-2"><p>可选：缓存前N页数据到 Redis，加速重复访问。</p></li></ul></blockquote><p><strong>优点</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>性能最优</p></li><li class="lvl-2"><p>用户体验流畅</p></li><li class="lvl-2"><p>实现简单</p></li></ul></blockquote><p><strong>缺点</strong>：不满足传统“跳页”需求（如后台管理系统）</p><h3 id="方案4：全局汇总中间件（企业级方案）">方案4：全局汇总中间件（企业级方案）</h3><p>适用于：复杂业务、需透明分页、不想自己实现逻辑 。如ShardingSphere、MyCat</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>中间件自动路由查询到各分片。</p></li><li class="lvl-2"><p>自动合并、排序、分页（通常采用“二次查询法”）。</p></li><li class="lvl-2"><p>对应用透明，SQL 仍写 <code>LIMIT 100, 10</code>。</p></li></ul></blockquote><p><strong>优点</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>开发无感知，SQL 兼容性好</p></li><li class="lvl-2"><p>支持复杂聚合、排序、分页</p></li></ul></blockquote><p><strong>缺点</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>中间件有性能开销</p></li><li class="lvl-2"><p>深分页仍慢</p></li><li class="lvl-2"><p>需维护中间件集群</p></li></ul></blockquote><p>ShardingSphere 示例配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="type">!SHARDING</span></span><br><span class="line">  <span class="attr">tables:</span></span><br><span class="line">    <span class="attr">t_order:</span></span><br><span class="line">      <span class="attr">actualDataNodes:</span> <span class="string">ds_$&#123;0..1&#125;.t_order_$&#123;0..3&#125;</span></span><br><span class="line">      <span class="attr">tableStrategy:</span></span><br><span class="line">        <span class="attr">standard:</span></span><br><span class="line">          <span class="attr">shardingColumn:</span> <span class="string">user_id</span></span><br><span class="line">          <span class="attr">shardingAlgorithmName:</span> <span class="string">table_inline</span></span><br><span class="line">  <span class="attr">shardingAlgorithms:</span></span><br><span class="line">    <span class="attr">table_inline:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">INLINE</span></span><br><span class="line">      <span class="attr">props:</span></span><br><span class="line">        <span class="attr">algorithm-expression:</span> <span class="string">t_order_$&#123;user_id</span> <span class="string">%</span> <span class="number">4</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 应用层 SQL：</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_order <span class="keyword">ORDER</span> <span class="keyword">BY</span> create_time <span class="keyword">DESC</span> LIMIT <span class="number">100</span>, <span class="number">10</span>;</span><br><span class="line"><span class="comment">-- ShardingSphere 自动分发+归并</span></span><br></pre></td></tr></table></figure><h3 id="方案5：并行查询-优先队列（高性能方案）">方案5：并行查询 + 优先队列（高性能方案）</h3><p>通过大数据量实时分页，适用于：海量数据、实时排序分页（如推荐系统、排行榜）</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>每个分片返回一个“排序迭代器”。</p></li><li class="lvl-2"><p>使用堆（优先队列）动态合并各分片TopK数据。</p></li><li class="lvl-2"><p>类似“外排序”思想，内存占用可控。</p></li></ul></blockquote><p><strong>优点</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>内存占用稳定（只缓存 heap.size = limit）</p></li><li class="lvl-2"><p>支持深分页（性能不随 offset 增大而剧降）</p></li><li class="lvl-2"><p>实时性好</p></li></ul></blockquote><p><strong>缺点</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>实现复杂（需自研或使用高级中间件）</p></li><li class="lvl-2"><p>对数据库连接数压力大</p></li></ul></blockquote><p><strong>开源参考</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>Apache ShardingSphere 的 <code>StreamMerge</code> 模式</p></li><li class="lvl-2"><p>Elasticsearch 的 <code>search_after</code></p></li></ul></blockquote><h2 id="分库分表查询案例（订单）">分库分表查询案例（订单）</h2><p>案例：订单表根据 userId 分表（userId % 1024）后</p><h3 id="如何根据-orderId-快速查询订单信息？">如何根据 orderId 快速查询订单信息？</h3><ul class="lvl-0"><li class="lvl-2"><p>方案一：扫描所有分表（效率最差）</p></li><li class="lvl-2"><p>方案二：建立中间路由表（数据冗余）</p><p>维护 分片 和 orderId 的映射，首先查询该表来确认分表，再查询数据（需要两次查询，且数据冗余，可能出现不一致的情况）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line"><span class="type">Long</span> <span class="variable">orderId</span> <span class="operator">=</span> <span class="number">10086L</span>;</span><br><span class="line"><span class="type">Route</span> <span class="variable">route</span> <span class="operator">=</span> routeMapper.selectByOrderId(orderId); <span class="comment">// 查路由表</span></span><br><span class="line"><span class="type">String</span> <span class="variable">targetTable</span> <span class="operator">=</span> <span class="string">&quot;order_&quot;</span> + route.getTableIndex();</span><br><span class="line"><span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderMapper.selectByIdFromTable(orderId, targetTable); <span class="comment">// 精准查询</span></span><br></pre></td></tr></table></figure><blockquote><ul class="lvl-3"><li class="lvl-2"><p>多一次查询（可缓存优化）</p></li><li class="lvl-2"><p>路由表需与订单表事务一致（写入订单时同时写路由）</p></li></ul></blockquote></li><li class="lvl-2"><p><strong>方案三</strong>（推荐）：重新维护 orderId，跟 userId 关联</p><p>最后4位数据拼接 userId 的二进制 前四位，然后可以对 orderId % 1024 来确定分表（需要保证分表数量为 2的次方个，且重写雪花算法，向其借四位）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1bit | 41bit时间戳 | 10bit机器/分片ID | 12bit序列号</span></span><br><span class="line"><span class="keyword">public</span> ShardInfo <span class="title function_">parseFromSnowflake</span><span class="params">(<span class="type">long</span> orderId)</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">shardBits</span> <span class="operator">=</span> (orderId &gt;&gt; <span class="number">12</span>) &amp; <span class="number">0x3FF</span>; <span class="comment">// 取中间10位</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">dbIndex</span> <span class="operator">=</span> (<span class="type">int</span>) (shardBits / <span class="number">16</span>);     <span class="comment">// 假设每库16表</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">tableIndex</span> <span class="operator">=</span> (<span class="type">int</span>) (shardBits % <span class="number">16</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ShardInfo</span>(dbIndex, tableIndex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul class="lvl-3"><li class="lvl-2"><p>无需路由表，直接计算</p></li><li class="lvl-2"><p>ID全局唯一、趋势递增、包含分片信息</p></li></ul></blockquote></li><li class="lvl-2"><p>方案四（推荐）：让 orderId 本身包含分片信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DD20250405_03_000000001</span><br><span class="line">  │    │    │    └── 自增序列（保证唯一）</span><br><span class="line">  │    │    └────── 分库分表标识（如 03 表示 db0.table3）</span><br><span class="line">  │    └─────────── 日期（可选，用于归档）</span><br><span class="line">  └────────────── 业务前缀（如 DD=订单）</span><br><span class="line"></span><br><span class="line">或更简洁：</span><br><span class="line">2025040503000000001</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderIdParser</span> &#123;</span><br><span class="line">    <span class="comment">// orderId = &quot;DD20250405_03_000000001&quot;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ShardInfo <span class="title function_">parse</span><span class="params">(String orderId)</span> &#123;</span><br><span class="line">        String[] parts = orderId.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">shardPart</span> <span class="operator">=</span> parts[<span class="number">1</span>]; <span class="comment">// &quot;03&quot;</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">dbIndex</span> <span class="operator">=</span> Integer.parseInt(shardPart) / <span class="number">4</span>;  <span class="comment">// 假设每库4表</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">tableIndex</span> <span class="operator">=</span> Integer.parseInt(shardPart) % <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ShardInfo</span>(dbIndex, tableIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>方案五：使用分库分表中间件（推荐）</p><p>使用 ShardingSphere，配置分片规则后，应用直接写 SQL，中间件自动路由：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ShardingSphere 根据 order_id 值自动计算分片，只查询目标表。</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="type">!SHARDING</span></span><br><span class="line">  <span class="attr">tables:</span></span><br><span class="line">    <span class="attr">t_order:</span></span><br><span class="line">      <span class="attr">actualDataNodes:</span> <span class="string">ds_$&#123;0..1&#125;.t_order_$&#123;0..3&#125;</span></span><br><span class="line">      <span class="attr">databaseStrategy:</span></span><br><span class="line">        <span class="attr">standard:</span></span><br><span class="line">          <span class="attr">shardingColumn:</span> <span class="string">order_id</span></span><br><span class="line">          <span class="attr">shardingAlgorithmName:</span> <span class="string">db_inline</span></span><br><span class="line">      <span class="attr">tableStrategy:</span></span><br><span class="line">        <span class="attr">standard:</span></span><br><span class="line">          <span class="attr">shardingColumn:</span> <span class="string">order_id</span></span><br><span class="line">          <span class="attr">shardingAlgorithmName:</span> <span class="string">table_inline</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">shardingAlgorithms:</span></span><br><span class="line">    <span class="attr">db_inline:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">INLINE</span></span><br><span class="line">      <span class="attr">props:</span></span><br><span class="line">        <span class="attr">algorithm-expression:</span> <span class="string">ds_$&#123;order_id.substring(10,11).toInteger()</span> <span class="string">/</span> <span class="number">2</span><span class="string">&#125;</span> <span class="comment"># 示例：从第10位取1位算库</span></span><br><span class="line">    <span class="attr">table_inline:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">INLINE</span></span><br><span class="line">      <span class="attr">props:</span></span><br><span class="line">        <span class="attr">algorithm-expression:</span> <span class="string">t_order_$&#123;order_id.substring(10,11).toInteger()</span> <span class="string">%</span> <span class="number">4</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="如何分页查询所有订单？"><strong>如何分页查询所有订单</strong>？</h3><p>根据条件扫描所有分表中前面的所有数据，再代码过滤聚合（需要查大量无效数据，且性能低，涉及深度分页）</p><ul class="lvl-0"><li class="lvl-2"><p>全局表查询：维护一个涉及查询参数的全局表，数据列少（包含分表信息），查询后再二次检索原数据。</p></li><li class="lvl-2"><p>最值限制过滤（可行）：根据上页最大值做过滤，如：ID或日期，扫描每个分表范围内数据，当客户端拉取不到任何数据的时候，即可停止分页。缺点是不能跳页查询，只能倒序排序。</p></li><li class="lvl-2"><p>大数据集成法（推荐）：ES或其它大数据组件。缺点是引入新的组件，会涉及数据同步的挑战。</p></li><li class="lvl-2"><p>三方分库分表组件（可行）：自动完成分表分页查询，只需要做好配置（如：ShardingSphere，其原理也是拆分查询 ）</p></li><li class="lvl-2"><p>分布式数据库（推荐）：既有关系数据库的优点又可无限扩表，支持数据库间无障碍迁移，如国产TiDB。</p></li><li class="lvl-2"><p><strong>按日期的二次查询法</strong>（常用）：通过两次查询来确保分页查询的精度和性能，特别适用于数据量大且需要精确分页的场景。</p><blockquote><p>二次查询法的基本思想是：将全局分页查询拆分为多个子查询，并通过两次查询来获取所需的数据。</p><ul class="lvl-3"><li class="lvl-2"><strong>第一次查询</strong>：将全局分页查询改写为多个子查询，每个子查询在各个分库中执行。例如，假设有三个分库，查询第200页的数据，每页5条记录，原始SQL为：<code>SELECT * FROM T ORDER BY time OFFSET 1000 LIMIT 5;</code></li><li class="lvl-2"><strong>找到最小时间戳</strong>：比较所有分库返回结果集中的最小时间戳，作为二次查询的起点。例如，假设三个分库返回的最小时间戳分别为1487501123、1487501133和1487501143，则最小时间戳为1487501123。</li><li class="lvl-2"><strong>第二次查询</strong>：根据最小时间戳和各分库返回结果集的最大时间戳，构造新的查询条件。例如，第一个分库返回的最大时间戳为1487501523，则新的查询条件为：<code>SELECT * FROM T WHERE time BETWEEN 1487501123 AND 1487501523;</code></li><li class="lvl-2"><strong>合并结果集</strong>：将所有分库的查询结果合并，并根据全局偏移量计算最终的分页结果。</li></ul><p><strong>优点</strong>：</p><ul class="lvl-3"><li class="lvl-2"><p><strong>精确分页</strong>：能够精确返回所需的分页数据。</p></li><li class="lvl-2"><p><strong>高性能</strong>：每次查询的数据量较小，不会随着翻页增加而显著增加。</p></li></ul><p><strong>缺点</strong>：</p><ul class="lvl-3"><li class="lvl-2"><p><strong>两次查询</strong>：需要进行两次数据库查询，增加了查询的复杂度。</p></li><li class="lvl-2"><p><strong>适用场景有限</strong>：适用于数据量大且需要精确分页的场景，不适用于所有情况</p></li></ul></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> DB </category>
          
          <category> 分库分表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分库分表 </tag>
            
            <tag> 分布式数据库 </tag>
            
            <tag> 二次查询法 </tag>
            
            <tag> TiDB </tag>
            
            <tag> ShardingSphere </tag>
            
            <tag> 跨表分页查询 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>海量数据的深度分页查询解决方案</title>
      <link href="/2025/09/b35492bf2a96482e86fe1e77b2bc7812/"/>
      <url>/2025/09/b35492bf2a96482e86fe1e77b2bc7812/</url>
      
        <content type="html"><![CDATA[<h2 id="深度分页的概念和场景">深度分页的概念和场景</h2><p><strong>深度分页</strong>指的是在数据库或搜索引擎中，当需要访问结果集中非常靠后的数据页时（例如第 1000 页，每页 10 条，即第 10000 条记录之后），系统性能会显著下降的现象。</p><p><strong>核心问题在于：</strong> 大多数数据库的实现方式并不是直接跳到第 N 页，而是需要先获取并跳过前 (N-1) * SIZE 条记录，这会导致巨大的资源消耗。</p><p>以MySQL的LIMIT偏移查询为例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查询第 <span class="number">1000</span> 页的<span class="number">10</span>条数据</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test <span class="keyword">ORDER</span> <span class="keyword">BY</span> created_at <span class="keyword">DESC</span> LIMIT <span class="number">10000</span>, <span class="number">10</span>;</span><br></pre></td></tr></table></figure><blockquote><ol><li class="lvl-3"><p>数据库需要先读取 <code>10000 + 10</code> 条记录的索引和数据（可能涉及回表）。</p></li><li class="lvl-3"><p>然后丢弃前 10000 条记录。</p></li><li class="lvl-3"><p>最后返回剩下的 10 条。</p></li></ol><p><code>OFFSET</code> 越大，需要读取和丢弃的数据就越多，计算和I/O成本就越高，性能自然急剧下降。</p></blockquote><h2 id="深度分页常用解决方案">深度分页常用解决方案</h2><p>以Mysql 为例说明</p><table><thead><tr><th style="text-align:left">方案</th><th style="text-align:left">原理</th><th style="text-align:left">优点</th><th style="text-align:left">缺点</th><th style="text-align:left">适用场景</th></tr></thead><tbody><tr><td style="text-align:left"><strong>游标分页</strong></td><td style="text-align:left">记录上一页末尾的位置作为起点</td><td style="text-align:left"><strong>性能最好</strong>，数据一致</td><td style="text-align:left">无法跳页</td><td style="text-align:left"><strong>无限滚动、流式数据</strong></td></tr><tr><td style="text-align:left"><strong>子查询</strong></td><td style="text-align:left">覆盖索引的优化，不需要二次查询</td><td style="text-align:left">简单高效</td><td style="text-align:left">连表查询，不稳定</td><td style="text-align:left">数据量少的简单可跳页查询</td></tr><tr><td style="text-align:left"><strong>覆盖索引</strong></td><td style="text-align:left">通过索引避免回表，减少I/O</td><td style="text-align:left">比纯<code>LIMIT</code>快</td><td style="text-align:left">优化有限，需两次查询</td><td style="text-align:left">查询数据少的简单分页</td></tr><tr><td style="text-align:left"><strong>限制深度</strong></td><td style="text-align:left">业务上不允许访问太深的页</td><td style="text-align:left">简单有效</td><td style="text-align:left">功能受限</td><td style="text-align:left">搜索引擎、后台管理系统</td></tr><tr><td style="text-align:left"><strong>ES <code>search_after</code></strong></td><td style="text-align:left">类似游标分页</td><td style="text-align:left">专业引擎原生支持</td><td style="text-align:left">引擎特定</td><td style="text-align:left">Elasticsearch/Solr</td></tr></tbody></table><blockquote><p>对于新项目或需要高性能的场景，<strong>强烈推荐使用游标分页</strong>。虽然牺牲了直接跳转页码的功能，但换来了稳定且高效的性能，非常适合现代应用（如手机APP）的交互方式。如果必须支持页码跳转，可以考虑将<strong>游标分页与限制最大分页深度</strong>结合使用。</p></blockquote><h3 id="游标分页（推荐）">游标分页（推荐）</h3><p>游标分页（Cursor-based Pagination），也叫“键集分页”，是解决深度分页最有效的方法。它不记录页码，而是记录上一页最后一条记录的位置，并以此为起点获取下一页。</p><p>比如数据根据ID倒序排列，点击下一页时，携带上一页中最小的ID，作为下一页最大值的过滤值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> user_order </span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">&lt;</span> #&#123;minId&#125; <span class="keyword">AND</span> create_time<span class="operator">&gt;</span><span class="string">&#x27;2020-8-5 00:00:00&#x27;</span> </span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> id LIMIT <span class="number">10</span>;</span><br></pre></td></tr></table></figure><blockquote><p>minId就是上一页中的最小主键Id。所以采用此方式的前提：</p><ul class="lvl-1"><li class="lvl-2">主键必须自增，不能是UUID。并且前端还需要传递上一页的最小Id</li><li class="lvl-2">不支持随机跳页，只能上下顺序翻页。</li></ul></blockquote><p><strong>优点：</strong></p><ul class="lvl-0"><li class="lvl-2"><p><strong>性能极佳</strong>：无论翻到第几页，查询速度都一样快，因为 <code>WHERE id &lt; 1000</code> 可以利用索引快速定位，无需扫描和跳过之前的记录。</p></li><li class="lvl-2"><p><strong>数据一致性</strong>：适合实时性高的数据流（如社交媒体动态），在分页过程中即使有新增或删除数据，也不会出现重复或丢失记录的问题（传统 LIMIT 分页可能会）。</p></li></ul><p><strong>缺点：</strong></p><ul class="lvl-0"><li class="lvl-2"><p><strong>无法直接跳转到指定页码</strong>：用户只能“上一页”或“下一页”地浏览，不能直接跳到第 100 页。</p></li><li class="lvl-2"><p><strong>需要客户端配合</strong>：客户端需要维护 <code>cursor</code> 状态。</p></li></ul><p><strong>适用场景：</strong> 无限滚动（Infinite Scroll）的列表、新闻流、时间线等。</p><h3 id="直接覆盖索引（可用）">直接覆盖索引（可用）</h3><p>确保分页查询的数据都包含在索引里，这样只需要查询索引即可，而无需回表，从而减少磁盘 I/O。</p><blockquote><p>除非要查询的数据量很少，且都符合建立索引的条件下可以使用。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, order_id, create_time <span class="keyword">FROM</span> user_order </span><br><span class="line"><span class="keyword">WHERE</span> create_time<span class="operator">&gt;</span><span class="string">&#x27;2020-8-5 00:00:00&#x27;</span> </span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> id LIMIT <span class="number">10000</span>, <span class="number">10</span>;</span><br></pre></td></tr></table></figure></blockquote><p><strong>优点：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>在一定程度上减轻了深度分页的压力。</p></li></ul><p><strong>缺点：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>优化有限，<code>OFFSET</code> 非常大时，索引扫描范围依然很大。</p></li><li class="lvl-2"><p>只能查询有限的数据列，且需要创建大量索引，占据磁盘。</p></li></ul><h3 id="间接覆盖索引（可用）">间接覆盖索引（可用）</h3><p>让查询只需要扫描索引，而无需回表，从而减少磁盘 I/O。</p><p>通过以下两步查询完成：</p><ol><li class="lvl-3"><p>先从覆盖索引中获取目标记录的主键</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id <span class="keyword">FROM</span> user_order </span><br><span class="line"><span class="keyword">WHERE</span> create_time<span class="operator">&gt;</span><span class="string">&#x27;2020-8-5 00:00:00&#x27;</span> </span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> id LIMIT <span class="number">10000</span>, <span class="number">10</span>;</span><br></pre></td></tr></table></figure><blockquote><p>假设 <code>(create_time, id)</code> 是一个联合索引，这个查询可以完全在索引上完成，速度较快</p></blockquote></li><li class="lvl-3"><p>再根据这些主键ID，回表查询获取完整数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">    <span class="keyword">FROM</span> user_order </span><br><span class="line"><span class="keyword">WHERE</span> id <span class="keyword">IN</span> (<span class="number">10001</span>, <span class="number">10002</span>, ..., <span class="number">10020</span>); <span class="comment">-- 上一步得到的主键ID </span></span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> id</span><br></pre></td></tr></table></figure></li></ol><p><strong>优点：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>在一定程度上减轻了深度分页的压力。</p></li></ul><p><strong>缺点：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>优化有限，<code>OFFSET</code> 非常大时，索引扫描范围依然很大。</p></li><li class="lvl-2"><p>仅适用于查询数据较少的情况，否则回表时会有大量ID集合数据需要过滤。</p></li><li class="lvl-2"><p>需要需要两次查询，占据IO 和 长事务问题。</p></li></ul><h3 id="子查询（常用）">子查询（常用）</h3><p>先根据条件分页查询出id（覆盖索引），再根据id连表查询出所需数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line">    <span class="keyword">FROM</span> user_order d <span class="keyword">join</span> </span><br><span class="line">        (<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> user_order <span class="keyword">WHERE</span> d.order_time<span class="operator">&gt;</span><span class="string">&#x27;2020-8-5 00:00:00&#x27;</span> </span><br><span class="line">         <span class="keyword">ORDER</span> <span class="keyword">BY</span> d.order_time LIMIT <span class="number">6</span>, <span class="number">100</span></span><br><span class="line">        ) dd </span><br><span class="line">    <span class="keyword">on</span> d.id <span class="operator">=</span> dd.id</span><br></pre></td></tr></table></figure><blockquote><p>查询ID直接是通过索引查询，速度较快</p><p>效果不如游标分页稳定。</p></blockquote><h3 id="限制分页深度">限制分页深度</h3><p>业务层面可以限制分页深度，这是一种“防患于未然”的策略，从产品设计上避免用户进入深度分页。</p><ul class="lvl-0"><li class="lvl-2"><p><strong>提供精确的搜索和筛选功能</strong>：让用户通过条件（如时间范围、标签、关键词）来缩小结果集，而不是无脑地翻页。</p></li><li class="lvl-2"><p><strong>限制最大可访问页码</strong>：例如，搜索引擎通常只允许查看前 100 页的结果。直接在前端或后端限制 <code>offset</code> 的最大值（如 <code>max_offset = 2000</code>）。</p></li></ul><blockquote><p><strong>优点：</strong></p><ul class="lvl-1"><li class="lvl-2">简单有效，从根本上避免了性能问题。</li><li class="lvl-2">提升用户体验，用户通常也不愿意翻上百页。</li></ul><p>**缺点：**是一种限制，而非技术解决。</p></blockquote><h3 id="利用-Redis-扩展">利用 Redis 扩展</h3><p>利用其内存和对应的数据结构。</p><ul class="lvl-0"><li class="lvl-2"><p>使用 <strong>zset</strong> 结构，将数据的 id 作为 value，将数据的排序依据（比如时间、热度、评分等）作为 score，然后根据用户的分页请求，使用 <code>ZRANGE</code> 或者 <code>ZREVRANGE</code> 命令来获取指定范围的 value，再根据 value 获取具体数据。</p><blockquote><p>优点：减轻数据库压力，提高查询效率，保证数据一致性，动态地添加或删除数据，可以控制 zset 长度，防止一直增长。</p><p>缺点：需要维护额外的 zset 数据结构，可能占用更多的内存空间，并且需要注意数据同步和更新的问题。</p></blockquote></li><li class="lvl-2"><p>使用 <strong>hash</strong> 结构，将数据以 id 为 key 缓存，然后把数据 id 和排序存到 redis 的 zset 里；当查找数据时，先从 redis 里的 skip list 取出对应的分页数据，得到 id 列表；用 multi get 从 redis 上一次性把 id 列表里的所有数据都取出。</p><blockquote><p>优点：可以利用 hash 的高效存储和查询特性，减少内存开销，利用 zset 的排序和范围查询特性，提高分页效率。缺点：需要维护两个数据结构，可能增加复杂度，并且需要注意数据同步和更新的问题。</p></blockquote></li><li class="lvl-2"><p>使用 <strong>list</strong> 结构，将数据按照顺序存储到 list，根据用户分页请求，使用 <code>LINDEX</code> 或者 <code>LRANGE</code> 命令来获取指定范围的数据。</p><blockquote><p>优点：简单易实现，并且可以利用 list 的有序和可变特性，动态地添加或删除数据。缺点：需要扫描所有的数据，查询效率低下，并且不能支持多种排序方式。</p></blockquote></li></ul><h2 id="ES-深度分页解决方案">ES 深度分页解决方案</h2><p>ES 提供三种分页查询，其中以下两种为深度分页的解决方案：</p><table><thead><tr><th style="text-align:left">特性</th><th style="text-align:left"><code>search_after</code></th><th style="text-align:left"><code>scroll</code></th></tr></thead><tbody><tr><td style="text-align:left"><strong>设计目的</strong></td><td style="text-align:left"><strong>实时、高效的深度分页</strong></td><td style="text-align:left"><strong>大批量数据的离线检索和导出</strong></td></tr><tr><td style="text-align:left"><strong>数据一致性</strong></td><td style="text-align:left"><strong>实时当前索引状态</strong>（Point-in-Time 可增强）</td><td style="text-align:left"><strong>快照</strong>（Snapshot in Time）</td></tr><tr><td style="text-align:left"><strong>资源占用</strong></td><td style="text-align:left">低（无状态，每次查询独立）</td><td style="text-align:left">高（在上下文存活期间占用资源）</td></tr><tr><td style="text-align:left"><strong>生命周期</strong></td><td style="text-align:left">无状态，无需维护</td><td style="text-align:left">有状态，需要显式创建和销毁</td></tr><tr><td style="text-align:left"><strong>性能</strong></td><td style="text-align:left">每次查询开销类似常规搜索</td><td style="text-align:left">首次创建开销大，后续遍历非常快</td></tr><tr><td style="text-align:left"><strong>客户端</strong></td><td style="text-align:left">需要维护排序值（sort values）</td><td style="text-align:left">需要维护 <code>scroll_id</code></td></tr><tr><td style="text-align:left"><strong>返回结果</strong></td><td style="text-align:left">返回一页数据</td><td style="text-align:left">返回一批数据和一个新的 <code>scroll_id</code></td></tr></tbody></table><h3 id="from-size（浅分页）">from + size（浅分页）</h3><p><code>from + size</code> 分页方式的原理相对简单。当执行一个搜索查询并指定了 <code>from</code> 和 <code>size</code> 参数时，Elasticsearch 会进行以下步骤：</p><blockquote><ol><li class="lvl-3"><p><strong>分发查询</strong>：Elasticsearch会将查询请求分发到所有相关的分片上。</p></li><li class="lvl-3"><p><strong>查询分片</strong>：每个分片都会执行查询，并返回前 <code>from + size</code> 条符合条件的文档（但实际上只会用到最后的 <code>size</code> 条）。</p></li><li class="lvl-3"><p><strong>合并和排序</strong>：协调节点（通常是执行搜索的Elasticsearch节点）会收集所有分片返回的结果，将它们合并成一个全局的结果集，并根据查询中指定的排序规则进行排序。</p></li><li class="lvl-3"><p><strong>截断和返回</strong>：协调节点会从排序后的结果集中截取从 <code>from</code> 位置开始的 <code>size</code> 条记录，并将它们返回给客户端。</p></li></ol></blockquote><p>由于 <code>from + size</code> 需要合并和排序所有分片返回的结果，因此当 <code>from</code> 值很大时，这个过程可能变得非常慢，因为需要处理大量数据。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET /products/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;apple&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">,</span>  <span class="comment">// 注意，索引从0开始，所以第10条记录的索引是9</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asc&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>存在不足</strong>：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>性能问题</strong>：当<code>from</code>值很大时，Elasticsearch需要遍历大量数据才能找到起始位置，然后返回<code>size</code>条记录。这会导致查询性能下降，尤其是在数据量很大的情况下。</p></li><li class="lvl-2"><p><strong>资源消耗</strong>：深度分页会消耗大量CPU和内存资源，对集群性能造成压力。</p></li></ul></blockquote><p>**使用场景：**适用于数据量不大、实时性要求高、不需要深度分页的场景。</p><h3 id="scroll（游标-非实时）">scroll（游标-非实时）</h3><p>一种基于游标的分页方式，它允许我们遍历大量数据而不需要在每次请求时重新计算整个搜索。</p><blockquote><p>对某次查询生成一个游标 scroll_id ， 后续的查询只需要根据这个游标去取数据，直到结果集中返回的 hits 字段为空，就表示遍历结束。scroll_id 的生成可以理解为建立了一个临时的历史快照，在此之后的增删改查等操作不会影响到这个快照的结果。</p></blockquote><p><strong>实现原理</strong></p><p><code>scroll</code> 会为第一次搜索创建一个<strong>快照（snapshot）</strong> 和一个<strong>搜索上下文（search context）</strong>。后续请求使用返回的 <code>scroll_id</code> 来从这个固定的快照中获取下一批结果。它本质上是一个<strong>有状态的游标</strong>。</p><blockquote><p>当你执行一个带有 <code>scroll</code> 参数的搜索查询时：</p><ol><li class="lvl-3"><strong>初始化搜索上下文</strong>：Elasticsearch会为这次搜索创建一个快照（snapshot），并存储相关的搜索上下文（search context）。这个上下文包括查询本身、排序方式、聚合等所有与搜索相关的信息。</li><li class="lvl-3"><strong>返回初始结果</strong>：Elasticsearch会像普通搜索一样返回第一批结果，并附带一个 <code>scroll_id</code>。这个 <code>scroll_id</code> 是唯一标识这次搜索上下文的。</li><li class="lvl-3"><strong>使用 scroll_id 获取更多结果</strong>：客户端可以使用这个 <code>scroll_id</code> 来请求更多的结果。Elasticsearch会基于之前存储的搜索上下文，从快照中检索更多的结果，并返回给客户端。这个过程可以重复多次，直到所有的结果都被检索完或搜索上下文过期。</li></ol></blockquote><p>由于 <code>scroll</code> 只需要在开始时计算一次搜索上下文，并在之后基于这个上下文来获取结果，因此它在处理大量数据时通常比 <code>from + size</code> 更快。但是，它也会消耗更多的服务器资源来维护搜索上下文和快照。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始搜索</span></span><br><span class="line">POST /_search/scroll</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">100</span><span class="punctuation">,</span>           <span class="comment">// 每次返回的文档数量</span></span><br><span class="line">    <span class="attr">&quot;scroll&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1m&quot;</span><span class="punctuation">,</span>        <span class="comment">// 保持scroll上下文的活动时间，这里是1分钟</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span>    <span class="comment">// 可替换为任何需要的查询条件</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 二次搜索</span></span><br><span class="line">POST /_search/scroll</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;scroll&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1m&quot;</span><span class="punctuation">,</span>                <span class="comment">// 保持与第一次请求相同的scroll上下文时间</span></span><br><span class="line">    <span class="attr">&quot;scroll_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你的scroll_id&quot;</span> <span class="comment">// 第一次请求返回的scroll_id</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>优点：</strong></p><blockquote><ol><li class="lvl-3"><p><strong>极高的遍历效率</strong>：一旦上下文创建，后续的滚动请求非常快，因为是从快照中获取，无需再次排序和计算排名（如果不需要评分，可设置 <code>&quot;sort&quot;: [&quot;_doc&quot;]</code> 达到最大速度）。</p></li><li class="lvl-3"><p><strong>数据一致性</strong>：看到的是查询发起时刻的<strong>数据快照</strong>，在整个滚动过程中，结果集不会改变，不会受新数据写入影响。</p></li></ol></blockquote><p><strong>缺点：</strong></p><p>默认情况下，scroll请求会保持一段时间（如1分钟）的上下文，如果在这段时间内没有新的请求，上下文将被自动清除。</p><blockquote><ol><li class="lvl-3"><p><strong>非实时（Stale Data）</strong>：由于<code>scroll</code>是基于数据快照的，看到的是历史数据，无法获取滚动开始后新写入的文档。</p></li><li class="lvl-3"><p><strong>资源消耗大</strong>：<code>scroll</code>会消耗大量的服务器资源来维护游标和数据快照，搜索上下文会占用大量的堆内存和文件句柄，直到超时被自动清除。同时处理大量滚动查询会消耗集群大量资源。</p></li><li class="lvl-3"><p><strong>非随机性</strong>：不支持随机访问页面，只能顺序获取数据。</p></li><li class="lvl-3"><p><strong>有状态</strong>：需要服务器和客户端共同维护 <code>scroll_id</code> 和上下文生命周期，如果忘记清理，会导致资源泄漏。</p></li></ol></blockquote><p><strong>适用场景：</strong>.</p><p>适用于需要遍历大量数据、实时性要求不高的场景，如日志导出、数据迁移等。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>离线数据处理和大批量数据导出</strong>（例如将整个索引或大量查询结果导出到文件或数据库）。</p></li><li class="lvl-2"><p><strong>索引重建（reindex）</strong> 等后台任务。</p></li><li class="lvl-2"><p><strong>需要对大量数据进行全量分析</strong>（不关心最新数据，只关心某一时刻的状态）。</p></li></ul></blockquote><h3 id="search-after（推荐-排序值唯一）">search_after（推荐-排序值唯一）</h3><p>一种基于排序值的分页方式，它允许我们根据上一页的最后一条数据的排序值来获取下一页的数据。需要配合<code>sort</code>字段使用。</p><p><strong>实现原理</strong></p><p><code>search_after</code> 分页方式的原理是基于上一次查询的结果来确定下一次查询的起始位置。当你执行一个带有 <code>search_after</code> 参数的搜索查询时，Elasticsearch 会：</p><blockquote><ol><li class="lvl-3"><p><strong>排序和返回结果</strong>：首先，Elasticsearch会像普通搜索一样执行查询，并根据指定的排序字段对结果进行排序。然后，它会返回第一批结果。</p></li><li class="lvl-3"><p><strong>确定下一次查询的起始位置</strong>：客户端可以选择结果集中的任意一条记录作为下一次查询的起始位置。这通常是通过记录该条记录的排序字段值来实现的。</p></li><li class="lvl-3"><p><strong>使用 search_after 获取更多结果</strong>：在下一次查询时，客户端会指定 <code>search_after</code> 参数，并将上一次查询的起始位置（即排序字段值）作为该参数的值。Elasticsearch会基于这个值来确定下一次查询的起始位置，并返回该位置之后的结果。</p></li></ol></blockquote><p>由于 <code>search_after</code> 不需要像 <code>from + size</code> 那样合并和排序所有分片返回的结果，也不需要像 <code>scroll</code> 那样维护搜索上下文和快照，因此它在深度分页时通常比这两种方式更高效。但它要求排序字段的值必须是唯一的，以确保能够准确地确定下一次查询的起始位置。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始查询</span></span><br><span class="line">GET /products/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span>  <span class="comment">// 或者你可以添加具体的查询条件</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;desc&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span>        <span class="comment">// 排序</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;created_at&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asc&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span>    <span class="comment">// 排序</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 二次查询</span></span><br><span class="line">GET /products/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span>  <span class="comment">// 保持与初始查询相同的查询条件</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="comment">// 保持与初始查询相同的排序字段和顺序</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;desc&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;created_at&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asc&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span>  </span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;search_after&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="number">129.99</span><span class="punctuation">,</span>                  <span class="comment">// 上一页最后一个产品的price值</span></span><br><span class="line">        <span class="string">&quot;2023-10-23T12:00:00Z&quot;</span>  <span class="comment">// 上一页最后一个产品的created_at值</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>优点：</strong></p><blockquote><ol><li class="lvl-3"><p><strong>实时性 (Real-time)</strong>：默认查询的是最新的索引状态，比<code>scroll</code>更具实时性。</p></li><li class="lvl-3"><p><strong>无状态 (Stateless)</strong>：服务端不保存任何上下文。每次查询都是独立的，资源占用低，易于扩展。</p></li><li class="lvl-3"><p><strong>适用于实时分页</strong>：是替代 <code>from + size</code>（深度分页）的理想方案，用户可前后翻页（需客户端缓存多组 <code>search_after</code> 值）。</p></li></ol></blockquote><p><strong>缺点：</strong></p><blockquote><ol><li class="lvl-3"><p><strong>无法跳页</strong>：和所有游标分页一样，只能一页一页顺序往下走，不能直接跳到任意页码。</p></li><li class="lvl-3"><p><strong>需要稳定的排序</strong>：排序字段必须能够唯一确定文档顺序（通常需要至少一个唯一字段如 <code>_id</code> 作为第二排序条件），需要依赖一个或多个排序字段确定下一页的位置。否则可能导致分页结果重复或丢失。</p><blockquote><ul class="lvl-4"><li class="lvl-2">如果排序字段的值不是唯一的，可能导致查询结果不准确。</li><li class="lvl-2">如果排序字段的值发生更改（如文档被更新或删除），可能会导致结果不一致。</li></ul></blockquote></li><li class="lvl-3"><p><strong>实时性</strong>：虽然<code>search_after</code>比<code>scroll</code>更实时，但它可能仍然无法获取到查询发起后的最新数据。这取决于刷新机制，</p><blockquote><ul class="lvl-4"><li class="lvl-2">Elasticsearch 默认每 <strong>1秒</strong> 自动刷新一次索引（可配置 <code>refresh_interval</code>）。</li><li class="lvl-2">只有被 <strong>refresh</strong> 后的文档，才能被搜索到。</li><li class="lvl-2"><code>search_after</code> 查询的是 <strong>当前已 refresh 的数据快照</strong>，不是实时写入的文档。</li></ul></blockquote><p>如果你在查询发起后，有新文档写入（<code>index</code> 或 <code>update</code>），但在下一次 <code>refresh</code> 之前，这些数据 不会出现在 <code>search_after</code> 查询结果中。一旦索引刷新，后续的 <code>search_after</code> 查询就有可能查到这些新数据，</p></li><li class="lvl-3"><p><strong>客户端逻辑稍复杂</strong>：客户端需要存储和传递每页的排序值。</p></li></ol></blockquote><p><strong>适用场景：</strong></p><blockquote><p>适用于需要深度分页、实时性要求相对较高、且排序字段唯一，支持顺序向后翻页访问的场景。</p><ul class="lvl-1"><li class="lvl-2">用户界面的无限滚动（Infinite Scroll）</li><li class="lvl-2">需要实时反映数据变化的深度分页需求</li><li class="lvl-2">任何需要替代 <code>from + size</code>（特别是当 <code>from &gt; 10,000</code> 时）的高性能分页</li></ul></blockquote><h3 id="关于随机翻页">关于随机翻页</h3><p>如果你有随机跳页的需求（例如，用户直接在界面上输入页码并跳转），正确的解决方案是 扩展**<code>search_after</code>**。</p><p><strong><code>scroll</code> API 完全不支持随机访问或跳页。</strong> 这是由其核心设计理念和工作机制决定的。</p><h4 id="为什么-Scroll-不支持随机跳页？">为什么 Scroll 不支持随机跳页？</h4><ol><li class="lvl-3"><p><strong>顺序遍历器</strong>，而非随机存取器<br><code>scroll</code> 被设计成一个<strong>单向的、顺序的流式读取器</strong>。你可以把它想象成一个只能从前往后读的磁带，或者一个只能调用 <code>next()</code> 方法的迭代器 (Iterator)。</p><blockquote><p>它唯一的操作是 <strong>“获取下一批（next batch）”</strong>。系统内部维护着一个指针，指向下一批要返回的数据的起始位置。你无法让这个指针突然跳到任意位置。</p></blockquote></li><li class="lvl-3"><p><strong>基于快照的上下文</strong><br>当你初始化一个 <code>scroll</code> 请求时，Elasticsearch 会为当时的查询条件创建一个<strong>数据快照（snapshot）</strong> 和<strong>搜索上下文（search context）</strong>，这个快照是固定的。后续所有的 <code>scroll</code> 请求都是用同一个 <code>scroll_id</code>，在这个固定的快照上顺序地获取下一批数据。它没有为“跳到第 N 页”这种操作建立任何索引或映射。</p></li><li class="lvl-3"><p><strong><code>scroll_id</code> 的含义</strong><br><code>scroll_id</code> 不是一个指向页码的标记，而是一个<strong>包含了整个查询状态、排序顺序和当前读取位置</strong>的上下文句柄。服务器根据这个句柄知道“你已经拿到前 1000 条了，下一次应该从第 1001 条开始”。</p></li></ol><p><strong>举例说明</strong></p><blockquote><p>假设你有一个 10000 条结果的 <code>scroll</code> 查询，每次返回 100 条。</p><ul class="lvl-1"><li class="lvl-2"><strong>第一次请求 (<code>scroll=1m</code>)</strong>: 你得到结果 1-100 和一个 <code>scroll_id: ABC</code>。</li><li class="lvl-2"><strong>第二次请求 (带上 <code>scroll_id: ABC</code>)</strong>: 你得到结果 101-200。</li><li class="lvl-2">…</li><li class="lvl-2"><strong>你想直接拿到第 50 页（结果 4901-5000）</strong>: <strong>这是不可能的</strong>。你没有任何一个 <code>scroll_id</code> 能让你直接从 4901 开始。你唯一的办法是从头开始，顺序地进行大约 49 次 <code>scroll</code> 请求，丢弃掉前 4900 条结果，才能拿到你想要的那一页。这不仅完全失去了 <code>scroll</code> 的性能优势，其性能甚至会比深度分页更差，因为你还额外维护了一个沉重的上下文。</li></ul></blockquote><h4 id="基于-search-after-的随机翻页设计">基于 <strong><code>search_after</code></strong> 的随机翻页设计</h4><p><code>search_after</code> 的核心也不完全支持随机翻页，但通过巧妙的设计，可以实现“有限度的”随机分页。 它无法像传统数据库 <code>LIMIT offset, size</code> 那样直接跳到任意页码，但比 <code>scroll</code> 灵活得多。</p><blockquote><p>和 <code>scroll</code> 一样，<code>search_after</code> 的核心也是一个<strong>顺序遍历器</strong>。它的参数是上一页最后一条记录的<strong>排序值</strong>。Elasticsearch 利用这些值在排序索引中快速定位，并获取“接下来”的一批数据。</p><p>它没有也不维护任何关于“页码”的概念。要跳到第 N 页，系统必须知道第 (N-1) 页最后一条记录的排序值是什么。而获取这个值，恰恰就是深度分页要解决的难题本身。</p></blockquote><h5 id="策略一：客户端缓存（最实用、最常用）">策略一：客户端缓存（最实用、最常用）</h5><p>这是实现“前后翻页”和“跳回已浏览页”的最主流方案。</p><blockquote><ol><li class="lvl-3"><p>客户端（浏览器、APP）或服务端会话（Session）在用户浏览过程中，<strong>缓存每一页的“页边界”</strong>（即每一页最后一条记录的排序值）。</p></li><li class="lvl-3"><p>当用户点击“下一页”时，使用当前页的排序值。</p></li><li class="lvl-3"><p>当用户点击“上一页”或想跳回之前看过的某一页（例如第3页）时，从缓存中取出第2页的排序值，作为 <code>search_after</code> 参数去查询，得到的就是第3页的结果。</p></li></ol></blockquote><p><strong>优点：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>性能极佳，每次查询都是高效的。</p></li><li class="lvl-2"><p>可以实现完美的前后导航和跳回已浏览页面。</p></li></ul><p><strong>缺点：</strong></p><ul class="lvl-0"><li class="lvl-2"><p><strong>无法跳转到未浏览的页面</strong>。你不能直接跳到第100页，除非你之前已经一页一页地浏览并缓存了第99页的排序值。</p></li><li class="lvl-2"><p>需要客户端逻辑来管理这个缓存。</p></li></ul><h5 id="策略二：服务端预计算（复杂，有代价）">策略二：服务端预计算（复杂，有代价）</h5><p>如果需要支持跳转到未浏览的页面，需要一个更强大的服务端架构。</p><blockquote><ol><li class="lvl-3"><p><strong>构建“页索引”服务</strong>：有一个后台任务或服务，预先为常见的排序和查询条件计算好每一页的边界排序值，并将其存储起来（例如在Redis中）。</p></li><li class="lvl-3"><p><strong>查询流程</strong>：当用户请求跳转到第N页时，API先向这个“页索引”服务请求获取第(N-1)页的排序值，然后再用这个值去执行 <code>search_after</code> 查询。</p></li></ol></blockquote><p><strong>优点：</strong> 理论上可以实现真正的随机跳页。</p><p><strong>缺点：</strong></p><ul class="lvl-0"><li class="lvl-2"><p><strong>极其复杂</strong>：引入了新的服务和系统复杂性。</p></li><li class="lvl-2"><p><strong>维护成本高</strong>：数据有任何增删改，都可能使预计算的页边界失效，需要重新计算，维护数据一致性挑战巨大。</p></li><li class="lvl-2"><p><strong>不灵活</strong>：只能针对少数几个固定的排序方式和查询条件做预计算。</p></li></ul><h5 id="策略三：近似跳页（牺牲精确度）">策略三：近似跳页（牺牲精确度）</h5><p>如果你的一个排序字段是均匀分布的（如自增ID、均匀分布的时间戳），你可以进行估算。例如，你想跳转到第50页（每页20条），你可以估算一个 <code>search_after</code> 值。然后让用户在这个大致的结果集里进行微调。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;search_after&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;2023-01-01T00:00:00Z&quot;</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 估算一个大概的时间点</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">20</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>**缺点：**结果不精确，用户体验差，适用场景有限。</p><h3 id="行业标准做法（强烈推荐）">行业标准做法（强烈推荐）</h3><p>像Google、Amazon、Netflix这样的大型互联网应用，<strong>它们直接从产品设计上规避了“深度随机跳页”的需求</strong>。</p><blockquote><ol><li class="lvl-3"><p><strong>提供强大的搜索和筛选器</strong>：让用户通过加条件（如时间范围、分类、标签）来缩小结果集，使其变得很少，无需深度分页。</p></li><li class="lvl-3"><p><strong>只提供“上一页/下一页”</strong>：这是无限滚动的标准模式，完美契合 <code>search_after</code> 的优势。</p></li><li class="lvl-3"><p><strong>限制最大可访问范围</strong>：即使提供了页码，通常也只显示前10页或前20页的页码选项，并提示“请优化搜索以查看更多结果”。</p></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> DB </category>
          
          <category> 深度分页 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度分页 </tag>
            
            <tag> scroll </tag>
            
            <tag> 游标分页 </tag>
            
            <tag> search_after </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 LangChain + RAG 构建医疗问答Agent</title>
      <link href="/2025/09/92bb519d826e4443936d4cce27ceb524/"/>
      <url>/2025/09/92bb519d826e4443936d4cce27ceb524/</url>
      
        <content type="html"><![CDATA[<h2 id="关于-LangChain"><a href="https://www.langchain.com.cn/docs">关于 LangChain</a></h2><p>LangChain 是一个用于构建基于大语言模型应用程序的开源框架，旨在帮助开发者更高效地开发、部署和管理 LLM 驱动的应用。</p><p>其核心价值在于模块化设计、标准化接口和丰富的工具链，简化从原型设计到生产部署的AI应用开发全流程。它不依赖特定模型，而是提供统一接口对接OpenAI、Hugging Face等主流LLM，并支持自定义模型集成，使开发者能聚焦业务逻辑而非底层技术细节。</p><blockquote><p>它提供了一系列模块化组件和工具，简化了与 LLM 交互、数据处理、工作流编排等任务。</p><ul class="lvl-1"><li class="lvl-2"><strong>LangChain</strong>：提供七大组件（Agent, Models, Chains, Tools, Memory, Callbacks, RAG）。</li><li class="lvl-2"><strong>LangGraph</strong>：在其之上编排复杂流程，解决两类问题：<ol><li class="lvl-5"><strong>线性链的局限</strong>：基础 Chain 难以处理循环/分支。</li><li class="lvl-5"><strong>Agent 的扩展</strong>：增强 Agent 的鲁棒性（如自动重试、状态回溯）。</li></ol></li></ul></blockquote><p>LangChain 主要解决以下问题：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>LLM 集成</strong>：支持多种大模型（如 OpenAI GPT、Anthropic、Llama2 等），统一接口调用。</p></li><li class="lvl-2"><p><strong>上下文管理</strong>：处理长文本、多轮对话的上下文限制（如分块、摘要、记忆机制）。</p></li><li class="lvl-2"><p><strong>数据增强</strong>：结合外部数据源（文档、数据库、API）进行检索增强生成（RAG）。</p></li><li class="lvl-2"><p><strong>工作流编排</strong>：通过链（Chain）将多个步骤组合成复杂流程（如问答、摘要、代码生成）。</p></li><li class="lvl-2"><p><strong>代理（Agent）</strong>：让 LLM 动态调用工具（如搜索、计算、自定义函数）完成复杂任务。</p></li></ul></blockquote><p>使用案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 翻译智能体</span></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> langchain_core.prompts <span class="keyword">import</span> ChatPromptTemplate</span><br><span class="line"><span class="keyword">from</span> langchain_core.output_parsers <span class="keyword">import</span> StrOutputParser</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"><span class="keyword">from</span> langserve <span class="keyword">import</span> add_routes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. Create prompt template</span></span><br><span class="line">system_template = <span class="string">&quot;Translate the following into &#123;language&#125;:&quot;</span></span><br><span class="line">prompt_template = ChatPromptTemplate.from_messages([</span><br><span class="line">    (<span class="string">&#x27;system&#x27;</span>, system_template),</span><br><span class="line">    (<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;&#123;text&#125;&#x27;</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. Create model</span></span><br><span class="line">model = ChatOpenAI()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. Create parser（输出转换，只过滤需要的内容）</span></span><br><span class="line">parser = StrOutputParser()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. Create chain</span></span><br><span class="line">chain = prompt_template | model | parser</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. App definition</span></span><br><span class="line">app = FastAPI(</span><br><span class="line">  title=<span class="string">&quot;LangChain Server&quot;</span>,</span><br><span class="line">  version=<span class="string">&quot;1.0&quot;</span>,</span><br><span class="line">  description=<span class="string">&quot;A simple API server using LangChain&#x27;s Runnable interfaces&quot;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. Adding chain route</span></span><br><span class="line">add_routes(</span><br><span class="line">    app,</span><br><span class="line">    chain,</span><br><span class="line">    path=<span class="string">&quot;/chain&quot;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">import</span> uvicorn</span><br><span class="line">    uvicorn.run(app, host=<span class="string">&quot;localhost&quot;</span>, port=<span class="number">8000</span>)</span><br></pre></td></tr></table></figure><h2 id="关于-Ollama"><a href="https://ollama.com/">关于 Ollama</a></h2><p>Ollama 是一个强大的运行框架，旨在使运行LLM尽可能简单。Ollama 简化了在本地机器或服务器上下载、运行和管理大型语言模型的整个过程。使用 Ollama 很简单，可以在不同的平台上完成安装。</p><p>Ollama的API具有许多基本功能，使其成为开发人员的重要选择之一，其主要功能如下：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>流支持：实时token生成，完全兼容OpenAI API，非常适合创建响应式应用程序。</p></li><li class="lvl-2"><p>多模型管理： 能够同时运行不同的模型，但有一个警告。 当 VRAM 有限时，Ollama 将停止一个模型来运行另一个模型，这需要仔细的资源规划。</p></li><li class="lvl-2"><p>参数控制： 通过 API 调用进行高度可定制的设置，它提供了很大的灵活性，但对于初学者和生产环境的服务器来说并不友好。</p></li><li class="lvl-2"><p>CPU 兼容性： 当 VRAM 不足时，智能资源管理可以自动将模型卸载到 CPU执行，使得在 GPU 内存有限的系统上也可以运行大模型服务。</p></li><li class="lvl-2"><p>语言无关性： 可以自由使用Python、 JavaScript、 Go等编程语言，以及其他任何具有 HTTP 功能的编程语言。</p></li></ul></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装模型</span></span><br><span class="line">ollama pull nomic-embed-text</span><br><span class="line">ollama pull qwen2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动ollama</span></span><br><span class="line">ollama server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入对话模式</span></span><br><span class="line">ollama run qwen2</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 调用 ollama 的接口</span></span><br><span class="line">curl --location --request POST <span class="string">&#x27;http://localhost:11434/api/generate&#x27;</span> \</span><br><span class="line">--header <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">--data-raw <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;model&quot;: &quot;qwen2&quot;,</span></span><br><span class="line"><span class="string">    &quot;prompt&quot;: &quot;Why is the sky blue?&quot;,</span></span><br><span class="line"><span class="string">    &quot;stream&quot;: false</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="关于-Chroma"><a href="https://github.com/chroma-core/chroma">关于 Chroma</a></h2><p>Chroma 是一种高效的开源向量数据库，专为存储和检索高维向量数据设计，广泛应用于文本嵌入管理和相似性搜索。它通过将文本转化为向量嵌入，支持语义搜索、推荐系统等功能，尤其适合大模型应用场景。</p><blockquote><p>Chroma 的核心基于 HNSW 算法，支持快速的近似最近邻搜索。其主要特点包括：</p><ul class="lvl-1"><li class="lvl-2"><strong>多存储后端</strong>：支持 DuckDB 和 ClickHouse 等存储选项。</li><li class="lvl-2"><strong>多语言支持</strong>：提供 Python 和 JavaScript SDK。</li><li class="lvl-2"><strong>简单易用</strong>：设计简洁，提升开发效率。</li><li class="lvl-2"><strong>高性能</strong>：支持快速相似性搜索和结果分析。</li></ul></blockquote><p>使用案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> chromadb</span><br><span class="line"><span class="comment"># 初始化客户端：</span></span><br><span class="line">client = chromadb.Client()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建集合：</span></span><br><span class="line">collection = client.create_collection(<span class="string">&quot;all-my-documents&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加数据：</span></span><br><span class="line">collection.add(</span><br><span class="line">    documents=[<span class="string">&quot;Document about AI&quot;</span>, <span class="string">&quot;Document about food&quot;</span>],</span><br><span class="line">    metadatas=[&#123;<span class="string">&quot;category&quot;</span>: <span class="string">&quot;technology&quot;</span>&#125;, &#123;<span class="string">&quot;category&quot;</span>: <span class="string">&quot;lifestyle&quot;</span>&#125;],</span><br><span class="line">    ids=[<span class="string">&quot;id1&quot;</span>, <span class="string">&quot;id2&quot;</span>]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询数据，支持通过元数据和文档内容进行过滤查询，按元数据过滤：</span></span><br><span class="line">results = collection.query(</span><br><span class="line">    query_texts=[<span class="string">&quot;AI&quot;</span>],</span><br><span class="line">    n_results=<span class="number">2</span>,</span><br><span class="line">    where=&#123;<span class="string">&quot;category&quot;</span>: &#123;<span class="string">&quot;$eq&quot;</span>: <span class="string">&quot;technology&quot;</span>&#125;&#125;</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(results)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 组合条件查询：按元数据过滤 + 按文档内容过滤</span></span><br><span class="line">results = collection.query(</span><br><span class="line">    query_texts=[<span class="string">&quot;AI&quot;</span>],</span><br><span class="line">    n_results=<span class="number">2</span>,</span><br><span class="line">    where=&#123;<span class="string">&quot;$and&quot;</span>: [&#123;<span class="string">&quot;category&quot;</span>: &#123;<span class="string">&quot;$eq&quot;</span>: <span class="string">&quot;technology&quot;</span>&#125;&#125;, &#123;<span class="string">&quot;year&quot;</span>: &#123;<span class="string">&quot;$gt&quot;</span>: <span class="number">2021</span>&#125;&#125;]&#125;</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(results)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新数据：</span></span><br><span class="line">collection.update(</span><br><span class="line">    ids=[<span class="string">&quot;id1&quot;</span>],</span><br><span class="line">    documents=[<span class="string">&quot;Updated document about AI&quot;</span>],</span><br><span class="line">    metadatas=[&#123;<span class="string">&quot;category&quot;</span>: <span class="string">&quot;updated technology&quot;</span>&#125;]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除数据：</span></span><br><span class="line">collection.delete(ids=[<span class="string">&quot;id1&quot;</span>])</span><br></pre></td></tr></table></figure><h2 id="医疗问答-Demo">医疗问答 Demo</h2><p>构建 医疗问答系统的样例。需要安装 Ollama 以及 相关依赖，添加指定数据集。可参考 <a href="https://github.com/haengood/ai-medical-agent">GitHub 源码</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain_core._api <span class="keyword">import</span> LangChainDeprecationWarning</span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>, category=LangChainDeprecationWarning)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain.agents <span class="keyword">import</span> initialize_agent, Tool</span><br><span class="line"><span class="keyword">from</span> langchain.chains <span class="keyword">import</span> RetrievalQA</span><br><span class="line"><span class="comment"># 按照最新的langchain导入规范，从langchain_community导入组件</span></span><br><span class="line"><span class="keyword">from</span> langchain_ollama <span class="keyword">import</span> ChatOllama</span><br><span class="line"><span class="keyword">from</span> langchain_chroma <span class="keyword">import</span> Chroma</span><br><span class="line"><span class="keyword">from</span> langchain_community.embeddings <span class="keyword">import</span> HuggingFaceEmbeddings</span><br><span class="line"><span class="keyword">from</span> langchain_community.document_loaders <span class="keyword">import</span> TextLoader</span><br><span class="line"><span class="keyword">from</span> langchain.text_splitter <span class="keyword">import</span> CharacterTextSplitter</span><br><span class="line"><span class="keyword">from</span> langchain_community.tools <span class="keyword">import</span> DuckDuckGoSearchRun</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加项目根目录到Python路径，以便导入tools模块</span></span><br><span class="line">sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), <span class="string">&#x27;../../&#x27;</span>)))</span><br><span class="line"><span class="comment"># 导入医疗专用工具</span></span><br><span class="line"><span class="keyword">from</span> tools.medical_tools <span class="keyword">import</span> MedicalTools</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MedicalAgent</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 初始化语言模型 - 使用Ollama并优化参数以提高响应速度</span></span><br><span class="line">        <span class="variable language_">self</span>.llm = ChatOllama(</span><br><span class="line">            model=<span class="string">&quot;gemma3:4b&quot;</span>,  <span class="comment"># Ollama中的模型名称，使用更通用的llama3</span></span><br><span class="line">            temperature=<span class="number">0</span>,</span><br><span class="line">            base_url=<span class="string">&quot;http://localhost:11434&quot;</span>,  <span class="comment"># Ollama默认API地址</span></span><br><span class="line">            <span class="comment"># 增加超时时间以解决连接问题</span></span><br><span class="line">            timeout=<span class="number">300</span>,</span><br><span class="line">            <span class="comment"># 移除JSON格式要求，某些模型可能不支持</span></span><br><span class="line">            <span class="comment"># format=&quot;json&quot;</span></span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 加载RAG数据</span></span><br><span class="line">        <span class="variable language_">self</span>.vectorstore = <span class="variable language_">self</span>.load_medical_knowledge()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建检索链 - 减少检索文档数量以提高速度</span></span><br><span class="line">        <span class="variable language_">self</span>.retrieval_chain = RetrievalQA.from_chain_type(</span><br><span class="line">            llm=<span class="variable language_">self</span>.llm,</span><br><span class="line">            chain_type=<span class="string">&quot;stuff&quot;</span>,</span><br><span class="line">            retriever=<span class="variable language_">self</span>.vectorstore.as_retriever(</span><br><span class="line">                search_kwargs=&#123;<span class="string">&quot;k&quot;</span>: <span class="number">2</span>&#125;  <span class="comment"># 从3减少到2，减少需要处理的文档数量</span></span><br><span class="line">            ),</span><br><span class="line">            return_source_documents=<span class="literal">True</span></span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建网络搜索工具</span></span><br><span class="line">        <span class="variable language_">self</span>.search = DuckDuckGoSearchRun()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 定义工具列表</span></span><br><span class="line">        <span class="variable language_">self</span>.tools = [</span><br><span class="line">            Tool(</span><br><span class="line">                name=<span class="string">&quot;Medical Knowledge Base&quot;</span>,</span><br><span class="line">                func=<span class="variable language_">self</span>.query_medical_knowledge,</span><br><span class="line">                description=<span class="string">&quot;适合用来回答医学知识相关的问题，包括疾病、药物、急救和健康生活方式等内容&quot;</span></span><br><span class="line">            ),</span><br><span class="line">            Tool(</span><br><span class="line">                name=<span class="string">&quot;Web Search&quot;</span>,</span><br><span class="line">                func=<span class="variable language_">self</span>.search.run,</span><br><span class="line">                description=<span class="string">&quot;适合用来搜索最新的医疗信息、研究进展和新闻等互联网信息&quot;</span></span><br><span class="line">            ),</span><br><span class="line">            Tool(</span><br><span class="line">                name=<span class="string">&quot;Symptom Extractor&quot;</span>,</span><br><span class="line">                func=<span class="variable language_">self</span>.extract_symptoms,</span><br><span class="line">                description=<span class="string">&quot;适合用来从文本中提取症状信息&quot;</span></span><br><span class="line">            ),</span><br><span class="line">            Tool(</span><br><span class="line">                name=<span class="string">&quot;Severity Assessment&quot;</span>,</span><br><span class="line">                func=<span class="variable language_">self</span>.assess_severity,</span><br><span class="line">                description=<span class="string">&quot;适合用来评估症状的严重程度&quot;</span></span><br><span class="line">            )</span><br><span class="line">        ]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 初始化智能体 - 关闭verbose输出以提高响应速度</span></span><br><span class="line">        <span class="variable language_">self</span>.agent = initialize_agent(</span><br><span class="line">            <span class="variable language_">self</span>.tools,</span><br><span class="line">            <span class="variable language_">self</span>.llm,</span><br><span class="line">            agent=<span class="string">&quot;zero-shot-react-description&quot;</span>,</span><br><span class="line">            verbose=<span class="literal">False</span>,  <span class="comment"># 从True改为False，减少输出信息</span></span><br><span class="line">            handle_parsing_errors=<span class="literal">True</span>,</span><br><span class="line">            max_iterations=<span class="number">3</span>,  <span class="comment"># 限制最大迭代次数</span></span><br><span class="line">            early_stopping_method=<span class="string">&quot;force&quot;</span></span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 初始化医疗工具</span></span><br><span class="line">        <span class="variable language_">self</span>.medical_tools = MedicalTools()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load_medical_knowledge</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;加载医疗知识库数据&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 获取data目录下的所有txt文件</span></span><br><span class="line">        data_dir = os.path.join(os.path.abspath(os.path.dirname(__file__)), <span class="string">&quot;../../data&quot;</span>)</span><br><span class="line">        files = glob.glob(os.path.join(data_dir, <span class="string">&quot;*.txt&quot;</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> files:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;警告: 未找到医疗知识库文件。将创建一个空的向量存储。&quot;</span>)</span><br><span class="line">            <span class="keyword">from</span> langchain_community.embeddings <span class="keyword">import</span> FakeEmbeddings</span><br><span class="line">            <span class="keyword">from</span> langchain_core.documents <span class="keyword">import</span> Document</span><br><span class="line">            <span class="comment"># 创建空文档列表并使用from_documents方法初始化Chroma</span></span><br><span class="line">            empty_docs = [Document(page_content=<span class="string">&quot;这是一个空的医疗知识库文档&quot;</span>, metadata=&#123;<span class="string">&quot;source&quot;</span>: <span class="string">&quot;empty&quot;</span>&#125;)]</span><br><span class="line">            <span class="keyword">return</span> Chroma.from_documents(empty_docs, FakeEmbeddings(size=<span class="number">768</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 加载文档</span></span><br><span class="line">        documents = []</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            loader = TextLoader(file, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">            documents.extend(loader.load())</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 分割文档</span></span><br><span class="line">        text_splitter = CharacterTextSplitter(chunk_size=<span class="number">1000</span>, chunk_overlap=<span class="number">200</span>)</span><br><span class="line">        texts = text_splitter.split_documents(documents)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建向量存储 - 使用FakeEmbeddings避免下载外部模型</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;使用FakeEmbeddings创建向量存储...&quot;</span>)</span><br><span class="line">        <span class="keyword">from</span> langchain_community.embeddings <span class="keyword">import</span> FakeEmbeddings</span><br><span class="line">        vectorstore = Chroma.from_documents(texts, FakeEmbeddings(size=<span class="number">768</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> vectorstore</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">query_medical_knowledge</span>(<span class="params">self, query</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;查询医疗知识库 - 优化查询逻辑以提高响应速度&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 快速查询</span></span><br><span class="line">            result = <span class="variable language_">self</span>.retrieval_chain.invoke(query)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 格式化回答，包含来源信息</span></span><br><span class="line">            answer = result[<span class="string">&quot;result&quot;</span>]</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 简化处理逻辑，减少不必要的操作</span></span><br><span class="line">            sources = <span class="built_in">set</span>()</span><br><span class="line">            <span class="keyword">for</span> doc <span class="keyword">in</span> result[<span class="string">&quot;source_documents&quot;</span>]:</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&quot;source&quot;</span> <span class="keyword">in</span> doc.metadata:</span><br><span class="line">                    sources.add(os.path.basename(doc.metadata[<span class="string">&quot;source&quot;</span>]))</span><br><span class="line">            </span><br><span class="line">            formatted_sources = <span class="string">&quot;\n来源: &quot;</span> + <span class="string">&quot;, &quot;</span>.join(sources) <span class="keyword">if</span> sources <span class="keyword">else</span> <span class="string">&quot;&quot;</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 直接返回回答，减少额外处理</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;answer&#125;</span><span class="subst">&#123;formatted_sources&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;知识库查询错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&quot;知识库查询失败: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extract_symptoms</span>(<span class="params">self, text</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;提取症状信息&quot;&quot;&quot;</span></span><br><span class="line">        symptoms = <span class="variable language_">self</span>.medical_tools.extract_symptoms(text)</span><br><span class="line">        <span class="keyword">if</span> symptoms:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&quot;提取到的症状: <span class="subst">&#123;<span class="string">&#x27;, &#x27;</span>.join(symptoms)&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;未提取到明显症状&quot;</span></span><br><span class="line">            </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">assess_severity</span>(<span class="params">self, symptoms_text</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;评估症状严重程度&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 先从文本中提取症状</span></span><br><span class="line">        symptoms = <span class="variable language_">self</span>.medical_tools.extract_symptoms(symptoms_text)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> symptoms:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;未提取到可评估的症状&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 评估严重程度</span></span><br><span class="line">        severity = <span class="variable language_">self</span>.medical_tools.assess_severity(symptoms)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;症状: <span class="subst">&#123;<span class="string">&#x27;, &#x27;</span>.join(symptoms)&#125;</span>\n<span class="subst">&#123;severity&#125;</span>&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self, question</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;运行智能体回答问题&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 验证医疗查询是否合适</span></span><br><span class="line">        is_valid, error_msg = <span class="variable language_">self</span>.medical_tools.validate_medical_query(question)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_valid:</span><br><span class="line">            <span class="keyword">return</span> error_msg</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 使用invoke方法替代已过时的run方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.agent.invoke(question)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 创建医疗智能体实例</span></span><br><span class="line">    medical_agent = MedicalAgent()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 示例问题</span></span><br><span class="line">    questions = [</span><br><span class="line">        <span class="string">&quot;什么是高血压？如何预防？&quot;</span>,</span><br><span class="line">        <span class="string">&quot;老年高血压患者有哪些注意事项？&quot;</span>,</span><br><span class="line">        <span class="string">&quot;脑血栓的高危因素有哪些？如何预防？&quot;</span>,</span><br><span class="line">        <span class="string">&quot;糖尿病的预防措施有哪些？&quot;</span>,</span><br><span class="line">        <span class="string">&quot;老年人如何保持健康的生活方式？&quot;</span>,</span><br><span class="line">        <span class="string">&quot;高血压、糖尿病和脑血栓之间有什么关系？&quot;</span>,</span><br><span class="line">        <span class="string">&quot;高危人群应该多久进行一次体检？&quot;</span></span><br><span class="line">    ]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 运行示例</span></span><br><span class="line">    <span class="keyword">for</span> q <span class="keyword">in</span> questions:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\n问题: <span class="subst">&#123;q&#125;</span>&quot;</span>)</span><br><span class="line">        result = medical_agent.run(q)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;回答: <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> Agent </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> LangChain </tag>
            
            <tag> LangGraph </tag>
            
            <tag> Ollama </tag>
            
            <tag> 医疗问答Agent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 多线程之等待全部执行完成</title>
      <link href="/2025/08/6d4b4511bd2443af994ec8e5982eb34a/"/>
      <url>/2025/08/6d4b4511bd2443af994ec8e5982eb34a/</url>
      
        <content type="html"><![CDATA[<p>需求：多线程任务（查询、文件、API）同时执行，等所有线程执行完成后才能继续向下，执行其他任务</p><h2 id="submit-多线程">submit()  多线程</h2><p>底层通过实现 Future 接口实现返回值，获取 callable 接口。</p><p>只有等线程执行完成获取到结果后才能继续执行后面的流程，会阻塞直到结果返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原理</span></span><br><span class="line"><span class="keyword">public</span> Future&lt;?&gt; submit(Runnable task) &#123;</span><br><span class="line">    <span class="keyword">if</span> (task == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    RunnableFuture&lt;Void&gt; ftask = newTaskFor(task, <span class="literal">null</span>);</span><br><span class="line">    execute(ftask);</span><br><span class="line">    <span class="keyword">return</span> ftask;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RunnableAdapter 实现 Callable 接口的 call()</span></span><br><span class="line"><span class="keyword">protected</span> &lt;T&gt; RunnableFuture&lt;T&gt; <span class="title function_">newTaskFor</span><span class="params">(Runnable runnable, T value)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.callable = <span class="keyword">new</span> <span class="title class_">RunnableAdapter</span>&lt;T&gt;(runnable, value);</span><br><span class="line">    <span class="built_in">this</span>.state = NEW;       <span class="comment">// ensure visibility of callable</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Callable 的 get() 方法 ，通过运行状态 和 LockSupport 实现线程阻塞</span></span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt; 只有所有线程运行结束后才可以结束</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Haeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> haeng2030@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2025/1/14 18:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadOnlyAllBySubmit</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(RandomUtil.randomInt(n * <span class="number">2000</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;------thread = &#123;&#125;, num=&#123;&#125;, msg = &#123;&#125;&quot;</span>, Thread.currentThread().getName(), n, e.getLocalizedMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">5</span>, <span class="number">10</span>,</span><br><span class="line">                <span class="number">5L</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">ThreadOnlyAllBySubmit</span> <span class="variable">threadOnlyOne</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadOnlyAllBySubmit</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        submit 等待线程执行完成，返回值</span></span><br><span class="line">        Future&lt;Integer&gt; res1 = threadPool.submit(() -&gt; threadOnlyOne.test(<span class="number">1</span>));</span><br><span class="line">        Future&lt;Integer&gt; res2 = threadPool.submit(() -&gt; threadOnlyOne.test(<span class="number">4</span>));</span><br><span class="line">        Future&lt;Integer&gt; res3 = threadPool.submit(() -&gt; threadOnlyOne.test(<span class="number">7</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// get 方法等待线程执行完成后获取结果，超时后没有则抛出异常</span></span><br><span class="line">            log.warn(<span class="string">&quot;res1:: isDone=&#123;&#125;,   res=&#123;&#125;&quot;</span>, res1.isDone(), res1.get(<span class="number">5</span>, TimeUnit.SECONDS));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;+++++ meg1 = &#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;res2:: isDone=&#123;&#125;,   res=&#123;&#125;&quot;</span>, res2.isDone(), res2.get(<span class="number">5</span>, TimeUnit.SECONDS));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;+++++ meg2 = &#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;res3:: isDone=&#123;&#125;,   res=&#123;&#125;&quot;</span>, res3.isDone(), res3.get(<span class="number">5</span>, TimeUnit.SECONDS));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;+++++ meg3 = &#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Semaphore（信号量）">Semaphore（信号量）</h2><p>计数信号量用来控制同时访问某个特定资源的操作数量，或者同时执行某个指定操作的数量。计数信号量还可以用来实现某种资源池，或者对容器施加边界。</p><blockquote><p>Semaphore 中管理着一组虚拟的许可，通过  acquire 获取一个许可，如果没有许可则一直阻塞。其本质就是操作系统的P-V操作，当资源足够的时候线程获得资源并执行，资源不足时线程等待或者退出，当资源被释放时线程又可以获取竞争资源继续执行；</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt; 只有所有线程运行结束后才可以结束</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Haeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> haeng2030@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2025/1/14 18:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadOnlyAllBySemaphore</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Semaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n, <span class="keyword">final</span> AtomicInteger val)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(RandomUtil.randomInt(<span class="number">5000</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;------thread = &#123;&#125;, msg = &#123;&#125;&quot;</span>, Thread.currentThread().getName(), e.getLocalizedMessage());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        semaphore.release();</span><br><span class="line">        val.addAndGet(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">5</span>, <span class="number">10</span>,</span><br><span class="line">                <span class="number">5L</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">threadNum</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        <span class="type">ThreadOnlyAllBySemaphore</span> <span class="variable">threadOnlyOne</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadOnlyAllBySemaphore</span>();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">val</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">1</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">4</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">7</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">2</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">6</span>, val));</span><br><span class="line"></span><br><span class="line">        semaphore.acquire(threadNum);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;semaphore结果=&#123;&#125;&quot;</span>, val.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CountDownLatch（计数器）">CountDownLatch（计数器）</h2><p>一种同步工具类，可以延迟线程的进度直到其到达终止状态。可以用来确保某些活动直到其他活动都完成后才继续执行。</p><p>应用场景：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>确保某个计算在其需要的所有资源都被初始化之后才继续执行。</p></li><li class="lvl-2"><p>确保某个服务在其依赖的所有其他服务都已经启动之后才启动。</p></li><li class="lvl-2"><p>等待直到某个操作的所有参与者都就绪再继续执行。</p></li></ul></blockquote><p>实现原理：</p><blockquote><p>闭锁状态包括一个计数器，该计数器被初始化为一个正数，表示需要等待的事件数量。 countDown 方法用来递减计数器，表示有一个事件已经发生了， await 方法用来等待计数器达到零。如果计数器的值非零，那么 await 方法会一直阻塞直到计数器为零，或者等待中的线程中断、等待超时。当某个线程调用await()方法时，由于tryAcquireShared会判断state是否等于0，如果不等于，就会进入等待队列，直到countDown调用sync.releaseShared(1)使得sync的状态到0，await的线程才会继续执行；</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt; 只有所有线程运行结束后才可以结束</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Haeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> haeng2030@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2025/1/14 18:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadOnlyAllByCountDownLatch</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CountDownLatch countDownLatch;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ThreadOnlyAllByCountDownLatch</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.num = num;</span><br><span class="line">        countDownLatch = <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n, <span class="keyword">final</span> AtomicInteger val)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(RandomUtil.randomInt(<span class="number">5000</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;------thread = &#123;&#125;,  msg = &#123;&#125;&quot;</span>, Thread.currentThread().getName(), e.getLocalizedMessage());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.countDown();</span><br><span class="line"></span><br><span class="line">        val.addAndGet(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">5</span>, <span class="number">10</span>,</span><br><span class="line">                <span class="number">5L</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">threadNum</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        <span class="type">ThreadOnlyAllByCountDownLatch</span> <span class="variable">threadOnlyOne</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadOnlyAllByCountDownLatch</span>(threadNum);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">val</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">1</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">4</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">7</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">2</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">6</span>, val));</span><br><span class="line"></span><br><span class="line">        threadOnlyOne.countDownLatch.await();</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;countDownLatch结果=&#123;&#125;&quot;</span>, val.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java多线程 </tag>
            
            <tag> Semaphore </tag>
            
            <tag> ThreadPoolExecutor </tag>
            
            <tag> Runnable </tag>
            
            <tag> Callable </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 多线程之等待至少一个执行完成</title>
      <link href="/2025/08/ab60513384f74cac8ff0ab36a98cc1a6/"/>
      <url>/2025/08/ab60513384f74cac8ff0ab36a98cc1a6/</url>
      
        <content type="html"><![CDATA[<p>需求：多个线程同时执行一个任务，只要一个成功就退出，其他线程任务可以取消或无视。</p><blockquote><p><strong>注意</strong>：如果要暂停线程池中其他未执行完成的线程，需要先记录下来，然后调用其打断方法。</p></blockquote><h2 id="CountDownLatch（计数器）">CountDownLatch（计数器）</h2><p>一种同步工具类，可以延迟线程的进度直到其到达终止状态。可以用来确保某些活动直到其他活动都完成后才继续执行。</p><p>应用场景：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>确保某个计算在其需要的所有资源都被初始化之后才继续执行。</p></li><li class="lvl-2"><p>确保某个服务在其依赖的所有其他服务都已经启动之后才启动。</p></li><li class="lvl-2"><p>等待直到某个操作的所有参与者都就绪再继续执行。</p></li></ul></blockquote><p>实现原理：</p><blockquote><p>闭锁状态包括一个计数器，该计数器被初始化为一个正数，表示需要等待的事件数量。 countDown 方法用来递减计数器，表示有一个事件已经发生了， await 方法用来等待计数器达到零。如果计数器的值非零，那么 await 方法会一直阻塞直到计数器为零，或者等待中的线程中断、等待超时。当某个线程调用await()方法时，由于tryAcquireShared会判断state是否等于0，如果不等于，就会进入等待队列，直到countDown调用sync.releaseShared(1)使得sync的状态到0，await的线程才会继续执行；</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt; 只要有一个线程运行结束后，就可以结束。忽视其他未完成线程</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; CountDownLatch</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Haeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> haeng2030@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2025/1/14 18:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadOnlyOneByCountDownLatch</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n, <span class="keyword">final</span> AtomicInteger val)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(RandomUtil.randomInt(<span class="number">5000</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;------thread = &#123;&#125;,  msg = &#123;&#125;&quot;</span>, Thread.currentThread().getName(), e.getLocalizedMessage());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.countDown();</span><br><span class="line"></span><br><span class="line">        val.compareAndSet(<span class="number">0</span>, n);</span><br><span class="line">        log.info(<span class="string">&quot;------thread = &#123;&#125;, num=&#123;&#125; &quot;</span>, Thread.currentThread().getName(), n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">5</span>, <span class="number">10</span>,</span><br><span class="line">                <span class="number">5L</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">ThreadOnlyOneByCountDownLatch</span> <span class="variable">threadOnlyOne</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadOnlyOneByCountDownLatch</span>();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">val</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">1</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">4</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">7</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">2</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">6</span>, val));</span><br><span class="line"></span><br><span class="line">        threadOnlyOne.countDownLatch.await();</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;countDownLatch结果=&#123;&#125;&quot;</span>, val.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CyclicBarrier（循环栅栏）">CyclicBarrier（循环栅栏）</h2><p>栅栏能阻塞一组线程直到某个事件发生，直到所有线程都到达栅栏点，栅栏才会打开。所以栅栏一般用于多个线程需要相互等待的情况</p><p><strong>闭锁用于等待事件，而栅栏用于等待其他线程。</strong></p><p>可以使一定数量的参与方（线程）<strong>反复地</strong>在栅栏位置汇集，<code>await</code>方法将阻塞直到所有线程都到达栅栏位置。</p><p><strong>原理实现:</strong></p><blockquote><p>CyclicBarrier 维护了一个计数器，和一个 generation 每次调用await都会有将计数器减一，并且产生一个新的 generation ，只要计数器不为零，所有前置线程都会触发  await(); 内部会调用 LockSupport.park(this); 方法将线程加入等待队列， 所有线程就绪，会调用 trip.signalAll(); 唤醒所有线程，同时执行一个用户自定义的 Runnable 策略</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt; 一个线程完成就继续，忽视其他未完成线程</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; CyclicBarrier  两个屏障</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Haeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> haeng2030@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2025/1/14 18:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadOnlyOneByCyclicBarrier</span> &#123;</span><br><span class="line"><span class="comment">//    建立两个屏障</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">CyclicBarrier</span> <span class="variable">cyclicBarrier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n, <span class="keyword">final</span> AtomicInteger val)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(RandomUtil.randomInt(<span class="number">5000</span>));</span><br><span class="line">            cyclicBarrier.await(); <span class="comment">//放开栅栏1</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;------thread = &#123;&#125;, num=&#123;&#125;, msg = &#123;&#125;&quot;</span>, Thread.currentThread().getName(), n, e.getLocalizedMessage());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        val.compareAndSet(<span class="number">0</span>, n);</span><br><span class="line">        log.info(<span class="string">&quot;------thread = &#123;&#125;, num=&#123;&#125; &quot;</span>, Thread.currentThread().getName(), n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, BrokenBarrierException &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">5</span>, <span class="number">10</span>,</span><br><span class="line">                <span class="number">5L</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">ThreadOnlyOneByCyclicBarrier</span> <span class="variable">threadOnlyOne</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadOnlyOneByCyclicBarrier</span>();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">val</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">1</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">4</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">7</span>, val));</span><br><span class="line"></span><br><span class="line">        threadOnlyOne.cyclicBarrier.await(); <span class="comment">//放开栅栏1</span></span><br><span class="line">        log.info(<span class="string">&quot;结果=&#123;&#125;&quot;</span>, val.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Semaphore（信号量）">Semaphore（信号量）</h2><p>计数信号量用来控制同时访问某个特定资源的操作数量，或者同时执行某个指定操作的数量。计数信号量还可以用来实现某种资源池，或者对容器施加边界。</p><blockquote><p>Semaphore 中管理着一组虚拟的许可，通过  acquire 获取一个许可，如果没有许可则一直阻塞。其本质就是操作系统的P-V操作，当资源足够的时候线程获得资源并执行，资源不足时线程等待或者退出，当资源被释放时线程又可以获取竞争资源继续执行；</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt; 一个线程完成就继续，忽视其他未完成线程</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Semaphore 信号量</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Haeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> haeng2030@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2025/1/14 18:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadOnlyOneBySemaphore</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Semaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n, <span class="keyword">final</span> AtomicInteger val)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(RandomUtil.randomInt(<span class="number">5000</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;------thread = &#123;&#125;, msg = &#123;&#125;&quot;</span>, Thread.currentThread().getName(), e.getLocalizedMessage());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        semaphore.release(); <span class="comment">// 释放信号量</span></span><br><span class="line">        val.compareAndSet(<span class="number">0</span>, n);</span><br><span class="line">        log.info(<span class="string">&quot;------thread = &#123;&#125;, num=&#123;&#125; &quot;</span>, Thread.currentThread().getName(), n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">5</span>, <span class="number">10</span>,</span><br><span class="line">                <span class="number">5L</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">ThreadOnlyOneBySemaphore</span> <span class="variable">threadOnlyOne</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadOnlyOneBySemaphore</span>();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">val</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">1</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">4</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">7</span>, val));</span><br><span class="line"></span><br><span class="line">        semaphore.acquire();</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;semaphore结果=&#123;&#125;&quot;</span>, val.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Queue（阻塞队列）">Queue（阻塞队列）</h2><p>通过队列的阻塞等待实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt; 其中一个线程运行结束后就可以结束，忽视其他未完成线程</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Haeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> haeng2030@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2025/1/14 18:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadOnlyOneByQueue</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> BlockingQueue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(RandomUtil.randomInt(<span class="number">5000</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;------thread = &#123;&#125;, msg = &#123;&#125;&quot;</span>, Thread.currentThread().getName(), e.getLocalizedMessage());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        queue.add(n);</span><br><span class="line">        log.info(<span class="string">&quot;------thread = &#123;&#125;, num=&#123;&#125; &quot;</span>, Thread.currentThread().getName(), n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">5</span>, <span class="number">10</span>,</span><br><span class="line">                <span class="number">5L</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">ThreadOnlyOneByQueue</span> <span class="variable">threadOnlyOne</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadOnlyOneByQueue</span>();</span><br><span class="line"></span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">1</span>));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">4</span>));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">7</span>));</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;结果=&#123;&#125;&quot;</span>, queue.take());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何打断其他线程">如何打断其他线程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt; 其中一个线程运行结束后就可以结束</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;  终止其他未结束的线程，需要先将所有线程记录下来，然后调用其打断方法。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Haeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> haeng2030@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2025/1/14 18:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadOnlyOneByQueueAndInterruptOther</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> BlockingQueue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n, Set&lt;Thread&gt; runThread)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">currentThread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        runThread.add(currentThread);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(n * RandomUtil.randomInt(<span class="number">1000</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;------thread = &#123;&#125;, msg = &#123;&#125;&quot;</span>, currentThread.getName(), e.getLocalizedMessage());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        queue.add(n);</span><br><span class="line">        runThread.remove(currentThread);</span><br><span class="line">        log.info(<span class="string">&quot;------thread = &#123;&#125;, num=&#123;&#125; &quot;</span>, currentThread.getName(), n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">5</span>, <span class="number">10</span>,</span><br><span class="line">                <span class="number">5L</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录此次运行的线程</span></span><br><span class="line">        <span class="keyword">final</span> Set&lt;Thread&gt; runThread = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        threadPool.execute(() -&gt; ThreadOnlyOneByQueueAndInterruptOther.test(<span class="number">411</span>, runThread));</span><br><span class="line">        threadPool.execute(() -&gt; ThreadOnlyOneByQueueAndInterruptOther.test(<span class="number">114</span>, runThread));</span><br><span class="line">        threadPool.execute(() -&gt; ThreadOnlyOneByQueueAndInterruptOther.test(<span class="number">70</span>, runThread));</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;结果=&#123;&#125;&quot;</span>, queue.take());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!runThread.isEmpty())<span class="comment">// 打断还在运行中的其他线程</span></span><br><span class="line">            runThread.parallelStream().forEach(Thread::interrupt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java多线程 </tag>
            
            <tag> Semaphore </tag>
            
            <tag> CountDownLatch </tag>
            
            <tag> ThreadPoolExecutor </tag>
            
            <tag> Runnable </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>负载均衡算法的多种实现方案</title>
      <link href="/2025/08/eaa2e8c201164ab5bdb705ebd84ee89d/"/>
      <url>/2025/08/eaa2e8c201164ab5bdb705ebd84ee89d/</url>
      
        <content type="html"><![CDATA[<p>常见的负载均衡算法列举与实现。</p><h2 id="随机">随机</h2><p>随机从集群中选择一个服务器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt; 负载均衡 - 随机算法   &lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 随机获得服务器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Haeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> haeng2030@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/8/5 17:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RandomSlb</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Server&gt; servers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">// 所有服务器列表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Server&gt; currentServer = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();   <span class="comment">// 当前服务器</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得下一个服务器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Server <span class="title function_">getNextServer</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchAlgorithmException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">nextIndex</span> <span class="operator">=</span> SecureRandom.getInstanceStrong().nextInt(servers.size());</span><br><span class="line">        <span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> servers.get(nextIndex);</span><br><span class="line">        currentServer.set(server);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> server;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchAlgorithmException &#123;</span><br><span class="line">        servers.add(<span class="keyword">new</span> <span class="title class_">Server</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="string">&quot;111&quot;</span>, <span class="number">1</span>));</span><br><span class="line">        servers.add(<span class="keyword">new</span> <span class="title class_">Server</span>(<span class="string">&quot;127.0.0.2&quot;</span>, <span class="string">&quot;222&quot;</span>, <span class="number">2</span>));</span><br><span class="line">        servers.add(<span class="keyword">new</span> <span class="title class_">Server</span>(<span class="string">&quot;127.0.0.3&quot;</span>, <span class="string">&quot;333&quot;</span>, <span class="number">3</span>));</span><br><span class="line">        servers.add(<span class="keyword">new</span> <span class="title class_">Server</span>(<span class="string">&quot;127.0.0.4&quot;</span>, <span class="string">&quot;444&quot;</span>, <span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(getNextServer());</span><br><span class="line">        System.out.println(getNextServer());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="随机加权">随机加权</h2><p>根据权重值，随机获取集群服务器。权值越大获取的概率越大</p><h3 id="TreeMap排序">TreeMap排序</h3><p>通过树结构实现：找到大于该权重值中的最小权重的服务。如： random = 4, 则找出的第一个为</p><p>结果近似于方法一，key为最大权重值，取最接近的一个</p><p><img src="/imgs/image-20240710113822720.png" alt="image-20240710113822720"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;   负载均衡 - 加权随机算法   &lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 按权重设置随机概率，示例：</span></span><br><span class="line"><span class="comment"> * 如有4个元素A、B、C、D，权重分别为1、2、3、4，随机结果中A:B:C:D的比例要为1:2:3:4。</span></span><br><span class="line"><span class="comment"> * 总体思路：累加每个元素的权重A(1)-B(3)-C(6)-D(10)，则4个元素的的权重管辖区间分别为[0,1)、[1,3)、[3,6)、[6,10)。</span></span><br><span class="line"><span class="comment"> * 然后随机出一个[0,10)之间的随机数。落在哪个区间，则该区间之后的元素即为按权重命中的元素。</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 实现方法：</span></span><br><span class="line"><span class="comment"> * 利用TreeMap，则构造出的一个树为:  利用treemap.tailMap().firstKey()即可找到目标元素。</span></span><br><span class="line"><span class="comment"> * 　　   　　B(3)</span></span><br><span class="line"><span class="comment"> * 　　   　 /      \</span></span><br><span class="line"><span class="comment"> *         /         \</span></span><br><span class="line"><span class="comment"> *      A(1)     D(10)</span></span><br><span class="line"><span class="comment"> *      /</span></span><br><span class="line"><span class="comment"> *     /</span></span><br><span class="line"><span class="comment"> *   C(6)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Haeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> haeng2030@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/8/5 17:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeightRandom</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TreeMap&lt;Double, Server&gt; weightMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WeightRandom</span><span class="params">(<span class="keyword">final</span> List&lt;Server&gt; list)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Server server : list) &#123;</span><br><span class="line">            <span class="type">double</span> <span class="variable">lastWeight</span> <span class="operator">=</span> <span class="built_in">this</span>.weightMap.size() == <span class="number">0</span> ? <span class="number">0</span> : <span class="built_in">this</span>.weightMap.lastKey(); <span class="comment">// 获取最后一个服务累加的权重值</span></span><br><span class="line"></span><br><span class="line">            <span class="built_in">this</span>.weightMap.put(server.getWeight() + lastWeight, server);    <span class="comment">//累加当前权重</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 随机获取下一个服务</span></span><br><span class="line">    <span class="keyword">public</span> Server <span class="title function_">randomServer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">randomWeight</span> <span class="operator">=</span> <span class="built_in">this</span>.weightMap.lastKey() * Math.random();     <span class="comment">// 获取随机数</span></span><br><span class="line">        <span class="comment">// 查找 key 大于  randomWeight 的所有</span></span><br><span class="line">        SortedMap&lt;Double, Server&gt; tailMap = <span class="built_in">this</span>.weightMap.tailMap(randomWeight, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.weightMap.get(tailMap.firstKey());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Server&gt; servers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        servers.add(<span class="keyword">new</span> <span class="title class_">Server</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="string">&quot;111&quot;</span>, <span class="number">1</span>));</span><br><span class="line">        servers.add(<span class="keyword">new</span> <span class="title class_">Server</span>(<span class="string">&quot;127.0.0.2&quot;</span>, <span class="string">&quot;222&quot;</span>, <span class="number">22</span>));</span><br><span class="line">        servers.add(<span class="keyword">new</span> <span class="title class_">Server</span>(<span class="string">&quot;127.0.0.3&quot;</span>, <span class="string">&quot;333&quot;</span>, <span class="number">3</span>));</span><br><span class="line">        servers.add(<span class="keyword">new</span> <span class="title class_">Server</span>(<span class="string">&quot;127.0.0.4&quot;</span>, <span class="string">&quot;444&quot;</span>, <span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">WeightRandom</span> <span class="variable">weightRandom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WeightRandom</span>(servers);</span><br><span class="line">        <span class="type">int</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="number">0</span>, s2 = <span class="number">0</span>, s3 = <span class="number">0</span>, s4 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">float</span> <span class="variable">maxCount</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; maxCount; i++) &#123;</span><br><span class="line">            <span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> weightRandom.randomServer();</span><br><span class="line">            <span class="keyword">switch</span> (server.getPort()) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;111&quot;</span>:</span><br><span class="line">                    s1++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;222&quot;</span>:</span><br><span class="line">                    s2++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;333&quot;</span>:</span><br><span class="line">                    s3++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;444&quot;</span>:</span><br><span class="line">                    s4++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">&quot;s1 = %d 出现概率 %.2f \n&quot;</span>, s1, (s1 / maxCount) * <span class="number">100</span>);</span><br><span class="line">        System.out.printf(<span class="string">&quot;s2 = %d 出现概率 %.2f \n&quot;</span>, s2, (s2 / maxCount) * <span class="number">100</span>);</span><br><span class="line">        System.out.printf(<span class="string">&quot;s3 = %d 出现概率 %.2f \n&quot;</span>, s3, (s3 / maxCount) * <span class="number">100</span>);</span><br><span class="line">        System.out.printf(<span class="string">&quot;s4 = %d 出现概率 %.2f \n&quot;</span>, s4, (s4 / maxCount) * <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="区间法">区间法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;   负载均衡 - 加权随机算法   &lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 按权重设置随机概率，示例：</span></span><br><span class="line"><span class="comment"> * 如有4个元素A、B、C、D，权重分别为1、2、3、4，随机结果中A:B:C:D的比例要为1:2:3:4。</span></span><br><span class="line"><span class="comment"> * 总体思路：累加每个元素的权重A(1)-B(3)-C(6)-D(10)，则4个元素的的权重管辖区间分别为[0,1)、[1,3)、[3,6)、[6,10)。</span></span><br><span class="line"><span class="comment"> *      然后随机出一个[0,10)之间的随机数。落在哪个区间，则该区间之后的元素即为按权重命中的元素。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 实现方法：</span></span><br><span class="line"><span class="comment"> *      根据权值，获得区间范围列表，并加入到对应的服务中，Map&lt;Server, Set&lt;Integer&gt;&gt;  key为服务， value为区间列表值</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Haeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> haeng2030@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/8/5 17:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeightSlb</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Server&gt; servers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">// 所有服务器列表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">int</span> totalWeights;    <span class="comment">// 权重总和</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Server, Set&lt;Integer&gt;&gt; maps = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(); <span class="comment">// 每个服务器的权重区间值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Server&gt; currentServer = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();   <span class="comment">// 当前服务器</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置权重区间值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">weightExtent</span><span class="params">()</span> &#123;</span><br><span class="line">        totalWeights = servers.stream().mapToInt(Server::getWeight).sum();   <span class="comment">//计算权重总和</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">startSum</span> <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">// 截至上一个对象的累计权值总和</span></span><br><span class="line">        <span class="keyword">for</span> (Server s : servers) &#123;</span><br><span class="line"></span><br><span class="line">            Set&lt;Integer&gt; list = maps.computeIfAbsent(s, n -&gt; <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;());</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startSum; i &lt; startSum + s.getWeight(); i++) &#123;</span><br><span class="line">                list.add(i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            startSum += s.getWeight(); <span class="comment">// 累加本服务的权值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得下一个服务器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Server <span class="title function_">getNextServer</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchAlgorithmException &#123;</span><br><span class="line"><span class="comment">//        int nextInt = new Random().nextInt(totalWeights);</span></span><br><span class="line"><span class="comment">//        currentServer.remove();</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">nextInt</span> <span class="operator">=</span> SecureRandom.getInstanceStrong().nextInt(totalWeights);</span><br><span class="line">        <span class="keyword">for</span> (Server server : maps.keySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (maps.get(server).contains(nextInt)) &#123;</span><br><span class="line">                currentServer.set(server);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> currentServer.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchAlgorithmException &#123;</span><br><span class="line">        servers.add(<span class="keyword">new</span> <span class="title class_">Server</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="string">&quot;111&quot;</span>, <span class="number">1</span>));</span><br><span class="line">        servers.add(<span class="keyword">new</span> <span class="title class_">Server</span>(<span class="string">&quot;127.0.0.2&quot;</span>, <span class="string">&quot;222&quot;</span>, <span class="number">12</span>));</span><br><span class="line">        servers.add(<span class="keyword">new</span> <span class="title class_">Server</span>(<span class="string">&quot;127.0.0.3&quot;</span>, <span class="string">&quot;333&quot;</span>, <span class="number">3</span>));</span><br><span class="line">        servers.add(<span class="keyword">new</span> <span class="title class_">Server</span>(<span class="string">&quot;127.0.0.4&quot;</span>, <span class="string">&quot;444&quot;</span>, <span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">        weightExtent();</span><br><span class="line">        <span class="type">int</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="number">0</span>, s2 = <span class="number">0</span>, s3 = <span class="number">0</span>, s4 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">float</span> <span class="variable">maxCount</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; maxCount; i++) &#123;</span><br><span class="line">            <span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> getNextServer();</span><br><span class="line">            <span class="keyword">switch</span> (server.getPort()) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;111&quot;</span>:</span><br><span class="line">                    s1++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;222&quot;</span>:</span><br><span class="line">                    s2++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;333&quot;</span>:</span><br><span class="line">                    s3++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;444&quot;</span>:</span><br><span class="line">                    s4++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">&quot;s1 = %d 出现概率 %.2f \n&quot;</span>, s1, (s1 / maxCount) * <span class="number">100</span>);</span><br><span class="line">        System.out.printf(<span class="string">&quot;s2 = %d 出现概率 %.2f \n&quot;</span>, s2, (s2 / maxCount) * <span class="number">100</span>);</span><br><span class="line">        System.out.printf(<span class="string">&quot;s3 = %d 出现概率 %.2f \n&quot;</span>, s3, (s3 / maxCount) * <span class="number">100</span>);</span><br><span class="line">        System.out.printf(<span class="string">&quot;s4 = %d 出现概率 %.2f \n&quot;</span>, s4, (s4 / maxCount) * <span class="number">100</span>);</span><br><span class="line"><span class="comment">//        System.out.println(getNextServer());</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="B-树结构">B+树结构</h3><p>利用B+树的原理。叶子结点存放元素，非叶子结点用于索引。非叶子结点有两个属性，分别保存左右子树的累加权重。如下图：</p><img src="/imgs/721070-20170609190949200-1515655849.png" alt="img" style="zoom:67%;" /><p>更改一个元素，只须修改该元素到根结点那半部分的权值即可</p><h2 id="轮询">轮询</h2><p>把来自用户的请求轮流分配给集群中的服务器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;   负载均衡 - 轮询算法   &lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 请求轮流分配给内部的服务器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Haeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> haeng2030@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/8/5 17:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PollingSlb</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Server&gt; servers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">// 所有服务器列表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Server&gt; currentServer = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();   <span class="comment">// 当前服务器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">currentServerIndex</span> <span class="operator">=</span> <span class="number">0</span>;    <span class="comment">// 当前服务器下标</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得下一个服务器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Server <span class="title function_">getNextServer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> currentServer.get();</span><br><span class="line">        <span class="keyword">if</span> (server != <span class="literal">null</span>)</span><br><span class="line">            currentServerIndex = (currentServerIndex + <span class="number">1</span>) % servers.size();</span><br><span class="line"></span><br><span class="line">        server = servers.get(currentServerIndex);</span><br><span class="line">        currentServer.set(server);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> server;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        servers.add(<span class="keyword">new</span> <span class="title class_">Server</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="string">&quot;111&quot;</span>, <span class="number">1</span>));</span><br><span class="line">        servers.add(<span class="keyword">new</span> <span class="title class_">Server</span>(<span class="string">&quot;127.0.0.2&quot;</span>, <span class="string">&quot;222&quot;</span>, <span class="number">1</span>));</span><br><span class="line">        servers.add(<span class="keyword">new</span> <span class="title class_">Server</span>(<span class="string">&quot;127.0.0.3&quot;</span>, <span class="string">&quot;333&quot;</span>, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(PollingSlb.getNextServer());</span><br><span class="line">        System.out.println(PollingSlb.getNextServer());</span><br><span class="line">        System.out.println(PollingSlb.getNextServer());</span><br><span class="line">        System.out.println(PollingSlb.getNextServer());</span><br><span class="line">        System.out.println(PollingSlb.getNextServer());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 负载均衡 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 负载均衡 </tag>
            
            <tag> 随机加权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-compose 安装脚本大集绵</title>
      <link href="/2025/08/b585f359ac2749e1ac92f2801c848595/"/>
      <url>/2025/08/b585f359ac2749e1ac92f2801c848595/</url>
      
        <content type="html"><![CDATA[<blockquote><p>包含单机版或集群部署，相关参数可自行调整</p></blockquote><h2 id="nacos">nacos</h2><p>单机版</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nacos/nacos-server:v2.5.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nacos</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8848:8848&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9848:9848&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9849:9849&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MODE=standalone</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">NACOS_AUTH_ENABLE=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PREFER_HOST_MODE=hostname</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MODE=standalone</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">NACOS_AUTH_IDENTITY_KEY=nacos</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">NACOS_AUTH_IDENTITY_VALUE=nacos</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">NACOS_AUTH_TOKEN=VGhpc0lzTXlDdXN0b21TZWNyZXRLZXkwMTIzNDU2Nzg=</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">JVM_XMX=1g</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">JVM_XMS=1g</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./logs:/data/nacos/logs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data/nacos/data</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><h2 id="rocketmq">rocketmq</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">namesrv:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">apache/rocketmq:5.3.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">rmqnamesrv</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9876</span><span class="string">:9876</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">rocketmq</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">sh</span> <span class="string">mqnamesrv</span></span><br><span class="line">  <span class="attr">broker:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">apache/rocketmq:5.3.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">rmqbroker</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">10909</span><span class="string">:10909</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">10911</span><span class="string">:10911</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">10912</span><span class="string">:10912</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">NAMESRV_ADDR=rmqnamesrv:9876</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">namesrv</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">rocketmq</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">sh</span> <span class="string">mqbroker</span></span><br><span class="line">  <span class="attr">proxy:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">apache/rocketmq:5.3.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">rmqproxy</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">rocketmq</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">broker</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">namesrv</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8081</span><span class="string">:8081</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8082</span><span class="string">:8082</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">on-failure</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">NAMESRV_ADDR=rmqnamesrv:9876</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">sh</span> <span class="string">mqproxy</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">rocketmq:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br></pre></td></tr></table></figure><h2 id="kafka">kafka</h2><p>单机版（KRaft模式）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">kafka:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">confluentinc/cp-kafka:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kafka</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9092:9092&quot;</span>      <span class="comment"># 容器间通信端口</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;19092:19092&quot;</span>    <span class="comment"># 宿主机访问端口</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9093:9093&quot;</span>      <span class="comment"># Controller端口</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">volume</span></span><br><span class="line">        <span class="attr">source:</span> <span class="string">kafka_standalone_data</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/data/kafka</span></span><br><span class="line">        <span class="attr">read_only:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="comment"># KRaft模式必需配置</span></span><br><span class="line">      <span class="attr">CLUSTER_ID:</span> <span class="string">mk-0kz5wGoTQ6eN6vDPN2eX2A</span></span><br><span class="line">      <span class="attr">KAFKA_PROCESS_ROLES:</span> <span class="string">broker,controller</span></span><br><span class="line">      <span class="attr">KAFKA_NODE_ID:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">KAFKA_CONTROLLER_QUORUM_VOTERS:</span> <span class="number">1</span><span class="string">@localhost:9093</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment"># 关键：配置多个监听器支持不同访问场景</span></span><br><span class="line">      <span class="comment"># 在Docker容器中，使用INTERNAL监听器：kafka:19092</span></span><br><span class="line">      <span class="comment"># 在宿主机中，使用EXTERNAL监听器端口：localhost:9092</span></span><br><span class="line">      <span class="attr">KAFKA_LISTENERS:</span> <span class="string">INTERNAL://0.0.0.0:19092,EXTERNAL://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093</span></span><br><span class="line">      <span class="attr">KAFKA_ADVERTISED_LISTENERS:</span> <span class="string">INTERNAL://kafka:19092,EXTERNAL://localhost:9092</span></span><br><span class="line">      <span class="attr">KAFKA_LISTENER_SECURITY_PROTOCOL_MAP:</span> <span class="string">INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT</span></span><br><span class="line">      <span class="attr">KAFKA_INTER_BROKER_LISTENER_NAME:</span> <span class="string">INTERNAL</span></span><br><span class="line">      <span class="attr">KAFKA_CONTROLLER_LISTENER_NAMES:</span> <span class="string">CONTROLLER</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment"># 存储配置</span></span><br><span class="line">      <span class="attr">KAFKA_LOG_DIRS:</span> <span class="string">/tmp/kraft-combined-logs</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment"># 其他配置</span></span><br><span class="line">      <span class="attr">KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">KAFKA_TRANSACTION_STATE_LOG_MIN_ISR:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">KAFKA_AUTO_CREATE_TOPICS_ENABLE:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">KAFKA_NUM_PARTITIONS:</span> <span class="number">3</span></span><br><span class="line">      <span class="attr">KAFKA_DEFAULT_REPLICATION_FACTOR:</span> <span class="number">1</span></span><br><span class="line">      <span class="comment"># 用来进行选举的Controller服务器，如果有多个Controller则都需要写上，这里本机</span></span><br><span class="line">      <span class="attr">KAFKA_CFG_CONTROLLER_QUORUM_VOTERS:</span> <span class="number">1</span><span class="string">@127.0.0.1:9094</span></span><br><span class="line">      <span class="attr">ALLOW_PLAINTEXT_LISTENER:</span> <span class="literal">yes</span></span><br><span class="line">      <span class="comment"># 开启JMX监控</span></span><br><span class="line">      <span class="attr">JMX_PORT:</span> <span class="number">9998</span></span><br><span class="line">      <span class="attr">KAFKA_JMX_OPTS:</span> <span class="string">-Dcom.sun.management.jmxremote</span> <span class="string">-Dcom.sun.management.jmxremote.authenticate=false</span> <span class="string">-Dcom.sun.management.jmxremote.ssl=false</span> <span class="string">-Djava.rmi.server.hostname=kafka</span> <span class="string">-Dcom.sun.management.jmxremote.rmi.port=9998</span></span><br><span class="line">      </span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD-SHELL&quot;</span>, <span class="string">&quot;kafka-broker-api-versions --bootstrap-server localhost:9092&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">30s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">3</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">kafka-network</span>     </span><br><span class="line">      </span><br><span class="line">  <span class="attr">kafka-ui:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kafka-ui</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">provectuslabs/kafka-ui:latest</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="comment"># 访问UI： http://localhost:9090/kafkaui/auth</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9090:8080&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">kafka</span></span><br><span class="line">     <span class="comment"># kafka:</span></span><br><span class="line">     <span class="comment">#   condition: service_healthy</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">KAFKA_CLUSTERS_0_NAME:</span> <span class="string">kafka-stand-alone</span></span><br><span class="line">      <span class="attr">KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS:</span> <span class="string">kafka:19092</span></span><br><span class="line">      <span class="attr">KAFKA_CLUSTERS_0_READONLY:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">KAFKA_CLUSTERS_0_METRICS_PORT:</span> <span class="number">9998</span></span><br><span class="line">      <span class="attr">SERVER_SERVLET_CONTEXT_PATH:</span> <span class="string">/kafkaui</span></span><br><span class="line">      <span class="attr">AUTH_TYPE:</span> <span class="string">disabled</span>  <span class="comment"># 或者设置为 : &quot;LOGIN_FORM&quot;</span></span><br><span class="line">      <span class="attr">SPRING_SECURITY_USER_NAME:</span> <span class="string">admin</span></span><br><span class="line">      <span class="attr">SPRING_SECURITY_USER_PASSWORD:</span> <span class="number">123456</span></span><br><span class="line">      <span class="attr">DYNAMIC_CONFIG_ENABLED:</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">kafka-network</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">      </span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">kafka_standalone_data:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">kafka-network:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="mqtt">mqtt</h2><p>单机版</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mosquitto:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">eclipse-mosquitto:2.0</span>    <span class="comment"># 只能选择 mqttx 中的 3.1.1 版本，才能连接上</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mqtt</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">mosquitto</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="literal">no</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;1883:1883&quot;</span>  <span class="comment"># </span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9001:9001&quot;</span>  <span class="comment"># WebSocket for web clients</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8083:8083&quot;</span>  <span class="comment"># MQTT over WebSocket (alternative)</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./conf/mosquitto.conf:/mosquitto/config/mosquitto.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data/mosquitto:/mosquitto/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./logs/mosquitto:/mosquitto/log</span></span><br><span class="line">    <span class="comment">#  - ./data/mosquitto/password.txt:/mosquitto/config/password.txt  # 预先创建好的密码文件</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mqtt-network</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span>  <span class="comment"># 设置时区</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">limits:</span></span><br><span class="line">          <span class="attr">memory:</span> <span class="string">512M</span></span><br><span class="line">          <span class="attr">cpus:</span> <span class="string">&#x27;1&#x27;</span></span><br><span class="line">        <span class="attr">reservations:</span></span><br><span class="line">          <span class="attr">memory:</span> <span class="string">256M</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;mosquitto&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;/mosquitto/config/mosquitto.conf&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">30s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">3</span></span><br><span class="line">      </span><br><span class="line">  <span class="comment"># MQTT 管理界面</span></span><br><span class="line"><span class="comment">#  mqtt-admin:</span></span><br><span class="line"><span class="comment">#    image: hivemq/hivemq-mqtt-web-client:latest</span></span><br><span class="line"><span class="comment">#    container_name: mqtt-admin</span></span><br><span class="line"><span class="comment">#    ports:</span></span><br><span class="line"><span class="comment">#      - &quot;8080:8080&quot;</span></span><br><span class="line"><span class="comment">#    environment:</span></span><br><span class="line"><span class="comment">#      - HIVEMQ_BROKER_HOST=mosquitto</span></span><br><span class="line"><span class="comment">#      - HIVEMQ_BROKER_PORT=1883</span></span><br><span class="line"><span class="comment">#    depends_on:</span></span><br><span class="line"><span class="comment">#      - mosquitto</span></span><br><span class="line"><span class="comment">#    restart: no</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Node-RED（可选，用于MQTT数据处理）</span></span><br><span class="line">  <span class="attr">node-red:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nodered/node-red:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">node-red</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;1880:1880&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data/mosquitto/node-red-data:/data</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="literal">no</span>   <span class="comment"># unless-stopped</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">mqtt-network:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br><span class="line"><span class="comment"># 可选：自定义网络参数，更好地隔离</span></span><br><span class="line">    <span class="comment"># ipam:</span></span><br><span class="line">    <span class="comment">#   config:</span></span><br><span class="line">    <span class="comment">#     - subnet: 172.28.0.0/16</span></span><br></pre></td></tr></table></figure><p><code>mosquitto.conf</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"># Basic configuration</span><br><span class="line"># TCP 监听器</span><br><span class="line">listener <span class="number">1883</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">protocol mqtt</span><br><span class="line"># 允许匿名连接</span><br><span class="line">allow_anonymous <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"># Security</span><br><span class="line"># password_file /mosquitto/config/password.txt</span><br><span class="line"></span><br><span class="line"># Persistence</span><br><span class="line">persistence <span class="literal">true</span></span><br><span class="line">persistence_location /mosquitto/data/</span><br><span class="line">autosave_interval <span class="number">1800</span></span><br><span class="line"></span><br><span class="line"># 兼容性设置</span><br><span class="line">connection_messages <span class="literal">true</span></span><br><span class="line"># 协议版本兼容性</span><br><span class="line">allow_zero_length_clientid <span class="literal">true</span></span><br><span class="line">auto_id_prefix <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">log_timestamp <span class="literal">true</span></span><br><span class="line"># Logging</span><br><span class="line">log_dest file /mosquitto/log/mosquitto.log</span><br><span class="line">log_type error</span><br><span class="line">log_dest stdout</span><br><span class="line">log_type all</span><br><span class="line"></span><br><span class="line"># Limits</span><br><span class="line">max_connections <span class="number">1000</span></span><br><span class="line">max_keepalive <span class="number">300</span></span><br><span class="line">max_packet_size <span class="number">1024</span></span><br><span class="line"></span><br><span class="line"># WebSocket support</span><br><span class="line">listener <span class="number">9001</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">protocol websockets</span><br></pre></td></tr></table></figure><h2 id="skywalking">skywalking</h2><p>skywalking 包含的所有组件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">elasticsearch:7.14.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9200</span><span class="string">:9200</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;TAKE_FILE_OWNERSHIP=true&quot;</span> <span class="comment">#volumes 挂载权限 如果不想要挂载es文件改配置可以删除</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;discovery.type=single-node&quot;</span> <span class="comment">#单机模式启动</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;TZ=Asia/Shanghai&quot;</span> <span class="comment"># 设置时区</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span> <span class="comment"># 设置jvm内存大小</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./elasticsearch/logs:/usr/share/elasticsearch/logs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./elasticsearch/data:/usr/share/elasticsearch/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./elasticsearch/conf/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml</span></span><br><span class="line">    <span class="attr">ulimits:</span></span><br><span class="line">      <span class="attr">memlock:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">-1</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">-1</span></span><br><span class="line">  <span class="attr">skywalking-oap-server:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">apache/skywalking-oap-server:8.9.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">skywalking-oap-server</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">11800</span><span class="string">:11800</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">12800</span><span class="string">:12800</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">SW_STORAGE:</span> <span class="string">elasticsearch</span>  <span class="comment"># 指定ES版本</span></span><br><span class="line">      <span class="attr">SW_STORAGE_ES_CLUSTER_NODES:</span> <span class="string">elasticsearch:9200</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">./oap/conf/alarm-settings.yml:/skywalking/config/alarm-settings.yml</span></span><br><span class="line">  <span class="attr">skywalking-ui:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">apache/skywalking-ui:8.9.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">skywalking-ui</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">skywalking-oap-server</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">skywalking-oap-server</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">SW_OAP_ADDRESS:</span> <span class="string">http://skywalking-oap-server:12800</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br></pre></td></tr></table></figure><h2 id="prometheus">prometheus</h2><p>prometheus 包含的所有组件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">net-prometheus:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="comment"># 核心组件   </span></span><br><span class="line">  <span class="attr">prometheus:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">prom/prometheus</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">prometheus</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="literal">no</span>     <span class="comment"># always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9090:9090&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./prometheus/conf:/etc/prometheus</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./prometheus/data/prometheus_db:/prometheus</span> </span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;--config.file=/etc/prometheus/prometheus.yml&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;--storage.tsdb.path=/prometheus&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;--web.console.libraries=/usr/share/prometheus/console_libraries&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;--web.console.templates=/usr/share/prometheus/consoles&#x27;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">net-prometheus</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 前端展示</span></span><br><span class="line">  <span class="attr">grafana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/grafana</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">grafana</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="literal">no</span>     <span class="comment"># always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3000:3000&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">     <span class="comment"># - ./prometheus/conf/grafana:/etc/grafana</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./prometheus/data/grafana_data:/var/lib/grafana</span></span><br><span class="line">    <span class="attr">depends_on:</span>  </span><br><span class="line">      <span class="bullet">-</span> <span class="string">prometheus</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">net-prometheus</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">pushgateway:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">prom/pushgateway</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">pushgateway</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="literal">no</span>     <span class="comment"># always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9091:9091&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./prometheus/data/pushgateway_data:/var/lib/pushgateway</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">net-prometheus</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 告警组件      </span></span><br><span class="line">  <span class="attr">alertmanager:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">prom/alertmanager</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">alertmanager</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">alertmanager</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="literal">no</span>     <span class="comment"># always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9093:9093&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./prometheus/data/alertmanager_data:/var/lib/alertmanager</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">net-prometheus</span></span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line"><span class="comment"># 节点监控</span></span><br><span class="line">  <span class="attr">node_exporter:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">prom/node-exporter</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">node_exporter</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;./prometheus:/host:ro,rslave&#x27;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9100</span><span class="string">:9100</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;--path.rootfs=/host&#x27;</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">org.label-schema.group:</span> <span class="string">&quot;monitoring&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="literal">no</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">net-prometheus</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器监控</span></span><br><span class="line">  <span class="attr">cadvisor:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">google/cadvisor:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">cadvisor</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">cadvisor</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="literal">no</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./prometheus/:/rootfs:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./prometheus/var/run:/var/run:rw</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./prometheus/sys:/sys:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./prometheus/var/lib/docker/:/var/lib/docker:ro</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;8080:8080&#x27;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">net-prometheus</span></span><br></pre></td></tr></table></figure><p><code>prometheus.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># my global config</span></span><br><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">scrape_interval:</span>     <span class="string">15s</span> <span class="comment"># Set the scrape interval to every 15 seconds. Default is every 1 minute.</span></span><br><span class="line">  <span class="attr">evaluation_interval:</span> <span class="string">15s</span> <span class="comment"># Evaluate rules every 15 seconds. The default is every 1 minute.</span></span><br><span class="line">  <span class="comment"># scrape_timeout is set to the global default (10s).</span></span><br><span class="line">  <span class="attr">external_labels:</span></span><br><span class="line">    <span class="attr">monitor:</span> <span class="string">&#x27;dashboard&#x27;</span></span><br><span class="line"></span><br><span class="line">      </span><br><span class="line"><span class="comment"># Alertmanager configuration</span></span><br><span class="line"><span class="attr">alerting:</span></span><br><span class="line">  <span class="attr">alert_relabel_configs:</span> <span class="comment"># 动态修改 alert 属性的规则配置。</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">dc</span>] </span><br><span class="line">      <span class="attr">regex:</span> <span class="string">(.+)\d+</span></span><br><span class="line">      <span class="attr">target_label:</span> <span class="string">dc1</span></span><br><span class="line">  <span class="attr">alertmanagers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;192.168.1.115:9093&#x27;</span>]</span><br><span class="line">      </span><br><span class="line"></span><br><span class="line"><span class="comment"># Load rules once and periodically evaluate them according to the global &#x27;evaluation_interval&#x27;.</span></span><br><span class="line"><span class="attr">rule_files:</span></span><br><span class="line">  <span class="comment"># - &quot;first_rules.yml&quot;</span></span><br><span class="line">  <span class="comment"># - &quot;second_rules.yml&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A scrape configuration containing exactly one endpoint to scrape:</span></span><br><span class="line"><span class="comment"># Here it&#x27;s Prometheus itself.</span></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="comment"># The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;prometheus&#x27;</span></span><br><span class="line">    <span class="attr">scrape_interval:</span> <span class="string">5s</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;prometheus:9090&#x27;</span>]</span><br><span class="line">      </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;node-exporter&#x27;</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="comment"># 需要修改 node-exporter service, 不能用localhost 指的是容器内部</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;192.168.1.115:9100&#x27;</span>,<span class="string">&#x27;192.168.1.115:9091&#x27;</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CICD </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker-compose </tag>
            
            <tag> docker </tag>
            
            <tag> kafka docker-compose </tag>
            
            <tag> rocketmq docker-compose </tag>
            
            <tag> skywalking docker-compose </tag>
            
            <tag> nacos docker-compose </tag>
            
            <tag> prometheus docker-compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DDD 领域模型在订单系统中的应用案例</title>
      <link href="/2025/08/6efb20fcd51b42c4a7a358edeb242cf6/"/>
      <url>/2025/08/6efb20fcd51b42c4a7a358edeb242cf6/</url>
      
        <content type="html"><![CDATA[<h1>DDD 领域模型</h1><p>领域驱动设计（Domain-driven design）是一种通过将实现连接到持续进化的模型来满足复杂需求的软件开发方法。</p><p><strong>DDD 核心思想是通过领域驱动设计方法定义领域模型，从而确定业务和应用边界，保证业务模型与代码模型的一致性</strong>。</p><blockquote><p>领域驱动设计是一种由<strong>域模型</strong>来驱动着系统设计的思想。</p><ul class="lvl-1"><li class="lvl-2">一种解决复杂系统的建模与分析方法</li><li class="lvl-2">将业务概念和规则转为对象和对象的属性行为</li><li class="lvl-2">通过封装、继承和多态降低业务复杂性</li><li class="lvl-2"><strong>不是数据库表结构的映射</strong>，而是对业务逻辑、规则、流程的建模。</li><li class="lvl-2">包含实体、值对象、聚合、领域服务、领域事件等元素。</li></ul><p>举个例子：在一个电商系统中，“订单”不是一个简单的 <code>Order</code> 表，而是一个包含下单、支付、取消、发货等行为和状态流转逻辑的复杂对象。</p></blockquote><h2 id="五层架构">五层架构</h2><p>原则：每层只能与位于其下方的层发生耦合。</p><p>分层架构可以简单分为两种，即严格分层架构和松散分层架构。在<strong>严格分层架构</strong>中，某层只能与位于其直接下方的层发生耦合，而在<strong>松散分层架构</strong>中，则允许某层与它的任意下方层发生耦合。</p><img src="/imgs/at4uaznghdxgm_a3d40698d6354ed5af6fc331081774d3.webp" alt="img" style="zoom:33%;" /><blockquote><ul class="lvl-1"><li class="lvl-2"><p>降低了系统的性能。因为增加了中间层，可以通过缓存机制来改善。</p></li><li class="lvl-2"><p>可能会导致级联的修改。这种修改尤其体现在自上而下的方向，可以通过依赖倒置来改善。</p></li></ul></blockquote><ul class="lvl-0"><li class="lvl-2"><p><strong>领域层</strong>domain（核心业务层）</p><ul class="lvl-2"><li class="lvl-4"><strong>领域对象</strong>：实体对象、值对象、聚合、聚合根 （充血模型：业务方法在实体对象里，负责维护实体自身的生命周期和状态）</li><li class="lvl-4"><strong>领域服务</strong>：接口服务，业务的具体实现（围绕实体）：商品服务、电子围栏、订单服务、运单服务、</li><li class="lvl-4"><strong>领域仓储</strong>：持久化的细节隐藏，减少领域层对基础设施层的依赖（需要使用到基础设施层，包括DB、Feign调用等）</li></ul></li><li class="lvl-2"><p><strong>应用层（业务逻辑层）</strong></p><ul class="lvl-2"><li class="lvl-4">应用服务：调用和组合领域层的服务，不包含任何业务逻辑（简单除外），只是组合模型业务（类似模块化）</li><li class="lvl-4">数据转换：接口参数DTO的简单校验，以及DTO和实体值对象的数据转换</li><li class="lvl-4">事件订阅：管理多个消息主体</li><li class="lvl-4">消息订阅：多个微服务间协作解耦的异步实现方式</li></ul></li><li class="lvl-2"><p><strong>基础设施层</strong></p><ul class="lvl-2"><li class="lvl-4">数据库、缓存、消息队列、配置</li><li class="lvl-4">对外隐藏技术实现细节，提供粗粒度的数据输出服务</li><li class="lvl-4">数据库操作：领域层传递的是数据对象，在这里可以按数据表的实现方式进行拆分实现</li><li class="lvl-4"><strong>防腐层</strong>（外部API）：隔离业务，防止污染业务代码，可通过代理或适配器实现转换</li></ul></li><li class="lvl-2"><p><strong>用户接口层（表现层）</strong></p><ul class="lvl-2"><li class="lvl-4">面向服务间API调用，WEB接口</li><li class="lvl-4">身份认证和权限验证</li><li class="lvl-4">限流和熔断服务</li><li class="lvl-4">VO和DTO数据转换</li></ul></li></ul><blockquote><p>简单查询不涉及业务，是可以直接从应用层穿透到PO查询，不需要经过domain层</p><p>DTO是不能存在于domain层的，DDD设计不认为DTO是业务对象，entity才是</p></blockquote><h1><a href="https://github.com/haeng2015/ddd-order-demo">订单建模示例</a></h1><p><a href="https://github.com/haeng2015/ddd-order-demo"><strong>完整Github项目</strong></a></p><ol><li class="lvl-3"><p><strong>DDD 分层模型</strong>：</p></li></ol><blockquote><p><strong>用户接口层（Interface / API 层）</strong>：提供 REST 接口，接收外部请求。</p><p><strong>应用层（Application 层）</strong>：编排领域服务，处理用例逻辑，如“创建订单”。</p><p><strong>领域层（Domain 层）</strong>：包含核心业务逻辑，如 Order 聚合根、领域事件、状态机、仓储接口等。</p><p><strong>基础设施层（Infrastructure 层）</strong>：实现仓储接口、防腐层、外部服务调用、事件发布等。</p></blockquote><ol start="2"><li class="lvl-3"><p><strong>防腐层（Anti-Corruption Layer, ACL）</strong>：</p></li></ol><blockquote><p>用于与外部系统（如库存服务）交互，避免领域模型被外部污染。</p><p>在基础设施层实现，通过 ACL 将外部模型转换为内部领域模型。</p></blockquote><ol start="3"><li class="lvl-3"><p><strong>事件与状态机</strong>：</p></li></ol><blockquote><p>使用领域事件（如 OrderCreatedEvent, OrderPaidEvent）表达领域内发生的重要事情。</p><p>使用状态机（如 OrderStateMachine）管理订单状态的合法流转（如：待支付 -&gt; 已支付 -&gt; 已发货 / 已取消）。</p></blockquote><p><strong>代码结构展示</strong></p><blockquote><p>├── src/<br>│   └── main/<br>│       ├── java/<br>│       │   └── com/example/order/<br>│       │       ├── OrderApplication.java<br>│       │       │<br>│       │       ├── application/                 # 应用层（Service）<br>│       │       │<br>│       │       ├── domain/                       # 领域层（核心）<br>│       │       │   ├── model/                    # 聚合根、实体、值对象<br>│       │       │   ├── event/                     # 领域事件<br>│       │       │   ├── repository/             # 领域仓库接口<br>│       │       │   ├── service/                   # 领域服务<br>│       │       │   └── statemachine/       # 状态机配置<br>│       │       │<br>│       │       ├── infrastructure/             # 基础设施层<br>│       │       │   ├── persistence/            # 持久化实现<br>│       │       │   ├── messaging/             # 消息发布（事件）<br>│       │       │   └── integration/             # 外部系统集成（含防腐层）<br>│       │       │<br>│       │       └── interfaces/                  # 接口层（Controller）</p></blockquote><h2 id="订单管理建模">订单管理建模</h2><p>核心对象：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>聚合根对象：<code>Order</code>（订单）</p></li><li class="lvl-2"><p>值对象：订单项（<code>OrderItem</code>）、地址（<code>Address</code>）、金额（<code>Money</code>）等</p></li><li class="lvl-2"><p>一致性边界：一次下单操作必须保证所有订单项和状态一致</p></li></ul></blockquote><h3 id="实体与值对象定义">实体与值对象定义</h3><ul class="lvl-0"><li class="lvl-2"><p><strong>值对象</strong>（金额）</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Money</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal amount;</span><br><span class="line">    <span class="keyword">private</span> String currency;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Money</span><span class="params">(BigDecimal amount, String currency)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (amount.compareTo(BigDecimal.ZERO) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessRuleViolation</span>(<span class="string">&quot;金额不能为负&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.amount = amount;</span><br><span class="line">        <span class="built_in">this</span>.currency = currency;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Money <span class="title function_">add</span><span class="params">(Money other)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.currency.equals(other.currency)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessRuleViolation</span>(<span class="string">&quot;货币不一致&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Money</span>(<span class="built_in">this</span>.amount.add(other.amount), <span class="built_in">this</span>.currency);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// equals, hashCode 基于 amount 和 currency</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><strong>实体</strong>（订单项）</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderItem</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String productId;</span><br><span class="line">    <span class="keyword">private</span> String productName;</span><br><span class="line">    <span class="keyword">private</span> Money unitPrice;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> quantity;</span><br><span class="line">    <span class="keyword">private</span> Money totalPrice;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderItem</span><span class="params">(String productId, String productName, Money unitPrice, <span class="type">int</span> quantity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.productId = productId;</span><br><span class="line">        <span class="built_in">this</span>.productName = productName;</span><br><span class="line">        <span class="built_in">this</span>.unitPrice = unitPrice;</span><br><span class="line">        <span class="built_in">this</span>.quantity = quantity;</span><br><span class="line">        <span class="built_in">this</span>.totalPrice = unitPrice.multiply(quantity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可提供 increaseQuantity(), changePrice() 等方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><strong>聚合根</strong>（订单）</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String orderId;</span><br><span class="line">    <span class="keyword">private</span> String customerId;</span><br><span class="line">    <span class="keyword">private</span> List&lt;OrderItem&gt; items = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> Address shippingAddress;</span><br><span class="line">    <span class="keyword">private</span> Money totalAmount;</span><br><span class="line">    <span class="keyword">private</span> OrderStatus status;</span><br><span class="line">    <span class="keyword">private</span> DateTime createdAt;</span><br><span class="line">    <span class="keyword">private</span> List&lt;DomainEvent&gt; events = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造，强制使用工厂创建</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Order</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下单：创建订单</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Order <span class="title function_">createFromCart</span><span class="params">(</span></span><br><span class="line"><span class="params">            String orderId,</span></span><br><span class="line"><span class="params">            String customerId,</span></span><br><span class="line"><span class="params">            List&lt;CartItem&gt; cartItems,</span></span><br><span class="line"><span class="params">            Address address)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">        order.orderId = orderId;</span><br><span class="line">        order.customerId = customerId;</span><br><span class="line">        order.shippingAddress = address;</span><br><span class="line">        order.createdAt = LocalDateTime.now();</span><br><span class="line">        order.status = OrderStatus.PENDING;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (CartItem item : cartItems) &#123;</span><br><span class="line">            <span class="type">ProductPrice</span> <span class="variable">price</span> <span class="operator">=</span> ProductService.getCurrentPrice(item.getProductId());</span><br><span class="line">            order.addItem(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(</span><br><span class="line">                item.getProductId(),</span><br><span class="line">                item.getProductName(),</span><br><span class="line">                price.getAmount(),</span><br><span class="line">                item.getQuantity()</span><br><span class="line">            ));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        order.calculateTotal();</span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加订单项（业务规则：仅在 PENDING 状态下允许）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addItem</span><span class="params">(OrderItem item)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (status != OrderStatus.PENDING) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessRuleViolation</span>(<span class="string">&quot;订单已锁定，无法添加商品&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        items.add(item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算总金额</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">calculateTotal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.totalAmount = items.stream()</span><br><span class="line">            .map(OrderItem::getTotalPrice)</span><br><span class="line">            .reduce(Money.ZERO, Money::add);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 支付成功：确认订单</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">confirmPayment</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (status != OrderStatus.PENDING) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessRuleViolation</span>(<span class="string">&quot;订单状态异常，无法确认支付&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.status = OrderStatus.PAID;</span><br><span class="line">        <span class="comment">// 发布领域事件</span></span><br><span class="line">        DomainEventPublisher.publish(<span class="keyword">new</span> <span class="title class_">OrderPaidEvent</span>(orderId, totalAmount));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取消订单</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cancel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (status == OrderStatus.SHIPPED) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessRuleViolation</span>(<span class="string">&quot;已发货订单不能取消&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (status == OrderStatus.CANCELLED) &#123;</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">// 幂等处理</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.status = OrderStatus.CANCELLED;</span><br><span class="line">        DomainEventPublisher.publish(<span class="keyword">new</span> <span class="title class_">OrderCancelledEvent</span>(orderId, customerId));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发货</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ship</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (status != OrderStatus.PAID) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessRuleViolation</span>(<span class="string">&quot;订单未支付，不能发货&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.status = OrderStatus.SHIPPED;</span><br><span class="line">        DomainEventPublisher.publish(<span class="keyword">new</span> <span class="title class_">OrderShippedEvent</span>(orderId));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addEvent</span><span class="params">(DomainEvent event)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.events.add(event);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// getter 方法省略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><strong>枚举及其他</strong>：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">OrderStatus</span> &#123;</span><br><span class="line">    PENDING,    <span class="comment">// 待支付</span></span><br><span class="line">    PAID,       <span class="comment">// 已支付</span></span><br><span class="line">    SHIPPED,    <span class="comment">// 已发货</span></span><br><span class="line">    CANCELLED   <span class="comment">// 已取消</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="领域事件（Events）">领域事件（Events）</h3><p>领域事件可通过事件总线异步通知库存、物流、用户积分等系统。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 订单已支付</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderPaidEvent</span> <span class="keyword">implements</span> <span class="title class_">DomainEvent</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String orderId;</span><br><span class="line">    <span class="keyword">private</span> Money amount;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime occurredAt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderPaidEvent</span><span class="params">(String orderId, Money amount)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.orderId = orderId;</span><br><span class="line">        <span class="built_in">this</span>.amount = amount;</span><br><span class="line">        <span class="built_in">this</span>.occurredAt = LocalDateTime.now();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订单已取消</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderCancelledEvent</span> <span class="keyword">implements</span> <span class="title class_">DomainEvent</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String orderId;</span><br><span class="line">    <span class="keyword">private</span> String customerId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderCancelledEvent</span><span class="params">(String orderId, String customerId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.orderId = orderId;</span><br><span class="line">        <span class="built_in">this</span>.customerId = customerId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订单已发货</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderShippedEvent</span> <span class="keyword">implements</span> <span class="title class_">DomainEvent</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String orderId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderShippedEvent</span><span class="params">(String orderId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.orderId = orderId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="领域服务（Service）">领域服务（Service）</h3><p>处理跨聚合或跨上下文的复杂逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderFulfillmentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> InventoryService inventoryService;</span><br><span class="line">    <span class="keyword">private</span> PaymentQueryService paymentQueryService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleOrderPaymentConfirmed</span><span class="params">(String orderId)</span> &#123;</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderRepository.findById(orderId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 检查支付是否真实完成</span></span><br><span class="line">        <span class="keyword">if</span> (!paymentQueryService.isPaymentValid(orderId)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessRuleViolation</span>(<span class="string">&quot;支付未验证通过&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 锁定库存（调用库存上下文）</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">locked</span> <span class="operator">=</span> inventoryService.reserveInventory(order.getItems());</span><br><span class="line">        <span class="keyword">if</span> (!locked) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessRuleViolation</span>(<span class="string">&quot;库存不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 确认订单</span></span><br><span class="line">        order.confirmPayment();</span><br><span class="line">        orderRepository.save(order); <span class="comment">// 触发事件发布</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="仓储接口（Repository）">仓储接口（Repository）</h3><p>定义在领域层，实现放在基础设施层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 领域层接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderRepository</span> &#123;</span><br><span class="line">    Order <span class="title function_">findById</span><span class="params">(String orderId)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Order order)</span>;</span><br><span class="line">    List&lt;Order&gt; <span class="title function_">findByCustomer</span><span class="params">(String customerId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="工厂封装（Factory）">工厂封装（Factory）</h3><p>封装复杂创建逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Order <span class="title function_">createFromCart</span><span class="params">(</span></span><br><span class="line"><span class="params">            String orderId,</span></span><br><span class="line"><span class="params">            Customer customer,</span></span><br><span class="line"><span class="params">            ShoppingCart cart,</span></span><br><span class="line"><span class="params">            Address address)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 校验用户是否可下单</span></span><br><span class="line">        <span class="keyword">if</span> (!customer.isActive()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessRuleViolation</span>(<span class="string">&quot;用户被禁用&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 校验购物车非空</span></span><br><span class="line">        <span class="keyword">if</span> (cart.getItems().isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessRuleViolation</span>(<span class="string">&quot;购物车为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Order.createFromCart(orderId, customer.getId(), cart.getItems(), address);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事件驱动的订单状态机设计">事件驱动的订单状态机设计</h2><blockquote><ul class="lvl-1"><li class="lvl-2"><p>订单的状态流转不再由“硬编码 if-else”控制，而是通过 <strong>监听领域事件</strong> 触发状态变更。</p></li><li class="lvl-2"><p>使用 <strong>状态机（State Machine）</strong> 模型来管理 <code>OrderStatus</code> 的合法转换。</p></li><li class="lvl-2"><p>所有状态变更由 <strong>领域事件驱动</strong>，保证逻辑集中、可追溯、可扩展。</p></li></ul></blockquote><table><thead><tr><th>当前状态 → 新状态</th><th>触发事件</th><th>是否允许</th></tr></thead><tbody><tr><td>PENDING → PAID</td><td>OrderPaidEvent</td><td>是</td></tr><tr><td>PENDING → CANCELLED</td><td>OrderCancelledEvent</td><td>是</td></tr><tr><td>PAID → SHIPPED</td><td>OrderShippedEvent</td><td>是</td></tr><tr><td>PAID → CANCELLED</td><td>OrderRefundedEvent</td><td>是（退款后取消）</td></tr></tbody></table><h3 id="状态机实现">状态机实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderStateMachine</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义合法的状态转移</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;OrderStatus, List&lt;OrderStatus&gt;&gt; transitions = Map.of(</span><br><span class="line">        OrderStatus.PENDING, Arrays.asList(OrderStatus.PAID, OrderStatus.CANCELLED),</span><br><span class="line">        OrderStatus.PAID, Arrays.asList(OrderStatus.SHIPPED, OrderStatus.CANCELLED)</span><br><span class="line">        <span class="comment">// SHIPPED 没有出边 → 不可变更</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canTransition</span><span class="params">(OrderStatus from, OrderStatus to)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (from == <span class="literal">null</span> || to == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        List&lt;OrderStatus&gt; allowed = transitions.getOrDefault(from, Collections.emptyList());</span><br><span class="line">        <span class="keyword">return</span> allowed.contains(to);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行状态变更（由事件处理器调用）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">applyEvent</span><span class="params">(Order order, DomainEvent event)</span> &#123;</span><br><span class="line">        <span class="type">OrderStatus</span> <span class="variable">newStatus</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (event <span class="keyword">instanceof</span> OrderPaidEvent) &#123;</span><br><span class="line">            newStatus = OrderStatus.PAID;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event <span class="keyword">instanceof</span> OrderShippedEvent) &#123;</span><br><span class="line">            newStatus = OrderStatus.SHIPPED;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event <span class="keyword">instanceof</span> OrderCancelledEvent || event <span class="keyword">instanceof</span> OrderRefundedEvent) &#123;</span><br><span class="line">            newStatus = OrderStatus.CANCELLED;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (newStatus != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (canTransition(order.getStatus(), newStatus)) &#123;</span><br><span class="line">                order.setStatusInternal(newStatus); <span class="comment">// 注意：内部私有方法，不暴露给外部，避免外部随意修改状态</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessRuleViolation</span>(</span><br><span class="line">                    <span class="string">&quot;非法状态转移: &quot;</span> + order.getStatus() + <span class="string">&quot; → &quot;</span> + newStatus);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="事件处理器（Event-Handlers）">事件处理器（Event Handlers）</h3><p>使用 Spring 的事件机制或自定义事件总线监听领域事件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderEventHandlers</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OrderRepository orderRepository;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OrderStateMachine stateMachine;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(OrderPaidEvent event)</span> &#123;</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderRepository.findById(event.getOrderId());</span><br><span class="line">        stateMachine.applyEvent(order, event);</span><br><span class="line">        orderRepository.save(order);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(OrderShippedEvent event)</span> &#123;</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderRepository.findById(event.getOrderId());</span><br><span class="line">        stateMachine.applyEvent(order, event);</span><br><span class="line">        orderRepository.save(order);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(OrderCancelledEvent event)</span> &#123;</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderRepository.findById(event.getOrderId());</span><br><span class="line">        stateMachine.applyEvent(order, event);</span><br><span class="line">        orderRepository.save(order);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="支持事件溯源">支持事件溯源</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码：从事件重建订单</span></span><br><span class="line"><span class="keyword">public</span> Order <span class="title function_">reconstituteFromHistory</span><span class="params">(String orderId, List&lt;DomainEvent&gt; events)</span> &#123;</span><br><span class="line">    <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">    <span class="keyword">for</span> (DomainEvent event : events) &#123;</span><br><span class="line">        event.applyTo(order); <span class="comment">// 每个事件自己知道如何影响订单</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> order;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="防腐层（支付、库存）">防腐层（支付、库存）</h2><p><strong>在限界上下文之间建立翻译与隔离层</strong>，防止外部概念“侵蚀”本领域的纯洁性。 外部系统（如支付系统、库存系统）</p><blockquote><p>外部系统（支付宝）<br>↓ HTTP 回调<br>[ 支付回调 Controller ]<br>↓<br>[ AlipayAclAdapter ] → 验签 + 校验<br>↓<br>[ PaymentEventMapper ] → 映射为 OrderPaidEvent<br>↓<br>[ Domain Event Bus ]<br>├──→ [OrderEventHandlers] → 触发 Order 状态机<br>└──→ [OrderStateMachine]   → 更新订单状态<br>↓<br>[OrderRepository] →  数据持久化</p></blockquote><ol><li class="lvl-3"><h5 id="外部支付回调-DTO（来自支付宝）">外部支付回调 DTO（来自支付宝）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AlipayCallback</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String tradeNo;</span><br><span class="line">    <span class="keyword">private</span> String outTradeNo; <span class="comment">// 我方订单号</span></span><br><span class="line">    <span class="keyword">private</span> String tradeStatus;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li class="lvl-3"><h5 id="防腐层适配器（ACL-Adapter）">防腐层适配器（ACL Adapter）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AlipayAclAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PaymentEventMapper eventMapper;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DomainEventPublisher eventPublisher;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleCallback</span><span class="params">(AlipayCallback callback)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 校验签名（安全）</span></span><br><span class="line">        <span class="keyword">if</span> (!verifySignature(callback)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SecurityException</span>(<span class="string">&quot;非法回调&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 映射为本地下游事件</span></span><br><span class="line">        <span class="type">DomainEvent</span> <span class="variable">domainEvent</span> <span class="operator">=</span> eventMapper.toDomainEvent(callback);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 发布事件，驱动本域逻辑</span></span><br><span class="line">        <span class="keyword">if</span> (domainEvent != <span class="literal">null</span>) &#123;</span><br><span class="line">            eventPublisher.publish(domainEvent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">verifySignature</span><span class="params">(AlipayCallback callback)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用支付宝 SDK 验签</span></span><br><span class="line">        <span class="keyword">return</span> AlipaySignature.rsaCheckV2(...) == <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li class="lvl-3"><h5 id="事件映射器（Mapping-Logic）">事件映射器（Mapping Logic）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentEventMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DomainEvent <span class="title function_">toDomainEvent</span><span class="params">(AlipayCallback callback)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">orderId</span> <span class="operator">=</span> callback.getOutTradeNo();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (callback.getTradeStatus()) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;TRADE_SUCCESS&quot;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;TRADE_FINISHED&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OrderPaidEvent</span>(orderId, Money.of(<span class="number">999</span>, <span class="string">&quot;CNY&quot;</span>)); <span class="comment">// 可结合查询订单金额</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;TRADE_CLOSED&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OrderRefundedEvent</span>(orderId);</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="应用层（Service）">应用层（Service）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderRepository orderRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DomainEventPublisher eventPublisher;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> OrderId <span class="title function_">createOrder</span><span class="params">(CreateOrderCommand command)</span> &#123;</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>(command.getOrderId(), command.getAmount());</span><br><span class="line">        order.create();</span><br><span class="line">        orderRepository.save(order);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发布事件</span></span><br><span class="line">        order.getEvents().forEach(eventPublisher::publish);</span><br><span class="line">        <span class="keyword">return</span> order.getId();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">payOrder</span><span class="params">(PayOrderCommand command)</span> &#123;</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderRepository.findById(command.getOrderId())</span><br><span class="line">            .orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;Order not found&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先调用支付</span></span><br><span class="line">        <span class="type">PaymentResult</span> <span class="variable">result</span> <span class="operator">=</span> paymentService.processPayment(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">PaymentRequest</span>(order.getAmount(), command.getCardToken())</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result.getStatus() == PaymentStatus.SUCCESS) &#123;</span><br><span class="line">            order.pay();</span><br><span class="line">            orderRepository.save(order);</span><br><span class="line">            order.getEvents().forEach(eventPublisher::publish);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;Payment failed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口层（Controller）">接口层（Controller）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/orders&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">createOrder</span><span class="params">(<span class="meta">@RequestBody</span> OrderRequestDTO dto)</span> &#123;</span><br><span class="line">        <span class="type">OrderId</span> <span class="variable">id</span> <span class="operator">=</span> orderService.createOrder(<span class="keyword">new</span> <span class="title class_">CreateOrderCommand</span>(dto.getAmount()));</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(id.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/&#123;orderId&#125;/pay&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">payOrder</span><span class="params">(<span class="meta">@PathVariable</span> String orderId, <span class="meta">@RequestBody</span> PaymentRequestDTO dto)</span> &#123;</span><br><span class="line">        orderService.payOrder(<span class="keyword">new</span> <span class="title class_">PayOrderCommand</span>(<span class="keyword">new</span> <span class="title class_">OrderId</span>(orderId), dto.getCardToken()));</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(<span class="string">&quot;Paid&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
          <category> DDD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 领域模型 </tag>
            
            <tag> DDD </tag>
            
            <tag> 架构设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 的数据过期删除和淘汰策略</title>
      <link href="/2025/08/65a671b1723e48818f080dda25a3730f/"/>
      <url>/2025/08/65a671b1723e48818f080dda25a3730f/</url>
      
        <content type="html"><![CDATA[<h2 id="过期清除策略">过期清除策略</h2><p>redis针对设置过期时间的key，所使用的清除策略有主动和被动两种方式。</p><h3 id="被动检测">被动检测</h3><p>被动检测，也称惰性删除。</p><p>放任键过期不管，每次从键空间中获取键时，都检查取得的键是否过期，如果过期就删除该键，否则就返回该键值。</p><blockquote><p>被动方式对于那些永远不会再访问的 key 并没有效果。不管怎么，这些 key 都应被过期淘汰，所以 Redis 周期性主动随机检查一部分被设置生存时间的 key，那些已经过期的 key 会被从 key 空间中删除。</p></blockquote><h3 id="主动检测">主动检测</h3><ul class="lvl-0"><li class="lvl-2"><p>定时删除：在设置键过期时间的同时，创建一个定时器 timer。让定时器在键的过期时间来临时，执行对键的删除操作。</p></li><li class="lvl-2"><p>定期删除：每隔100ms就对数据库进行一次随机抽查，删除里面的过期键。至于要删除多少过期键，以及要检查多少个数据库，则由算法决定。比如Redis每秒执行10次下面的操作：</p><blockquote><ol><li class="lvl-3">从带有生存时间的 key 的集合中随机选 20 进行检查。</li><li class="lvl-3">删除所有过期的key。</li><li class="lvl-3">如20里面有超过25%的key过期，立刻继续执行步骤1。</li></ol></blockquote></li></ul><h2 id="数据淘汰策略">数据淘汰策略</h2><p>Redis 的内存淘汰机制（Eviction Policy）是指当 Redis 的内存使用量达到设定的最大值（通过 <code>maxmemory</code> 配置）时，选择哪些数据被删除以释放空间来存放新数据的策略。</p><blockquote><p>由于redis定期删除是随机抽取检查，不可能扫描清除掉所有过期的key并删除，一些key由于未被请求，惰性删除也未触发。</p><p>同时存在未设置过期时间的key，这样redis的内存占用会越来越高。此时就需要内存淘汰机制。</p></blockquote><h3 id="淘汰算法">淘汰算法</h3><p>Redis 的淘汰算法有3种：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>random</strong>（随机）</p></li><li class="lvl-2"><p><strong>TTL</strong>（将要过期）</p></li><li class="lvl-2"><p><strong>LRU</strong>（最近最少使用）</p></li></ul><h3 id="淘汰策略">淘汰策略</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定 Redis 能使用的最大内存，100MB限制</span></span><br><span class="line"><span class="attr">maxmemory</span> <span class="string">100mb</span></span><br><span class="line"><span class="comment"># 当内存达到限制时，Redis 回收策略（volatile-lru、volatile-ttl、volatile-random、allkeys-lru、allkeys-random、no-enviction）</span></span><br><span class="line"><span class="attr">maxmemory-policy</span> <span class="string">noeviction</span></span><br></pre></td></tr></table></figure><p><strong>Redis  支持6种淘汰策略</strong>:</p><blockquote><ol><li class="lvl-3"><p><strong>noeviction</strong>（默认）：不清除数据，只返回错误，会导致浪费掉更多内存（DEL 命令和其他的少数命令例外）</p></li><li class="lvl-3"><p><strong>allkeys-lru</strong>：从所有的数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰</p></li><li class="lvl-3"><p><strong>allkeys-random</strong>：从所有数据集（server.db[i].dict）中任意选择数据淘汰</p></li><li class="lvl-3"><p><strong>volatile-lru</strong>：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰</p></li><li class="lvl-3"><p><strong>volatile-random</strong>：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰</p></li><li class="lvl-3"><p><strong>volatile-ttl</strong>：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰，ttl值越大越优先被淘汰</p></li></ol></blockquote><p>如果没有设置 <strong>expire</strong> 的key,  那么 <strong>volatile-lru</strong>, <strong>volatile-random</strong> 和 <strong>volatile-ttl</strong> 策略的行为, 和 <strong>noeviction</strong>基本一致。</p><blockquote><p>一般来说:</p><p>​    设置 <code>expire</code> 会消耗额外的内存, 所以使用 <strong>allkeys-lru</strong> 策略, 可以更高效地利用内存 。</p><p>​    如果某个命令导致大量内存占用(一个很大的set), 在一段时间内, 内存的使用量会明显超过 maxmemory 限制。</p></blockquote><h3 id="策略选择建议">策略选择建议</h3><p>策略使用规则：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>如果数据呈现幂律分布，也就是一部分数据访问频率高，一部分数据访问频率低，则使用 allkeys-lru。如果分为热数据与冷数据, 推荐使用 allkeys-lru 策略。 如果不确定具体的业务特征, 那么 allkeys-lru 是一个很好的选择。</p></li><li class="lvl-2"><p>如果数据呈现平等分布，也就是所有的数据访问频率都相同，则使用 allkeys-random，即读写所有元素的概率差不多。</p></li></ul></blockquote><table><thead><tr><th style="text-align:left">策略</th><th style="text-align:left">适用场景</th></tr></thead><tbody><tr><td style="text-align:left"><strong><code>allkeys-lru</code></strong></td><td style="text-align:left"><strong>通用场景，最常用</strong>。如果你的数据访问模式大致符合幂律分布（即一部分数据访问频率高，另一部分低），或者你不确定该用什么策略，选这个通常不会错。</td></tr><tr><td style="text-align:left"><strong><code>allkeys-lfu</code></strong></td><td style="text-align:left">你希望数据的访问频率对淘汰决策影响更大时。例如，一个key即使刚被访问过，但如果它历史上只被访问过一两次，而其他key被访问过成百上千次，那么它仍然可能被淘汰。</td></tr><tr><td style="text-align:left"><strong><code>volatile-ttl</code></strong></td><td style="text-align:left">你希望通过设置不同的TTL来主动管理数据的优先级，并且希望Redis优先淘汰那些快要过期的“临时”数据，保留那些TTL很长的核心数据。</td></tr><tr><td style="text-align:left"><strong><code>volatile-lru</code></strong> / <strong><code>volatile-lfu</code></strong></td><td style="text-align:left">你希望将 Redis 既用作缓存（有过期时间），又用作持久存储（无过期时间）。这样能保证永久数据不会被淘汰，只淘汰缓存数据。</td></tr><tr><td style="text-align:left"><strong><code>allkeys-random</code></strong> / <strong><code>volatile-random</code></strong></td><td style="text-align:left">所有数据被访问的概率都差不多，没有明显的热点数据。</td></tr><tr><td style="text-align:left"><strong><code>noeviction</code></strong></td><td style="text-align:left"><strong>不推荐用于缓存场景</strong>。适用于你希望数据永不被删除，并且内存足够或由应用层处理写失败的情况。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> DB </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Redis删除数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + Butterfly 动态切换夜间模式</title>
      <link href="/2025/08/fe387890751447178380123929a383e3/"/>
      <url>/2025/08/fe387890751447178380123929a383e3/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>注意版本</strong>：框架 <a href="https://hexo.io/">Hexo 7.3.0</a>|主题 <a href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly 5.4.3</a></p></blockquote><h2 id="JS脚本">JS脚本</h2><p>新建js脚本文件： <code>themes\butterfly\source\js\dark_mode.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">switchNightMode</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">insertAdjacentHTML</span>(<span class="string">&#x27;beforeend&#x27;</span>, <span class="string">&#x27;&lt;div class=&quot;Cuteen_DarkSky&quot;&gt;&lt;div class=&quot;Cuteen_DarkPlanet&quot;&gt;&lt;/div&gt;&lt;/div&gt;&#x27;</span>),</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;body&#x27;</span>).<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&#x27;DarkMode&#x27;</span>) ? (<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;body&#x27;</span>).<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;DarkMode&#x27;</span>), <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;isDark&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;modeicon&#x27;</span>).<span class="title function_">setAttribute</span>(<span class="string">&#x27;xlink:href&#x27;</span>, <span class="string">&#x27;#icon-moon&#x27;</span>)) : (<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;body&#x27;</span>).<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;DarkMode&#x27;</span>), <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;isDark&#x27;</span>, <span class="string">&#x27;1&#x27;</span>), <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;modeicon&#x27;</span>).<span class="title function_">setAttribute</span>(<span class="string">&#x27;xlink:href&#x27;</span>, <span class="string">&#x27;#icon-sun&#x27;</span>)),</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;Cuteen_DarkSky&#x27;</span>)[<span class="number">0</span>].<span class="property">style</span>.<span class="property">transition</span> = <span class="string">&#x27;opacity 3s&#x27;</span>;</span><br><span class="line">          <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;Cuteen_DarkSky&#x27;</span>)[<span class="number">0</span>].<span class="property">style</span>.<span class="property">opacity</span> = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;Cuteen_DarkSky&#x27;</span>)[<span class="number">0</span>].<span class="title function_">remove</span>();</span><br><span class="line">          &#125;, <span class="number">1e3</span>);</span><br><span class="line">        &#125;, <span class="number">2e3</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="keyword">const</span> nowMode = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-theme&#x27;</span>) === <span class="string">&#x27;dark&#x27;</span> ? <span class="string">&#x27;dark&#x27;</span> : <span class="string">&#x27;light&#x27;</span></span><br><span class="line">  <span class="keyword">if</span> (nowMode === <span class="string">&#x27;light&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 注意此处的版本不同，写法不同</span></span><br><span class="line">    btf.<span class="title function_">activateDarkMode</span>()</span><br><span class="line">    btf.<span class="property">saveToLocal</span>.<span class="title function_">set</span>(<span class="string">&#x27;theme&#x27;</span>, <span class="string">&#x27;dark&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="variable constant_">GLOBAL_CONFIG</span>.<span class="property">Snackbar</span> !== <span class="literal">undefined</span> &amp;&amp; btf.<span class="title function_">snackbarShow</span>(<span class="variable constant_">GLOBAL_CONFIG</span>.<span class="property">Snackbar</span>.<span class="property">day_to_night</span>)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;modeicon&#x27;</span>).<span class="title function_">setAttribute</span>(<span class="string">&#x27;xlink:href&#x27;</span>, <span class="string">&#x27;#icon-sun&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 注意此处的版本不同，写法不同</span></span><br><span class="line">    btf.<span class="title function_">activateLightMode</span>()</span><br><span class="line">    btf.<span class="property">saveToLocal</span>.<span class="title function_">set</span>(<span class="string">&#x27;theme&#x27;</span>, <span class="string">&#x27;light&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;body&#x27;</span>).<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;DarkMode&#x27;</span>), <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;modeicon&#x27;</span>).<span class="title function_">setAttribute</span>(<span class="string">&#x27;xlink:href&#x27;</span>, <span class="string">&#x27;#icon-moon&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// handle some cases</span></span><br><span class="line">  <span class="keyword">typeof</span> utterancesTheme === <span class="string">&#x27;function&#x27;</span> &amp;&amp; <span class="title function_">utterancesTheme</span>()</span><br><span class="line">  <span class="keyword">typeof</span> <span class="variable constant_">FB</span> === <span class="string">&#x27;object&#x27;</span> &amp;&amp; <span class="variable language_">window</span>.<span class="title function_">loadFBComment</span>()</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">DISQUS</span> &amp;&amp; <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;disqus_thread&#x27;</span>).<span class="property">children</span>.<span class="property">length</span> &amp;&amp; <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">window</span>.<span class="title function_">disqusReset</span>(), <span class="number">200</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CSS渲染">CSS渲染</h2><p>新建styl文件：<code>themes\butterfly\source\css\_layout\dark_mode.styl</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.Cuteen_DarkSky</span>,</span><br><span class="line"><span class="selector-class">.Cuteen_DarkSky</span><span class="selector-pseudo">:before</span></span><br><span class="line">  <span class="attribute">content</span> &#x27;&#x27;</span><br><span class="line">  <span class="attribute">position</span> fixed</span><br><span class="line">  <span class="attribute">left</span> <span class="number">0</span></span><br><span class="line">  <span class="attribute">right</span> <span class="number">0</span></span><br><span class="line">  <span class="attribute">top</span> <span class="number">0</span></span><br><span class="line">  <span class="attribute">bottom</span> <span class="number">0</span></span><br><span class="line">  <span class="attribute">z-index</span> <span class="number">88888888</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.Cuteen_DarkSky</span></span><br><span class="line">  <span class="attribute">background</span> linear-gradient(<span class="selector-id">#feb8b0</span>, <span class="selector-id">#fef9db</span>)</span><br><span class="line">  &amp;<span class="selector-pseudo">:before</span></span><br><span class="line">    <span class="attribute">transition</span> <span class="number">2s</span> ease <span class="attribute">all</span></span><br><span class="line">    <span class="attribute">opacity</span> <span class="number">0</span></span><br><span class="line">    <span class="attribute">background</span> linear-gradient(<span class="selector-id">#4c3f6d</span>, <span class="selector-id">#6c62bb</span>, <span class="selector-id">#93b1ed</span>)</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.DarkMode</span></span><br><span class="line">  <span class="selector-class">.Cuteen_DarkSky</span></span><br><span class="line">    &amp;<span class="selector-pseudo">:before</span></span><br><span class="line">      <span class="attribute">opacity</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.Cuteen_DarkPlanet</span></span><br><span class="line">  <span class="attribute">z-index</span> <span class="number">99999999</span></span><br><span class="line">  <span class="attribute">position</span> fixed</span><br><span class="line">  <span class="attribute">left</span> -<span class="number">50%</span></span><br><span class="line">  <span class="attribute">top</span> -<span class="number">50%</span></span><br><span class="line">  <span class="attribute">width</span> <span class="number">200%</span></span><br><span class="line">  <span class="attribute">height</span> <span class="number">200%</span></span><br><span class="line">  -webkit-<span class="attribute">animation</span> CuteenPlanetMove <span class="number">2s</span> cubic-bezier(<span class="number">0.7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">  <span class="attribute">animation</span> CuteenPlanetMove <span class="number">2s</span> cubic-bezier(<span class="number">0.7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">  <span class="attribute">transform-origin</span> center <span class="attribute">bottom</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> CuteenPlanetMove &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> CuteenPlanetMove &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.Cuteen_DarkPlanet</span></span><br><span class="line">  &amp;<span class="selector-pseudo">:after</span></span><br><span class="line">    <span class="attribute">position</span> absolute</span><br><span class="line">    <span class="attribute">left</span> <span class="number">35%</span></span><br><span class="line">    <span class="attribute">top</span> <span class="number">40%</span></span><br><span class="line">    <span class="attribute">width</span> <span class="number">9.375rem</span></span><br><span class="line">    <span class="attribute">height</span> <span class="number">9.375rem</span></span><br><span class="line">    <span class="attribute">border-radius</span> <span class="number">50%</span></span><br><span class="line">    <span class="attribute">content</span> &#x27;&#x27;</span><br><span class="line">    <span class="attribute">background</span> linear-gradient(<span class="selector-id">#fefefe</span>, <span class="selector-id">#fffbe8</span>)</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.search</span></span><br><span class="line">  <span class="selector-tag">span</span></span><br><span class="line">    <span class="attribute">display</span> <span class="attribute">none</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menus_item</span></span><br><span class="line">  <span class="selector-tag">a</span></span><br><span class="line">    <span class="attribute">text-decoration</span> <span class="attribute">none</span>!important</span><br><span class="line">//按钮相关，对侧栏按钮做过魔改的可以调整这里的数值</span><br><span class="line"><span class="selector-class">.icon-V</span></span><br><span class="line">  <span class="attribute">padding</span> <span class="number">5px</span></span><br></pre></td></tr></table></figure><h2 id="模板引擎-pug">模板引擎 pug</h2><p>新建pug文件：<code>themes\butterfly\layout\includes\custom\dark_mode.pug</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">svg(aria-hidden=&#x27;true&#x27;, style=&#x27;position:absolute; overflow:hidden; width:0; height:0&#x27;)</span><br><span class="line">  symbol#icon-sun(viewBox=&#x27;0 0 1024 1024&#x27;)</span><br><span class="line">    path(d=&#x27;M960 512l-128 128v192h-192l-128 128-128-128H192v-192l-128-128 128-128V192h192l128-128 128 128h192v192z&#x27;, fill=&#x27;#FFD878&#x27;, p-id=&#x27;8420&#x27;)</span><br><span class="line">    path(d=&#x27;M736 512a224 224 0 1 0-448 0 224 224 0 1 0 448 0z&#x27;, fill=&#x27;#FFE4A9&#x27;, p-id=&#x27;8421&#x27;)</span><br><span class="line">    path(d=&#x27;M512 109.248L626.752 224H800v173.248L914.752 512 800 626.752V800h-173.248L512 914.752 397.248 800H224v-173.248L109.248 512 224 397.248V224h173.248L512 109.248M512 64l-128 128H192v192l-128 128 128 128v192h192l128 128 128-128h192v-192l128-128-128-128V192h-192l-128-128z&#x27;, fill=&#x27;#4D5152&#x27;, p-id=&#x27;8422&#x27;)</span><br><span class="line">    path(d=&#x27;M512 320c105.888 0 192 86.112 192 192s-86.112 192-192 192-192-86.112-192-192 86.112-192 192-192m0-32a224 224 0 1 0 0 448 224 224 0 0 0 0-448z&#x27;, fill=&#x27;#4D5152&#x27;, p-id=&#x27;8423&#x27;)</span><br><span class="line">  symbol#icon-moon(viewBox=&#x27;0 0 1024 1024&#x27;)</span><br><span class="line">    path(d=&#x27;M611.370667 167.082667a445.013333 445.013333 0 0 1-38.4 161.834666 477.824 477.824 0 0 1-244.736 244.394667 445.141333 445.141333 0 0 1-161.109334 38.058667 85.077333 85.077333 0 0 0-65.066666 135.722666A462.08 462.08 0 1 0 747.093333 102.058667a85.077333 85.077333 0 0 0-135.722666 65.024z&#x27;, fill=&#x27;#FFB531&#x27;, p-id=&#x27;11345&#x27;)</span><br><span class="line">    path(d=&#x27;M329.728 274.133333l35.157333-35.157333a21.333333 21.333333 0 1 0-30.165333-30.165333l-35.157333 35.157333-35.114667-35.157333a21.333333 21.333333 0 0 0-30.165333 30.165333l35.114666 35.157333-35.114666 35.157334a21.333333 21.333333 0 1 0 30.165333 30.165333l35.114667-35.157333 35.157333 35.157333a21.333333 21.333333 0 1 0 30.165333-30.165333z&#x27;, fill=&#x27;#030835&#x27;, p-id=&#x27;11346&#x27;)</span><br></pre></td></tr></table></figure><h2 id="引入依赖">引入依赖</h2><p>修改文件：<code>themes\butterfly\layout\includes\head.pug</code></p><p>在末尾加入：<code>include ./custom/dark_mode.pug</code></p><h2 id="触发切换">触发切换</h2><p>修改文件：<code>themes\butterfly\layout\includes\rightside.pug</code></p><p><strong>修改前</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">when &#x27;darkmode&#x27;</span><br><span class="line">  if darkmode.enable &amp;&amp; darkmode.button</span><br><span class="line">     button#darkmode(type=&quot;button&quot; title=_p(&#x27;rightside.night_mode_title&#x27;))</span><br><span class="line">       i.fas.fa-adjust</span><br></pre></td></tr></table></figure><p><strong>修改后</strong>：注意缩进，需要使用空格，而不是Tab</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">when &#x27;darkmode&#x27;</span><br><span class="line">  if darkmode.enable &amp;&amp; darkmode.button</span><br><span class="line">    a.icon-V.hidden(onclick=&#x27;switchNightMode()&#x27;,  title=_p(&#x27;rightside.night_mode_title&#x27;))</span><br><span class="line">      svg(width=&#x27;25&#x27;, height=&#x27;25&#x27;, viewBox=&#x27;0 0 1024 1024&#x27;)</span><br><span class="line">        use#modeicon(xlink:href=&#x27;#icon-moon&#x27;)</span><br></pre></td></tr></table></figure><h2 id="配置修改">配置修改</h2><p>修改butterfly的配置文件：<code>themes\butterfly\_config.yml</code>，将 JS 引入其中：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;/js/dark_mode.js&quot;</span> <span class="string">async&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="启动测试">启动测试</h2><p>运行命令：<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly夜间模式 </tag>
            
            <tag> Hexo夜间模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>同时配置 Github 和 Gitee 的 SSH 免密提交</title>
      <link href="/2025/08/b1cb29e686e347279ef8bd70ec59e09b/"/>
      <url>/2025/08/b1cb29e686e347279ef8bd70ec59e09b/</url>
      
        <content type="html"><![CDATA[<h2 id="清除-git-的全局设置">清除 git 的全局设置</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看是否设置</span></span><br><span class="line">git config --global --list</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 删除设置</span></span><br><span class="line">git config --global --<span class="built_in">unset</span> user.name</span><br><span class="line">git config --global --<span class="built_in">unset</span> user.email</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看配置来源(本地配置覆盖全局配置)</span></span><br><span class="line">git config --list --show-origin</span><br></pre></td></tr></table></figure><h2 id="Windows-中配置">Windows 中配置</h2><h3 id="配置多个-SSH-密钥"><strong>配置多个 SSH 密钥</strong></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为 GitHub 生成 SSH 密钥</span></span><br><span class="line">ssh-keygen -t rsa -f %USERPROFILE%/.ssh/id_rsa_github -C <span class="string">&quot;your_email@github.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为 Gitee 生成 SSH 密钥</span></span><br><span class="line">ssh-keygen -t rsa -f %USERPROFILE%/.ssh/id_rsa_gitee -C <span class="string">&quot;your_email@gitee.com&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>完成后会在 <code>C:/Users/xxx/.ssh /</code> 目录下生成以下文件</p><ul class="lvl-1"><li class="lvl-2">id_rsa_github</li><li class="lvl-2">id_rsa_github.pub</li><li class="lvl-2">id_rsa_gitee</li><li class="lvl-2">id_rsa_gitee.pub</li></ul><p>将生成的对应.pub文件打开，将数据拷贝添加到对应平台的SSH配置中（全量拷贝）</p><p>如：id_rsa_github.pub 中的全部内容，拷贝到github 的SSH配置中</p></blockquote><h3 id="配置-SSH-Config-文件">配置 SSH Config 文件</h3><p>在 <code>C:/Users/xxx/.ssh/config</code> 文件中添加以下内容，以区分不同平台的密钥：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gitee</span></span><br><span class="line">Host gitee.com</span><br><span class="line">HostName gitee.com</span><br><span class="line">User git</span><br><span class="line">IdentitiesOnly yes</span><br><span class="line">IdentityFile C:/Users/xxx/.ssh/id_rsa_gitee</span><br><span class="line"></span><br><span class="line"><span class="comment"># GitHub</span></span><br><span class="line">Host github.com</span><br><span class="line">AddKeysToAgent yes</span><br><span class="line">IdentitiesOnly yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile C:/Users/xxx/.ssh/id_rsa_github</span><br></pre></td></tr></table></figure><blockquote><p>验证是否生效（在任意路径）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@gitee.com</span><br><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>出现以下情况，表示成功，否则配置错误（IdentityFile需要绝对路径）：</p><p><code>Hi xxx! You've successfully authenticated, but GitHub does not provide shell access.</code></p></blockquote><h3 id="配置文件权限">配置文件权限</h3><p>config 、id_rsa_github和 id_rsa_gitee 配置文件需要删除其他用户的权限，只保留管理员和当前用户</p><blockquote><ol><li class="lvl-3"><p>右键需配置的文件，查看属性，打开“安全”一栏</p></li><li class="lvl-3"><p>打开“高级” ，“禁用继承”</p></li><li class="lvl-3"><p>返回，在“安全”一栏的“组或用户名” 中，删除非当前用户和系统管理员的账号，如：Everyone<img src="/imgs/image-20250824120719000.png" alt="image-20250824120719000"></p></li></ol></blockquote><h2 id="Linux-中配置">Linux 中配置</h2><h3 id="配置多个-SSH-密钥-2">配置多个 SSH 密钥</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为 GitHub 生成 SSH 密钥</span></span><br><span class="line">ssh-keygen -t rsa -f ~/.ssh/id_rsa_github -C <span class="string">&quot;your_email@github.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为 Gitee 生成 SSH 密钥</span></span><br><span class="line">ssh-keygen -t rsa -f ~/.ssh/id_rsa_gitee -C <span class="string">&quot;your_email@gitee.com&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>完成后会在~/.ssh / 目录下生成以下文件</p><ul class="lvl-1"><li class="lvl-2">id_rsa_github</li><li class="lvl-2">id_rsa_github.pub</li><li class="lvl-2">id_rsa_gitee</li><li class="lvl-2">id_rsa_gitee.pub</li></ul><p>将生成的对应.pub文件打开，将数据拷贝添加到对应平台的SSH配置中（全量拷贝）</p><p>如：id_rsa_github.pub 中的全部内容，拷贝到github 的SSH配置中</p></blockquote><h3 id="配置-SSH-Config-文件-2">配置 SSH Config 文件</h3><p>在 <code>~/.ssh/config</code> 文件中添加以下内容，以区分不同平台的密钥：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gitee</span></span><br><span class="line">Host gitee.com</span><br><span class="line">HostName gitee.com</span><br><span class="line">User git</span><br><span class="line">IdentitiesOnly yes</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_gitee</span><br><span class="line"></span><br><span class="line"><span class="comment"># GitHub</span></span><br><span class="line">Host github.com</span><br><span class="line">AddKeysToAgent yes</span><br><span class="line">IdentitiesOnly yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_github</span><br></pre></td></tr></table></figure><blockquote><p>验证是否生效（在任意路径）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@gitee.com</span><br><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>出现以下情况，表示成功，否则配置错误（IdentityFile需要绝对路径）：</p><p><code>Hi xxx! You've successfully authenticated, but GitHub does not provide shell access.</code></p></blockquote><h3 id="配置文件权限-2">配置文件权限</h3><p>config 、id_rsa_github和 id_rsa_gitee 配置文件需要删除其他用户的权限</p><p><code>chmod 644 ~/.ssh/config</code></p><h2 id="同时推送多个远程仓库">同时推送多个远程仓库</h2><p>在本地项目中，可以同时关联 Gitee 和 GitHub 的远程仓库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加 GitHub 远程仓库</span></span><br><span class="line">git remote add github git@github.com:username/boot-demo.git</span><br><span class="line"><span class="comment"># 推送到 GitHub</span></span><br><span class="line">git push github master</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 Gitee 远程仓库</span></span><br><span class="line">git remote add gitee git@gitee.com:username/boot-demo.git</span><br><span class="line"><span class="comment"># 推送到 Gitee</span></span><br><span class="line">git push gitee master</span><br></pre></td></tr></table></figure><h2 id="仅推送单个远程仓库">仅推送单个远程仓库</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果只推送其中一个 github 仓库</span></span><br><span class="line">git branch -M main</span><br><span class="line">git remote add origin git@github.com:username/boot-demo.git</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><h2 id="同时配置多个-Github-账号">同时配置多个 Github 账号</h2><p>详细教程和说明，可参考：<a href="https://segmentfault.com/a/1190000043924833">博客</a></p><p>以 Linux 环境为例，再以上的基础上再添加一个 github 的账号配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为 GitHub 生成 SSH 密钥</span></span><br><span class="line">ssh-keygen -t rsa -f ~/.ssh/id_rsa_github_blog -C <span class="string">&quot;your_email@github.com&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>完成后会在~/.ssh / 目录下生成以下文件</p><ul class="lvl-1"><li class="lvl-2">id_rsa_github_blog</li><li class="lvl-2">id_rsa_github_blog.pub</li></ul><p>将生成的 id_rsa_github_blog.pub 文件打开，将数据拷贝添加到github平台的SSH配置中（全量拷贝）</p></blockquote><p>在 <code>~/.ssh/config</code> 文件中添加以下内容（注意区分Host）：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GitHub</span></span><br><span class="line">Host github_blog</span><br><span class="line">AddKeysToAgent yes</span><br><span class="line">IdentitiesOnly yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_github_blog</span><br></pre></td></tr></table></figure><p><strong>推送仓库</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意：修改为上面配置中对应的 Host，否则会定向到之前的配置中</span></span><br><span class="line">git remote add blog git@github_blog:username/boot-demo.git</span><br><span class="line">git push -u blog main</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看会显示存在三个仓库（github、gitee、blog）</span></span><br><span class="line">git remote -v</span><br></pre></td></tr></table></figure><h2 id="SSH-连接异常（提交失败）">SSH 连接异常（提交失败）</h2><p>Git 提交时报错：</p><blockquote><p>ssh: connect to host <a href="http://github.com">github.com</a> port 22: Connection timed out<br>fatal: Could not read from remote repository.</p></blockquote><p>用以下三个命令测试，均无法连接</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line">ping github.com</span><br><span class="line">telnet github.com 22</span><br></pre></td></tr></table></figure><p><strong>解决方法</strong>：</p><p>修改<code>~/.ssh/config</code> 配置，Port 改为 443，HostName  改为 <a href="http://ssh.github.com">ssh.github.com</a></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GitHub</span></span><br><span class="line">Host github.com</span><br><span class="line">AddKeysToAgent yes</span><br><span class="line">IdentitiesOnly yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">HostName ssh.github.com</span><br><span class="line">    Port 443</span><br><span class="line">User git</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_github</span><br><span class="line">    </span><br><span class="line"><span class="comment"># GitHub</span></span><br><span class="line">Host github_blog</span><br><span class="line">AddKeysToAgent yes</span><br><span class="line">IdentitiesOnly yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">HostName ssh.github.com</span><br><span class="line">    Port 443</span><br><span class="line">User git</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_github_blog</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github免密 </tag>
            
            <tag> gitee免密 </tag>
            
            <tag> git免密 </tag>
            
            <tag> github ssh </tag>
            
            <tag> gitee ssh </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
