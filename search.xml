<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>分库分表设计如何实现跨表分页查询</title>
      <link href="/2025/09/04/351e0f653b484f3cb3ed3c71e3c1bb5a/"/>
      <url>/2025/09/04/351e0f653b484f3cb3ed3c71e3c1bb5a/</url>
      
        <content type="html"><![CDATA[<p>分库与分表的目的在于，减小数据库的单库单表负担，提高查询性能，缩短查询时间。</p><blockquote><p>热数据：使用MySQL进行存储，分库分表；</p><p>冷数据：ES 或 TiDB或Hive存储；</p></blockquote><p>遇到下面几种场景可以考虑分库分表：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>单表的数据达到千万级别以上，数据库读写速度比较缓慢。</p></li><li class="lvl-2"><p>数据库中的数据占用的空间越来越大，备份时间越来越长。</p></li><li class="lvl-2"><p>应用的并发量太大（应该优先考虑其他性能优化方法，而非分库分表）。</p></li></ul></blockquote><p>不过，分库分表的成本太高，如非必要尽量不要采用。而且，并不一定是单表千万级数据量就要分表。</p><h2 id="分库分表的基本概念">分库分表的基本概念</h2><h3 id="分库">分库</h3><p>数据表分布到不同库中，减轻单一库的压力，提高数据性能和安全性。</p><p>分库带来的问题和挑战：</p><blockquote><p><strong>数据迁移与扩容问题</strong>：一般做法是通过程序先读出数据，然后按照指定的分表策略再将数据写入到各个分表中。<br><strong>分页与排序问题</strong>：需要在不同的分表中将数据进行排序并返回，并将不同分表返回结果集进行汇总和再次排序，最后再返回给用户。<br><strong>分布式全局唯一ID</strong>：UUID、GUID等</p></blockquote><h3 id="分表（水平-垂直）">分表（水平+垂直）</h3><p>分表可以减少数据库的单表负担，将压力分散到不同的表上，减少单表数据量，提高查询性能，缩短查询时间和缓解表锁的问题。</p><p><strong>水平分表（同列拆数据）</strong>：Hash取模分表就属于随机水平分表，而时间维度分表则属于连续水平分表（车辆轨迹）。</p><p><strong>垂直分表（不同列拆列）</strong>：将不常用的字段单独拆分到另外一张扩展表. 将大文本的字段单独拆分到另外一张扩展表, 将不经常修改的字段放在同一张表中，将经常改变的字段放在另一张表中，将列表的共用字段放一起（车辆、摄像头、果壳箱告警）。</p><blockquote><p>对于海量用户场景，可以考虑hash取模分表，数据相对比较均匀，不容易出现热点和并发访问的瓶颈。</p><p>库内分表仅仅是解决了单表数据过大的问题，但并没有把单表的数据分散到不同的物理机上，因此并不能减轻 MySQL 服务器的压力，仍然存在同一个物理机上的资源竞争和瓶颈，包括 CPU、内存、磁盘 IO、网络带宽等。</p></blockquote><p>一张表分很多表后，每一个小表都是完整的一张表，对应三个文件（MyISAM引擎：.MYD数据文件，.MYI索引文件，.frm表结构文件）。</p><h3 id="分片（跨库-水平分表）">分片（跨库-水平分表）</h3><p>分片是将一个逻辑上的数据库或表切分成多个物理上的数据库或表，每个分片都包含一部分数据。分片可以跨多个数据库服务器，甚至跨多个数据中心。分片通常基于某种策略（如哈希、范围等）将数据分散到不同的分片中。</p><p>MySQL5以后支持分区，但是不支持二级分区，并且单机MySQL的性能远远不如Oracle，所以分区并不能解决性能问题。</p><p>分片就是分库+分表，属于水平切分，将表中数据按照某种规则放到多个库中，既分表又分库。</p><p>分片关注于跨多个数据库服务器的水平扩展和数据隔离</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>水平扩展</strong>：通过增加数据库服务器数量，实现水平扩展，提高系统的整体性能。</p></li><li class="lvl-2"><p><strong>数据隔离</strong>：不同的分片可以部署在不同的地理位置，实现数据的物理隔离和容灾备份。</p></li><li class="lvl-2"><p><strong>降低单点故障风险</strong>：由于数据被分散到多个分片中，单个分片的故障不会影响整个系统的运行。</p></li></ul></blockquote><p>常见的分片策略有：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>范围分片</strong>：根据数据的某个字段（如时间戳、用户ID等）的值范围将数据分散到不同的分片中。这种方法适用于连续增长的数据，但可能导致数据倾斜。</p></li><li class="lvl-2"><p><strong>哈希分片</strong>：使用哈希函数将数据分散到不同的分片中。这种方法可以确保数据的均匀分布，但可能导致跨分片查询的性能问题。</p></li><li class="lvl-2"><p><strong>目录分片</strong>：使用一个额外的目录表来记录数据在不同分片中的分布情况。这种方法可以提供更灵活的分片策略，但增加了查询的复杂度。</p></li></ul></blockquote><p>在实现分片时，可以使用中间件（如MyCAT、Sharding-JDBC等）或自定义代码来管理数据的路由和分片。中间件通常提供了丰富的分片策略和配置选项，可以方便地实现分片功能。</p><h3 id="分区（单库-水平分表）">分区（单库-水平分表）</h3><p>MySQL分区表是将一个表物理上分割成多个较小的、更易于管理的片段，这些片段称为分区。</p><p>分区主要关注于单个数据库服务器的性能提升和管理效率</p><p>MySQL支持多种分区类型，如RANGE、LIST、HASH、KEY等。</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>性能提升</strong>：通过减少I/O操作、提高查询缓存效率等方式，提升查询性能。</p></li><li class="lvl-2"><p><strong>管理方便</strong>：可以单独对分区进行备份、恢复、删除等操作，提高管理效率。</p></li><li class="lvl-2"><p><strong>减少锁争用</strong>：在并发查询时，不同的分区可以并行处理，减少锁争用。</p></li></ul></blockquote><p>应用</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>日志表</strong>：如MySQL的慢查询日志表，可以按时间范围进行分区，便于管理和查询。</p></li><li class="lvl-2"><p><strong>历史数据表</strong>：对于按时间存储的历史数据，可以使用RANGE分区，将不同时间段的数据存储在不同的分区中。</p></li><li class="lvl-2"><p><strong>大数据表</strong>：对于数据量非常大的表，可以使用HASH或KEY分区，将数据分散到多个分区中，提高查询性能。</p></li></ul></blockquote><h2 id="分库分表的挑战">分库分表的挑战</h2><p>引入分库分表之后，会给系统带来什么挑战呢？</p><ul class="lvl-0"><li class="lvl-2"><p><strong>分页查询</strong>：数据分布到多个表中，导致分页查询受限，需要扫描各个分表再聚合结果。还涉及到深度分页问题。</p></li><li class="lvl-2"><p><strong>join 操作</strong>：同一个数据库中的表分布在了不同的数据库中，导致无法使用 join 操作。这样就导致我们需要手动进行数据的封装，比如你在一个数据库中查询到一个数据之后，再根据这个数据去另外一个数据库中找对应的数据。</p><blockquote><p>建议尽量不使用 join 操作。因为效率低，并且会对分库分表造成影响。对于需要用到 join 操作的地方，可以采用多次查询业务层进行数据组装的方法。不过，这种方法需要考虑业务上多次查询的事务性的容忍度。</p></blockquote></li><li class="lvl-2"><p><strong>事务问题</strong>：同一个数据库中的表分布在了不同的库中，操作涉及到多个数据库，数据库自带的事务就无法满足我们的要求了。这个时候，我们就需要引入分布式事务了。</p></li><li class="lvl-2"><p><strong>分布式 ID</strong>：分库之后， 数据遍布在不同服务器上的数据库，数据库的自增主键已经没办法满足生成的主键唯一了。</p></li><li class="lvl-2"><p><strong>跨库聚合查询</strong>：分库分表会导致常规聚合查询操作，如 group by，order by 等变得异常复杂。这是因为这些操作需要在多个分片上进行数据汇总和排序。为了实现这些操作，需要编写复杂的业务代码，或者使用中间件来协调分片间的通信和数据传输。这样会增加开发和维护的成本，以及影响查询的性能和可扩展性。</p></li></ul><h2 id="分库分表查询的解决方案">分库分表查询的解决方案</h2><p>案例：订单表根据 userId 分表（userId % 1024）后</p><h3 id="如何根据-orderId-快速查询订单信息？">如何根据 orderId 快速查询订单信息？</h3><ul class="lvl-0"><li class="lvl-2"><p>方法一：扫描所有分表（效率最差）</p></li><li class="lvl-2"><p>方法二：建立中间表，维护userId 和 orderId 的关联，首先查询该表来确认分表，再查询数据（需要两次查询，且数据冗余，可能出现不一致的情况）</p></li><li class="lvl-2"><p><strong>方法三</strong>：通过重新维护 orderId，最后4位数据拼接 userId 的二进制 前四位，然后可以对 orderId % 1024 来确定分表（需要保证分表数量为 2的次方个，且重写雪花算法，向其借四位）</p></li></ul><h3 id="如何分页查询所有订单？"><strong>如何分页查询所有订单</strong>？</h3><p>根据条件扫描所有分表中前面的所有数据，再代码过滤聚合（需要查大量无效数据，且性能低，涉及深度分页）</p><ul class="lvl-0"><li class="lvl-2"><p>全局表查询：维护一个涉及查询参数的全局表，数据列少（包含分表信息），查询后再二次检索原数据。</p></li><li class="lvl-2"><p>限制跳页查询：根据上页最大值做过滤，扫描每个分表范围内数据，当客户端拉取不到任何数据的时候，即可停止分页。</p></li><li class="lvl-2"><p>大数据集成法：ELK或者其它大数据套件，涉及数据同步问题。</p></li><li class="lvl-2"><p>三方分库分表组件（如：ShardingSphere，其原理也是拆分查询 ）</p></li><li class="lvl-2"><p>分布式数据库：既有关系数据库的优点又可以无限扩表，支持关系数据库间的无障碍迁移，比如国产的TiDB。</p></li><li class="lvl-2"><p><strong>按日期的二次查询法</strong>：通过两次查询来确保分页查询的精度和性能，特别适用于数据量大且需要精确分页的场景。</p><blockquote><p>二次查询法的基本思想是：将全局分页查询拆分为多个子查询，并通过两次查询来获取所需的数据。</p><ul class="lvl-3"><li class="lvl-2"><strong>第一次查询</strong>：将全局分页查询改写为多个子查询，每个子查询在各个分库中执行。例如，假设有三个分库，查询第200页的数据，每页5条记录，原始SQL为：<code>SELECT * FROM T ORDER BY time OFFSET 1000 LIMIT 5;</code></li><li class="lvl-2"><strong>找到最小时间戳</strong>：比较所有分库返回结果集中的最小时间戳，作为二次查询的起点。例如，假设三个分库返回的最小时间戳分别为1487501123、1487501133和1487501143，则最小时间戳为1487501123。</li><li class="lvl-2"><strong>第二次查询</strong>：根据最小时间戳和各分库返回结果集的最大时间戳，构造新的查询条件。例如，第一个分库返回的最大时间戳为1487501523，则新的查询条件为：<code>SELECT * FROM T WHERE time BETWEEN 1487501123 AND 1487501523;</code></li><li class="lvl-2"><strong>合并结果集</strong>：将所有分库的查询结果合并，并根据全局偏移量计算最终的分页结果。</li></ul><p><strong>优点</strong>：</p><ul class="lvl-3"><li class="lvl-2"><p><strong>精确分页</strong>：能够精确返回所需的分页数据。</p></li><li class="lvl-2"><p><strong>高性能</strong>：每次查询的数据量较小，不会随着翻页增加而显著增加。</p></li></ul><p><strong>缺点</strong>：</p><ul class="lvl-3"><li class="lvl-2"><p><strong>两次查询</strong>：需要进行两次数据库查询，增加了查询的复杂度。</p></li><li class="lvl-2"><p><strong>适用场景有限</strong>：适用于数据量大且需要精确分页的场景，不适用于所有情况</p></li></ul></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> DB </category>
          
          <category> 分库分表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分库分表 </tag>
            
            <tag> 分布式数据库 </tag>
            
            <tag> 二次查询法 </tag>
            
            <tag> TiDB </tag>
            
            <tag> ShardingSphere </tag>
            
            <tag> 跨表分页查询 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于LangChain+RAG+Ollama构建的智能医疗问答系统</title>
      <link href="/2025/09/04/92bb519d826e4443936d4cce27ceb524/"/>
      <url>/2025/09/04/92bb519d826e4443936d4cce27ceb524/</url>
      
        <content type="html"><![CDATA[<p><a href="https://gitee.com/haeng/ai-medical-agent">Gitee 医疗问答智能体</a></p><h2 id="关于-LangChain"><a href="https://www.langchain.com.cn/docs">关于 LangChain</a></h2><p>LangChain 是一个用于构建基于大语言模型应用程序的开源框架，旨在帮助开发者更高效地开发、部署和管理 LLM 驱动的应用。</p><p>其核心价值在于模块化设计、标准化接口和丰富的工具链，简化从原型设计到生产部署的AI应用开发全流程。它不依赖特定模型，而是提供统一接口对接OpenAI、Hugging Face等主流LLM，并支持自定义模型集成，使开发者能聚焦业务逻辑而非底层技术细节。</p><blockquote><p>它提供了一系列模块化组件和工具，简化了与 LLM 交互、数据处理、工作流编排等任务。</p><ul class="lvl-1"><li class="lvl-2"><strong>LangChain</strong>：提供七大组件（Agent, Models, Chains, Tools, Memory, Callbacks, RAG）。</li><li class="lvl-2"><strong>LangGraph</strong>：在其之上编排复杂流程，解决两类问题：<ol><li class="lvl-5"><strong>线性链的局限</strong>：基础 Chain 难以处理循环/分支。</li><li class="lvl-5"><strong>Agent 的扩展</strong>：增强 Agent 的鲁棒性（如自动重试、状态回溯）。</li></ol></li></ul></blockquote><p>LangChain 主要解决以下问题：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><strong>LLM 集成</strong>：支持多种大模型（如 OpenAI GPT、Anthropic、Llama2 等），统一接口调用。</p></li><li class="lvl-2"><p><strong>上下文管理</strong>：处理长文本、多轮对话的上下文限制（如分块、摘要、记忆机制）。</p></li><li class="lvl-2"><p><strong>数据增强</strong>：结合外部数据源（文档、数据库、API）进行检索增强生成（RAG）。</p></li><li class="lvl-2"><p><strong>工作流编排</strong>：通过链（Chain）将多个步骤组合成复杂流程（如问答、摘要、代码生成）。</p></li><li class="lvl-2"><p><strong>代理（Agent）</strong>：让 LLM 动态调用工具（如搜索、计算、自定义函数）完成复杂任务。</p></li></ul></blockquote><p>使用案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 翻译智能体</span></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> langchain_core.prompts <span class="keyword">import</span> ChatPromptTemplate</span><br><span class="line"><span class="keyword">from</span> langchain_core.output_parsers <span class="keyword">import</span> StrOutputParser</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"><span class="keyword">from</span> langserve <span class="keyword">import</span> add_routes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. Create prompt template</span></span><br><span class="line">system_template = <span class="string">&quot;Translate the following into &#123;language&#125;:&quot;</span></span><br><span class="line">prompt_template = ChatPromptTemplate.from_messages([</span><br><span class="line">    (<span class="string">&#x27;system&#x27;</span>, system_template),</span><br><span class="line">    (<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;&#123;text&#125;&#x27;</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. Create model</span></span><br><span class="line">model = ChatOpenAI()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. Create parser（输出转换，只过滤需要的内容）</span></span><br><span class="line">parser = StrOutputParser()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. Create chain</span></span><br><span class="line">chain = prompt_template | model | parser</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. App definition</span></span><br><span class="line">app = FastAPI(</span><br><span class="line">  title=<span class="string">&quot;LangChain Server&quot;</span>,</span><br><span class="line">  version=<span class="string">&quot;1.0&quot;</span>,</span><br><span class="line">  description=<span class="string">&quot;A simple API server using LangChain&#x27;s Runnable interfaces&quot;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. Adding chain route</span></span><br><span class="line">add_routes(</span><br><span class="line">    app,</span><br><span class="line">    chain,</span><br><span class="line">    path=<span class="string">&quot;/chain&quot;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">import</span> uvicorn</span><br><span class="line">    uvicorn.run(app, host=<span class="string">&quot;localhost&quot;</span>, port=<span class="number">8000</span>)</span><br></pre></td></tr></table></figure><h2 id="关于-Ollama"><a href="https://ollama.com/">关于 Ollama</a></h2><p>Ollama 是一个强大的运行框架，旨在使运行LLM尽可能简单。Ollama 简化了在本地机器或服务器上下载、运行和管理大型语言模型的整个过程。使用 Ollama 很简单，可以在不同的平台上完成安装。</p><p>Ollama的API具有许多基本功能，使其成为开发人员的重要选择之一，其主要功能如下：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>流支持：实时token生成，完全兼容OpenAI API，非常适合创建响应式应用程序。</p></li><li class="lvl-2"><p>多模型管理： 能够同时运行不同的模型，但有一个警告。 当 VRAM 有限时，Ollama 将停止一个模型来运行另一个模型，这需要仔细的资源规划。</p></li><li class="lvl-2"><p>参数控制： 通过 API 调用进行高度可定制的设置，它提供了很大的灵活性，但对于初学者和生产环境的服务器来说并不友好。</p></li><li class="lvl-2"><p>CPU 兼容性： 当 VRAM 不足时，智能资源管理可以自动将模型卸载到 CPU执行，使得在 GPU 内存有限的系统上也可以运行大模型服务。</p></li><li class="lvl-2"><p>语言无关性： 可以自由使用Python、 JavaScript、 Go等编程语言，以及其他任何具有 HTTP 功能的编程语言。</p></li></ul></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装模型</span></span><br><span class="line">ollama pull nomic-embed-text</span><br><span class="line">ollama pull qwen2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动ollama</span></span><br><span class="line">ollama server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入对话模式</span></span><br><span class="line">ollama run qwen2</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 调用 ollama 的接口</span></span><br><span class="line">curl --location --request POST <span class="string">&#x27;http://localhost:11434/api/generate&#x27;</span> \</span><br><span class="line">--header <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">--data-raw <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;model&quot;: &quot;qwen2&quot;,</span></span><br><span class="line"><span class="string">    &quot;prompt&quot;: &quot;Why is the sky blue?&quot;,</span></span><br><span class="line"><span class="string">    &quot;stream&quot;: false</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="关于-Chroma"><a href="https://github.com/chroma-core/chroma">关于 Chroma</a></h2><p>Chroma 是一种高效的开源向量数据库，专为存储和检索高维向量数据设计，广泛应用于文本嵌入管理和相似性搜索。它通过将文本转化为向量嵌入，支持语义搜索、推荐系统等功能，尤其适合大模型应用场景。</p><blockquote><p>Chroma 的核心基于 HNSW 算法，支持快速的近似最近邻搜索。其主要特点包括：</p><ul class="lvl-1"><li class="lvl-2"><strong>多存储后端</strong>：支持 DuckDB 和 ClickHouse 等存储选项。</li><li class="lvl-2"><strong>多语言支持</strong>：提供 Python 和 JavaScript SDK。</li><li class="lvl-2"><strong>简单易用</strong>：设计简洁，提升开发效率。</li><li class="lvl-2"><strong>高性能</strong>：支持快速相似性搜索和结果分析。</li></ul></blockquote><p>使用案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> chromadb</span><br><span class="line"><span class="comment"># 初始化客户端：</span></span><br><span class="line">client = chromadb.Client()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建集合：</span></span><br><span class="line">collection = client.create_collection(<span class="string">&quot;all-my-documents&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加数据：</span></span><br><span class="line">collection.add(</span><br><span class="line">    documents=[<span class="string">&quot;Document about AI&quot;</span>, <span class="string">&quot;Document about food&quot;</span>],</span><br><span class="line">    metadatas=[&#123;<span class="string">&quot;category&quot;</span>: <span class="string">&quot;technology&quot;</span>&#125;, &#123;<span class="string">&quot;category&quot;</span>: <span class="string">&quot;lifestyle&quot;</span>&#125;],</span><br><span class="line">    ids=[<span class="string">&quot;id1&quot;</span>, <span class="string">&quot;id2&quot;</span>]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询数据，支持通过元数据和文档内容进行过滤查询，按元数据过滤：</span></span><br><span class="line">results = collection.query(</span><br><span class="line">    query_texts=[<span class="string">&quot;AI&quot;</span>],</span><br><span class="line">    n_results=<span class="number">2</span>,</span><br><span class="line">    where=&#123;<span class="string">&quot;category&quot;</span>: &#123;<span class="string">&quot;$eq&quot;</span>: <span class="string">&quot;technology&quot;</span>&#125;&#125;</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(results)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 组合条件查询：按元数据过滤 + 按文档内容过滤</span></span><br><span class="line">results = collection.query(</span><br><span class="line">    query_texts=[<span class="string">&quot;AI&quot;</span>],</span><br><span class="line">    n_results=<span class="number">2</span>,</span><br><span class="line">    where=&#123;<span class="string">&quot;$and&quot;</span>: [&#123;<span class="string">&quot;category&quot;</span>: &#123;<span class="string">&quot;$eq&quot;</span>: <span class="string">&quot;technology&quot;</span>&#125;&#125;, &#123;<span class="string">&quot;year&quot;</span>: &#123;<span class="string">&quot;$gt&quot;</span>: <span class="number">2021</span>&#125;&#125;]&#125;</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(results)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新数据：</span></span><br><span class="line">collection.update(</span><br><span class="line">    ids=[<span class="string">&quot;id1&quot;</span>],</span><br><span class="line">    documents=[<span class="string">&quot;Updated document about AI&quot;</span>],</span><br><span class="line">    metadatas=[&#123;<span class="string">&quot;category&quot;</span>: <span class="string">&quot;updated technology&quot;</span>&#125;]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除数据：</span></span><br><span class="line">collection.delete(ids=[<span class="string">&quot;id1&quot;</span>])</span><br></pre></td></tr></table></figure><h2 id="医疗问答-Demo">医疗问答 Demo</h2><p>构建 医疗问答系统的样例。需要安装 Ollama 以及 相关依赖，添加指定数据集。可参考 <a href="https://github.com/haengood/ai-medical-agent">GitHub 源码</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain_core._api <span class="keyword">import</span> LangChainDeprecationWarning</span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>, category=LangChainDeprecationWarning)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain.agents <span class="keyword">import</span> initialize_agent, Tool</span><br><span class="line"><span class="keyword">from</span> langchain.chains <span class="keyword">import</span> RetrievalQA</span><br><span class="line"><span class="comment"># 按照最新的langchain导入规范，从langchain_community导入组件</span></span><br><span class="line"><span class="keyword">from</span> langchain_ollama <span class="keyword">import</span> ChatOllama</span><br><span class="line"><span class="keyword">from</span> langchain_chroma <span class="keyword">import</span> Chroma</span><br><span class="line"><span class="keyword">from</span> langchain_community.embeddings <span class="keyword">import</span> HuggingFaceEmbeddings</span><br><span class="line"><span class="keyword">from</span> langchain_community.document_loaders <span class="keyword">import</span> TextLoader</span><br><span class="line"><span class="keyword">from</span> langchain.text_splitter <span class="keyword">import</span> CharacterTextSplitter</span><br><span class="line"><span class="keyword">from</span> langchain_community.tools <span class="keyword">import</span> DuckDuckGoSearchRun</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加项目根目录到Python路径，以便导入tools模块</span></span><br><span class="line">sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), <span class="string">&#x27;../../&#x27;</span>)))</span><br><span class="line"><span class="comment"># 导入医疗专用工具</span></span><br><span class="line"><span class="keyword">from</span> tools.medical_tools <span class="keyword">import</span> MedicalTools</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MedicalAgent</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 初始化语言模型 - 使用Ollama并优化参数以提高响应速度</span></span><br><span class="line">        <span class="variable language_">self</span>.llm = ChatOllama(</span><br><span class="line">            model=<span class="string">&quot;gemma3:4b&quot;</span>,  <span class="comment"># Ollama中的模型名称，使用更通用的llama3</span></span><br><span class="line">            temperature=<span class="number">0</span>,</span><br><span class="line">            base_url=<span class="string">&quot;http://localhost:11434&quot;</span>,  <span class="comment"># Ollama默认API地址</span></span><br><span class="line">            <span class="comment"># 增加超时时间以解决连接问题</span></span><br><span class="line">            timeout=<span class="number">300</span>,</span><br><span class="line">            <span class="comment"># 移除JSON格式要求，某些模型可能不支持</span></span><br><span class="line">            <span class="comment"># format=&quot;json&quot;</span></span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 加载RAG数据</span></span><br><span class="line">        <span class="variable language_">self</span>.vectorstore = <span class="variable language_">self</span>.load_medical_knowledge()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建检索链 - 减少检索文档数量以提高速度</span></span><br><span class="line">        <span class="variable language_">self</span>.retrieval_chain = RetrievalQA.from_chain_type(</span><br><span class="line">            llm=<span class="variable language_">self</span>.llm,</span><br><span class="line">            chain_type=<span class="string">&quot;stuff&quot;</span>,</span><br><span class="line">            retriever=<span class="variable language_">self</span>.vectorstore.as_retriever(</span><br><span class="line">                search_kwargs=&#123;<span class="string">&quot;k&quot;</span>: <span class="number">2</span>&#125;  <span class="comment"># 从3减少到2，减少需要处理的文档数量</span></span><br><span class="line">            ),</span><br><span class="line">            return_source_documents=<span class="literal">True</span></span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建网络搜索工具</span></span><br><span class="line">        <span class="variable language_">self</span>.search = DuckDuckGoSearchRun()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 定义工具列表</span></span><br><span class="line">        <span class="variable language_">self</span>.tools = [</span><br><span class="line">            Tool(</span><br><span class="line">                name=<span class="string">&quot;Medical Knowledge Base&quot;</span>,</span><br><span class="line">                func=<span class="variable language_">self</span>.query_medical_knowledge,</span><br><span class="line">                description=<span class="string">&quot;适合用来回答医学知识相关的问题，包括疾病、药物、急救和健康生活方式等内容&quot;</span></span><br><span class="line">            ),</span><br><span class="line">            Tool(</span><br><span class="line">                name=<span class="string">&quot;Web Search&quot;</span>,</span><br><span class="line">                func=<span class="variable language_">self</span>.search.run,</span><br><span class="line">                description=<span class="string">&quot;适合用来搜索最新的医疗信息、研究进展和新闻等互联网信息&quot;</span></span><br><span class="line">            ),</span><br><span class="line">            Tool(</span><br><span class="line">                name=<span class="string">&quot;Symptom Extractor&quot;</span>,</span><br><span class="line">                func=<span class="variable language_">self</span>.extract_symptoms,</span><br><span class="line">                description=<span class="string">&quot;适合用来从文本中提取症状信息&quot;</span></span><br><span class="line">            ),</span><br><span class="line">            Tool(</span><br><span class="line">                name=<span class="string">&quot;Severity Assessment&quot;</span>,</span><br><span class="line">                func=<span class="variable language_">self</span>.assess_severity,</span><br><span class="line">                description=<span class="string">&quot;适合用来评估症状的严重程度&quot;</span></span><br><span class="line">            )</span><br><span class="line">        ]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 初始化智能体 - 关闭verbose输出以提高响应速度</span></span><br><span class="line">        <span class="variable language_">self</span>.agent = initialize_agent(</span><br><span class="line">            <span class="variable language_">self</span>.tools,</span><br><span class="line">            <span class="variable language_">self</span>.llm,</span><br><span class="line">            agent=<span class="string">&quot;zero-shot-react-description&quot;</span>,</span><br><span class="line">            verbose=<span class="literal">False</span>,  <span class="comment"># 从True改为False，减少输出信息</span></span><br><span class="line">            handle_parsing_errors=<span class="literal">True</span>,</span><br><span class="line">            max_iterations=<span class="number">3</span>,  <span class="comment"># 限制最大迭代次数</span></span><br><span class="line">            early_stopping_method=<span class="string">&quot;force&quot;</span></span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 初始化医疗工具</span></span><br><span class="line">        <span class="variable language_">self</span>.medical_tools = MedicalTools()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load_medical_knowledge</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;加载医疗知识库数据&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 获取data目录下的所有txt文件</span></span><br><span class="line">        data_dir = os.path.join(os.path.abspath(os.path.dirname(__file__)), <span class="string">&quot;../../data&quot;</span>)</span><br><span class="line">        files = glob.glob(os.path.join(data_dir, <span class="string">&quot;*.txt&quot;</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> files:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;警告: 未找到医疗知识库文件。将创建一个空的向量存储。&quot;</span>)</span><br><span class="line">            <span class="keyword">from</span> langchain_community.embeddings <span class="keyword">import</span> FakeEmbeddings</span><br><span class="line">            <span class="keyword">from</span> langchain_core.documents <span class="keyword">import</span> Document</span><br><span class="line">            <span class="comment"># 创建空文档列表并使用from_documents方法初始化Chroma</span></span><br><span class="line">            empty_docs = [Document(page_content=<span class="string">&quot;这是一个空的医疗知识库文档&quot;</span>, metadata=&#123;<span class="string">&quot;source&quot;</span>: <span class="string">&quot;empty&quot;</span>&#125;)]</span><br><span class="line">            <span class="keyword">return</span> Chroma.from_documents(empty_docs, FakeEmbeddings(size=<span class="number">768</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 加载文档</span></span><br><span class="line">        documents = []</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            loader = TextLoader(file, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">            documents.extend(loader.load())</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 分割文档</span></span><br><span class="line">        text_splitter = CharacterTextSplitter(chunk_size=<span class="number">1000</span>, chunk_overlap=<span class="number">200</span>)</span><br><span class="line">        texts = text_splitter.split_documents(documents)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建向量存储 - 使用FakeEmbeddings避免下载外部模型</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;使用FakeEmbeddings创建向量存储...&quot;</span>)</span><br><span class="line">        <span class="keyword">from</span> langchain_community.embeddings <span class="keyword">import</span> FakeEmbeddings</span><br><span class="line">        vectorstore = Chroma.from_documents(texts, FakeEmbeddings(size=<span class="number">768</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> vectorstore</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">query_medical_knowledge</span>(<span class="params">self, query</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;查询医疗知识库 - 优化查询逻辑以提高响应速度&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 快速查询</span></span><br><span class="line">            result = <span class="variable language_">self</span>.retrieval_chain.invoke(query)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 格式化回答，包含来源信息</span></span><br><span class="line">            answer = result[<span class="string">&quot;result&quot;</span>]</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 简化处理逻辑，减少不必要的操作</span></span><br><span class="line">            sources = <span class="built_in">set</span>()</span><br><span class="line">            <span class="keyword">for</span> doc <span class="keyword">in</span> result[<span class="string">&quot;source_documents&quot;</span>]:</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&quot;source&quot;</span> <span class="keyword">in</span> doc.metadata:</span><br><span class="line">                    sources.add(os.path.basename(doc.metadata[<span class="string">&quot;source&quot;</span>]))</span><br><span class="line">            </span><br><span class="line">            formatted_sources = <span class="string">&quot;\n来源: &quot;</span> + <span class="string">&quot;, &quot;</span>.join(sources) <span class="keyword">if</span> sources <span class="keyword">else</span> <span class="string">&quot;&quot;</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 直接返回回答，减少额外处理</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;answer&#125;</span><span class="subst">&#123;formatted_sources&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;知识库查询错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&quot;知识库查询失败: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extract_symptoms</span>(<span class="params">self, text</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;提取症状信息&quot;&quot;&quot;</span></span><br><span class="line">        symptoms = <span class="variable language_">self</span>.medical_tools.extract_symptoms(text)</span><br><span class="line">        <span class="keyword">if</span> symptoms:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&quot;提取到的症状: <span class="subst">&#123;<span class="string">&#x27;, &#x27;</span>.join(symptoms)&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;未提取到明显症状&quot;</span></span><br><span class="line">            </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">assess_severity</span>(<span class="params">self, symptoms_text</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;评估症状严重程度&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 先从文本中提取症状</span></span><br><span class="line">        symptoms = <span class="variable language_">self</span>.medical_tools.extract_symptoms(symptoms_text)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> symptoms:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;未提取到可评估的症状&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 评估严重程度</span></span><br><span class="line">        severity = <span class="variable language_">self</span>.medical_tools.assess_severity(symptoms)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;症状: <span class="subst">&#123;<span class="string">&#x27;, &#x27;</span>.join(symptoms)&#125;</span>\n<span class="subst">&#123;severity&#125;</span>&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self, question</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;运行智能体回答问题&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 验证医疗查询是否合适</span></span><br><span class="line">        is_valid, error_msg = <span class="variable language_">self</span>.medical_tools.validate_medical_query(question)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_valid:</span><br><span class="line">            <span class="keyword">return</span> error_msg</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 使用invoke方法替代已过时的run方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.agent.invoke(question)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 创建医疗智能体实例</span></span><br><span class="line">    medical_agent = MedicalAgent()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 示例问题</span></span><br><span class="line">    questions = [</span><br><span class="line">        <span class="string">&quot;什么是高血压？如何预防？&quot;</span>,</span><br><span class="line">        <span class="string">&quot;老年高血压患者有哪些注意事项？&quot;</span>,</span><br><span class="line">        <span class="string">&quot;脑血栓的高危因素有哪些？如何预防？&quot;</span>,</span><br><span class="line">        <span class="string">&quot;糖尿病的预防措施有哪些？&quot;</span>,</span><br><span class="line">        <span class="string">&quot;老年人如何保持健康的生活方式？&quot;</span>,</span><br><span class="line">        <span class="string">&quot;高血压、糖尿病和脑血栓之间有什么关系？&quot;</span>,</span><br><span class="line">        <span class="string">&quot;高危人群应该多久进行一次体检？&quot;</span></span><br><span class="line">    ]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 运行示例</span></span><br><span class="line">    <span class="keyword">for</span> q <span class="keyword">in</span> questions:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\n问题: <span class="subst">&#123;q&#125;</span>&quot;</span>)</span><br><span class="line">        result = medical_agent.run(q)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;回答: <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> Agent </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> LangChain </tag>
            
            <tag> LangGraph </tag>
            
            <tag> Ollama </tag>
            
            <tag> 医疗问答Agent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 多线程之等待全部执行完成</title>
      <link href="/2025/08/28/6d4b4511bd2443af994ec8e5982eb34a/"/>
      <url>/2025/08/28/6d4b4511bd2443af994ec8e5982eb34a/</url>
      
        <content type="html"><![CDATA[<p>需求：多线程任务（查询、文件、API）同时执行，等所有线程执行完成后才能继续向下，执行其他任务</p><h2 id="submit-多线程">submit()  多线程</h2><p>底层通过实现 Future 接口实现返回值，获取 callable 接口。</p><p>只有等线程执行完成获取到结果后才能继续执行后面的流程，会阻塞直到结果返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原理</span></span><br><span class="line"><span class="keyword">public</span> Future&lt;?&gt; submit(Runnable task) &#123;</span><br><span class="line">    <span class="keyword">if</span> (task == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    RunnableFuture&lt;Void&gt; ftask = newTaskFor(task, <span class="literal">null</span>);</span><br><span class="line">    execute(ftask);</span><br><span class="line">    <span class="keyword">return</span> ftask;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RunnableAdapter 实现 Callable 接口的 call()</span></span><br><span class="line"><span class="keyword">protected</span> &lt;T&gt; RunnableFuture&lt;T&gt; <span class="title function_">newTaskFor</span><span class="params">(Runnable runnable, T value)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.callable = <span class="keyword">new</span> <span class="title class_">RunnableAdapter</span>&lt;T&gt;(runnable, value);</span><br><span class="line">    <span class="built_in">this</span>.state = NEW;       <span class="comment">// ensure visibility of callable</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Callable 的 get() 方法 ，通过运行状态 和 LockSupport 实现线程阻塞</span></span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt; 只有所有线程运行结束后才可以结束</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> He.hp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> haeng2015@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2025/1/14 18:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadOnlyAllBySubmit</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(RandomUtil.randomInt(n * <span class="number">2000</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;------thread = &#123;&#125;, num=&#123;&#125;, msg = &#123;&#125;&quot;</span>, Thread.currentThread().getName(), n, e.getLocalizedMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">5</span>, <span class="number">10</span>,</span><br><span class="line">                <span class="number">5L</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">ThreadOnlyAllBySubmit</span> <span class="variable">threadOnlyOne</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadOnlyAllBySubmit</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        submit 等待线程执行完成，返回值</span></span><br><span class="line">        Future&lt;Integer&gt; res1 = threadPool.submit(() -&gt; threadOnlyOne.test(<span class="number">1</span>));</span><br><span class="line">        Future&lt;Integer&gt; res2 = threadPool.submit(() -&gt; threadOnlyOne.test(<span class="number">4</span>));</span><br><span class="line">        Future&lt;Integer&gt; res3 = threadPool.submit(() -&gt; threadOnlyOne.test(<span class="number">7</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// get 方法等待线程执行完成后获取结果，超时后没有则抛出异常</span></span><br><span class="line">            log.warn(<span class="string">&quot;res1:: isDone=&#123;&#125;,   res=&#123;&#125;&quot;</span>, res1.isDone(), res1.get(<span class="number">5</span>, TimeUnit.SECONDS));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;+++++ meg1 = &#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;res2:: isDone=&#123;&#125;,   res=&#123;&#125;&quot;</span>, res2.isDone(), res2.get(<span class="number">5</span>, TimeUnit.SECONDS));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;+++++ meg2 = &#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;res3:: isDone=&#123;&#125;,   res=&#123;&#125;&quot;</span>, res3.isDone(), res3.get(<span class="number">5</span>, TimeUnit.SECONDS));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;+++++ meg3 = &#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Semaphore（信号量）">Semaphore（信号量）</h2><p>计数信号量用来控制同时访问某个特定资源的操作数量，或者同时执行某个指定操作的数量。计数信号量还可以用来实现某种资源池，或者对容器施加边界。</p><blockquote><p>Semaphore 中管理着一组虚拟的许可，通过  acquire 获取一个许可，如果没有许可则一直阻塞。其本质就是操作系统的P-V操作，当资源足够的时候线程获得资源并执行，资源不足时线程等待或者退出，当资源被释放时线程又可以获取竞争资源继续执行；</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt; 只有所有线程运行结束后才可以结束</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> He.hp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> haeng2015@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2025/1/14 18:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadOnlyAllBySemaphore</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Semaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n, <span class="keyword">final</span> AtomicInteger val)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(RandomUtil.randomInt(<span class="number">5000</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;------thread = &#123;&#125;, msg = &#123;&#125;&quot;</span>, Thread.currentThread().getName(), e.getLocalizedMessage());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        semaphore.release();</span><br><span class="line">        val.addAndGet(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">5</span>, <span class="number">10</span>,</span><br><span class="line">                <span class="number">5L</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">threadNum</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        <span class="type">ThreadOnlyAllBySemaphore</span> <span class="variable">threadOnlyOne</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadOnlyAllBySemaphore</span>();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">val</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">1</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">4</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">7</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">2</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">6</span>, val));</span><br><span class="line"></span><br><span class="line">        semaphore.acquire(threadNum);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;semaphore结果=&#123;&#125;&quot;</span>, val.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CountDownLatch（计数器）">CountDownLatch（计数器）</h2><p>一种同步工具类，可以延迟线程的进度直到其到达终止状态。可以用来确保某些活动直到其他活动都完成后才继续执行。</p><p>应用场景：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>确保某个计算在其需要的所有资源都被初始化之后才继续执行。</p></li><li class="lvl-2"><p>确保某个服务在其依赖的所有其他服务都已经启动之后才启动。</p></li><li class="lvl-2"><p>等待直到某个操作的所有参与者都就绪再继续执行。</p></li></ul></blockquote><p>实现原理：</p><blockquote><p>闭锁状态包括一个计数器，该计数器被初始化为一个正数，表示需要等待的事件数量。 countDown 方法用来递减计数器，表示有一个事件已经发生了， await 方法用来等待计数器达到零。如果计数器的值非零，那么 await 方法会一直阻塞直到计数器为零，或者等待中的线程中断、等待超时。当某个线程调用await()方法时，由于tryAcquireShared会判断state是否等于0，如果不等于，就会进入等待队列，直到countDown调用sync.releaseShared(1)使得sync的状态到0，await的线程才会继续执行；</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt; 只有所有线程运行结束后才可以结束</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> He.hp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> haeng2015@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2025/1/14 18:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadOnlyAllByCountDownLatch</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CountDownLatch countDownLatch;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ThreadOnlyAllByCountDownLatch</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.num = num;</span><br><span class="line">        countDownLatch = <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n, <span class="keyword">final</span> AtomicInteger val)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(RandomUtil.randomInt(<span class="number">5000</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;------thread = &#123;&#125;,  msg = &#123;&#125;&quot;</span>, Thread.currentThread().getName(), e.getLocalizedMessage());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.countDown();</span><br><span class="line"></span><br><span class="line">        val.addAndGet(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">5</span>, <span class="number">10</span>,</span><br><span class="line">                <span class="number">5L</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">threadNum</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        <span class="type">ThreadOnlyAllByCountDownLatch</span> <span class="variable">threadOnlyOne</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadOnlyAllByCountDownLatch</span>(threadNum);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">val</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">1</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">4</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">7</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">2</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">6</span>, val));</span><br><span class="line"></span><br><span class="line">        threadOnlyOne.countDownLatch.await();</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;countDownLatch结果=&#123;&#125;&quot;</span>, val.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java多线程 </tag>
            
            <tag> ThreadPoolExecutor </tag>
            
            <tag> Runnable </tag>
            
            <tag> Callable </tag>
            
            <tag> Semaphore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 多线程之等待至少一个执行完成</title>
      <link href="/2025/08/28/ab60513384f74cac8ff0ab36a98cc1a6/"/>
      <url>/2025/08/28/ab60513384f74cac8ff0ab36a98cc1a6/</url>
      
        <content type="html"><![CDATA[<p>需求：多个线程同时执行一个任务，只要一个成功就退出，其他线程任务可以取消或无视。</p><blockquote><p><strong>注意</strong>：如果要暂停线程池中其他未执行完成的线程，需要先记录下来，然后调用其打断方法。</p></blockquote><h2 id="CountDownLatch（计数器）">CountDownLatch（计数器）</h2><p>一种同步工具类，可以延迟线程的进度直到其到达终止状态。可以用来确保某些活动直到其他活动都完成后才继续执行。</p><p>应用场景：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>确保某个计算在其需要的所有资源都被初始化之后才继续执行。</p></li><li class="lvl-2"><p>确保某个服务在其依赖的所有其他服务都已经启动之后才启动。</p></li><li class="lvl-2"><p>等待直到某个操作的所有参与者都就绪再继续执行。</p></li></ul></blockquote><p>实现原理：</p><blockquote><p>闭锁状态包括一个计数器，该计数器被初始化为一个正数，表示需要等待的事件数量。 countDown 方法用来递减计数器，表示有一个事件已经发生了， await 方法用来等待计数器达到零。如果计数器的值非零，那么 await 方法会一直阻塞直到计数器为零，或者等待中的线程中断、等待超时。当某个线程调用await()方法时，由于tryAcquireShared会判断state是否等于0，如果不等于，就会进入等待队列，直到countDown调用sync.releaseShared(1)使得sync的状态到0，await的线程才会继续执行；</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt; 只要有一个线程运行结束后，就可以结束。忽视其他未完成线程</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; CountDownLatch</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> He.hp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> haeng2015@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2025/1/14 18:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadOnlyOneByCountDownLatch</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n, <span class="keyword">final</span> AtomicInteger val)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(RandomUtil.randomInt(<span class="number">5000</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;------thread = &#123;&#125;,  msg = &#123;&#125;&quot;</span>, Thread.currentThread().getName(), e.getLocalizedMessage());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.countDown();</span><br><span class="line"></span><br><span class="line">        val.compareAndSet(<span class="number">0</span>, n);</span><br><span class="line">        log.info(<span class="string">&quot;------thread = &#123;&#125;, num=&#123;&#125; &quot;</span>, Thread.currentThread().getName(), n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">5</span>, <span class="number">10</span>,</span><br><span class="line">                <span class="number">5L</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">ThreadOnlyOneByCountDownLatch</span> <span class="variable">threadOnlyOne</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadOnlyOneByCountDownLatch</span>();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">val</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">1</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">4</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">7</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">2</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">6</span>, val));</span><br><span class="line"></span><br><span class="line">        threadOnlyOne.countDownLatch.await();</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;countDownLatch结果=&#123;&#125;&quot;</span>, val.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CyclicBarrier（循环栅栏）">CyclicBarrier（循环栅栏）</h2><p>栅栏能阻塞一组线程直到某个事件发生，直到所有线程都到达栅栏点，栅栏才会打开。所以栅栏一般用于多个线程需要相互等待的情况</p><p><strong>闭锁用于等待事件，而栅栏用于等待其他线程。</strong></p><p>可以使一定数量的参与方（线程）<strong>反复地</strong>在栅栏位置汇集，<code>await</code>方法将阻塞直到所有线程都到达栅栏位置。</p><p><strong>原理实现:</strong></p><blockquote><p>CyclicBarrier 维护了一个计数器，和一个 generation 每次调用await都会有将计数器减一，并且产生一个新的 generation ，只要计数器不为零，所有前置线程都会触发  await(); 内部会调用 LockSupport.park(this); 方法将线程加入等待队列， 所有线程就绪，会调用 trip.signalAll(); 唤醒所有线程，同时执行一个用户自定义的 Runnable 策略</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt; 一个线程完成就继续，忽视其他未完成线程</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; CyclicBarrier  两个屏障</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> He.hp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> haeng2015@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2025/1/14 18:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadOnlyOneByCyclicBarrier</span> &#123;</span><br><span class="line"><span class="comment">//    建立两个屏障</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">CyclicBarrier</span> <span class="variable">cyclicBarrier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n, <span class="keyword">final</span> AtomicInteger val)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(RandomUtil.randomInt(<span class="number">5000</span>));</span><br><span class="line">            cyclicBarrier.await(); <span class="comment">//放开栅栏1</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;------thread = &#123;&#125;, num=&#123;&#125;, msg = &#123;&#125;&quot;</span>, Thread.currentThread().getName(), n, e.getLocalizedMessage());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        val.compareAndSet(<span class="number">0</span>, n);</span><br><span class="line">        log.info(<span class="string">&quot;------thread = &#123;&#125;, num=&#123;&#125; &quot;</span>, Thread.currentThread().getName(), n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, BrokenBarrierException &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">5</span>, <span class="number">10</span>,</span><br><span class="line">                <span class="number">5L</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">ThreadOnlyOneByCyclicBarrier</span> <span class="variable">threadOnlyOne</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadOnlyOneByCyclicBarrier</span>();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">val</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">1</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">4</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">7</span>, val));</span><br><span class="line"></span><br><span class="line">        threadOnlyOne.cyclicBarrier.await(); <span class="comment">//放开栅栏1</span></span><br><span class="line">        log.info(<span class="string">&quot;结果=&#123;&#125;&quot;</span>, val.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Semaphore（信号量）">Semaphore（信号量）</h2><p>计数信号量用来控制同时访问某个特定资源的操作数量，或者同时执行某个指定操作的数量。计数信号量还可以用来实现某种资源池，或者对容器施加边界。</p><blockquote><p>Semaphore 中管理着一组虚拟的许可，通过  acquire 获取一个许可，如果没有许可则一直阻塞。其本质就是操作系统的P-V操作，当资源足够的时候线程获得资源并执行，资源不足时线程等待或者退出，当资源被释放时线程又可以获取竞争资源继续执行；</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt; 一个线程完成就继续，忽视其他未完成线程</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Semaphore 信号量</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> He.hp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> haeng2015@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2025/1/14 18:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadOnlyOneBySemaphore</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Semaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n, <span class="keyword">final</span> AtomicInteger val)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(RandomUtil.randomInt(<span class="number">5000</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;------thread = &#123;&#125;, msg = &#123;&#125;&quot;</span>, Thread.currentThread().getName(), e.getLocalizedMessage());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        semaphore.release(); <span class="comment">// 释放信号量</span></span><br><span class="line">        val.compareAndSet(<span class="number">0</span>, n);</span><br><span class="line">        log.info(<span class="string">&quot;------thread = &#123;&#125;, num=&#123;&#125; &quot;</span>, Thread.currentThread().getName(), n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">5</span>, <span class="number">10</span>,</span><br><span class="line">                <span class="number">5L</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">ThreadOnlyOneBySemaphore</span> <span class="variable">threadOnlyOne</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadOnlyOneBySemaphore</span>();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">val</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">1</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">4</span>, val));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">7</span>, val));</span><br><span class="line"></span><br><span class="line">        semaphore.acquire();</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;semaphore结果=&#123;&#125;&quot;</span>, val.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Queue（阻塞队列）">Queue（阻塞队列）</h2><p>通过队列的阻塞等待实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt; 其中一个线程运行结束后就可以结束，忽视其他未完成线程</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> He.hp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> haeng2015@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2025/1/14 18:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadOnlyOneByQueue</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> BlockingQueue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(RandomUtil.randomInt(<span class="number">5000</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;------thread = &#123;&#125;, msg = &#123;&#125;&quot;</span>, Thread.currentThread().getName(), e.getLocalizedMessage());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        queue.add(n);</span><br><span class="line">        log.info(<span class="string">&quot;------thread = &#123;&#125;, num=&#123;&#125; &quot;</span>, Thread.currentThread().getName(), n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">5</span>, <span class="number">10</span>,</span><br><span class="line">                <span class="number">5L</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">ThreadOnlyOneByQueue</span> <span class="variable">threadOnlyOne</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadOnlyOneByQueue</span>();</span><br><span class="line"></span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">1</span>));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">4</span>));</span><br><span class="line">        threadPool.execute(() -&gt; threadOnlyOne.test(<span class="number">7</span>));</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;结果=&#123;&#125;&quot;</span>, queue.take());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何打断其他线程">如何打断其他线程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt; 其中一个线程运行结束后就可以结束</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;  终止其他未结束的线程，需要先将所有线程记录下来，然后调用其打断方法。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> He.hp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> haeng2015@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2025/1/14 18:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadOnlyOneByQueueAndInterruptOther</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> BlockingQueue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n, Set&lt;Thread&gt; runThread)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">currentThread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        runThread.add(currentThread);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(n * RandomUtil.randomInt(<span class="number">1000</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;------thread = &#123;&#125;, msg = &#123;&#125;&quot;</span>, currentThread.getName(), e.getLocalizedMessage());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        queue.add(n);</span><br><span class="line">        runThread.remove(currentThread);</span><br><span class="line">        log.info(<span class="string">&quot;------thread = &#123;&#125;, num=&#123;&#125; &quot;</span>, currentThread.getName(), n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">5</span>, <span class="number">10</span>,</span><br><span class="line">                <span class="number">5L</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录此次运行的线程</span></span><br><span class="line">        <span class="keyword">final</span> Set&lt;Thread&gt; runThread = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        threadPool.execute(() -&gt; ThreadOnlyOneByQueueAndInterruptOther.test(<span class="number">411</span>, runThread));</span><br><span class="line">        threadPool.execute(() -&gt; ThreadOnlyOneByQueueAndInterruptOther.test(<span class="number">114</span>, runThread));</span><br><span class="line">        threadPool.execute(() -&gt; ThreadOnlyOneByQueueAndInterruptOther.test(<span class="number">70</span>, runThread));</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;结果=&#123;&#125;&quot;</span>, queue.take());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!runThread.isEmpty())<span class="comment">// 打断还在运行中的其他线程</span></span><br><span class="line">            runThread.parallelStream().forEach(Thread::interrupt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java多线程 </tag>
            
            <tag> ThreadPoolExecutor </tag>
            
            <tag> Runnable </tag>
            
            <tag> Semaphore </tag>
            
            <tag> CountDownLatch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>负载均衡算法demo示例</title>
      <link href="/2025/08/28/eaa2e8c201164ab5bdb705ebd84ee89d/"/>
      <url>/2025/08/28/eaa2e8c201164ab5bdb705ebd84ee89d/</url>
      
        <content type="html"><![CDATA[<p>常见的负载均衡算法列举与实现。</p><h2 id="随机">随机</h2><p>随机从集群中选择一个服务器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt; 负载均衡 - 随机算法   &lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 随机获得服务器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> He.hp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> hehp@citycloud.com.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/8/5 17:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RandomSlb</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Server&gt; servers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">// 所有服务器列表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Server&gt; currentServer = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();   <span class="comment">// 当前服务器</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得下一个服务器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Server <span class="title function_">getNextServer</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchAlgorithmException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">nextIndex</span> <span class="operator">=</span> SecureRandom.getInstanceStrong().nextInt(servers.size());</span><br><span class="line">        <span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> servers.get(nextIndex);</span><br><span class="line">        currentServer.set(server);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> server;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchAlgorithmException &#123;</span><br><span class="line">        servers.add(<span class="keyword">new</span> <span class="title class_">Server</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="string">&quot;111&quot;</span>, <span class="number">1</span>));</span><br><span class="line">        servers.add(<span class="keyword">new</span> <span class="title class_">Server</span>(<span class="string">&quot;127.0.0.2&quot;</span>, <span class="string">&quot;222&quot;</span>, <span class="number">2</span>));</span><br><span class="line">        servers.add(<span class="keyword">new</span> <span class="title class_">Server</span>(<span class="string">&quot;127.0.0.3&quot;</span>, <span class="string">&quot;333&quot;</span>, <span class="number">3</span>));</span><br><span class="line">        servers.add(<span class="keyword">new</span> <span class="title class_">Server</span>(<span class="string">&quot;127.0.0.4&quot;</span>, <span class="string">&quot;444&quot;</span>, <span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(getNextServer());</span><br><span class="line">        System.out.println(getNextServer());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="随机加权">随机加权</h2><p>根据权重值，随机获取集群服务器。权值越大获取的概率越大</p><h3 id="TreeMap排序">TreeMap排序</h3><p>通过树结构实现：找到大于该权重值中的最小权重的服务。如： random = 4, 则找出的第一个为</p><p>结果近似于方法一，key为最大权重值，取最接近的一个</p><p><img src="/imgs/image-20240710113822720.png" alt="image-20240710113822720"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;   负载均衡 - 加权随机算法   &lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 按权重设置随机概率，示例：</span></span><br><span class="line"><span class="comment"> * 如有4个元素A、B、C、D，权重分别为1、2、3、4，随机结果中A:B:C:D的比例要为1:2:3:4。</span></span><br><span class="line"><span class="comment"> * 总体思路：累加每个元素的权重A(1)-B(3)-C(6)-D(10)，则4个元素的的权重管辖区间分别为[0,1)、[1,3)、[3,6)、[6,10)。</span></span><br><span class="line"><span class="comment"> * 然后随机出一个[0,10)之间的随机数。落在哪个区间，则该区间之后的元素即为按权重命中的元素。</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 实现方法：</span></span><br><span class="line"><span class="comment"> * 利用TreeMap，则构造出的一个树为:  利用treemap.tailMap().firstKey()即可找到目标元素。</span></span><br><span class="line"><span class="comment"> * 　　   　　B(3)</span></span><br><span class="line"><span class="comment"> * 　　   　 /      \</span></span><br><span class="line"><span class="comment"> *         /         \</span></span><br><span class="line"><span class="comment"> *      A(1)     D(10)</span></span><br><span class="line"><span class="comment"> *      /</span></span><br><span class="line"><span class="comment"> *     /</span></span><br><span class="line"><span class="comment"> *   C(6)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> He.hp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> hehp@citycloud.com.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/8/5 17:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeightRandom</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TreeMap&lt;Double, Server&gt; weightMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WeightRandom</span><span class="params">(<span class="keyword">final</span> List&lt;Server&gt; list)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Server server : list) &#123;</span><br><span class="line">            <span class="type">double</span> <span class="variable">lastWeight</span> <span class="operator">=</span> <span class="built_in">this</span>.weightMap.size() == <span class="number">0</span> ? <span class="number">0</span> : <span class="built_in">this</span>.weightMap.lastKey(); <span class="comment">// 获取最后一个服务累加的权重值</span></span><br><span class="line"></span><br><span class="line">            <span class="built_in">this</span>.weightMap.put(server.getWeight() + lastWeight, server);    <span class="comment">//累加当前权重</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 随机获取下一个服务</span></span><br><span class="line">    <span class="keyword">public</span> Server <span class="title function_">randomServer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">randomWeight</span> <span class="operator">=</span> <span class="built_in">this</span>.weightMap.lastKey() * Math.random();     <span class="comment">// 获取随机数</span></span><br><span class="line">        <span class="comment">// 查找 key 大于  randomWeight 的所有</span></span><br><span class="line">        SortedMap&lt;Double, Server&gt; tailMap = <span class="built_in">this</span>.weightMap.tailMap(randomWeight, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.weightMap.get(tailMap.firstKey());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Server&gt; servers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        servers.add(<span class="keyword">new</span> <span class="title class_">Server</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="string">&quot;111&quot;</span>, <span class="number">1</span>));</span><br><span class="line">        servers.add(<span class="keyword">new</span> <span class="title class_">Server</span>(<span class="string">&quot;127.0.0.2&quot;</span>, <span class="string">&quot;222&quot;</span>, <span class="number">22</span>));</span><br><span class="line">        servers.add(<span class="keyword">new</span> <span class="title class_">Server</span>(<span class="string">&quot;127.0.0.3&quot;</span>, <span class="string">&quot;333&quot;</span>, <span class="number">3</span>));</span><br><span class="line">        servers.add(<span class="keyword">new</span> <span class="title class_">Server</span>(<span class="string">&quot;127.0.0.4&quot;</span>, <span class="string">&quot;444&quot;</span>, <span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">WeightRandom</span> <span class="variable">weightRandom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WeightRandom</span>(servers);</span><br><span class="line">        <span class="type">int</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="number">0</span>, s2 = <span class="number">0</span>, s3 = <span class="number">0</span>, s4 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">float</span> <span class="variable">maxCount</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; maxCount; i++) &#123;</span><br><span class="line">            <span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> weightRandom.randomServer();</span><br><span class="line">            <span class="keyword">switch</span> (server.getPort()) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;111&quot;</span>:</span><br><span class="line">                    s1++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;222&quot;</span>:</span><br><span class="line">                    s2++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;333&quot;</span>:</span><br><span class="line">                    s3++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;444&quot;</span>:</span><br><span class="line">                    s4++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">&quot;s1 = %d 出现概率 %.2f \n&quot;</span>, s1, (s1 / maxCount) * <span class="number">100</span>);</span><br><span class="line">        System.out.printf(<span class="string">&quot;s2 = %d 出现概率 %.2f \n&quot;</span>, s2, (s2 / maxCount) * <span class="number">100</span>);</span><br><span class="line">        System.out.printf(<span class="string">&quot;s3 = %d 出现概率 %.2f \n&quot;</span>, s3, (s3 / maxCount) * <span class="number">100</span>);</span><br><span class="line">        System.out.printf(<span class="string">&quot;s4 = %d 出现概率 %.2f \n&quot;</span>, s4, (s4 / maxCount) * <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="区间法">区间法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;   负载均衡 - 加权随机算法   &lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 按权重设置随机概率，示例：</span></span><br><span class="line"><span class="comment"> * 如有4个元素A、B、C、D，权重分别为1、2、3、4，随机结果中A:B:C:D的比例要为1:2:3:4。</span></span><br><span class="line"><span class="comment"> * 总体思路：累加每个元素的权重A(1)-B(3)-C(6)-D(10)，则4个元素的的权重管辖区间分别为[0,1)、[1,3)、[3,6)、[6,10)。</span></span><br><span class="line"><span class="comment"> *      然后随机出一个[0,10)之间的随机数。落在哪个区间，则该区间之后的元素即为按权重命中的元素。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 实现方法：</span></span><br><span class="line"><span class="comment"> *      根据权值，获得区间范围列表，并加入到对应的服务中，Map&lt;Server, Set&lt;Integer&gt;&gt;  key为服务， value为区间列表值</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> He.hp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> hehp@citycloud.com.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/8/5 17:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeightSlb</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Server&gt; servers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">// 所有服务器列表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">int</span> totalWeights;    <span class="comment">// 权重总和</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Server, Set&lt;Integer&gt;&gt; maps = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(); <span class="comment">// 每个服务器的权重区间值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Server&gt; currentServer = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();   <span class="comment">// 当前服务器</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置权重区间值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">weightExtent</span><span class="params">()</span> &#123;</span><br><span class="line">        totalWeights = servers.stream().mapToInt(Server::getWeight).sum();   <span class="comment">//计算权重总和</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">startSum</span> <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">// 截至上一个对象的累计权值总和</span></span><br><span class="line">        <span class="keyword">for</span> (Server s : servers) &#123;</span><br><span class="line"></span><br><span class="line">            Set&lt;Integer&gt; list = maps.computeIfAbsent(s, n -&gt; <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;());</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startSum; i &lt; startSum + s.getWeight(); i++) &#123;</span><br><span class="line">                list.add(i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            startSum += s.getWeight(); <span class="comment">// 累加本服务的权值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得下一个服务器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Server <span class="title function_">getNextServer</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchAlgorithmException &#123;</span><br><span class="line"><span class="comment">//        int nextInt = new Random().nextInt(totalWeights);</span></span><br><span class="line"><span class="comment">//        currentServer.remove();</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">nextInt</span> <span class="operator">=</span> SecureRandom.getInstanceStrong().nextInt(totalWeights);</span><br><span class="line">        <span class="keyword">for</span> (Server server : maps.keySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (maps.get(server).contains(nextInt)) &#123;</span><br><span class="line">                currentServer.set(server);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> currentServer.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchAlgorithmException &#123;</span><br><span class="line">        servers.add(<span class="keyword">new</span> <span class="title class_">Server</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="string">&quot;111&quot;</span>, <span class="number">1</span>));</span><br><span class="line">        servers.add(<span class="keyword">new</span> <span class="title class_">Server</span>(<span class="string">&quot;127.0.0.2&quot;</span>, <span class="string">&quot;222&quot;</span>, <span class="number">12</span>));</span><br><span class="line">        servers.add(<span class="keyword">new</span> <span class="title class_">Server</span>(<span class="string">&quot;127.0.0.3&quot;</span>, <span class="string">&quot;333&quot;</span>, <span class="number">3</span>));</span><br><span class="line">        servers.add(<span class="keyword">new</span> <span class="title class_">Server</span>(<span class="string">&quot;127.0.0.4&quot;</span>, <span class="string">&quot;444&quot;</span>, <span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">        weightExtent();</span><br><span class="line">        <span class="type">int</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="number">0</span>, s2 = <span class="number">0</span>, s3 = <span class="number">0</span>, s4 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">float</span> <span class="variable">maxCount</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; maxCount; i++) &#123;</span><br><span class="line">            <span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> getNextServer();</span><br><span class="line">            <span class="keyword">switch</span> (server.getPort()) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;111&quot;</span>:</span><br><span class="line">                    s1++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;222&quot;</span>:</span><br><span class="line">                    s2++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;333&quot;</span>:</span><br><span class="line">                    s3++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;444&quot;</span>:</span><br><span class="line">                    s4++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">&quot;s1 = %d 出现概率 %.2f \n&quot;</span>, s1, (s1 / maxCount) * <span class="number">100</span>);</span><br><span class="line">        System.out.printf(<span class="string">&quot;s2 = %d 出现概率 %.2f \n&quot;</span>, s2, (s2 / maxCount) * <span class="number">100</span>);</span><br><span class="line">        System.out.printf(<span class="string">&quot;s3 = %d 出现概率 %.2f \n&quot;</span>, s3, (s3 / maxCount) * <span class="number">100</span>);</span><br><span class="line">        System.out.printf(<span class="string">&quot;s4 = %d 出现概率 %.2f \n&quot;</span>, s4, (s4 / maxCount) * <span class="number">100</span>);</span><br><span class="line"><span class="comment">//        System.out.println(getNextServer());</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="B-树结构">B+树结构</h3><p>利用B+树的原理。叶子结点存放元素，非叶子结点用于索引。非叶子结点有两个属性，分别保存左右子树的累加权重。如下图：</p><img src="/imgs/721070-20170609190949200-1515655849.png" alt="img" style="zoom:67%;" /><p>更改一个元素，只须修改该元素到根结点那半部分的权值即可</p><h2 id="轮询">轮询</h2><p>把来自用户的请求轮流分配给集群中的服务器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;   负载均衡 - 轮询算法   &lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 请求轮流分配给内部的服务器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> He.hp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> hehp@citycloud.com.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/8/5 17:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PollingSlb</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Server&gt; servers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">// 所有服务器列表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Server&gt; currentServer = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();   <span class="comment">// 当前服务器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">currentServerIndex</span> <span class="operator">=</span> <span class="number">0</span>;    <span class="comment">// 当前服务器下标</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得下一个服务器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Server <span class="title function_">getNextServer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> currentServer.get();</span><br><span class="line">        <span class="keyword">if</span> (server != <span class="literal">null</span>)</span><br><span class="line">            currentServerIndex = (currentServerIndex + <span class="number">1</span>) % servers.size();</span><br><span class="line"></span><br><span class="line">        server = servers.get(currentServerIndex);</span><br><span class="line">        currentServer.set(server);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> server;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        servers.add(<span class="keyword">new</span> <span class="title class_">Server</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="string">&quot;111&quot;</span>, <span class="number">1</span>));</span><br><span class="line">        servers.add(<span class="keyword">new</span> <span class="title class_">Server</span>(<span class="string">&quot;127.0.0.2&quot;</span>, <span class="string">&quot;222&quot;</span>, <span class="number">1</span>));</span><br><span class="line">        servers.add(<span class="keyword">new</span> <span class="title class_">Server</span>(<span class="string">&quot;127.0.0.3&quot;</span>, <span class="string">&quot;333&quot;</span>, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(PollingSlb.getNextServer());</span><br><span class="line">        System.out.println(PollingSlb.getNextServer());</span><br><span class="line">        System.out.println(PollingSlb.getNextServer());</span><br><span class="line">        System.out.println(PollingSlb.getNextServer());</span><br><span class="line">        System.out.println(PollingSlb.getNextServer());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 负载均衡 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 负载均衡 </tag>
            
            <tag> 随机加权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-compose 安装脚本大集绵</title>
      <link href="/2025/08/27/b585f359ac2749e1ac92f2801c848595/"/>
      <url>/2025/08/27/b585f359ac2749e1ac92f2801c848595/</url>
      
        <content type="html"><![CDATA[<blockquote><p>包含单机版或集群部署，相关参数可自行调整</p></blockquote><h2 id="nacos">nacos</h2><p>单机版</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nacos/nacos-server:v2.5.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nacos</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8848:8848&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9848:9848&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9849:9849&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MODE=standalone</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">NACOS_AUTH_ENABLE=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PREFER_HOST_MODE=hostname</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MODE=standalone</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">NACOS_AUTH_IDENTITY_KEY=nacos</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">NACOS_AUTH_IDENTITY_VALUE=nacos</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">NACOS_AUTH_TOKEN=VGhpc0lzTXlDdXN0b21TZWNyZXRLZXkwMTIzNDU2Nzg=</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">JVM_XMX=1g</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">JVM_XMS=1g</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./logs:/data/nacos/logs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data/nacos/data</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><h2 id="rocketmq">rocketmq</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">namesrv:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">apache/rocketmq:5.3.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">rmqnamesrv</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9876</span><span class="string">:9876</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">rocketmq</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">sh</span> <span class="string">mqnamesrv</span></span><br><span class="line">  <span class="attr">broker:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">apache/rocketmq:5.3.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">rmqbroker</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">10909</span><span class="string">:10909</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">10911</span><span class="string">:10911</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">10912</span><span class="string">:10912</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">NAMESRV_ADDR=rmqnamesrv:9876</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">namesrv</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">rocketmq</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">sh</span> <span class="string">mqbroker</span></span><br><span class="line">  <span class="attr">proxy:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">apache/rocketmq:5.3.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">rmqproxy</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">rocketmq</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">broker</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">namesrv</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8081</span><span class="string">:8081</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8082</span><span class="string">:8082</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">on-failure</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">NAMESRV_ADDR=rmqnamesrv:9876</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">sh</span> <span class="string">mqproxy</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">rocketmq:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br></pre></td></tr></table></figure><h2 id="kafka">kafka</h2><p>单机版（KRaft模式）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">kafka:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">confluentinc/cp-kafka:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kafka</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9092:9092&quot;</span>      <span class="comment"># 容器间通信端口</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;19092:19092&quot;</span>    <span class="comment"># 宿主机访问端口</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9093:9093&quot;</span>      <span class="comment"># Controller端口</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">volume</span></span><br><span class="line">        <span class="attr">source:</span> <span class="string">kafka_standalone_data</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/data/kafka</span></span><br><span class="line">        <span class="attr">read_only:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="comment"># KRaft模式必需配置</span></span><br><span class="line">      <span class="attr">CLUSTER_ID:</span> <span class="string">mk-0kz5wGoTQ6eN6vDPN2eX2A</span></span><br><span class="line">      <span class="attr">KAFKA_PROCESS_ROLES:</span> <span class="string">broker,controller</span></span><br><span class="line">      <span class="attr">KAFKA_NODE_ID:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">KAFKA_CONTROLLER_QUORUM_VOTERS:</span> <span class="number">1</span><span class="string">@localhost:9093</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment"># 关键：配置多个监听器支持不同访问场景</span></span><br><span class="line">      <span class="comment"># 在Docker容器中，使用INTERNAL监听器：kafka:19092</span></span><br><span class="line">      <span class="comment"># 在宿主机中，使用EXTERNAL监听器端口：localhost:9092</span></span><br><span class="line">      <span class="attr">KAFKA_LISTENERS:</span> <span class="string">INTERNAL://0.0.0.0:19092,EXTERNAL://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093</span></span><br><span class="line">      <span class="attr">KAFKA_ADVERTISED_LISTENERS:</span> <span class="string">INTERNAL://kafka:19092,EXTERNAL://localhost:9092</span></span><br><span class="line">      <span class="attr">KAFKA_LISTENER_SECURITY_PROTOCOL_MAP:</span> <span class="string">INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT</span></span><br><span class="line">      <span class="attr">KAFKA_INTER_BROKER_LISTENER_NAME:</span> <span class="string">INTERNAL</span></span><br><span class="line">      <span class="attr">KAFKA_CONTROLLER_LISTENER_NAMES:</span> <span class="string">CONTROLLER</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment"># 存储配置</span></span><br><span class="line">      <span class="attr">KAFKA_LOG_DIRS:</span> <span class="string">/tmp/kraft-combined-logs</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment"># 其他配置</span></span><br><span class="line">      <span class="attr">KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">KAFKA_TRANSACTION_STATE_LOG_MIN_ISR:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">KAFKA_AUTO_CREATE_TOPICS_ENABLE:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">KAFKA_NUM_PARTITIONS:</span> <span class="number">3</span></span><br><span class="line">      <span class="attr">KAFKA_DEFAULT_REPLICATION_FACTOR:</span> <span class="number">1</span></span><br><span class="line">      <span class="comment"># 用来进行选举的Controller服务器，如果有多个Controller则都需要写上，这里本机</span></span><br><span class="line">      <span class="attr">KAFKA_CFG_CONTROLLER_QUORUM_VOTERS:</span> <span class="number">1</span><span class="string">@127.0.0.1:9094</span></span><br><span class="line">      <span class="attr">ALLOW_PLAINTEXT_LISTENER:</span> <span class="literal">yes</span></span><br><span class="line">      <span class="comment"># 开启JMX监控</span></span><br><span class="line">      <span class="attr">JMX_PORT:</span> <span class="number">9998</span></span><br><span class="line">      <span class="attr">KAFKA_JMX_OPTS:</span> <span class="string">-Dcom.sun.management.jmxremote</span> <span class="string">-Dcom.sun.management.jmxremote.authenticate=false</span> <span class="string">-Dcom.sun.management.jmxremote.ssl=false</span> <span class="string">-Djava.rmi.server.hostname=kafka</span> <span class="string">-Dcom.sun.management.jmxremote.rmi.port=9998</span></span><br><span class="line">      </span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD-SHELL&quot;</span>, <span class="string">&quot;kafka-broker-api-versions --bootstrap-server localhost:9092&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">30s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">3</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">kafka-network</span>     </span><br><span class="line">      </span><br><span class="line">  <span class="attr">kafka-ui:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kafka-ui</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">provectuslabs/kafka-ui:latest</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="comment"># 访问UI： http://localhost:9090/kafkaui/auth</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9090:8080&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">kafka</span></span><br><span class="line">     <span class="comment"># kafka:</span></span><br><span class="line">     <span class="comment">#   condition: service_healthy</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">KAFKA_CLUSTERS_0_NAME:</span> <span class="string">kafka-stand-alone</span></span><br><span class="line">      <span class="attr">KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS:</span> <span class="string">kafka:19092</span></span><br><span class="line">      <span class="attr">KAFKA_CLUSTERS_0_READONLY:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">KAFKA_CLUSTERS_0_METRICS_PORT:</span> <span class="number">9998</span></span><br><span class="line">      <span class="attr">SERVER_SERVLET_CONTEXT_PATH:</span> <span class="string">/kafkaui</span></span><br><span class="line">      <span class="attr">AUTH_TYPE:</span> <span class="string">disabled</span>  <span class="comment"># 或者设置为 : &quot;LOGIN_FORM&quot;</span></span><br><span class="line">      <span class="attr">SPRING_SECURITY_USER_NAME:</span> <span class="string">admin</span></span><br><span class="line">      <span class="attr">SPRING_SECURITY_USER_PASSWORD:</span> <span class="number">123456</span></span><br><span class="line">      <span class="attr">DYNAMIC_CONFIG_ENABLED:</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">kafka-network</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">      </span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">kafka_standalone_data:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">kafka-network:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="mqtt">mqtt</h2><p>单机版</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mosquitto:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">eclipse-mosquitto:2.0</span>    <span class="comment"># 只能选择 mqttx 中的 3.1.1 版本，才能连接上</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mqtt</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">mosquitto</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="literal">no</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;1883:1883&quot;</span>  <span class="comment"># </span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9001:9001&quot;</span>  <span class="comment"># WebSocket for web clients</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8083:8083&quot;</span>  <span class="comment"># MQTT over WebSocket (alternative)</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./conf/mosquitto.conf:/mosquitto/config/mosquitto.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data/mosquitto:/mosquitto/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./logs/mosquitto:/mosquitto/log</span></span><br><span class="line">    <span class="comment">#  - ./data/mosquitto/password.txt:/mosquitto/config/password.txt  # 预先创建好的密码文件</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mqtt-network</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span>  <span class="comment"># 设置时区</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">limits:</span></span><br><span class="line">          <span class="attr">memory:</span> <span class="string">512M</span></span><br><span class="line">          <span class="attr">cpus:</span> <span class="string">&#x27;1&#x27;</span></span><br><span class="line">        <span class="attr">reservations:</span></span><br><span class="line">          <span class="attr">memory:</span> <span class="string">256M</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;mosquitto&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;/mosquitto/config/mosquitto.conf&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">30s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">3</span></span><br><span class="line">      </span><br><span class="line">  <span class="comment"># MQTT 管理界面</span></span><br><span class="line"><span class="comment">#  mqtt-admin:</span></span><br><span class="line"><span class="comment">#    image: hivemq/hivemq-mqtt-web-client:latest</span></span><br><span class="line"><span class="comment">#    container_name: mqtt-admin</span></span><br><span class="line"><span class="comment">#    ports:</span></span><br><span class="line"><span class="comment">#      - &quot;8080:8080&quot;</span></span><br><span class="line"><span class="comment">#    environment:</span></span><br><span class="line"><span class="comment">#      - HIVEMQ_BROKER_HOST=mosquitto</span></span><br><span class="line"><span class="comment">#      - HIVEMQ_BROKER_PORT=1883</span></span><br><span class="line"><span class="comment">#    depends_on:</span></span><br><span class="line"><span class="comment">#      - mosquitto</span></span><br><span class="line"><span class="comment">#    restart: no</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Node-RED（可选，用于MQTT数据处理）</span></span><br><span class="line">  <span class="attr">node-red:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nodered/node-red:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">node-red</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;1880:1880&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data/mosquitto/node-red-data:/data</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="literal">no</span>   <span class="comment"># unless-stopped</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">mqtt-network:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br><span class="line"><span class="comment"># 可选：自定义网络参数，更好地隔离</span></span><br><span class="line">    <span class="comment"># ipam:</span></span><br><span class="line">    <span class="comment">#   config:</span></span><br><span class="line">    <span class="comment">#     - subnet: 172.28.0.0/16</span></span><br></pre></td></tr></table></figure><p><code>mosquitto.conf</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"># Basic configuration</span><br><span class="line"># TCP 监听器</span><br><span class="line">listener <span class="number">1883</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">protocol mqtt</span><br><span class="line"># 允许匿名连接</span><br><span class="line">allow_anonymous <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"># Security</span><br><span class="line"># password_file /mosquitto/config/password.txt</span><br><span class="line"></span><br><span class="line"># Persistence</span><br><span class="line">persistence <span class="literal">true</span></span><br><span class="line">persistence_location /mosquitto/data/</span><br><span class="line">autosave_interval <span class="number">1800</span></span><br><span class="line"></span><br><span class="line"># 兼容性设置</span><br><span class="line">connection_messages <span class="literal">true</span></span><br><span class="line"># 协议版本兼容性</span><br><span class="line">allow_zero_length_clientid <span class="literal">true</span></span><br><span class="line">auto_id_prefix <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">log_timestamp <span class="literal">true</span></span><br><span class="line"># Logging</span><br><span class="line">log_dest file /mosquitto/log/mosquitto.log</span><br><span class="line">log_type error</span><br><span class="line">log_dest stdout</span><br><span class="line">log_type all</span><br><span class="line"></span><br><span class="line"># Limits</span><br><span class="line">max_connections <span class="number">1000</span></span><br><span class="line">max_keepalive <span class="number">300</span></span><br><span class="line">max_packet_size <span class="number">1024</span></span><br><span class="line"></span><br><span class="line"># WebSocket support</span><br><span class="line">listener <span class="number">9001</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">protocol websockets</span><br></pre></td></tr></table></figure><h2 id="skywalking">skywalking</h2><p>skywalking 包含的所有组件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">elasticsearch:7.14.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9200</span><span class="string">:9200</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;TAKE_FILE_OWNERSHIP=true&quot;</span> <span class="comment">#volumes 挂载权限 如果不想要挂载es文件改配置可以删除</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;discovery.type=single-node&quot;</span> <span class="comment">#单机模式启动</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;TZ=Asia/Shanghai&quot;</span> <span class="comment"># 设置时区</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span> <span class="comment"># 设置jvm内存大小</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./elasticsearch/logs:/usr/share/elasticsearch/logs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./elasticsearch/data:/usr/share/elasticsearch/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./elasticsearch/conf/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml</span></span><br><span class="line">    <span class="attr">ulimits:</span></span><br><span class="line">      <span class="attr">memlock:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">-1</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">-1</span></span><br><span class="line">  <span class="attr">skywalking-oap-server:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">apache/skywalking-oap-server:8.9.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">skywalking-oap-server</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">11800</span><span class="string">:11800</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">12800</span><span class="string">:12800</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">SW_STORAGE:</span> <span class="string">elasticsearch</span>  <span class="comment"># 指定ES版本</span></span><br><span class="line">      <span class="attr">SW_STORAGE_ES_CLUSTER_NODES:</span> <span class="string">elasticsearch:9200</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">./oap/conf/alarm-settings.yml:/skywalking/config/alarm-settings.yml</span></span><br><span class="line">  <span class="attr">skywalking-ui:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">apache/skywalking-ui:8.9.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">skywalking-ui</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">skywalking-oap-server</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">skywalking-oap-server</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">SW_OAP_ADDRESS:</span> <span class="string">http://skywalking-oap-server:12800</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br></pre></td></tr></table></figure><h2 id="prometheus">prometheus</h2><p>prometheus 包含的所有组件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">net-prometheus:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="comment"># 核心组件   </span></span><br><span class="line">  <span class="attr">prometheus:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">prom/prometheus</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">prometheus</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="literal">no</span>     <span class="comment"># always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9090:9090&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./prometheus/conf:/etc/prometheus</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./prometheus/data/prometheus_db:/prometheus</span> </span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;--config.file=/etc/prometheus/prometheus.yml&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;--storage.tsdb.path=/prometheus&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;--web.console.libraries=/usr/share/prometheus/console_libraries&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;--web.console.templates=/usr/share/prometheus/consoles&#x27;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">net-prometheus</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 前端展示</span></span><br><span class="line">  <span class="attr">grafana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/grafana</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">grafana</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="literal">no</span>     <span class="comment"># always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3000:3000&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">     <span class="comment"># - ./prometheus/conf/grafana:/etc/grafana</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./prometheus/data/grafana_data:/var/lib/grafana</span></span><br><span class="line">    <span class="attr">depends_on:</span>  </span><br><span class="line">      <span class="bullet">-</span> <span class="string">prometheus</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">net-prometheus</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">pushgateway:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">prom/pushgateway</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">pushgateway</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="literal">no</span>     <span class="comment"># always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9091:9091&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./prometheus/data/pushgateway_data:/var/lib/pushgateway</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">net-prometheus</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 告警组件      </span></span><br><span class="line">  <span class="attr">alertmanager:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">prom/alertmanager</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">alertmanager</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">alertmanager</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="literal">no</span>     <span class="comment"># always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9093:9093&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./prometheus/data/alertmanager_data:/var/lib/alertmanager</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">net-prometheus</span></span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line"><span class="comment"># 节点监控</span></span><br><span class="line">  <span class="attr">node_exporter:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">prom/node-exporter</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">node_exporter</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;./prometheus:/host:ro,rslave&#x27;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9100</span><span class="string">:9100</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;--path.rootfs=/host&#x27;</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">org.label-schema.group:</span> <span class="string">&quot;monitoring&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="literal">no</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">net-prometheus</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器监控</span></span><br><span class="line">  <span class="attr">cadvisor:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">google/cadvisor:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">cadvisor</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">cadvisor</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="literal">no</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./prometheus/:/rootfs:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./prometheus/var/run:/var/run:rw</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./prometheus/sys:/sys:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./prometheus/var/lib/docker/:/var/lib/docker:ro</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;8080:8080&#x27;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">net-prometheus</span></span><br></pre></td></tr></table></figure><p><code>prometheus.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># my global config</span></span><br><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">scrape_interval:</span>     <span class="string">15s</span> <span class="comment"># Set the scrape interval to every 15 seconds. Default is every 1 minute.</span></span><br><span class="line">  <span class="attr">evaluation_interval:</span> <span class="string">15s</span> <span class="comment"># Evaluate rules every 15 seconds. The default is every 1 minute.</span></span><br><span class="line">  <span class="comment"># scrape_timeout is set to the global default (10s).</span></span><br><span class="line">  <span class="attr">external_labels:</span></span><br><span class="line">    <span class="attr">monitor:</span> <span class="string">&#x27;dashboard&#x27;</span></span><br><span class="line"></span><br><span class="line">      </span><br><span class="line"><span class="comment"># Alertmanager configuration</span></span><br><span class="line"><span class="attr">alerting:</span></span><br><span class="line">  <span class="attr">alert_relabel_configs:</span> <span class="comment"># 动态修改 alert 属性的规则配置。</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">dc</span>] </span><br><span class="line">      <span class="attr">regex:</span> <span class="string">(.+)\d+</span></span><br><span class="line">      <span class="attr">target_label:</span> <span class="string">dc1</span></span><br><span class="line">  <span class="attr">alertmanagers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;192.168.1.115:9093&#x27;</span>]</span><br><span class="line">      </span><br><span class="line"></span><br><span class="line"><span class="comment"># Load rules once and periodically evaluate them according to the global &#x27;evaluation_interval&#x27;.</span></span><br><span class="line"><span class="attr">rule_files:</span></span><br><span class="line">  <span class="comment"># - &quot;first_rules.yml&quot;</span></span><br><span class="line">  <span class="comment"># - &quot;second_rules.yml&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A scrape configuration containing exactly one endpoint to scrape:</span></span><br><span class="line"><span class="comment"># Here it&#x27;s Prometheus itself.</span></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="comment"># The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;prometheus&#x27;</span></span><br><span class="line">    <span class="attr">scrape_interval:</span> <span class="string">5s</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;prometheus:9090&#x27;</span>]</span><br><span class="line">      </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;node-exporter&#x27;</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="comment"># 需要修改 node-exporter service, 不能用localhost 指的是容器内部</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;192.168.1.115:9100&#x27;</span>,<span class="string">&#x27;192.168.1.115:9091&#x27;</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CICD </category>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> docker-compose </tag>
            
            <tag> kafka docker-compose </tag>
            
            <tag> rocketmq docker-compose </tag>
            
            <tag> skywalking docker-compose </tag>
            
            <tag> nacos docker-compose </tag>
            
            <tag> prometheus docker-compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DDD 领域模型在订单系统中的应用案例</title>
      <link href="/2025/08/27/6efb20fcd51b42c4a7a358edeb242cf6/"/>
      <url>/2025/08/27/6efb20fcd51b42c4a7a358edeb242cf6/</url>
      
        <content type="html"><![CDATA[<h1>DDD 领域模型</h1><p>领域驱动设计（Domain-driven design）是一种通过将实现连接到持续进化的模型来满足复杂需求的软件开发方法。</p><p><strong>DDD 核心思想是通过领域驱动设计方法定义领域模型，从而确定业务和应用边界，保证业务模型与代码模型的一致性</strong>。</p><blockquote><p>领域驱动设计是一种由<strong>域模型</strong>来驱动着系统设计的思想。</p><ul class="lvl-1"><li class="lvl-2">一种解决复杂系统的建模与分析方法</li><li class="lvl-2">将业务概念和规则转为对象和对象的属性行为</li><li class="lvl-2">通过封装、继承和多态降低业务复杂性</li><li class="lvl-2"><strong>不是数据库表结构的映射</strong>，而是对业务逻辑、规则、流程的建模。</li><li class="lvl-2">包含实体、值对象、聚合、领域服务、领域事件等元素。</li></ul><p>举个例子：在一个电商系统中，“订单”不是一个简单的 <code>Order</code> 表，而是一个包含下单、支付、取消、发货等行为和状态流转逻辑的复杂对象。</p></blockquote><h2 id="五层架构">五层架构</h2><p>原则：每层只能与位于其下方的层发生耦合。</p><p>分层架构可以简单分为两种，即严格分层架构和松散分层架构。在<strong>严格分层架构</strong>中，某层只能与位于其直接下方的层发生耦合，而在<strong>松散分层架构</strong>中，则允许某层与它的任意下方层发生耦合。</p><img src="/imgs/at4uaznghdxgm_a3d40698d6354ed5af6fc331081774d3.webp" alt="img" style="zoom:33%;" /><blockquote><ul class="lvl-1"><li class="lvl-2"><p>降低了系统的性能。因为增加了中间层，可以通过缓存机制来改善。</p></li><li class="lvl-2"><p>可能会导致级联的修改。这种修改尤其体现在自上而下的方向，可以通过依赖倒置来改善。</p></li></ul></blockquote><ul class="lvl-0"><li class="lvl-2"><p><strong>领域层</strong>domain（核心业务层）</p><ul class="lvl-2"><li class="lvl-4"><strong>领域对象</strong>：实体对象、值对象、聚合、聚合根 （充血模型：业务方法在实体对象里，负责维护实体自身的生命周期和状态）</li><li class="lvl-4"><strong>领域服务</strong>：接口服务，业务的具体实现（围绕实体）：商品服务、电子围栏、订单服务、运单服务、</li><li class="lvl-4"><strong>领域仓储</strong>：持久化的细节隐藏，减少领域层对基础设施层的依赖（需要使用到基础设施层，包括DB、Feign调用等）</li></ul></li><li class="lvl-2"><p><strong>防腐层</strong>（外部API）</p><ul class="lvl-2"><li class="lvl-4">三方API：隔离业务，防止污染业务代码，可通过代理或适配器实现转换</li></ul></li><li class="lvl-2"><p><strong>应用层（业务逻辑层）</strong></p><ul class="lvl-2"><li class="lvl-4">应用服务：调用和组合领域层的服务，不包含任何业务逻辑（简单除外），只是组合模型业务（类似模块化）</li><li class="lvl-4">数据转换：接口参数DTO的简单校验，以及DTO和实体值对象的数据转换</li><li class="lvl-4">事件订阅：管理多个消息主体</li><li class="lvl-4">消息订阅：多个微服务间协作解耦的异步实现方式</li></ul></li><li class="lvl-2"><p><strong>基础设施层</strong></p><ul class="lvl-2"><li class="lvl-4">数据库、缓存、消息队列、配置</li><li class="lvl-4">对外隐藏技术实现细节，提供粗粒度的数据输出服务</li><li class="lvl-4">数据库操作：领域层传递的是数据对象，在这里可以按数据表的实现方式进行拆分实现</li></ul></li><li class="lvl-2"><p><strong>用户接口层（表现层）</strong></p><ul class="lvl-2"><li class="lvl-4">面向服务间API调用，WEB接口</li><li class="lvl-4">身份认证和权限验证</li><li class="lvl-4">限流和熔断服务</li><li class="lvl-4">VO和DTO数据转换</li></ul></li></ul><blockquote><p>简单查询不涉及业务，是可以直接从应用层穿透到PO查询，不需要经过domain层</p><p>DTO是不能存在于domain层的，DDD设计不认为DTO是业务对象，entity才是</p></blockquote><h1>订单建模示例</h1><p><a href="https://github.com/haeng2015/ddd-order-demo"><strong>完整Github项目</strong></a></p><ol><li class="lvl-3"><p><strong>DDD 分层模型</strong>：</p></li></ol><blockquote><p><strong>用户接口层（Interface / API 层）</strong>：提供 REST 接口，接收外部请求。</p><p><strong>应用层（Application 层）</strong>：编排领域服务，处理用例逻辑，如“创建订单”。</p><p><strong>领域层（Domain 层）</strong>：包含核心业务逻辑，如 Order 聚合根、领域事件、状态机、仓储接口等。</p><p><strong>基础设施层（Infrastructure 层）</strong>：实现仓储接口、防腐层、外部服务调用、事件发布等。</p></blockquote><ol start="2"><li class="lvl-3"><p><strong>防腐层（Anti-Corruption Layer, ACL）</strong>：</p></li></ol><blockquote><p>用于与外部系统（如库存服务）交互，避免领域模型被外部污染。</p><p>在基础设施层实现，通过 ACL 将外部模型转换为内部领域模型。</p></blockquote><ol start="3"><li class="lvl-3"><p><strong>事件与状态机</strong>：</p></li></ol><blockquote><p>使用领域事件（如 OrderCreatedEvent, OrderPaidEvent）表达领域内发生的重要事情。</p><p>使用状态机（如 OrderStateMachine）管理订单状态的合法流转（如：待支付 -&gt; 已支付 -&gt; 已发货 / 已取消）。</p></blockquote><p><strong>代码结构展示</strong></p><blockquote><p>├── src/<br>│   └── main/<br>│       ├── java/<br>│       │   └── com/example/order/<br>│       │       ├── OrderApplication.java<br>│       │       │<br>│       │       ├── application/                 # 应用层<br>│       │       │   ├── service/<br>│       │       │   │   └── OrderService.java<br>│       │       │   └── dto/<br>│       │       │       └── OrderDTO.java<br>│       │       │<br>│       │       ├── domain/                      # 领域层（核心）<br>│       │       │   ├── model/                   # 聚合根、实体、值对象<br>│       │       │   │   ├── Order.java<br>│       │       │   │   ├── OrderItem.java<br>│       │       │   │   └── OrderStatus.java<br>│       │       │   │<br>│       │       │   ├── event/                   # 领域事件<br>│       │       │   │   ├── OrderCreatedEvent.java<br>│       │       │   │   ├── OrderPaidEvent.java<br>│       │       │   │   ├── OrderShippedEvent.java<br>│       │       │   │   └── OrderCancelledEvent.java<br>│       │       │   │<br>│       │       │   ├── repository/              # 领域仓库接口<br>│       │       │   │   └── OrderRepository.java<br>│       │       │   │<br>│       │       │   ├── service/                 # 领域服务<br>│       │       │   │   └── OrderDomainService.java<br>│       │       │   │<br>│       │       │   └── statemachine/            # 状态机配置<br>│       │       │       ├── OrderState.java<br>│       │       │       ├── OrderEvent.java<br>│       │       │       └── OrderStateMachineConfig.java<br>│       │       │<br>│       │       ├── infrastructure/              # 基础设施层<br>│       │       │   ├── persistence/             # 持久化实现<br>│       │       │   │   ├── jpa/<br>│       │       │   │   │   ├── OrderEntity.java<br>│       │       │   │   │   └── OrderRepository.java<br>│       │       │   │   └── mapper/<br>│       │       │   │       └── OrderMapper.java<br>│       │       │   │<br>│       │       │   ├── messaging/               # 消息发布（事件）<br>│       │       │   │   └── KafkaEventPublisher.java<br>│       │       │   │<br>│       │       │   └── integration/             # 外部系统集成（含防腐层）<br>│       │       │       ├── inventory/<br>│       │       │       │   ├── InventoryClient.java<br>│       │       │       │   ├── InventoryResponse.java<br>│       │       │       │   └── acl/             # 防腐层<br>│       │       │       │       ├── InventoryServiceAcl.java<br>│       │       │       │       └── InventoryRequestDTO.java<br>│       │       │       └── payment/<br>│       │       │           ├── PaymentClient.java<br>│       │       │           └── acl/<br>│       │       │               └── PaymentServiceAcl.java<br>│       │       │<br>│       │       └── interfaces/                  # 接口层（Controller）<br>│       │           └── web/<br>│       │               └── OrderController.java<br>│       │<br>│       └── resources/<br>│           ├── application.yml<br>│           ├── statemachine/                    # 状态机配置</p></blockquote><h2 id="订单管理建模">订单管理建模</h2><p>核心对象：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>聚合根对象：<code>Order</code>（订单）</p></li><li class="lvl-2"><p>值对象：订单项（<code>OrderItem</code>）、地址（<code>Address</code>）、金额（<code>Money</code>）等</p></li><li class="lvl-2"><p>一致性边界：一次下单操作必须保证所有订单项和状态一致</p></li></ul></blockquote><h3 id="实体与值对象定义">实体与值对象定义</h3><ul class="lvl-0"><li class="lvl-2"><p><strong>值对象</strong>：<code>Money</code>（金额）</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Money</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal amount;</span><br><span class="line">    <span class="keyword">private</span> String currency;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Money</span><span class="params">(BigDecimal amount, String currency)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (amount.compareTo(BigDecimal.ZERO) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessRuleViolation</span>(<span class="string">&quot;金额不能为负&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.amount = amount;</span><br><span class="line">        <span class="built_in">this</span>.currency = currency;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Money <span class="title function_">add</span><span class="params">(Money other)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.currency.equals(other.currency)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessRuleViolation</span>(<span class="string">&quot;货币不一致&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Money</span>(<span class="built_in">this</span>.amount.add(other.amount), <span class="built_in">this</span>.currency);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// equals, hashCode 基于 amount 和 currency</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><strong>实体</strong>：<code>OrderItem</code>（订单项）</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderItem</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String productId;</span><br><span class="line">    <span class="keyword">private</span> String productName;</span><br><span class="line">    <span class="keyword">private</span> Money unitPrice;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> quantity;</span><br><span class="line">    <span class="keyword">private</span> Money totalPrice;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderItem</span><span class="params">(String productId, String productName, Money unitPrice, <span class="type">int</span> quantity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.productId = productId;</span><br><span class="line">        <span class="built_in">this</span>.productName = productName;</span><br><span class="line">        <span class="built_in">this</span>.unitPrice = unitPrice;</span><br><span class="line">        <span class="built_in">this</span>.quantity = quantity;</span><br><span class="line">        <span class="built_in">this</span>.totalPrice = unitPrice.multiply(quantity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可提供 increaseQuantity(), changePrice() 等方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><strong>聚合根</strong>：<code>Order</code>（订单）</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String orderId;</span><br><span class="line">    <span class="keyword">private</span> String customerId;</span><br><span class="line">    <span class="keyword">private</span> List&lt;OrderItem&gt; items = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> Address shippingAddress;</span><br><span class="line">    <span class="keyword">private</span> Money totalAmount;</span><br><span class="line">    <span class="keyword">private</span> OrderStatus status;</span><br><span class="line">    <span class="keyword">private</span> DateTime createdAt;</span><br><span class="line">    <span class="keyword">private</span> List&lt;DomainEvent&gt; events = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造，强制使用工厂创建</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Order</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下单：创建订单</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Order <span class="title function_">createFromCart</span><span class="params">(</span></span><br><span class="line"><span class="params">            String orderId,</span></span><br><span class="line"><span class="params">            String customerId,</span></span><br><span class="line"><span class="params">            List&lt;CartItem&gt; cartItems,</span></span><br><span class="line"><span class="params">            Address address)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">        order.orderId = orderId;</span><br><span class="line">        order.customerId = customerId;</span><br><span class="line">        order.shippingAddress = address;</span><br><span class="line">        order.createdAt = LocalDateTime.now();</span><br><span class="line">        order.status = OrderStatus.PENDING;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (CartItem item : cartItems) &#123;</span><br><span class="line">            <span class="type">ProductPrice</span> <span class="variable">price</span> <span class="operator">=</span> ProductService.getCurrentPrice(item.getProductId());</span><br><span class="line">            order.addItem(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(</span><br><span class="line">                item.getProductId(),</span><br><span class="line">                item.getProductName(),</span><br><span class="line">                price.getAmount(),</span><br><span class="line">                item.getQuantity()</span><br><span class="line">            ));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        order.calculateTotal();</span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加订单项（业务规则：仅在 PENDING 状态下允许）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addItem</span><span class="params">(OrderItem item)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (status != OrderStatus.PENDING) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessRuleViolation</span>(<span class="string">&quot;订单已锁定，无法添加商品&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        items.add(item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算总金额</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">calculateTotal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.totalAmount = items.stream()</span><br><span class="line">            .map(OrderItem::getTotalPrice)</span><br><span class="line">            .reduce(Money.ZERO, Money::add);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 支付成功：确认订单</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">confirmPayment</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (status != OrderStatus.PENDING) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessRuleViolation</span>(<span class="string">&quot;订单状态异常，无法确认支付&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.status = OrderStatus.PAID;</span><br><span class="line">        <span class="comment">// 发布领域事件</span></span><br><span class="line">        DomainEventPublisher.publish(<span class="keyword">new</span> <span class="title class_">OrderPaidEvent</span>(orderId, totalAmount));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取消订单</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cancel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (status == OrderStatus.SHIPPED) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessRuleViolation</span>(<span class="string">&quot;已发货订单不能取消&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (status == OrderStatus.CANCELLED) &#123;</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">// 幂等处理</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.status = OrderStatus.CANCELLED;</span><br><span class="line">        DomainEventPublisher.publish(<span class="keyword">new</span> <span class="title class_">OrderCancelledEvent</span>(orderId, customerId));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发货</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ship</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (status != OrderStatus.PAID) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessRuleViolation</span>(<span class="string">&quot;订单未支付，不能发货&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.status = OrderStatus.SHIPPED;</span><br><span class="line">        DomainEventPublisher.publish(<span class="keyword">new</span> <span class="title class_">OrderShippedEvent</span>(orderId));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addEvent</span><span class="params">(DomainEvent event)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.events.add(event);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// getter 方法省略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><strong>枚举及其他</strong>：<code>OrderStatus</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">OrderStatus</span> &#123;</span><br><span class="line">    PENDING,    <span class="comment">// 待支付</span></span><br><span class="line">    PAID,       <span class="comment">// 已支付</span></span><br><span class="line">    SHIPPED,    <span class="comment">// 已发货</span></span><br><span class="line">    CANCELLED   <span class="comment">// 已取消</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="领域事件（Domain-Events）">领域事件（Domain Events）</h3><p>领域事件可通过事件总线异步通知库存、物流、用户积分等系统。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 订单已支付</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderPaidEvent</span> <span class="keyword">implements</span> <span class="title class_">DomainEvent</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String orderId;</span><br><span class="line">    <span class="keyword">private</span> Money amount;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime occurredAt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderPaidEvent</span><span class="params">(String orderId, Money amount)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.orderId = orderId;</span><br><span class="line">        <span class="built_in">this</span>.amount = amount;</span><br><span class="line">        <span class="built_in">this</span>.occurredAt = LocalDateTime.now();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订单已取消</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderCancelledEvent</span> <span class="keyword">implements</span> <span class="title class_">DomainEvent</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String orderId;</span><br><span class="line">    <span class="keyword">private</span> String customerId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderCancelledEvent</span><span class="params">(String orderId, String customerId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.orderId = orderId;</span><br><span class="line">        <span class="built_in">this</span>.customerId = customerId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订单已发货</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderShippedEvent</span> <span class="keyword">implements</span> <span class="title class_">DomainEvent</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String orderId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderShippedEvent</span><span class="params">(String orderId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.orderId = orderId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="领域服务：OrderFulfillmentService">领域服务：<code>OrderFulfillmentService</code></h3><p>处理跨聚合或跨上下文的复杂逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderFulfillmentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> InventoryService inventoryService;</span><br><span class="line">    <span class="keyword">private</span> PaymentQueryService paymentQueryService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleOrderPaymentConfirmed</span><span class="params">(String orderId)</span> &#123;</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderRepository.findById(orderId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 检查支付是否真实完成</span></span><br><span class="line">        <span class="keyword">if</span> (!paymentQueryService.isPaymentValid(orderId)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessRuleViolation</span>(<span class="string">&quot;支付未验证通过&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 锁定库存（调用库存上下文）</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">locked</span> <span class="operator">=</span> inventoryService.reserveInventory(order.getItems());</span><br><span class="line">        <span class="keyword">if</span> (!locked) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessRuleViolation</span>(<span class="string">&quot;库存不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 确认订单</span></span><br><span class="line">        order.confirmPayment();</span><br><span class="line">        orderRepository.save(order); <span class="comment">// 触发事件发布</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="仓储接口（Repository）">仓储接口（Repository）</h3><p>定义在领域层，实现放在基础设施层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 领域层接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderRepository</span> &#123;</span><br><span class="line">    Order <span class="title function_">findById</span><span class="params">(String orderId)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Order order)</span>;</span><br><span class="line">    List&lt;Order&gt; <span class="title function_">findByCustomer</span><span class="params">(String customerId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="工厂封装（Factory）">工厂封装（Factory）</h3><p>封装复杂创建逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Order <span class="title function_">createFromCart</span><span class="params">(</span></span><br><span class="line"><span class="params">            String orderId,</span></span><br><span class="line"><span class="params">            Customer customer,</span></span><br><span class="line"><span class="params">            ShoppingCart cart,</span></span><br><span class="line"><span class="params">            Address address)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 校验用户是否可下单</span></span><br><span class="line">        <span class="keyword">if</span> (!customer.isActive()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessRuleViolation</span>(<span class="string">&quot;用户被禁用&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 校验购物车非空</span></span><br><span class="line">        <span class="keyword">if</span> (cart.getItems().isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessRuleViolation</span>(<span class="string">&quot;购物车为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Order.createFromCart(orderId, customer.getId(), cart.getItems(), address);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事件驱动的订单状态机设计">事件驱动的订单状态机设计</h2><blockquote><ul class="lvl-1"><li class="lvl-2"><p>订单的状态流转不再由“硬编码 if-else”控制，而是通过 <strong>监听领域事件</strong> 触发状态变更。</p></li><li class="lvl-2"><p>使用 <strong>状态机（State Machine）</strong> 模型来管理 <code>OrderStatus</code> 的合法转换。</p></li><li class="lvl-2"><p>所有状态变更由 <strong>领域事件驱动</strong>，保证逻辑集中、可追溯、可扩展。</p></li></ul></blockquote><table><thead><tr><th>当前状态 → 新状态</th><th>触发事件</th><th>是否允许</th></tr></thead><tbody><tr><td>PENDING → PAID</td><td>OrderPaidEvent</td><td>✅ 是</td></tr><tr><td>PENDING → CANCELLED</td><td>OrderCancelledEvent</td><td>✅ 是</td></tr><tr><td>PAID → SHIPPED</td><td>OrderShippedEvent</td><td>✅ 是</td></tr><tr><td>PAID → CANCELLED</td><td>OrderRefundedEvent</td><td>✅ 是（退款后取消）</td></tr><tr><td>SHIPPED → CANCELLED</td><td>❌</td><td>❌ 否</td></tr><tr><td>任意 → PENDING</td><td>❌</td><td>❌ 不允许回退</td></tr></tbody></table><h3 id="状态机实现">状态机实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderStateMachine</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义合法的状态转移</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;OrderStatus, List&lt;OrderStatus&gt;&gt; transitions = Map.of(</span><br><span class="line">        OrderStatus.PENDING, Arrays.asList(OrderStatus.PAID, OrderStatus.CANCELLED),</span><br><span class="line">        OrderStatus.PAID, Arrays.asList(OrderStatus.SHIPPED, OrderStatus.CANCELLED)</span><br><span class="line">        <span class="comment">// SHIPPED 没有出边 → 不可变更</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canTransition</span><span class="params">(OrderStatus from, OrderStatus to)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (from == <span class="literal">null</span> || to == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        List&lt;OrderStatus&gt; allowed = transitions.getOrDefault(from, Collections.emptyList());</span><br><span class="line">        <span class="keyword">return</span> allowed.contains(to);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行状态变更（由事件处理器调用）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">applyEvent</span><span class="params">(Order order, DomainEvent event)</span> &#123;</span><br><span class="line">        <span class="type">OrderStatus</span> <span class="variable">newStatus</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (event <span class="keyword">instanceof</span> OrderPaidEvent) &#123;</span><br><span class="line">            newStatus = OrderStatus.PAID;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event <span class="keyword">instanceof</span> OrderShippedEvent) &#123;</span><br><span class="line">            newStatus = OrderStatus.SHIPPED;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event <span class="keyword">instanceof</span> OrderCancelledEvent || event <span class="keyword">instanceof</span> OrderRefundedEvent) &#123;</span><br><span class="line">            newStatus = OrderStatus.CANCELLED;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (newStatus != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (canTransition(order.getStatus(), newStatus)) &#123;</span><br><span class="line">                order.setStatusInternal(newStatus); <span class="comment">// 注意：内部私有方法，不暴露给外部，避免外部随意修改状态</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessRuleViolation</span>(</span><br><span class="line">                    <span class="string">&quot;非法状态转移: &quot;</span> + order.getStatus() + <span class="string">&quot; → &quot;</span> + newStatus);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="事件处理器（Event-Handlers）">事件处理器（Event Handlers）</h3><p>使用 Spring 的事件机制或自定义事件总线监听领域事件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderEventHandlers</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OrderRepository orderRepository;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OrderStateMachine stateMachine;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(OrderPaidEvent event)</span> &#123;</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderRepository.findById(event.getOrderId());</span><br><span class="line">        stateMachine.applyEvent(order, event);</span><br><span class="line">        orderRepository.save(order);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(OrderShippedEvent event)</span> &#123;</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderRepository.findById(event.getOrderId());</span><br><span class="line">        stateMachine.applyEvent(order, event);</span><br><span class="line">        orderRepository.save(order);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(OrderCancelledEvent event)</span> &#123;</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderRepository.findById(event.getOrderId());</span><br><span class="line">        stateMachine.applyEvent(order, event);</span><br><span class="line">        orderRepository.save(order);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="支持事件溯源">支持事件溯源</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码：从事件重建订单</span></span><br><span class="line"><span class="keyword">public</span> Order <span class="title function_">reconstituteFromHistory</span><span class="params">(String orderId, List&lt;DomainEvent&gt; events)</span> &#123;</span><br><span class="line">    <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">    <span class="keyword">for</span> (DomainEvent event : events) &#123;</span><br><span class="line">        event.applyTo(order); <span class="comment">// 每个事件自己知道如何影响订单</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> order;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="防腐层：支付、库存等">防腐层：支付、库存等</h2><p><strong>在限界上下文之间建立翻译与隔离层</strong>，防止外部概念“侵蚀”本领域的纯洁性。 外部系统（如支付系统、库存系统）</p><blockquote><p>外部系统（支付宝）<br>↓ HTTP 回调<br>[ 支付回调 Controller ]<br>↓<br>[ AlipayAclAdapter ] → 验签 + 校验<br>↓<br>[ PaymentEventMapper ] → 映射为 OrderPaidEvent<br>↓<br>[ Domain Event Bus ]<br>├──→ [OrderEventHandlers] → 触发 Order 状态机<br>└──→ [OrderStateMachine]   → 更新订单状态<br>↓<br>[OrderRepository] →  数据持久化</p></blockquote><ol><li class="lvl-3"><h5 id="外部支付回调-DTO（来自支付宝）">外部支付回调 DTO（来自支付宝）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AlipayCallback</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String tradeNo;</span><br><span class="line">    <span class="keyword">private</span> String outTradeNo; <span class="comment">// 我方订单号</span></span><br><span class="line">    <span class="keyword">private</span> String tradeStatus;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li class="lvl-3"><h5 id="防腐层适配器（ACL-Adapter）">防腐层适配器（ACL Adapter）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AlipayAclAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PaymentEventMapper eventMapper;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DomainEventPublisher eventPublisher;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleCallback</span><span class="params">(AlipayCallback callback)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 校验签名（安全）</span></span><br><span class="line">        <span class="keyword">if</span> (!verifySignature(callback)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SecurityException</span>(<span class="string">&quot;非法回调&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 映射为本地下游事件</span></span><br><span class="line">        <span class="type">DomainEvent</span> <span class="variable">domainEvent</span> <span class="operator">=</span> eventMapper.toDomainEvent(callback);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 发布事件，驱动本域逻辑</span></span><br><span class="line">        <span class="keyword">if</span> (domainEvent != <span class="literal">null</span>) &#123;</span><br><span class="line">            eventPublisher.publish(domainEvent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">verifySignature</span><span class="params">(AlipayCallback callback)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用支付宝 SDK 验签</span></span><br><span class="line">        <span class="keyword">return</span> AlipaySignature.rsaCheckV2(...) == <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li class="lvl-3"><h5 id="事件映射器（Mapping-Logic）">事件映射器（Mapping Logic）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentEventMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DomainEvent <span class="title function_">toDomainEvent</span><span class="params">(AlipayCallback callback)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">orderId</span> <span class="operator">=</span> callback.getOutTradeNo();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (callback.getTradeStatus()) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;TRADE_SUCCESS&quot;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;TRADE_FINISHED&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OrderPaidEvent</span>(orderId, Money.of(<span class="number">999</span>, <span class="string">&quot;CNY&quot;</span>)); <span class="comment">// 可结合查询订单金额</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;TRADE_CLOSED&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OrderRefundedEvent</span>(orderId);</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="应用层：-Service">应用层： Service</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderRepository orderRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DomainEventPublisher eventPublisher;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> OrderId <span class="title function_">createOrder</span><span class="params">(CreateOrderCommand command)</span> &#123;</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>(command.getOrderId(), command.getAmount());</span><br><span class="line">        order.create();</span><br><span class="line">        orderRepository.save(order);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发布事件</span></span><br><span class="line">        order.getEvents().forEach(eventPublisher::publish);</span><br><span class="line">        <span class="keyword">return</span> order.getId();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">payOrder</span><span class="params">(PayOrderCommand command)</span> &#123;</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderRepository.findById(command.getOrderId())</span><br><span class="line">            .orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;Order not found&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先调用支付</span></span><br><span class="line">        <span class="type">PaymentResult</span> <span class="variable">result</span> <span class="operator">=</span> paymentService.processPayment(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">PaymentRequest</span>(order.getAmount(), command.getCardToken())</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result.getStatus() == PaymentStatus.SUCCESS) &#123;</span><br><span class="line">            order.pay();</span><br><span class="line">            orderRepository.save(order);</span><br><span class="line">            order.getEvents().forEach(eventPublisher::publish);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;Payment failed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口层：Controller">接口层：Controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/orders&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">createOrder</span><span class="params">(<span class="meta">@RequestBody</span> OrderRequestDTO dto)</span> &#123;</span><br><span class="line">        <span class="type">OrderId</span> <span class="variable">id</span> <span class="operator">=</span> orderService.createOrder(<span class="keyword">new</span> <span class="title class_">CreateOrderCommand</span>(dto.getAmount()));</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(id.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/&#123;orderId&#125;/pay&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">payOrder</span><span class="params">(<span class="meta">@PathVariable</span> String orderId, <span class="meta">@RequestBody</span> PaymentRequestDTO dto)</span> &#123;</span><br><span class="line">        orderService.payOrder(<span class="keyword">new</span> <span class="title class_">PayOrderCommand</span>(<span class="keyword">new</span> <span class="title class_">OrderId</span>(orderId), dto.getCardToken()));</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(<span class="string">&quot;Paid&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
          <category> DDD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 领域模型 </tag>
            
            <tag> DDD </tag>
            
            <tag> 架构设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 过期数据删除策略</title>
      <link href="/2025/08/26/65a671b1723e48818f080dda25a3730f/"/>
      <url>/2025/08/26/65a671b1723e48818f080dda25a3730f/</url>
      
        <content type="html"><![CDATA[<h2 id="过期清除策略">过期清除策略</h2><p>redis针对设置过期时间的key，所使用的清除策略有主动和被动两种方式。</p><h3 id="被动检测">被动检测</h3><p>被动检测，也称惰性删除。</p><p>放任键过期不管，每次从键空间中获取键时，都检查取得的键是否过期，如果过期就删除该键，否则就返回该键值。</p><blockquote><p>被动方式对于那些永远不会再访问的 key 并没有效果。不管怎么，这些 key 都应被过期淘汰，所以 Redis 周期性主动随机检查一部分被设置生存时间的 key，那些已经过期的 key 会被从 key 空间中删除。</p></blockquote><h3 id="主动检测">主动检测</h3><ul class="lvl-0"><li class="lvl-2"><p>定时删除：在设置键过期时间的同时，创建一个定时器 timer。让定时器在键的过期时间来临时，执行对键的删除操作。</p></li><li class="lvl-2"><p>定期删除：每隔100ms就对数据库进行一次随机抽查，删除里面的过期键。至于要删除多少过期键，以及要检查多少个数据库，则由算法决定。比如Redis每秒执行10次下面的操作：</p><blockquote><ol><li class="lvl-3">从带有生存时间的 key 的集合中随机选 20 进行检查。</li><li class="lvl-3">删除所有过期的key。</li><li class="lvl-3">如20里面有超过25%的key过期，立刻继续执行步骤1。</li></ol></blockquote></li></ul><h2 id="数据淘汰策略">数据淘汰策略</h2><p>Redis 的内存淘汰机制（Eviction Policy）是指当 Redis 的内存使用量达到设定的最大值（通过 <code>maxmemory</code> 配置）时，选择哪些数据被删除以释放空间来存放新数据的策略。</p><blockquote><p>由于redis定期删除是随机抽取检查，不可能扫描清除掉所有过期的key并删除，一些key由于未被请求，惰性删除也未触发。</p><p>同时存在未设置过期时间的key，这样redis的内存占用会越来越高。此时就需要内存淘汰机制。</p></blockquote><h3 id="淘汰算法">淘汰算法</h3><p>Redis 的淘汰算法有3种：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>random</strong>（随机）</p></li><li class="lvl-2"><p><strong>TTL</strong>（将要过期）</p></li><li class="lvl-2"><p><strong>LRU</strong>（最近最少使用）</p></li></ul><h3 id="淘汰策略">淘汰策略</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定 Redis 能使用的最大内存，100MB限制</span></span><br><span class="line"><span class="attr">maxmemory</span> <span class="string">100mb</span></span><br><span class="line"><span class="comment"># 当内存达到限制时，Redis 回收策略（volatile-lru、volatile-ttl、volatile-random、allkeys-lru、allkeys-random、no-enviction）</span></span><br><span class="line"><span class="attr">maxmemory-policy</span> <span class="string">noeviction</span></span><br></pre></td></tr></table></figure><p><strong>Redis  支持6种淘汰策略</strong>:</p><blockquote><ol><li class="lvl-3"><p><strong>noeviction</strong>（默认）：不清除数据，只返回错误，会导致浪费掉更多内存（DEL 命令和其他的少数命令例外）</p></li><li class="lvl-3"><p><strong>allkeys-lru</strong>：从所有的数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰</p></li><li class="lvl-3"><p><strong>allkeys-random</strong>：从所有数据集（server.db[i].dict）中任意选择数据淘汰</p></li><li class="lvl-3"><p><strong>volatile-lru</strong>：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰</p></li><li class="lvl-3"><p><strong>volatile-random</strong>：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰</p></li><li class="lvl-3"><p><strong>volatile-ttl</strong>：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰，ttl值越大越优先被淘汰</p></li></ol></blockquote><p>如果没有设置 <strong>expire</strong> 的key,  那么 <strong>volatile-lru</strong>, <strong>volatile-random</strong> 和 <strong>volatile-ttl</strong> 策略的行为, 和 <strong>noeviction</strong>基本一致。</p><blockquote><p>一般来说:</p><p>​    设置 <code>expire</code> 会消耗额外的内存, 所以使用 <strong>allkeys-lru</strong> 策略, 可以更高效地利用内存 。</p><p>​    如果某个命令导致大量内存占用(一个很大的set), 在一段时间内, 内存的使用量会明显超过 maxmemory 限制。</p></blockquote><h3 id="策略选择建议">策略选择建议</h3><p>策略使用规则：</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>如果数据呈现幂律分布，也就是一部分数据访问频率高，一部分数据访问频率低，则使用 allkeys-lru。如果分为热数据与冷数据, 推荐使用 allkeys-lru 策略。 如果不确定具体的业务特征, 那么 allkeys-lru 是一个很好的选择。</p></li><li class="lvl-2"><p>如果数据呈现平等分布，也就是所有的数据访问频率都相同，则使用 allkeys-random，即读写所有元素的概率差不多。</p></li></ul></blockquote><table><thead><tr><th style="text-align:left">策略</th><th style="text-align:left">适用场景</th></tr></thead><tbody><tr><td style="text-align:left"><strong><code>allkeys-lru</code></strong></td><td style="text-align:left"><strong>通用场景，最常用</strong>。如果你的数据访问模式大致符合幂律分布（即一部分数据访问频率高，另一部分低），或者你不确定该用什么策略，选这个通常不会错。</td></tr><tr><td style="text-align:left"><strong><code>allkeys-lfu</code></strong></td><td style="text-align:left">你希望数据的访问频率对淘汰决策影响更大时。例如，一个key即使刚被访问过，但如果它历史上只被访问过一两次，而其他key被访问过成百上千次，那么它仍然可能被淘汰。</td></tr><tr><td style="text-align:left"><strong><code>volatile-ttl</code></strong></td><td style="text-align:left">你希望通过设置不同的TTL来主动管理数据的优先级，并且希望Redis优先淘汰那些快要过期的“临时”数据，保留那些TTL很长的核心数据。</td></tr><tr><td style="text-align:left"><strong><code>volatile-lru</code></strong> / <strong><code>volatile-lfu</code></strong></td><td style="text-align:left">你希望将 Redis 既用作缓存（有过期时间），又用作持久存储（无过期时间）。这样能保证永久数据不会被淘汰，只淘汰缓存数据。</td></tr><tr><td style="text-align:left"><strong><code>allkeys-random</code></strong> / <strong><code>volatile-random</code></strong></td><td style="text-align:left">所有数据被访问的概率都差不多，没有明显的热点数据。</td></tr><tr><td style="text-align:left"><strong><code>noeviction</code></strong></td><td style="text-align:left"><strong>不推荐用于缓存场景</strong>。适用于你希望数据永不被删除，并且内存足够或由应用层处理写失败的情况。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> DB </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Redis删除数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大语言模型能力大比拼</title>
      <link href="/2025/08/22/409b677621dc42368081b5fb5f24edaa/"/>
      <url>/2025/08/22/409b677621dc42368081b5fb5f24edaa/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> LLM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> LLM </tag>
            
            <tag> 模型能力对比 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + Butterfly 动画切换夜间模式</title>
      <link href="/2025/08/15/fe387890751447178380123929a383e3/"/>
      <url>/2025/08/15/fe387890751447178380123929a383e3/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>注意版本</strong>：框架 <a href="https://hexo.io/">Hexo 7.3.0</a>|主题 <a href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly 5.4.3</a></p></blockquote><h2 id="JS脚本">JS脚本</h2><p>新建js脚本文件： <code>themes\butterfly\source\js\dark_mode.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">switchNightMode</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">insertAdjacentHTML</span>(<span class="string">&#x27;beforeend&#x27;</span>, <span class="string">&#x27;&lt;div class=&quot;Cuteen_DarkSky&quot;&gt;&lt;div class=&quot;Cuteen_DarkPlanet&quot;&gt;&lt;/div&gt;&lt;/div&gt;&#x27;</span>),</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;body&#x27;</span>).<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&#x27;DarkMode&#x27;</span>) ? (<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;body&#x27;</span>).<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;DarkMode&#x27;</span>), <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;isDark&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;modeicon&#x27;</span>).<span class="title function_">setAttribute</span>(<span class="string">&#x27;xlink:href&#x27;</span>, <span class="string">&#x27;#icon-moon&#x27;</span>)) : (<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;body&#x27;</span>).<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;DarkMode&#x27;</span>), <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;isDark&#x27;</span>, <span class="string">&#x27;1&#x27;</span>), <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;modeicon&#x27;</span>).<span class="title function_">setAttribute</span>(<span class="string">&#x27;xlink:href&#x27;</span>, <span class="string">&#x27;#icon-sun&#x27;</span>)),</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;Cuteen_DarkSky&#x27;</span>)[<span class="number">0</span>].<span class="property">style</span>.<span class="property">transition</span> = <span class="string">&#x27;opacity 3s&#x27;</span>;</span><br><span class="line">          <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;Cuteen_DarkSky&#x27;</span>)[<span class="number">0</span>].<span class="property">style</span>.<span class="property">opacity</span> = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;Cuteen_DarkSky&#x27;</span>)[<span class="number">0</span>].<span class="title function_">remove</span>();</span><br><span class="line">          &#125;, <span class="number">1e3</span>);</span><br><span class="line">        &#125;, <span class="number">2e3</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="keyword">const</span> nowMode = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-theme&#x27;</span>) === <span class="string">&#x27;dark&#x27;</span> ? <span class="string">&#x27;dark&#x27;</span> : <span class="string">&#x27;light&#x27;</span></span><br><span class="line">  <span class="keyword">if</span> (nowMode === <span class="string">&#x27;light&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 注意此处的版本不同，写法不同</span></span><br><span class="line">    btf.<span class="title function_">activateDarkMode</span>()</span><br><span class="line">    btf.<span class="property">saveToLocal</span>.<span class="title function_">set</span>(<span class="string">&#x27;theme&#x27;</span>, <span class="string">&#x27;dark&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="variable constant_">GLOBAL_CONFIG</span>.<span class="property">Snackbar</span> !== <span class="literal">undefined</span> &amp;&amp; btf.<span class="title function_">snackbarShow</span>(<span class="variable constant_">GLOBAL_CONFIG</span>.<span class="property">Snackbar</span>.<span class="property">day_to_night</span>)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;modeicon&#x27;</span>).<span class="title function_">setAttribute</span>(<span class="string">&#x27;xlink:href&#x27;</span>, <span class="string">&#x27;#icon-sun&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 注意此处的版本不同，写法不同</span></span><br><span class="line">    btf.<span class="title function_">activateLightMode</span>()</span><br><span class="line">    btf.<span class="property">saveToLocal</span>.<span class="title function_">set</span>(<span class="string">&#x27;theme&#x27;</span>, <span class="string">&#x27;light&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;body&#x27;</span>).<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;DarkMode&#x27;</span>), <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;modeicon&#x27;</span>).<span class="title function_">setAttribute</span>(<span class="string">&#x27;xlink:href&#x27;</span>, <span class="string">&#x27;#icon-moon&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// handle some cases</span></span><br><span class="line">  <span class="keyword">typeof</span> utterancesTheme === <span class="string">&#x27;function&#x27;</span> &amp;&amp; <span class="title function_">utterancesTheme</span>()</span><br><span class="line">  <span class="keyword">typeof</span> <span class="variable constant_">FB</span> === <span class="string">&#x27;object&#x27;</span> &amp;&amp; <span class="variable language_">window</span>.<span class="title function_">loadFBComment</span>()</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">DISQUS</span> &amp;&amp; <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;disqus_thread&#x27;</span>).<span class="property">children</span>.<span class="property">length</span> &amp;&amp; <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">window</span>.<span class="title function_">disqusReset</span>(), <span class="number">200</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CSS渲染">CSS渲染</h2><p>新建styl文件：<code>themes\butterfly\source\css\_layout\dark_mode.styl</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.Cuteen_DarkSky</span>,</span><br><span class="line"><span class="selector-class">.Cuteen_DarkSky</span><span class="selector-pseudo">:before</span></span><br><span class="line">  <span class="attribute">content</span> &#x27;&#x27;</span><br><span class="line">  <span class="attribute">position</span> fixed</span><br><span class="line">  <span class="attribute">left</span> <span class="number">0</span></span><br><span class="line">  <span class="attribute">right</span> <span class="number">0</span></span><br><span class="line">  <span class="attribute">top</span> <span class="number">0</span></span><br><span class="line">  <span class="attribute">bottom</span> <span class="number">0</span></span><br><span class="line">  <span class="attribute">z-index</span> <span class="number">88888888</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.Cuteen_DarkSky</span></span><br><span class="line">  <span class="attribute">background</span> linear-gradient(<span class="selector-id">#feb8b0</span>, <span class="selector-id">#fef9db</span>)</span><br><span class="line">  &amp;<span class="selector-pseudo">:before</span></span><br><span class="line">    <span class="attribute">transition</span> <span class="number">2s</span> ease <span class="attribute">all</span></span><br><span class="line">    <span class="attribute">opacity</span> <span class="number">0</span></span><br><span class="line">    <span class="attribute">background</span> linear-gradient(<span class="selector-id">#4c3f6d</span>, <span class="selector-id">#6c62bb</span>, <span class="selector-id">#93b1ed</span>)</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.DarkMode</span></span><br><span class="line">  <span class="selector-class">.Cuteen_DarkSky</span></span><br><span class="line">    &amp;<span class="selector-pseudo">:before</span></span><br><span class="line">      <span class="attribute">opacity</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.Cuteen_DarkPlanet</span></span><br><span class="line">  <span class="attribute">z-index</span> <span class="number">99999999</span></span><br><span class="line">  <span class="attribute">position</span> fixed</span><br><span class="line">  <span class="attribute">left</span> -<span class="number">50%</span></span><br><span class="line">  <span class="attribute">top</span> -<span class="number">50%</span></span><br><span class="line">  <span class="attribute">width</span> <span class="number">200%</span></span><br><span class="line">  <span class="attribute">height</span> <span class="number">200%</span></span><br><span class="line">  -webkit-<span class="attribute">animation</span> CuteenPlanetMove <span class="number">2s</span> cubic-bezier(<span class="number">0.7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">  <span class="attribute">animation</span> CuteenPlanetMove <span class="number">2s</span> cubic-bezier(<span class="number">0.7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">  <span class="attribute">transform-origin</span> center <span class="attribute">bottom</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> CuteenPlanetMove &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> CuteenPlanetMove &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.Cuteen_DarkPlanet</span></span><br><span class="line">  &amp;<span class="selector-pseudo">:after</span></span><br><span class="line">    <span class="attribute">position</span> absolute</span><br><span class="line">    <span class="attribute">left</span> <span class="number">35%</span></span><br><span class="line">    <span class="attribute">top</span> <span class="number">40%</span></span><br><span class="line">    <span class="attribute">width</span> <span class="number">9.375rem</span></span><br><span class="line">    <span class="attribute">height</span> <span class="number">9.375rem</span></span><br><span class="line">    <span class="attribute">border-radius</span> <span class="number">50%</span></span><br><span class="line">    <span class="attribute">content</span> &#x27;&#x27;</span><br><span class="line">    <span class="attribute">background</span> linear-gradient(<span class="selector-id">#fefefe</span>, <span class="selector-id">#fffbe8</span>)</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.search</span></span><br><span class="line">  <span class="selector-tag">span</span></span><br><span class="line">    <span class="attribute">display</span> <span class="attribute">none</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menus_item</span></span><br><span class="line">  <span class="selector-tag">a</span></span><br><span class="line">    <span class="attribute">text-decoration</span> <span class="attribute">none</span>!important</span><br><span class="line">//按钮相关，对侧栏按钮做过魔改的可以调整这里的数值</span><br><span class="line"><span class="selector-class">.icon-V</span></span><br><span class="line">  <span class="attribute">padding</span> <span class="number">5px</span></span><br></pre></td></tr></table></figure><h2 id="模板引擎-pug">模板引擎 pug</h2><p>新建pug文件：<code>themes\butterfly\layout\includes\custom\dark_mode.pug</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">svg(aria-hidden=&#x27;true&#x27;, style=&#x27;position:absolute; overflow:hidden; width:0; height:0&#x27;)</span><br><span class="line">  symbol#icon-sun(viewBox=&#x27;0 0 1024 1024&#x27;)</span><br><span class="line">    path(d=&#x27;M960 512l-128 128v192h-192l-128 128-128-128H192v-192l-128-128 128-128V192h192l128-128 128 128h192v192z&#x27;, fill=&#x27;#FFD878&#x27;, p-id=&#x27;8420&#x27;)</span><br><span class="line">    path(d=&#x27;M736 512a224 224 0 1 0-448 0 224 224 0 1 0 448 0z&#x27;, fill=&#x27;#FFE4A9&#x27;, p-id=&#x27;8421&#x27;)</span><br><span class="line">    path(d=&#x27;M512 109.248L626.752 224H800v173.248L914.752 512 800 626.752V800h-173.248L512 914.752 397.248 800H224v-173.248L109.248 512 224 397.248V224h173.248L512 109.248M512 64l-128 128H192v192l-128 128 128 128v192h192l128 128 128-128h192v-192l128-128-128-128V192h-192l-128-128z&#x27;, fill=&#x27;#4D5152&#x27;, p-id=&#x27;8422&#x27;)</span><br><span class="line">    path(d=&#x27;M512 320c105.888 0 192 86.112 192 192s-86.112 192-192 192-192-86.112-192-192 86.112-192 192-192m0-32a224 224 0 1 0 0 448 224 224 0 0 0 0-448z&#x27;, fill=&#x27;#4D5152&#x27;, p-id=&#x27;8423&#x27;)</span><br><span class="line">  symbol#icon-moon(viewBox=&#x27;0 0 1024 1024&#x27;)</span><br><span class="line">    path(d=&#x27;M611.370667 167.082667a445.013333 445.013333 0 0 1-38.4 161.834666 477.824 477.824 0 0 1-244.736 244.394667 445.141333 445.141333 0 0 1-161.109334 38.058667 85.077333 85.077333 0 0 0-65.066666 135.722666A462.08 462.08 0 1 0 747.093333 102.058667a85.077333 85.077333 0 0 0-135.722666 65.024z&#x27;, fill=&#x27;#FFB531&#x27;, p-id=&#x27;11345&#x27;)</span><br><span class="line">    path(d=&#x27;M329.728 274.133333l35.157333-35.157333a21.333333 21.333333 0 1 0-30.165333-30.165333l-35.157333 35.157333-35.114667-35.157333a21.333333 21.333333 0 0 0-30.165333 30.165333l35.114666 35.157333-35.114666 35.157334a21.333333 21.333333 0 1 0 30.165333 30.165333l35.114667-35.157333 35.157333 35.157333a21.333333 21.333333 0 1 0 30.165333-30.165333z&#x27;, fill=&#x27;#030835&#x27;, p-id=&#x27;11346&#x27;)</span><br></pre></td></tr></table></figure><h2 id="引入依赖">引入依赖</h2><p>修改文件：<code>themes\butterfly\layout\includes\head.pug</code></p><p>在末尾加入：<code>include ./custom/dark_mode.pug</code></p><h2 id="触发切换">触发切换</h2><p>修改文件：<code>themes\butterfly\layout\includes\rightside.pug</code></p><p><strong>修改前</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">when &#x27;darkmode&#x27;</span><br><span class="line">  if darkmode.enable &amp;&amp; darkmode.button</span><br><span class="line">     button#darkmode(type=&quot;button&quot; title=_p(&#x27;rightside.night_mode_title&#x27;))</span><br><span class="line">       i.fas.fa-adjust</span><br></pre></td></tr></table></figure><p><strong>修改后</strong>：注意缩进，需要使用空格，而不是Tab</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">when &#x27;darkmode&#x27;</span><br><span class="line">  if darkmode.enable &amp;&amp; darkmode.button</span><br><span class="line">    a.icon-V.hidden(onclick=&#x27;switchNightMode()&#x27;,  title=_p(&#x27;rightside.night_mode_title&#x27;))</span><br><span class="line">      svg(width=&#x27;25&#x27;, height=&#x27;25&#x27;, viewBox=&#x27;0 0 1024 1024&#x27;)</span><br><span class="line">        use#modeicon(xlink:href=&#x27;#icon-moon&#x27;)</span><br></pre></td></tr></table></figure><h2 id="配置修改">配置修改</h2><p>修改butterfly的配置文件：<code>themes\butterfly\_config.yml</code>，将 JS 引入其中：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;/js/dark_mode.js&quot;</span> <span class="string">async&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="启动测试">启动测试</h2><p>运行命令：<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code></p>]]></content>
      
      
      <categories>
          
          <category> tool </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly夜间模式 </tag>
            
            <tag> Hexo夜间模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>同时配置Github和Gitee的免密配置</title>
      <link href="/2025/08/14/b1cb29e686e347279ef8bd70ec59e09b/"/>
      <url>/2025/08/14/b1cb29e686e347279ef8bd70ec59e09b/</url>
      
        <content type="html"><![CDATA[<h2 id="清除-git-的全局设置">清除 git 的全局设置</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看是否设置</span></span><br><span class="line">git config --global --list</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 删除设置</span></span><br><span class="line">git config --global --<span class="built_in">unset</span> user.name</span><br><span class="line">git config --global --<span class="built_in">unset</span> user.email</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看配置来源(本地配置覆盖全局配置)</span></span><br><span class="line">git config --list --show-origin</span><br></pre></td></tr></table></figure><h2 id="Windows-中配置">Windows 中配置</h2><h3 id="配置多个-SSH-密钥"><strong>配置多个 SSH 密钥</strong></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为 GitHub 生成 SSH 密钥</span></span><br><span class="line">ssh-keygen -t rsa -f %USERPROFILE%/.ssh/id_rsa_github -C <span class="string">&quot;your_email@github.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为 Gitee 生成 SSH 密钥</span></span><br><span class="line">ssh-keygen -t rsa -f %USERPROFILE%/.ssh/id_rsa_gitee -C <span class="string">&quot;your_email@gitee.com&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>完成后会在 <code>C:/Users/xxx/.ssh /</code> 目录下生成以下文件</p><ul class="lvl-1"><li class="lvl-2">id_rsa_github</li><li class="lvl-2">id_rsa_github.pub</li><li class="lvl-2">id_rsa_gitee</li><li class="lvl-2">id_rsa_gitee.pub</li></ul><p>将生成的对应.pub文件打开，将数据拷贝添加到对应平台的SSH配置中（全量拷贝）</p><p>如：id_rsa_github.pub 中的全部内容，拷贝到github 的SSH配置中</p></blockquote><h3 id="配置-SSH-Config-文件">配置 SSH Config 文件</h3><p>在 <code>C:/Users/xxx/.ssh/config</code> 文件中添加以下内容，以区分不同平台的密钥：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># Gitee</span><br><span class="line">Host gitee.com</span><br><span class="line">HostName gitee.com</span><br><span class="line">User git</span><br><span class="line">IdentitiesOnly yes</span><br><span class="line">IdentityFile C:/Users/xxx/.ssh/id_rsa_gitee</span><br><span class="line"></span><br><span class="line"># GitHub</span><br><span class="line">Host github.com</span><br><span class="line">AddKeysToAgent yes</span><br><span class="line">IdentitiesOnly yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile C:/Users/xxx/.ssh/id_rsa_github</span><br><span class="line"></span><br><span class="line"># GitHub</span><br><span class="line">Host ssh.github.com</span><br><span class="line">AddKeysToAgent yes</span><br><span class="line">IdentitiesOnly yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">Hostname ssh.github.com</span><br><span class="line">Port 443</span><br><span class="line">User git</span><br><span class="line">IdentityFile C:/Users/xxx/.ssh/id_rsa_github</span><br></pre></td></tr></table></figure><blockquote><p>验证是否生效（在任意路径）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@gitee.com</span><br><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>出现以下情况，表示成功，否则配置错误（IdentityFile需要绝对路径）：</p><p><code>Hi xxx! You've successfully authenticated, but GitHub does not provide shell access.</code></p></blockquote><h3 id="配置文件权限">配置文件权限</h3><p>config 、id_rsa_github和 id_rsa_gitee 配置文件需要删除其他用户的权限，只保留管理员和当前用户</p><blockquote><ol><li class="lvl-3"><p>右键需配置的文件，查看属性，打开“安全”一栏</p></li><li class="lvl-3"><p>打开“高级” ，“禁用继承”</p></li><li class="lvl-3"><p>返回，在“安全”一栏的“组或用户名” 中，删除非当前用户和系统管理员的账号，如：Everyone<img src="/imgs/image-20250824120719000.png" alt="image-20250824120719000"></p></li></ol></blockquote><h2 id="Linux-中配置">Linux 中配置</h2><h3 id="配置多个-SSH-密钥-2">配置多个 SSH 密钥</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为 GitHub 生成 SSH 密钥</span></span><br><span class="line">ssh-keygen -t rsa -f ~/.ssh/id_rsa_github -C <span class="string">&quot;your_email@github.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为 Gitee 生成 SSH 密钥</span></span><br><span class="line">ssh-keygen -t rsa -f ~/.ssh/id_rsa_gitee -C <span class="string">&quot;your_email@gitee.com&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>完成后会在~/.ssh / 目录下生成以下文件</p><ul class="lvl-1"><li class="lvl-2">id_rsa_github</li><li class="lvl-2">id_rsa_github.pub</li><li class="lvl-2">id_rsa_gitee</li><li class="lvl-2">id_rsa_gitee.pub</li></ul><p>将生成的对应.pub文件打开，将数据拷贝添加到对应平台的SSH配置中（全量拷贝）</p><p>如：id_rsa_github.pub 中的全部内容，拷贝到github 的SSH配置中</p></blockquote><h3 id="配置-SSH-Config-文件-2">配置 SSH Config 文件</h3><p>在 <code>~/.ssh/config</code> 文件中添加以下内容，以区分不同平台的密钥：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># Gitee</span><br><span class="line">Host gitee.com</span><br><span class="line">HostName gitee.com</span><br><span class="line">User git</span><br><span class="line">IdentitiesOnly yes</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_gitee</span><br><span class="line"></span><br><span class="line"># GitHub</span><br><span class="line">Host github.com</span><br><span class="line">AddKeysToAgent yes</span><br><span class="line">IdentitiesOnly yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_github</span><br><span class="line"></span><br><span class="line"># GitHub</span><br><span class="line">Host ssh.github.com</span><br><span class="line">AddKeysToAgent yes</span><br><span class="line">IdentitiesOnly yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">Hostname ssh.github.com</span><br><span class="line">Port 443</span><br><span class="line">User git</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_github</span><br></pre></td></tr></table></figure><blockquote><p>验证是否生效（在任意路径）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@gitee.com</span><br><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>出现以下情况，表示成功，否则配置错误（IdentityFile需要绝对路径）：</p><p><code>Hi xxx! You've successfully authenticated, but GitHub does not provide shell access.</code></p></blockquote><h3 id="配置文件权限-2">配置文件权限</h3><p>config 、id_rsa_github和 id_rsa_gitee 配置文件需要删除其他用户的权限</p><p><code>chmod 644 ~/.ssh/config</code></p><h2 id="同时推送多个远程仓库">同时推送多个远程仓库</h2><p>在本地项目中，可以同时关联 Gitee 和 GitHub 的远程仓库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加 GitHub 远程仓库</span></span><br><span class="line">git remote add github git@github.com:username/boot-demo.git</span><br><span class="line"><span class="comment"># 推送到 GitHub</span></span><br><span class="line">git push github master</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 Gitee 远程仓库</span></span><br><span class="line">git remote add gitee git@gitee.com:username/boot-demo.git</span><br><span class="line"><span class="comment"># 推送到 Gitee</span></span><br><span class="line">git push gitee master</span><br></pre></td></tr></table></figure><h2 id="仅推送单个远程仓库">仅推送单个远程仓库</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果只推送其中一个 github 仓库</span></span><br><span class="line">git branch -M main</span><br><span class="line">git remote add origin git@github.com:username/boot-demo.git</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><h2 id="同时配置多个-Github-账号">同时配置多个 Github 账号</h2><p>详细教程和说明，可参考：<a href="https://segmentfault.com/a/1190000043924833">博客</a></p><p>以 Linux 环境为例，再以上的基础上再添加一个 github 的账号配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为 GitHub 生成 SSH 密钥</span></span><br><span class="line">ssh-keygen -t rsa -f ~/.ssh/id_rsa_github_blog -C <span class="string">&quot;your_email@github.com&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>完成后会在~/.ssh / 目录下生成以下文件</p><ul class="lvl-1"><li class="lvl-2">id_rsa_github_blog</li><li class="lvl-2">id_rsa_github_blog.pub</li></ul><p>将生成的 id_rsa_github_blog.pub 文件打开，将数据拷贝添加到github平台的SSH配置中（全量拷贝）</p></blockquote><p>在 <code>~/.ssh/config</code> 文件中添加以下内容（注意区分Host）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># GitHub</span><br><span class="line">Host github_blog.com</span><br><span class="line">AddKeysToAgent yes</span><br><span class="line">IdentitiesOnly yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_github_blog</span><br></pre></td></tr></table></figure><p><strong>推送仓库</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意：修改为上面配置中对应的 Host，否则会定向到之前的配置中</span></span><br><span class="line">git remote add blog git@github_blog.com:username/boot-demo.git</span><br><span class="line">git push -u blog main</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看会显示存在三个仓库（github、gitee、blog）</span></span><br><span class="line">git remote -v</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> tool </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> gitee </tag>
            
            <tag> git-ssh </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
